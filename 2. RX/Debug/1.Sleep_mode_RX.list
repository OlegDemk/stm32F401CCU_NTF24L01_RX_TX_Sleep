
1.Sleep_mode_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007128  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  080072c8  080072c8  000172c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007714  08007714  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007714  08007714  00017714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800771c  0800771c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800771c  0800771c  0001771c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007720  08007720  00017720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001dc  08007900  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08007900  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ca4c  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002077  00000000  00000000  0002cc9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  0002ed18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088b  00000000  00000000  0002f840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e80  00000000  00000000  000300cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d6fc  00000000  00000000  00047f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094825  00000000  00000000  00055647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ec4  00000000  00000000  000e9e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000edd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080072b0 	.word	0x080072b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080072b0 	.word	0x080072b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 feb9 	bl	8001c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f81b 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f000 f935 	bl	8001130 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ec6:	f000 f909 	bl	80010dc <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000eca:	f000 f8d1 	bl	8001070 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000ece:	f000 f87d 	bl	8000fcc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  NRF24_init_RX(1,1,1,1,1,1,1,1,1);
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	9304      	str	r3, [sp, #16]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	9303      	str	r3, [sp, #12]
 8000eda:	2301      	movs	r3, #1
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2101      	movs	r1, #1
 8000eec:	2001      	movs	r0, #1
 8000eee:	f000 fc01 	bl	80016f4 <NRF24_init_RX>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 NRF24L01_Receive();
 8000ef2:	f000 fded 	bl	8001ad0 <NRF24L01_Receive>
 8000ef6:	e7fc      	b.n	8000ef2 <main+0x3e>

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b094      	sub	sp, #80	; 0x50
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0320 	add.w	r3, r7, #32
 8000f02:	2230      	movs	r2, #48	; 0x30
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f004 f8d7 	bl	80050ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <SystemClock_Config+0xcc>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	4a27      	ldr	r2, [pc, #156]	; (8000fc4 <SystemClock_Config+0xcc>)
 8000f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2c:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <SystemClock_Config+0xcc>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <SystemClock_Config+0xd0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f44:	4a20      	ldr	r2, [pc, #128]	; (8000fc8 <SystemClock_Config+0xd0>)
 8000f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <SystemClock_Config+0xd0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f60:	2310      	movs	r3, #16
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f64:	2302      	movs	r3, #2
 8000f66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000f70:	2340      	movs	r3, #64	; 0x40
 8000f72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f78:	2304      	movs	r3, #4
 8000f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 fd4d 	bl	8002a20 <HAL_RCC_OscConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f8c:	f000 f974 	bl	8001278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f90:	230f      	movs	r3, #15
 8000f92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f94:	2302      	movs	r3, #2
 8000f96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	2102      	movs	r1, #2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 ffaf 	bl	8002f10 <HAL_RCC_ClockConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fb8:	f000 f95e 	bl	8001278 <Error_Handler>
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	3750      	adds	r7, #80	; 0x50
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40007000 	.word	0x40007000

08000fcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_ADC1_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_ADC1_Init+0x98>)
 800100c:	4a17      	ldr	r2, [pc, #92]	; (800106c <MX_ADC1_Init+0xa0>)
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_ADC1_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_ADC1_Init+0x98>)
 8001018:	2201      	movs	r2, #1
 800101a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_ADC1_Init+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_ADC1_Init+0x98>)
 8001026:	2201      	movs	r2, #1
 8001028:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <MX_ADC1_Init+0x98>)
 800102c:	f000 fe96 	bl	8001d5c <HAL_ADC_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001036:	f000 f91f 	bl	8001278 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800103a:	2309      	movs	r3, #9
 800103c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800103e:	2301      	movs	r3, #1
 8001040:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_ADC1_Init+0x98>)
 800104c:	f000 fff8 	bl	8002040 <HAL_ADC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001056:	f000 f90f 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200001f8 	.word	0x200001f8
 8001068:	40012000 	.word	0x40012000
 800106c:	0f000001 	.word	0x0f000001

08001070 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_SPI2_Init+0x64>)
 8001076:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <MX_SPI2_Init+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_SPI2_Init+0x64>)
 800107c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001080:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_SPI2_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_SPI2_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_SPI2_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_SPI2_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_SPI2_Init+0x64>)
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_SPI2_Init+0x64>)
 80010a4:	2208      	movs	r2, #8
 80010a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_SPI2_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_SPI2_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_SPI2_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_SPI2_Init+0x64>)
 80010bc:	220a      	movs	r2, #10
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_SPI2_Init+0x64>)
 80010c2:	f002 f905 	bl	80032d0 <HAL_SPI_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010cc:	f000 f8d4 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000240 	.word	0x20000240
 80010d8:	40003800 	.word	0x40003800

080010dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <MX_USART1_UART_Init+0x50>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 80010e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 8001114:	f002 fe84 	bl	8003e20 <HAL_UART_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800111e:	f000 f8ab 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000298 	.word	0x20000298
 800112c:	40011000 	.word	0x40011000

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	4b3f      	ldr	r3, [pc, #252]	; (8001248 <MX_GPIO_Init+0x118>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a3e      	ldr	r2, [pc, #248]	; (8001248 <MX_GPIO_Init+0x118>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b3c      	ldr	r3, [pc, #240]	; (8001248 <MX_GPIO_Init+0x118>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b38      	ldr	r3, [pc, #224]	; (8001248 <MX_GPIO_Init+0x118>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a37      	ldr	r2, [pc, #220]	; (8001248 <MX_GPIO_Init+0x118>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b35      	ldr	r3, [pc, #212]	; (8001248 <MX_GPIO_Init+0x118>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <MX_GPIO_Init+0x118>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a30      	ldr	r2, [pc, #192]	; (8001248 <MX_GPIO_Init+0x118>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <MX_GPIO_Init+0x118>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a0:	482a      	ldr	r0, [pc, #168]	; (800124c <MX_GPIO_Init+0x11c>)
 80011a2:	f001 fc0b 	bl	80029bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nrf_CE_Pin|nrf_CS_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2118      	movs	r1, #24
 80011aa:	4829      	ldr	r0, [pc, #164]	; (8001250 <MX_GPIO_Init+0x120>)
 80011ac:	f001 fc06 	bl	80029bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Red_Pin|LED_Green_Pin, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80011b6:	4827      	ldr	r0, [pc, #156]	; (8001254 <MX_GPIO_Init+0x124>)
 80011b8:	f001 fc00 	bl	80029bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	4619      	mov	r1, r3
 80011d4:	481d      	ldr	r0, [pc, #116]	; (800124c <MX_GPIO_Init+0x11c>)
 80011d6:	f001 fa6d 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : nrf_IRQ_Pin */
  GPIO_InitStruct.Pin = nrf_IRQ_Pin;
 80011da:	2304      	movs	r3, #4
 80011dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(nrf_IRQ_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	4818      	ldr	r0, [pc, #96]	; (8001250 <MX_GPIO_Init+0x120>)
 80011f0:	f001 fa60 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf_CE_Pin nrf_CS_Pin */
  GPIO_InitStruct.Pin = nrf_CE_Pin|nrf_CS_Pin;
 80011f4:	2318      	movs	r3, #24
 80011f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	4811      	ldr	r0, [pc, #68]	; (8001250 <MX_GPIO_Init+0x120>)
 800120c:	f001 fa52 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Red_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin;
 8001210:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001214:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4619      	mov	r1, r3
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <MX_GPIO_Init+0x124>)
 800122a:	f001 fa43 	bl	80026b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2008      	movs	r0, #8
 8001234:	f001 fa07 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001238:	2008      	movs	r0, #8
 800123a:	f001 fa20 	bl	800267e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800123e:	bf00      	nop
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40020800 	.word	0x40020800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400

08001258 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	2b04      	cmp	r3, #4
 8001266:	d102      	bne.n	800126e <HAL_GPIO_EXTI_Callback+0x16>
	{
		IRQ_Callback();
 8001268:	f000 fc4e 	bl	8001b08 <IRQ_Callback>
	{
		__NOP();
	}


}
 800126c:	e000      	b.n	8001270 <HAL_GPIO_EXTI_Callback+0x18>
		__NOP();
 800126e:	bf00      	nop
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001280:	e7fe      	b.n	8001280 <Error_Handler+0x8>
	...

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_MspInit+0x4c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <HAL_MspInit+0x4c>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_MspInit+0x4c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_MspInit+0x4c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_MspInit+0x4c>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_MspInit+0x4c>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800

080012d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <HAL_ADC_MspInit+0x8c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d12f      	bne.n	8001356 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_ADC_MspInit+0x90>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a19      	ldr	r2, [pc, #100]	; (8001364 <HAL_ADC_MspInit+0x90>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <HAL_ADC_MspInit+0x90>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_ADC_MspInit+0x90>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <HAL_ADC_MspInit+0x90>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_ADC_MspInit+0x90>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800132e:	2302      	movs	r3, #2
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001332:	2303      	movs	r3, #3
 8001334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4809      	ldr	r0, [pc, #36]	; (8001368 <HAL_ADC_MspInit+0x94>)
 8001342:	f001 f9b7 	bl	80026b4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2012      	movs	r0, #18
 800134c:	f001 f97b 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001350:	2012      	movs	r0, #18
 8001352:	f001 f994 	bl	800267e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	; 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40012000 	.word	0x40012000
 8001364:	40023800 	.word	0x40023800
 8001368:	40020400 	.word	0x40020400

0800136c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <HAL_SPI_MspInit+0x84>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12c      	bne.n	80013e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_SPI_MspInit+0x88>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_SPI_MspInit+0x88>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_SPI_MspInit+0x88>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_SPI_MspInit+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <HAL_SPI_MspInit+0x88>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_SPI_MspInit+0x88>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80013c6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013d8:	2305      	movs	r3, #5
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_SPI_MspInit+0x8c>)
 80013e4:	f001 f966 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40003800 	.word	0x40003800
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020400 	.word	0x40020400

080013fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_UART_MspInit+0x84>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d12c      	bne.n	8001478 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001428:	f043 0310 	orr.w	r3, r3, #16
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_UART_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001456:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001468:	2307      	movs	r3, #7
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <HAL_UART_MspInit+0x8c>)
 8001474:	f001 f91e 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	; 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40011000 	.word	0x40011000
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 fbfc 	bl	8001cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nrf_IRQ_Pin);
 80014e4:	2004      	movs	r0, #4
 80014e6:	f001 fa83 	bl	80029f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <ADC_IRQHandler+0x10>)
 80014f6:	f000 fc74 	bl	8001de2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200001f8 	.word	0x200001f8

08001504 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return 1;
 8001508:	2301      	movs	r3, #1
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_kill>:

int _kill(int pid, int sig)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800151e:	f003 fe1f 	bl	8005160 <__errno>
 8001522:	4603      	mov	r3, r0
 8001524:	2216      	movs	r2, #22
 8001526:	601a      	str	r2, [r3, #0]
  return -1;
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <_exit>:

void _exit (int status)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ffe7 	bl	8001514 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001546:	e7fe      	b.n	8001546 <_exit+0x12>

08001548 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	e00a      	b.n	8001570 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800155a:	f3af 8000 	nop.w
 800155e:	4601      	mov	r1, r0
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	60ba      	str	r2, [r7, #8]
 8001566:	b2ca      	uxtb	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	429a      	cmp	r2, r3
 8001576:	dbf0      	blt.n	800155a <_read+0x12>
  }

  return len;
 8001578:	687b      	ldr	r3, [r7, #4]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	e009      	b.n	80015a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	60ba      	str	r2, [r7, #8]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbf1      	blt.n	8001594 <_write+0x12>
  }
  return len;
 80015b0:	687b      	ldr	r3, [r7, #4]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_close>:

int _close(int file)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e2:	605a      	str	r2, [r3, #4]
  return 0;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_isatty>:

int _isatty(int file)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <_sbrk+0x5c>)
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <_sbrk+0x60>)
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <_sbrk+0x64>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <_sbrk+0x68>)
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	429a      	cmp	r2, r3
 8001652:	d207      	bcs.n	8001664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001654:	f003 fd84 	bl	8005160 <__errno>
 8001658:	4603      	mov	r3, r0
 800165a:	220c      	movs	r2, #12
 800165c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	e009      	b.n	8001678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <_sbrk+0x64>)
 8001674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20010000 	.word	0x20010000
 8001684:	00000400 	.word	0x00000400
 8001688:	200002dc 	.word	0x200002dc
 800168c:	20000458 	.word	0x20000458

08001690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <SystemInit+0x20>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <SystemInit+0x20>)
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <DelayMicro>:

volatile uint8_t rx_flag = 0;

// -------------------------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 7;   // 9
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <DelayMicro+0x38>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	099b      	lsrs	r3, r3, #6
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <DelayMicro+0x3c>)
 80016c4:	fba2 2303 	umull	r2, r3, r2, r3
 80016c8:	0a9b      	lsrs	r3, r3, #10
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	fb02 f303 	mul.w	r3, r2, r3
 80016d0:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--) ;
 80016d2:	bf00      	nop
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	1e5a      	subs	r2, r3, #1
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1fa      	bne.n	80016d4 <DelayMicro+0x20>
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20000000 	.word	0x20000000
 80016f0:	02659117 	.word	0x02659117

080016f4 <NRF24_init_RX>:
}
// -------------------------------------------------------------------------------------
void NRF24_init_RX(uint8_t zero_pipe, uint8_t first_pipe, uint8_t second_pipe,
		uint8_t third_pipe,	uint8_t fourth_pipe, uint8_t fifth_pipe,
		uint8_t chanel, uint8_t data_rate, uint8_t output_tx_power)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4604      	mov	r4, r0
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4623      	mov	r3, r4
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	4603      	mov	r3, r0
 8001708:	71bb      	strb	r3, [r7, #6]
 800170a:	460b      	mov	r3, r1
 800170c:	717b      	strb	r3, [r7, #5]
 800170e:	4613      	mov	r3, r2
 8001710:	713b      	strb	r3, [r7, #4]
	if(chanel < 0 || chanel > 127)
 8001712:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001716:	2b00      	cmp	r3, #0
 8001718:	da02      	bge.n	8001720 <NRF24_init_RX+0x2c>
	{
		chanel = 10;
 800171a:	230a      	movs	r3, #10
 800171c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}

	 CE_RESET;
 8001720:	2200      	movs	r2, #0
 8001722:	2108      	movs	r1, #8
 8001724:	483d      	ldr	r0, [pc, #244]	; (800181c <NRF24_init_RX+0x128>)
 8001726:	f001 f949 	bl	80029bc <HAL_GPIO_WritePin>
	 // DelayMicro(5000);
	 //osDelay(5);
	  HAL_Delay(5);
 800172a:	2005      	movs	r0, #5
 800172c:	f000 faf2 	bl	8001d14 <HAL_Delay>
	 NRF24_WriteReg(CONFIG, 0x0A); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8001730:	210a      	movs	r1, #10
 8001732:	2000      	movs	r0, #0
 8001734:	f000 f8ae 	bl	8001894 <NRF24_WriteReg>
	 // DelayMicro(5000);
	  HAL_Delay(5);
 8001738:	2005      	movs	r0, #5
 800173a:	f000 faeb 	bl	8001d14 <HAL_Delay>
//	 osDelay(5);

	 //  Define pipes
	 	 uint8_t rx_pipes = (zero_pipe ) | (first_pipe << 1) | (second_pipe << 2) |
 800173e:	79bb      	ldrb	r3, [r7, #6]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	b25a      	sxtb	r2, r3
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	4313      	orrs	r3, r2
 800174a:	b25a      	sxtb	r2, r3
 800174c:	797b      	ldrb	r3, [r7, #5]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	b25b      	sxtb	r3, r3
 8001752:	4313      	orrs	r3, r2
 8001754:	b25a      	sxtb	r2, r3
	 			(third_pipe << 3) | (fourth_pipe << 4) | (fifth_pipe << 5);
 8001756:	793b      	ldrb	r3, [r7, #4]
 8001758:	00db      	lsls	r3, r3, #3
	 	 uint8_t rx_pipes = (zero_pipe ) | (first_pipe << 1) | (second_pipe << 2) |
 800175a:	b25b      	sxtb	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b25a      	sxtb	r2, r3
	 			(third_pipe << 3) | (fourth_pipe << 4) | (fifth_pipe << 5);
 8001760:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	b25b      	sxtb	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b25a      	sxtb	r2, r3
 800176c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001770:	015b      	lsls	r3, r3, #5
 8001772:	b25b      	sxtb	r3, r3
 8001774:	4313      	orrs	r3, r2
 8001776:	b25b      	sxtb	r3, r3
	 	 uint8_t rx_pipes = (zero_pipe ) | (first_pipe << 1) | (second_pipe << 2) |
 8001778:	73fb      	strb	r3, [r7, #15]

	 NRF24_WriteReg(EN_AA, 0x07); 				// Enable pipe0, pipe1 and pipe2
 800177a:	2107      	movs	r1, #7
 800177c:	2001      	movs	r0, #1
 800177e:	f000 f889 	bl	8001894 <NRF24_WriteReg>
	 NRF24_WriteReg(EN_RXADDR, 0x07); 			// Enable pipe0, pipe1 and pipe2				// включає канал
 8001782:	2107      	movs	r1, #7
 8001784:	2002      	movs	r0, #2
 8001786:	f000 f885 	bl	8001894 <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_AW, 0x01); 			// Setup address width=3 bytes
 800178a:	2101      	movs	r1, #1
 800178c:	2003      	movs	r0, #3
 800178e:	f000 f881 	bl	8001894 <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_RETR, 0x5F);			// 1500us, 15 retrans
 8001792:	215f      	movs	r1, #95	; 0x5f
 8001794:	2004      	movs	r0, #4
 8001796:	f000 f87d 	bl	8001894 <NRF24_WriteReg>

	 NRF24_ToggleFeatures();
 800179a:	f000 f8a9 	bl	80018f0 <NRF24_ToggleFeatures>

	 NRF24_WriteReg(FEATURE, 0);				// динамічна довжина пакетів
 800179e:	2100      	movs	r1, #0
 80017a0:	201d      	movs	r0, #29
 80017a2:	f000 f877 	bl	8001894 <NRF24_WriteReg>
	 NRF24_WriteReg(DYNPD, 0);					// Вказує які канали використовують динамічну зміну пакетів
 80017a6:	2100      	movs	r1, #0
 80017a8:	201c      	movs	r0, #28
 80017aa:	f000 f873 	bl	8001894 <NRF24_WriteReg>
	 NRF24_WriteReg(STATUSS, 0x70);				// Reset flags for IRQ when data arrived
 80017ae:	2170      	movs	r1, #112	; 0x70
 80017b0:	2007      	movs	r0, #7
 80017b2:	f000 f86f 	bl	8001894 <NRF24_WriteReg>
	 NRF24_WriteReg(RF_CH, 76); 				// 2476 MHz   2400 + 76
 80017b6:	214c      	movs	r1, #76	; 0x4c
 80017b8:	2005      	movs	r0, #5
 80017ba:	f000 f86b 	bl	8001894 <NRF24_WriteReg>

	 NRF24_WriteReg(RF_SETUP, 0x06);  		//TX_PWR:0dBm, Datarate:1Mbps
 80017be:	2106      	movs	r1, #6
 80017c0:	2006      	movs	r0, #6
 80017c2:	f000 f867 	bl	8001894 <NRF24_WriteReg>
//	 NRF24_WriteReg(RF_SETUP, data_rate|output_tx_power);  		// TX_PWR:0dBm, Datarate: 250kbp	- New version

	 NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_0, TX_ADR_WIDTH);
 80017c6:	2203      	movs	r2, #3
 80017c8:	4915      	ldr	r1, [pc, #84]	; (8001820 <NRF24_init_RX+0x12c>)
 80017ca:	2010      	movs	r0, #16
 80017cc:	f000 f8e4 	bl	8001998 <NRF24_Write_Buf>

	 NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_0, TX_ADR_WIDTH);
 80017d0:	2203      	movs	r2, #3
 80017d2:	4913      	ldr	r1, [pc, #76]	; (8001820 <NRF24_init_RX+0x12c>)
 80017d4:	200a      	movs	r0, #10
 80017d6:	f000 f8df 	bl	8001998 <NRF24_Write_Buf>
	 NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS_1, TX_ADR_WIDTH);
 80017da:	2203      	movs	r2, #3
 80017dc:	4911      	ldr	r1, [pc, #68]	; (8001824 <NRF24_init_RX+0x130>)
 80017de:	200b      	movs	r0, #11
 80017e0:	f000 f8da 	bl	8001998 <NRF24_Write_Buf>
	 NRF24_WriteReg(RX_ADDR_P2, TX_ADDRESS_2);
 80017e4:	21b6      	movs	r1, #182	; 0xb6
 80017e6:	200c      	movs	r0, #12
 80017e8:	f000 f854 	bl	8001894 <NRF24_WriteReg>

	 NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH); 	//Number of bytes in RX payload in data pipe 0
 80017ec:	2120      	movs	r1, #32
 80017ee:	2011      	movs	r0, #17
 80017f0:	f000 f850 	bl	8001894 <NRF24_WriteReg>
	 NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH); 	//Number of bytes in RX payload in data pipe 1
 80017f4:	2120      	movs	r1, #32
 80017f6:	2012      	movs	r0, #18
 80017f8:	f000 f84c 	bl	8001894 <NRF24_WriteReg>
	 NRF24_WriteReg(RX_PW_P2, TX_PLOAD_WIDTH); 	//Number of bytes in RX payload in data pipe 2
 80017fc:	2120      	movs	r1, #32
 80017fe:	2013      	movs	r0, #19
 8001800:	f000 f848 	bl	8001894 <NRF24_WriteReg>

	 NRF24L01_RX_Mode();
 8001804:	f000 f93e 	bl	8001a84 <NRF24L01_RX_Mode>
	 LED_OFF;
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <NRF24_init_RX+0x134>)
 8001810:	f001 f8d4 	bl	80029bc <HAL_GPIO_WritePin>
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	40020000 	.word	0x40020000
 8001820:	20000004 	.word	0x20000004
 8001824:	20000008 	.word	0x20000008
 8001828:	40020800 	.word	0x40020800

0800182c <NRF24_ReadReg>:
	 NRF24L01_RX_Mode();
	 LED_OFF;
}
// -------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af02      	add	r7, sp, #8
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
	uint8_t dt=0, cmd;
 8001836:	2300      	movs	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]
	CS_ON;
 800183a:	2200      	movs	r2, #0
 800183c:	2110      	movs	r1, #16
 800183e:	4813      	ldr	r0, [pc, #76]	; (800188c <NRF24_ReadReg+0x60>)
 8001840:	f001 f8bc 	bl	80029bc <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi2, &addr, &dt, 1, 1000);
 8001844:	f107 020f 	add.w	r2, r7, #15
 8001848:	1df9      	adds	r1, r7, #7
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	480f      	ldr	r0, [pc, #60]	; (8001890 <NRF24_ReadReg+0x64>)
 8001854:	f002 f812 	bl	800387c <HAL_SPI_TransmitReceive>

	if (addr != STATUSS)		//если адрес равен адрес регистра статус то и возварщаем его состояние
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b07      	cmp	r3, #7
 800185c:	d00c      	beq.n	8001878 <NRF24_ReadReg+0x4c>
	{
		cmd = 0xFF;
 800185e:	23ff      	movs	r3, #255	; 0xff
 8001860:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_TransmitReceive(&hspi2, &cmd, &dt, 1, 1000);
 8001862:	f107 020f 	add.w	r2, r7, #15
 8001866:	f107 010e 	add.w	r1, r7, #14
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	4807      	ldr	r0, [pc, #28]	; (8001890 <NRF24_ReadReg+0x64>)
 8001874:	f002 f802 	bl	800387c <HAL_SPI_TransmitReceive>
	}

	CS_OFF;
 8001878:	2201      	movs	r2, #1
 800187a:	2110      	movs	r1, #16
 800187c:	4803      	ldr	r0, [pc, #12]	; (800188c <NRF24_ReadReg+0x60>)
 800187e:	f001 f89d 	bl	80029bc <HAL_GPIO_WritePin>

	return dt;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40020000 	.word	0x40020000
 8001890:	20000240 	.word	0x20000240

08001894 <NRF24_WriteReg>:
// -------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	460a      	mov	r2, r1
 800189e:	71fb      	strb	r3, [r7, #7]
 80018a0:	4613      	mov	r3, r2
 80018a2:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;//включим бит записи в адрес
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f043 0320 	orr.w	r3, r3, #32
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 80018ae:	2200      	movs	r2, #0
 80018b0:	2110      	movs	r1, #16
 80018b2:	480d      	ldr	r0, [pc, #52]	; (80018e8 <NRF24_WriteReg+0x54>)
 80018b4:	f001 f882 	bl	80029bc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);	//отправим адрес в шину
 80018b8:	1df9      	adds	r1, r7, #7
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	2201      	movs	r2, #1
 80018c0:	480a      	ldr	r0, [pc, #40]	; (80018ec <NRF24_WriteReg+0x58>)
 80018c2:	f001 fd8e 	bl	80033e2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&dt,1,1000);	//отправим данные в шину
 80018c6:	1db9      	adds	r1, r7, #6
 80018c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018cc:	2201      	movs	r2, #1
 80018ce:	4807      	ldr	r0, [pc, #28]	; (80018ec <NRF24_WriteReg+0x58>)
 80018d0:	f001 fd87 	bl	80033e2 <HAL_SPI_Transmit>

	CS_OFF;
 80018d4:	2201      	movs	r2, #1
 80018d6:	2110      	movs	r1, #16
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <NRF24_WriteReg+0x54>)
 80018da:	f001 f86f 	bl	80029bc <HAL_GPIO_WritePin>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40020000 	.word	0x40020000
 80018ec:	20000240 	.word	0x20000240

080018f0 <NRF24_ToggleFeatures>:
// -------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {ACTIVATE};
 80018f6:	2350      	movs	r3, #80	; 0x50
 80018f8:	713b      	strb	r3, [r7, #4]

	CS_ON;
 80018fa:	2200      	movs	r2, #0
 80018fc:	2110      	movs	r1, #16
 80018fe:	480f      	ldr	r0, [pc, #60]	; (800193c <NRF24_ToggleFeatures+0x4c>)
 8001900:	f001 f85c 	bl	80029bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8001904:	1d39      	adds	r1, r7, #4
 8001906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190a:	2201      	movs	r2, #1
 800190c:	480c      	ldr	r0, [pc, #48]	; (8001940 <NRF24_ToggleFeatures+0x50>)
 800190e:	f001 fd68 	bl	80033e2 <HAL_SPI_Transmit>

	DelayMicro(1);
 8001912:	2001      	movs	r0, #1
 8001914:	f7ff fece 	bl	80016b4 <DelayMicro>

	dt[0] = 0x73;
 8001918:	2373      	movs	r3, #115	; 0x73
 800191a:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 800191c:	1d39      	adds	r1, r7, #4
 800191e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001922:	2201      	movs	r2, #1
 8001924:	4806      	ldr	r0, [pc, #24]	; (8001940 <NRF24_ToggleFeatures+0x50>)
 8001926:	f001 fd5c 	bl	80033e2 <HAL_SPI_Transmit>
	CS_OFF;
 800192a:	2201      	movs	r2, #1
 800192c:	2110      	movs	r1, #16
 800192e:	4803      	ldr	r0, [pc, #12]	; (800193c <NRF24_ToggleFeatures+0x4c>)
 8001930:	f001 f844 	bl	80029bc <HAL_GPIO_WritePin>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40020000 	.word	0x40020000
 8001940:	20000240 	.word	0x20000240

08001944 <NRF24_Read_Buf>:
// -------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	71bb      	strb	r3, [r7, #6]
	CS_ON;
 8001954:	2200      	movs	r2, #0
 8001956:	2110      	movs	r1, #16
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <NRF24_Read_Buf+0x4c>)
 800195a:	f001 f82f 	bl	80029bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 800195e:	1df9      	adds	r1, r7, #7
 8001960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001964:	2201      	movs	r2, #1
 8001966:	480b      	ldr	r0, [pc, #44]	; (8001994 <NRF24_Read_Buf+0x50>)
 8001968:	f001 fd3b 	bl	80033e2 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 800196c:	79bb      	ldrb	r3, [r7, #6]
 800196e:	b29a      	uxth	r2, r3
 8001970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001974:	6839      	ldr	r1, [r7, #0]
 8001976:	4807      	ldr	r0, [pc, #28]	; (8001994 <NRF24_Read_Buf+0x50>)
 8001978:	f001 fe6f 	bl	800365a <HAL_SPI_Receive>

	CS_OFF;
 800197c:	2201      	movs	r2, #1
 800197e:	2110      	movs	r1, #16
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <NRF24_Read_Buf+0x4c>)
 8001982:	f001 f81b 	bl	80029bc <HAL_GPIO_WritePin>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40020000 	.word	0x40020000
 8001994:	20000240 	.word	0x20000240

08001998 <NRF24_Write_Buf>:
// -------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	4613      	mov	r3, r2
 80019a6:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;									//включим бит записи в адрес
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f043 0320 	orr.w	r3, r3, #32
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 80019b2:	2200      	movs	r2, #0
 80019b4:	2110      	movs	r1, #16
 80019b6:	480f      	ldr	r0, [pc, #60]	; (80019f4 <NRF24_Write_Buf+0x5c>)
 80019b8:	f001 f800 	bl	80029bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 80019bc:	1df9      	adds	r1, r7, #7
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	2201      	movs	r2, #1
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <NRF24_Write_Buf+0x60>)
 80019c6:	f001 fd0c 	bl	80033e2 <HAL_SPI_Transmit>

	DelayMicro(1);
 80019ca:	2001      	movs	r0, #1
 80019cc:	f7ff fe72 	bl	80016b4 <DelayMicro>

	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 80019d0:	79bb      	ldrb	r3, [r7, #6]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d8:	6839      	ldr	r1, [r7, #0]
 80019da:	4807      	ldr	r0, [pc, #28]	; (80019f8 <NRF24_Write_Buf+0x60>)
 80019dc:	f001 fd01 	bl	80033e2 <HAL_SPI_Transmit>

	CS_OFF;
 80019e0:	2201      	movs	r2, #1
 80019e2:	2110      	movs	r1, #16
 80019e4:	4803      	ldr	r0, [pc, #12]	; (80019f4 <NRF24_Write_Buf+0x5c>)
 80019e6:	f000 ffe9 	bl	80029bc <HAL_GPIO_WritePin>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40020000 	.word	0x40020000
 80019f8:	20000240 	.word	0x20000240

080019fc <NRF24_FlushRX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushRX(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_RX};
 8001a02:	23e2      	movs	r3, #226	; 0xe2
 8001a04:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8001a06:	2200      	movs	r2, #0
 8001a08:	2110      	movs	r1, #16
 8001a0a:	480b      	ldr	r0, [pc, #44]	; (8001a38 <NRF24_FlushRX+0x3c>)
 8001a0c:	f000 ffd6 	bl	80029bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8001a10:	1d39      	adds	r1, r7, #4
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	2201      	movs	r2, #1
 8001a18:	4808      	ldr	r0, [pc, #32]	; (8001a3c <NRF24_FlushRX+0x40>)
 8001a1a:	f001 fce2 	bl	80033e2 <HAL_SPI_Transmit>
	DelayMicro(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f7ff fe48 	bl	80016b4 <DelayMicro>
	CS_OFF;
 8001a24:	2201      	movs	r2, #1
 8001a26:	2110      	movs	r1, #16
 8001a28:	4803      	ldr	r0, [pc, #12]	; (8001a38 <NRF24_FlushRX+0x3c>)
 8001a2a:	f000 ffc7 	bl	80029bc <HAL_GPIO_WritePin>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	20000240 	.word	0x20000240

08001a40 <NRF24_FlushTX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushTX(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_TX};
 8001a46:	23e1      	movs	r3, #225	; 0xe1
 8001a48:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2110      	movs	r1, #16
 8001a4e:	480b      	ldr	r0, [pc, #44]	; (8001a7c <NRF24_FlushTX+0x3c>)
 8001a50:	f000 ffb4 	bl	80029bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8001a54:	1d39      	adds	r1, r7, #4
 8001a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4808      	ldr	r0, [pc, #32]	; (8001a80 <NRF24_FlushTX+0x40>)
 8001a5e:	f001 fcc0 	bl	80033e2 <HAL_SPI_Transmit>
	DelayMicro(1);
 8001a62:	2001      	movs	r0, #1
 8001a64:	f7ff fe26 	bl	80016b4 <DelayMicro>
	CS_OFF;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2110      	movs	r1, #16
 8001a6c:	4803      	ldr	r0, [pc, #12]	; (8001a7c <NRF24_FlushTX+0x3c>)
 8001a6e:	f000 ffa5 	bl	80029bc <HAL_GPIO_WritePin>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	20000240 	.word	0x20000240

08001a84 <NRF24L01_RX_Mode>:
// -------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
	uint8_t regval=0x00;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	71fb      	strb	r3, [r7, #7]
	regval = NRF24_ReadReg(CONFIG);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fecc 	bl	800182c <NRF24_ReadReg>
 8001a94:	4603      	mov	r3, r0
 8001a96:	71fb      	strb	r3, [r7, #7]

	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f043 0303 	orr.w	r3, r3, #3
 8001a9e:	71fb      	strb	r3, [r7, #7]

	NRF24_WriteReg(CONFIG, regval);
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff fef5 	bl	8001894 <NRF24_WriteReg>
	CE_SET;
 8001aaa:	2201      	movs	r2, #1
 8001aac:	2108      	movs	r1, #8
 8001aae:	4807      	ldr	r0, [pc, #28]	; (8001acc <NRF24L01_RX_Mode+0x48>)
 8001ab0:	f000 ff84 	bl	80029bc <HAL_GPIO_WritePin>

	DelayMicro(150);
 8001ab4:	2096      	movs	r0, #150	; 0x96
 8001ab6:	f7ff fdfd 	bl	80016b4 <DelayMicro>

	// Flush buffers
	NRF24_FlushRX();
 8001aba:	f7ff ff9f 	bl	80019fc <NRF24_FlushRX>
	NRF24_FlushTX();
 8001abe:	f7ff ffbf 	bl	8001a40 <NRF24_FlushTX>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40020000 	.word	0x40020000

08001ad0 <NRF24L01_Receive>:
	 // LED_ON;
	 LED_OFF;
}
// -------------------------------------------------------------------------------------
void NRF24L01_Receive(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	if(rx_flag == 1)
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <NRF24L01_Receive+0x2c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d10c      	bne.n	8001af8 <NRF24L01_Receive+0x28>
	{
		print_Data_Ower_uart(RX_BUF, 1);
 8001ade:	2101      	movs	r1, #1
 8001ae0:	4807      	ldr	r0, [pc, #28]	; (8001b00 <NRF24L01_Receive+0x30>)
 8001ae2:	f000 f851 	bl	8001b88 <print_Data_Ower_uart>

		rx_flag = 0;
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <NRF24L01_Receive+0x2c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
		LED_OFF;
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af2:	4804      	ldr	r0, [pc, #16]	; (8001b04 <NRF24L01_Receive+0x34>)
 8001af4:	f000 ff62 	bl	80029bc <HAL_GPIO_WritePin>
	}

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000304 	.word	0x20000304
 8001b00:	200002e4 	.word	0x200002e4
 8001b04:	40020800 	.word	0x40020800

08001b08 <IRQ_Callback>:
// -------------------------------------------------------------------------------------
void IRQ_Callback(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	LED_ON;
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b18:	4817      	ldr	r0, [pc, #92]	; (8001b78 <IRQ_Callback+0x70>)
 8001b1a:	f000 ff4f 	bl	80029bc <HAL_GPIO_WritePin>

	DelayMicro(10);
 8001b1e:	200a      	movs	r0, #10
 8001b20:	f7ff fdc8 	bl	80016b4 <DelayMicro>

	status = NRF24_ReadReg(STATUSS);
 8001b24:	2007      	movs	r0, #7
 8001b26:	f7ff fe81 	bl	800182c <NRF24_ReadReg>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]

	if(status & 0x40)											// If data ready in FIFO buff
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d014      	beq.n	8001b62 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1)&0x07;
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	085b      	lsrs	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	71bb      	strb	r3, [r7, #6]

		pipe_num = pipe;
 8001b44:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <IRQ_Callback+0x74>)
 8001b46:	79bb      	ldrb	r3, [r7, #6]
 8001b48:	7013      	strb	r3, [r2, #0]

		NRF24_Read_Buf(RD_RX_PLOAD, RX_BUF, TX_PLOAD_WIDTH);		// Copy into buffer
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	490c      	ldr	r1, [pc, #48]	; (8001b80 <IRQ_Callback+0x78>)
 8001b4e:	2061      	movs	r0, #97	; 0x61
 8001b50:	f7ff fef8 	bl	8001944 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUSS, 0x40);
 8001b54:	2140      	movs	r1, #64	; 0x40
 8001b56:	2007      	movs	r0, #7
 8001b58:	f7ff fe9c 	bl	8001894 <NRF24_WriteReg>

		rx_flag = 1;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <IRQ_Callback+0x7c>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
	}
	LED_OFF;
 8001b62:	2201      	movs	r2, #1
 8001b64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b68:	4803      	ldr	r0, [pc, #12]	; (8001b78 <IRQ_Callback+0x70>)
 8001b6a:	f000 ff27 	bl	80029bc <HAL_GPIO_WritePin>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	200002e0 	.word	0x200002e0
 8001b80:	200002e4 	.word	0x200002e4
 8001b84:	20000304 	.word	0x20000304

08001b88 <print_Data_Ower_uart>:
// -------------------------------------------------------------------------------------
void print_Data_Ower_uart(uint8_t *RX_BUF, uint8_t *pipe)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b09a      	sub	sp, #104	; 0x68
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
	char buff_uart[90] = {0};
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	2256      	movs	r2, #86	; 0x56
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fa8b 	bl	80050ba <memset>

	sprintf(buff_uart, "Data from PIPE %d: %s\n\r", pipe_num, RX_BUF);
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <print_Data_Ower_uart+0x48>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f107 000c 	add.w	r0, r7, #12
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <print_Data_Ower_uart+0x4c>)
 8001bb2:	f003 fa1f 	bl	8004ff4 <siprintf>
	HAL_UART_Transmit(&huart1, (char*)buff_uart, sizeof(buff_uart), 1000);
 8001bb6:	f107 010c 	add.w	r1, r7, #12
 8001bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbe:	225a      	movs	r2, #90	; 0x5a
 8001bc0:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <print_Data_Ower_uart+0x50>)
 8001bc2:	f002 f97a 	bl	8003eba <HAL_UART_Transmit>
}
 8001bc6:	bf00      	nop
 8001bc8:	3768      	adds	r7, #104	; 0x68
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200002e0 	.word	0x200002e0
 8001bd4:	08007370 	.word	0x08007370
 8001bd8:	20000298 	.word	0x20000298

08001bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be0:	480d      	ldr	r0, [pc, #52]	; (8001c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001be2:	490e      	ldr	r1, [pc, #56]	; (8001c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001be4:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be8:	e002      	b.n	8001bf0 <LoopCopyDataInit>

08001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bee:	3304      	adds	r3, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf4:	d3f9      	bcc.n	8001bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bf8:	4c0b      	ldr	r4, [pc, #44]	; (8001c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bfc:	e001      	b.n	8001c02 <LoopFillZerobss>

08001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c00:	3204      	adds	r2, #4

08001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c04:	d3fb      	bcc.n	8001bfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c06:	f7ff fd43 	bl	8001690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f003 faaf 	bl	800516c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c0e:	f7ff f951 	bl	8000eb4 <main>
  bx  lr    
 8001c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c14:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c1c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c20:	08007724 	.word	0x08007724
  ldr r2, =_sbss
 8001c24:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c28:	20000458 	.word	0x20000458

08001c2c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <DMA1_Stream0_IRQHandler>
	...

08001c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <HAL_Init+0x40>)
 8001c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <HAL_Init+0x40>)
 8001c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <HAL_Init+0x40>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c58:	2003      	movs	r0, #3
 8001c5a:	f000 fce9 	bl	8002630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c5e:	200f      	movs	r0, #15
 8001c60:	f000 f808 	bl	8001c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c64:	f7ff fb0e 	bl	8001284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023c00 	.word	0x40023c00

08001c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_InitTick+0x54>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x58>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 fd01 	bl	800269a <HAL_SYSTICK_Config>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00e      	b.n	8001cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b0f      	cmp	r3, #15
 8001ca6:	d80a      	bhi.n	8001cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f000 fcc9 	bl	8002646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb4:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <HAL_InitTick+0x5c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000010 	.word	0x20000010
 8001cd0:	2000000c 	.word	0x2000000c

08001cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_IncTick+0x20>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_IncTick+0x24>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <HAL_IncTick+0x24>)
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000010 	.word	0x20000010
 8001cf8:	20000308 	.word	0x20000308

08001cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_GetTick+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000308 	.word	0x20000308

08001d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff ffee 	bl	8001cfc <HAL_GetTick>
 8001d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d005      	beq.n	8001d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_Delay+0x44>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d3a:	bf00      	nop
 8001d3c:	f7ff ffde 	bl	8001cfc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d8f7      	bhi.n	8001d3c <HAL_Delay+0x28>
  {
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000010 	.word	0x20000010

08001d5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e033      	b.n	8001dda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff faaa 	bl	80012d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d118      	bne.n	8001dcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001da2:	f023 0302 	bic.w	r3, r3, #2
 8001da6:	f043 0202 	orr.w	r2, r3, #2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fa68 	bl	8002284 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f023 0303 	bic.w	r3, r3, #3
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
 8001dca:	e001      	b.n	8001dd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d049      	beq.n	8001eac <HAL_ADC_IRQHandler+0xca>
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d046      	beq.n	8001eac <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d105      	bne.n	8001e36 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d12b      	bne.n	8001e9c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d127      	bne.n	8001e9c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d006      	beq.n	8001e68 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d119      	bne.n	8001e9c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0220 	bic.w	r2, r2, #32
 8001e76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f8b0 	bl	8002002 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f06f 0212 	mvn.w	r2, #18
 8001eaa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eba:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d057      	beq.n	8001f72 <HAL_ADC_IRQHandler+0x190>
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d054      	beq.n	8001f72 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d105      	bne.n	8001ee0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d139      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d12b      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d124      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d11d      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d119      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f3c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d105      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fa8a 	bl	800247c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 020c 	mvn.w	r2, #12
 8001f70:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f80:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d017      	beq.n	8001fb8 <HAL_ADC_IRQHandler+0x1d6>
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d014      	beq.n	8001fb8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d10d      	bne.n	8001fb8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f834 	bl	8002016 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f06f 0201 	mvn.w	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fc6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d015      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x218>
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d012      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	f043 0202 	orr.w	r2, r3, #2
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0220 	mvn.w	r2, #32
 8001fe8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f81d 	bl	800202a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0220 	mvn.w	r2, #32
 8001ff8:	601a      	str	r2, [r3, #0]
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_ADC_ConfigChannel+0x1c>
 8002058:	2302      	movs	r3, #2
 800205a:	e105      	b.n	8002268 <HAL_ADC_ConfigChannel+0x228>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b09      	cmp	r3, #9
 800206a:	d925      	bls.n	80020b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68d9      	ldr	r1, [r3, #12]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	3b1e      	subs	r3, #30
 8002082:	2207      	movs	r2, #7
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43da      	mvns	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	400a      	ands	r2, r1
 8002090:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68d9      	ldr	r1, [r3, #12]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	4603      	mov	r3, r0
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4403      	add	r3, r0
 80020aa:	3b1e      	subs	r3, #30
 80020ac:	409a      	lsls	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	e022      	b.n	80020fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6919      	ldr	r1, [r3, #16]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	2207      	movs	r2, #7
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	400a      	ands	r2, r1
 80020da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6919      	ldr	r1, [r3, #16]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	4618      	mov	r0, r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4403      	add	r3, r0
 80020f4:	409a      	lsls	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b06      	cmp	r3, #6
 8002104:	d824      	bhi.n	8002150 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	3b05      	subs	r3, #5
 8002118:	221f      	movs	r2, #31
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	400a      	ands	r2, r1
 8002126:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	4618      	mov	r0, r3
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	3b05      	subs	r3, #5
 8002142:	fa00 f203 	lsl.w	r2, r0, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	635a      	str	r2, [r3, #52]	; 0x34
 800214e:	e04c      	b.n	80021ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b0c      	cmp	r3, #12
 8002156:	d824      	bhi.n	80021a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	3b23      	subs	r3, #35	; 0x23
 800216a:	221f      	movs	r2, #31
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43da      	mvns	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	400a      	ands	r2, r1
 8002178:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4618      	mov	r0, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	3b23      	subs	r3, #35	; 0x23
 8002194:	fa00 f203 	lsl.w	r2, r0, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
 80021a0:	e023      	b.n	80021ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	3b41      	subs	r3, #65	; 0x41
 80021b4:	221f      	movs	r2, #31
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	400a      	ands	r2, r1
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	4618      	mov	r0, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	3b41      	subs	r3, #65	; 0x41
 80021de:	fa00 f203 	lsl.w	r2, r0, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ea:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_ADC_ConfigChannel+0x234>)
 80021ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a21      	ldr	r2, [pc, #132]	; (8002278 <HAL_ADC_ConfigChannel+0x238>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d109      	bne.n	800220c <HAL_ADC_ConfigChannel+0x1cc>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b12      	cmp	r3, #18
 80021fe:	d105      	bne.n	800220c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a19      	ldr	r2, [pc, #100]	; (8002278 <HAL_ADC_ConfigChannel+0x238>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d123      	bne.n	800225e <HAL_ADC_ConfigChannel+0x21e>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b10      	cmp	r3, #16
 800221c:	d003      	beq.n	8002226 <HAL_ADC_ConfigChannel+0x1e6>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b11      	cmp	r3, #17
 8002224:	d11b      	bne.n	800225e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b10      	cmp	r3, #16
 8002238:	d111      	bne.n	800225e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_ADC_ConfigChannel+0x23c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a10      	ldr	r2, [pc, #64]	; (8002280 <HAL_ADC_ConfigChannel+0x240>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	0c9a      	lsrs	r2, r3, #18
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002250:	e002      	b.n	8002258 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	3b01      	subs	r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f9      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40012300 	.word	0x40012300
 8002278:	40012000 	.word	0x40012000
 800227c:	20000000 	.word	0x20000000
 8002280:	431bde83 	.word	0x431bde83

08002284 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800228c:	4b79      	ldr	r3, [pc, #484]	; (8002474 <ADC_Init+0x1f0>)
 800228e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	021a      	lsls	r2, r3, #8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6899      	ldr	r1, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	4a58      	ldr	r2, [pc, #352]	; (8002478 <ADC_Init+0x1f4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d022      	beq.n	8002362 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800232a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6899      	ldr	r1, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800234c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6899      	ldr	r1, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	e00f      	b.n	8002382 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002370:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002380:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0202 	bic.w	r2, r2, #2
 8002390:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6899      	ldr	r1, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7e1b      	ldrb	r3, [r3, #24]
 800239c:	005a      	lsls	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d01b      	beq.n	80023e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	3b01      	subs	r3, #1
 80023dc:	035a      	lsls	r2, r3, #13
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	e007      	b.n	80023f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	3b01      	subs	r3, #1
 8002414:	051a      	lsls	r2, r3, #20
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800242c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6899      	ldr	r1, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800243a:	025a      	lsls	r2, r3, #9
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	029a      	lsls	r2, r3, #10
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	609a      	str	r2, [r3, #8]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40012300 	.word	0x40012300
 8002478:	0f000001 	.word	0x0f000001

0800247c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ac:	4013      	ands	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c2:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	60d3      	str	r3, [r2, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <__NVIC_GetPriorityGrouping+0x18>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 0307 	and.w	r3, r3, #7
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	db0b      	blt.n	800251e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	4907      	ldr	r1, [pc, #28]	; (800252c <__NVIC_EnableIRQ+0x38>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2001      	movs	r0, #1
 8002516:	fa00 f202 	lsl.w	r2, r0, r2
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e100 	.word	0xe000e100

08002530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	2b00      	cmp	r3, #0
 8002542:	db0a      	blt.n	800255a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	490c      	ldr	r1, [pc, #48]	; (800257c <__NVIC_SetPriority+0x4c>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	0112      	lsls	r2, r2, #4
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	440b      	add	r3, r1
 8002554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002558:	e00a      	b.n	8002570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4908      	ldr	r1, [pc, #32]	; (8002580 <__NVIC_SetPriority+0x50>)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	3b04      	subs	r3, #4
 8002568:	0112      	lsls	r2, r2, #4
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	440b      	add	r3, r1
 800256e:	761a      	strb	r2, [r3, #24]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000e100 	.word	0xe000e100
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f1c3 0307 	rsb	r3, r3, #7
 800259e:	2b04      	cmp	r3, #4
 80025a0:	bf28      	it	cs
 80025a2:	2304      	movcs	r3, #4
 80025a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d902      	bls.n	80025b4 <NVIC_EncodePriority+0x30>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3b03      	subs	r3, #3
 80025b2:	e000      	b.n	80025b6 <NVIC_EncodePriority+0x32>
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	401a      	ands	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43d9      	mvns	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	4313      	orrs	r3, r2
         );
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025fc:	d301      	bcc.n	8002602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fe:	2301      	movs	r3, #1
 8002600:	e00f      	b.n	8002622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <SysTick_Config+0x40>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260a:	210f      	movs	r1, #15
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	f7ff ff8e 	bl	8002530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <SysTick_Config+0x40>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <SysTick_Config+0x40>)
 800261c:	2207      	movs	r2, #7
 800261e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	e000e010 	.word	0xe000e010

08002630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ff29 	bl	8002490 <__NVIC_SetPriorityGrouping>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002658:	f7ff ff3e 	bl	80024d8 <__NVIC_GetPriorityGrouping>
 800265c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff ff8e 	bl	8002584 <NVIC_EncodePriority>
 8002668:	4602      	mov	r2, r0
 800266a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff5d 	bl	8002530 <__NVIC_SetPriority>
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff31 	bl	80024f4 <__NVIC_EnableIRQ>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffa2 	bl	80025ec <SysTick_Config>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	e159      	b.n	8002984 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026d0:	2201      	movs	r2, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	f040 8148 	bne.w	800297e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d005      	beq.n	8002706 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002702:	2b02      	cmp	r3, #2
 8002704:	d130      	bne.n	8002768 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 0201 	and.w	r2, r3, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b03      	cmp	r3, #3
 8002772:	d017      	beq.n	80027a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d123      	bne.n	80027f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	08da      	lsrs	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3208      	adds	r2, #8
 80027b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	220f      	movs	r2, #15
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	08da      	lsrs	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3208      	adds	r2, #8
 80027f2:	69b9      	ldr	r1, [r7, #24]
 80027f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0203 	and.w	r2, r3, #3
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a2 	beq.w	800297e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_GPIO_Init+0x2e8>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	4a56      	ldr	r2, [pc, #344]	; (800299c <HAL_GPIO_Init+0x2e8>)
 8002844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002848:	6453      	str	r3, [r2, #68]	; 0x44
 800284a:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_GPIO_Init+0x2e8>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002856:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_GPIO_Init+0x2ec>)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	3302      	adds	r3, #2
 800285e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	220f      	movs	r2, #15
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a49      	ldr	r2, [pc, #292]	; (80029a4 <HAL_GPIO_Init+0x2f0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d019      	beq.n	80028b6 <HAL_GPIO_Init+0x202>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a48      	ldr	r2, [pc, #288]	; (80029a8 <HAL_GPIO_Init+0x2f4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0x1fe>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a47      	ldr	r2, [pc, #284]	; (80029ac <HAL_GPIO_Init+0x2f8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_Init+0x1fa>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a46      	ldr	r2, [pc, #280]	; (80029b0 <HAL_GPIO_Init+0x2fc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_Init+0x1f6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a45      	ldr	r2, [pc, #276]	; (80029b4 <HAL_GPIO_Init+0x300>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_Init+0x1f2>
 80028a2:	2304      	movs	r3, #4
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028a6:	2307      	movs	r3, #7
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028b6:	2300      	movs	r3, #0
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c8:	4935      	ldr	r1, [pc, #212]	; (80029a0 <HAL_GPIO_Init+0x2ec>)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d6:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <HAL_GPIO_Init+0x304>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fa:	4a2f      	ldr	r2, [pc, #188]	; (80029b8 <HAL_GPIO_Init+0x304>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002900:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002924:	4a24      	ldr	r2, [pc, #144]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292a:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <HAL_GPIO_Init+0x304>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294e:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002978:	4a0f      	ldr	r2, [pc, #60]	; (80029b8 <HAL_GPIO_Init+0x304>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	f67f aea2 	bls.w	80026d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3724      	adds	r7, #36	; 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40013c00 	.word	0x40013c00

080029bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	807b      	strh	r3, [r7, #2]
 80029c8:	4613      	mov	r3, r2
 80029ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029cc:	787b      	ldrb	r3, [r7, #1]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029d8:	e003      	b.n	80029e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029da:	887b      	ldrh	r3, [r7, #2]
 80029dc:	041a      	lsls	r2, r3, #16
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	619a      	str	r2, [r3, #24]
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d006      	beq.n	8002a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a06:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fc22 	bl	8001258 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40013c00 	.word	0x40013c00

08002a20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e267      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d075      	beq.n	8002b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a3e:	4b88      	ldr	r3, [pc, #544]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d00c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4a:	4b85      	ldr	r3, [pc, #532]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d112      	bne.n	8002a7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a56:	4b82      	ldr	r3, [pc, #520]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a62:	d10b      	bne.n	8002a7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	4b7e      	ldr	r3, [pc, #504]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d05b      	beq.n	8002b28 <HAL_RCC_OscConfig+0x108>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d157      	bne.n	8002b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e242      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a84:	d106      	bne.n	8002a94 <HAL_RCC_OscConfig+0x74>
 8002a86:	4b76      	ldr	r3, [pc, #472]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a75      	ldr	r2, [pc, #468]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e01d      	b.n	8002ad0 <HAL_RCC_OscConfig+0xb0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x98>
 8002a9e:	4b70      	ldr	r3, [pc, #448]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6f      	ldr	r2, [pc, #444]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a6c      	ldr	r2, [pc, #432]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e00b      	b.n	8002ad0 <HAL_RCC_OscConfig+0xb0>
 8002ab8:	4b69      	ldr	r3, [pc, #420]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a68      	ldr	r2, [pc, #416]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a65      	ldr	r2, [pc, #404]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d013      	beq.n	8002b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7ff f910 	bl	8001cfc <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7ff f90c 	bl	8001cfc <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e207      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	4b5b      	ldr	r3, [pc, #364]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0xc0>
 8002afe:	e014      	b.n	8002b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7ff f8fc 	bl	8001cfc <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b08:	f7ff f8f8 	bl	8001cfc <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e1f3      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	4b51      	ldr	r3, [pc, #324]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0xe8>
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d063      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b36:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00b      	beq.n	8002b5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b42:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d11c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4e:	4b44      	ldr	r3, [pc, #272]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d116      	bne.n	8002b88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5a:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_RCC_OscConfig+0x152>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e1c7      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b72:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4937      	ldr	r1, [pc, #220]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b86:	e03a      	b.n	8002bfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d020      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b90:	4b34      	ldr	r3, [pc, #208]	; (8002c64 <HAL_RCC_OscConfig+0x244>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b96:	f7ff f8b1 	bl	8001cfc <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b9e:	f7ff f8ad 	bl	8001cfc <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e1a8      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbc:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4925      	ldr	r1, [pc, #148]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	600b      	str	r3, [r1, #0]
 8002bd0:	e015      	b.n	8002bfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd2:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <HAL_RCC_OscConfig+0x244>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7ff f890 	bl	8001cfc <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be0:	f7ff f88c 	bl	8001cfc <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e187      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d036      	beq.n	8002c78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d016      	beq.n	8002c40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_RCC_OscConfig+0x248>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c18:	f7ff f870 	bl	8001cfc <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c20:	f7ff f86c 	bl	8001cfc <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e167      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x200>
 8002c3e:	e01b      	b.n	8002c78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_OscConfig+0x248>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c46:	f7ff f859 	bl	8001cfc <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c4c:	e00e      	b.n	8002c6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c4e:	f7ff f855 	bl	8001cfc <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d907      	bls.n	8002c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e150      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
 8002c60:	40023800 	.word	0x40023800
 8002c64:	42470000 	.word	0x42470000
 8002c68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6c:	4b88      	ldr	r3, [pc, #544]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1ea      	bne.n	8002c4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8097 	beq.w	8002db4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8a:	4b81      	ldr	r3, [pc, #516]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10f      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	4b7d      	ldr	r3, [pc, #500]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a7c      	ldr	r2, [pc, #496]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b7a      	ldr	r3, [pc, #488]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb6:	4b77      	ldr	r3, [pc, #476]	; (8002e94 <HAL_RCC_OscConfig+0x474>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d118      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc2:	4b74      	ldr	r3, [pc, #464]	; (8002e94 <HAL_RCC_OscConfig+0x474>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a73      	ldr	r2, [pc, #460]	; (8002e94 <HAL_RCC_OscConfig+0x474>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cce:	f7ff f815 	bl	8001cfc <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd6:	f7ff f811 	bl	8001cfc <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e10c      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	4b6a      	ldr	r3, [pc, #424]	; (8002e94 <HAL_RCC_OscConfig+0x474>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x2ea>
 8002cfc:	4b64      	ldr	r3, [pc, #400]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	4a63      	ldr	r2, [pc, #396]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6713      	str	r3, [r2, #112]	; 0x70
 8002d08:	e01c      	b.n	8002d44 <HAL_RCC_OscConfig+0x324>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b05      	cmp	r3, #5
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x30c>
 8002d12:	4b5f      	ldr	r3, [pc, #380]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4a5e      	ldr	r2, [pc, #376]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1e:	4b5c      	ldr	r3, [pc, #368]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	4a5b      	ldr	r2, [pc, #364]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2a:	e00b      	b.n	8002d44 <HAL_RCC_OscConfig+0x324>
 8002d2c:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a57      	ldr	r2, [pc, #348]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f023 0301 	bic.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	4b55      	ldr	r3, [pc, #340]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4a54      	ldr	r2, [pc, #336]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d3e:	f023 0304 	bic.w	r3, r3, #4
 8002d42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d015      	beq.n	8002d78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4c:	f7fe ffd6 	bl	8001cfc <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d54:	f7fe ffd2 	bl	8001cfc <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e0cb      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6a:	4b49      	ldr	r3, [pc, #292]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0ee      	beq.n	8002d54 <HAL_RCC_OscConfig+0x334>
 8002d76:	e014      	b.n	8002da2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d78:	f7fe ffc0 	bl	8001cfc <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d80:	f7fe ffbc 	bl	8001cfc <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0b5      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d96:	4b3e      	ldr	r3, [pc, #248]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1ee      	bne.n	8002d80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da8:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	4a38      	ldr	r2, [pc, #224]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 80a1 	beq.w	8002f00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dbe:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d05c      	beq.n	8002e84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d141      	bne.n	8002e56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd2:	4b31      	ldr	r3, [pc, #196]	; (8002e98 <HAL_RCC_OscConfig+0x478>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fe ff90 	bl	8001cfc <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe ff8c 	bl	8001cfc <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e087      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	019b      	lsls	r3, r3, #6
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	3b01      	subs	r3, #1
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	491b      	ldr	r1, [pc, #108]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e28:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_RCC_OscConfig+0x478>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe ff65 	bl	8001cfc <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e36:	f7fe ff61 	bl	8001cfc <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e05c      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x416>
 8002e54:	e054      	b.n	8002f00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_RCC_OscConfig+0x478>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe ff4e 	bl	8001cfc <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fe ff4a 	bl	8001cfc <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e045      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x444>
 8002e82:	e03d      	b.n	8002f00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d107      	bne.n	8002e9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e038      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40007000 	.word	0x40007000
 8002e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_RCC_OscConfig+0x4ec>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d028      	beq.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d121      	bne.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d11a      	bne.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ecc:	4013      	ands	r3, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d111      	bne.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800

08002f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0cc      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f24:	4b68      	ldr	r3, [pc, #416]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d90c      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b65      	ldr	r3, [pc, #404]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b63      	ldr	r3, [pc, #396]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0b8      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f64:	4b59      	ldr	r3, [pc, #356]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a58      	ldr	r2, [pc, #352]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f7c:	4b53      	ldr	r3, [pc, #332]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a52      	ldr	r2, [pc, #328]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f88:	4b50      	ldr	r3, [pc, #320]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	494d      	ldr	r1, [pc, #308]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d044      	beq.n	8003030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d119      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e07f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d003      	beq.n	8002fce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fce:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e06f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fde:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e067      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fee:	4b37      	ldr	r3, [pc, #220]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4934      	ldr	r1, [pc, #208]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003000:	f7fe fe7c 	bl	8001cfc <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	e00a      	b.n	800301e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003008:	f7fe fe78 	bl	8001cfc <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e04f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 020c 	and.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	429a      	cmp	r2, r3
 800302e:	d1eb      	bne.n	8003008 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003030:	4b25      	ldr	r3, [pc, #148]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d20c      	bcs.n	8003058 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e032      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4916      	ldr	r1, [pc, #88]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	490e      	ldr	r1, [pc, #56]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003096:	f000 f821 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800309a:	4602      	mov	r2, r0
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	490a      	ldr	r1, [pc, #40]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	5ccb      	ldrb	r3, [r1, r3]
 80030aa:	fa22 f303 	lsr.w	r3, r2, r3
 80030ae:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe fddc 	bl	8001c74 <HAL_InitTick>

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023c00 	.word	0x40023c00
 80030cc:	40023800 	.word	0x40023800
 80030d0:	08007388 	.word	0x08007388
 80030d4:	20000000 	.word	0x20000000
 80030d8:	2000000c 	.word	0x2000000c

080030dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e0:	b090      	sub	sp, #64	; 0x40
 80030e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
 80030e8:	2300      	movs	r3, #0
 80030ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ec:	2300      	movs	r3, #0
 80030ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030f4:	4b59      	ldr	r3, [pc, #356]	; (800325c <HAL_RCC_GetSysClockFreq+0x180>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d00d      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x40>
 8003100:	2b08      	cmp	r3, #8
 8003102:	f200 80a1 	bhi.w	8003248 <HAL_RCC_GetSysClockFreq+0x16c>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x34>
 800310a:	2b04      	cmp	r3, #4
 800310c:	d003      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0x3a>
 800310e:	e09b      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003110:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_RCC_GetSysClockFreq+0x184>)
 8003112:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003114:	e09b      	b.n	800324e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003116:	4b53      	ldr	r3, [pc, #332]	; (8003264 <HAL_RCC_GetSysClockFreq+0x188>)
 8003118:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800311a:	e098      	b.n	800324e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800311c:	4b4f      	ldr	r3, [pc, #316]	; (800325c <HAL_RCC_GetSysClockFreq+0x180>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003126:	4b4d      	ldr	r3, [pc, #308]	; (800325c <HAL_RCC_GetSysClockFreq+0x180>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d028      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003132:	4b4a      	ldr	r3, [pc, #296]	; (800325c <HAL_RCC_GetSysClockFreq+0x180>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	099b      	lsrs	r3, r3, #6
 8003138:	2200      	movs	r2, #0
 800313a:	623b      	str	r3, [r7, #32]
 800313c:	627a      	str	r2, [r7, #36]	; 0x24
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003144:	2100      	movs	r1, #0
 8003146:	4b47      	ldr	r3, [pc, #284]	; (8003264 <HAL_RCC_GetSysClockFreq+0x188>)
 8003148:	fb03 f201 	mul.w	r2, r3, r1
 800314c:	2300      	movs	r3, #0
 800314e:	fb00 f303 	mul.w	r3, r0, r3
 8003152:	4413      	add	r3, r2
 8003154:	4a43      	ldr	r2, [pc, #268]	; (8003264 <HAL_RCC_GetSysClockFreq+0x188>)
 8003156:	fba0 1202 	umull	r1, r2, r0, r2
 800315a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800315c:	460a      	mov	r2, r1
 800315e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003162:	4413      	add	r3, r2
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003168:	2200      	movs	r2, #0
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	61fa      	str	r2, [r7, #28]
 800316e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003172:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003176:	f7fd fd1f 	bl	8000bb8 <__aeabi_uldivmod>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4613      	mov	r3, r2
 8003180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003182:	e053      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003184:	4b35      	ldr	r3, [pc, #212]	; (800325c <HAL_RCC_GetSysClockFreq+0x180>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	2200      	movs	r2, #0
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	617a      	str	r2, [r7, #20]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003196:	f04f 0b00 	mov.w	fp, #0
 800319a:	4652      	mov	r2, sl
 800319c:	465b      	mov	r3, fp
 800319e:	f04f 0000 	mov.w	r0, #0
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	0159      	lsls	r1, r3, #5
 80031a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ac:	0150      	lsls	r0, r2, #5
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	ebb2 080a 	subs.w	r8, r2, sl
 80031b6:	eb63 090b 	sbc.w	r9, r3, fp
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031ce:	ebb2 0408 	subs.w	r4, r2, r8
 80031d2:	eb63 0509 	sbc.w	r5, r3, r9
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	00eb      	lsls	r3, r5, #3
 80031e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031e4:	00e2      	lsls	r2, r4, #3
 80031e6:	4614      	mov	r4, r2
 80031e8:	461d      	mov	r5, r3
 80031ea:	eb14 030a 	adds.w	r3, r4, sl
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	eb45 030b 	adc.w	r3, r5, fp
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003202:	4629      	mov	r1, r5
 8003204:	028b      	lsls	r3, r1, #10
 8003206:	4621      	mov	r1, r4
 8003208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800320c:	4621      	mov	r1, r4
 800320e:	028a      	lsls	r2, r1, #10
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003216:	2200      	movs	r2, #0
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	60fa      	str	r2, [r7, #12]
 800321c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003220:	f7fd fcca 	bl	8000bb8 <__aeabi_uldivmod>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4613      	mov	r3, r2
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_GetSysClockFreq+0x180>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	3301      	adds	r3, #1
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800323c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003246:	e002      	b.n	800324e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetSysClockFreq+0x184>)
 800324a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800324c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003250:	4618      	mov	r0, r3
 8003252:	3740      	adds	r7, #64	; 0x40
 8003254:	46bd      	mov	sp, r7
 8003256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800
 8003260:	00f42400 	.word	0x00f42400
 8003264:	017d7840 	.word	0x017d7840

08003268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <HAL_RCC_GetHCLKFreq+0x14>)
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000000 	.word	0x20000000

08003280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003284:	f7ff fff0 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0a9b      	lsrs	r3, r3, #10
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4903      	ldr	r1, [pc, #12]	; (80032a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40023800 	.word	0x40023800
 80032a4:	08007398 	.word	0x08007398

080032a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032ac:	f7ff ffdc 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	0b5b      	lsrs	r3, r3, #13
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	4903      	ldr	r1, [pc, #12]	; (80032cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032be:	5ccb      	ldrb	r3, [r1, r3]
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40023800 	.word	0x40023800
 80032cc:	08007398 	.word	0x08007398

080032d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e07b      	b.n	80033da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d108      	bne.n	80032fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032f2:	d009      	beq.n	8003308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	61da      	str	r2, [r3, #28]
 80032fa:	e005      	b.n	8003308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fe f822 	bl	800136c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	ea42 0103 	orr.w	r1, r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	f003 0104 	and.w	r1, r3, #4
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	f003 0210 	and.w	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b088      	sub	sp, #32
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	603b      	str	r3, [r7, #0]
 80033ee:	4613      	mov	r3, r2
 80033f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_SPI_Transmit+0x22>
 8003400:	2302      	movs	r3, #2
 8003402:	e126      	b.n	8003652 <HAL_SPI_Transmit+0x270>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800340c:	f7fe fc76 	bl	8001cfc <HAL_GetTick>
 8003410:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	d002      	beq.n	8003428 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003422:	2302      	movs	r3, #2
 8003424:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003426:	e10b      	b.n	8003640 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_SPI_Transmit+0x52>
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003438:	e102      	b.n	8003640 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2203      	movs	r2, #3
 800343e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	88fa      	ldrh	r2, [r7, #6]
 8003452:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003480:	d10f      	bne.n	80034a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003490:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ac:	2b40      	cmp	r3, #64	; 0x40
 80034ae:	d007      	beq.n	80034c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c8:	d14b      	bne.n	8003562 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_SPI_Transmit+0xf6>
 80034d2:	8afb      	ldrh	r3, [r7, #22]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d13e      	bne.n	8003556 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	1c9a      	adds	r2, r3, #2
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034fc:	e02b      	b.n	8003556 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d112      	bne.n	8003532 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	881a      	ldrh	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	1c9a      	adds	r2, r3, #2
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003530:	e011      	b.n	8003556 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003532:	f7fe fbe3 	bl	8001cfc <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d803      	bhi.n	800354a <HAL_SPI_Transmit+0x168>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d102      	bne.n	8003550 <HAL_SPI_Transmit+0x16e>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d102      	bne.n	8003556 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003554:	e074      	b.n	8003640 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ce      	bne.n	80034fe <HAL_SPI_Transmit+0x11c>
 8003560:	e04c      	b.n	80035fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_SPI_Transmit+0x18e>
 800356a:	8afb      	ldrh	r3, [r7, #22]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d140      	bne.n	80035f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	330c      	adds	r3, #12
 800357a:	7812      	ldrb	r2, [r2, #0]
 800357c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003596:	e02c      	b.n	80035f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d113      	bne.n	80035ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	330c      	adds	r3, #12
 80035b0:	7812      	ldrb	r2, [r2, #0]
 80035b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80035cc:	e011      	b.n	80035f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ce:	f7fe fb95 	bl	8001cfc <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d803      	bhi.n	80035e6 <HAL_SPI_Transmit+0x204>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e4:	d102      	bne.n	80035ec <HAL_SPI_Transmit+0x20a>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035f0:	e026      	b.n	8003640 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1cd      	bne.n	8003598 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	6839      	ldr	r1, [r7, #0]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fbcb 	bl	8003d9c <SPI_EndRxTxTransaction>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e000      	b.n	8003640 <HAL_SPI_Transmit+0x25e>
  }

error:
 800363e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003650:	7ffb      	ldrb	r3, [r7, #31]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b088      	sub	sp, #32
 800365e:	af02      	add	r7, sp, #8
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003676:	d112      	bne.n	800369e <HAL_SPI_Receive+0x44>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10e      	bne.n	800369e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2204      	movs	r2, #4
 8003684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003688:	88fa      	ldrh	r2, [r7, #6]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	4613      	mov	r3, r2
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f8f1 	bl	800387c <HAL_SPI_TransmitReceive>
 800369a:	4603      	mov	r3, r0
 800369c:	e0ea      	b.n	8003874 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_SPI_Receive+0x52>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e0e3      	b.n	8003874 <HAL_SPI_Receive+0x21a>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036b4:	f7fe fb22 	bl	8001cfc <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d002      	beq.n	80036cc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
 80036c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036ca:	e0ca      	b.n	8003862 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_SPI_Receive+0x7e>
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d102      	bne.n	80036de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036dc:	e0c1      	b.n	8003862 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2204      	movs	r2, #4
 80036e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	88fa      	ldrh	r2, [r7, #6]
 80036f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003724:	d10f      	bne.n	8003746 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003734:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003744:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b40      	cmp	r3, #64	; 0x40
 8003752:	d007      	beq.n	8003764 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d162      	bne.n	8003832 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800376c:	e02e      	b.n	80037cc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d115      	bne.n	80037a8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f103 020c 	add.w	r2, r3, #12
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	7812      	ldrb	r2, [r2, #0]
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037a6:	e011      	b.n	80037cc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037a8:	f7fe faa8 	bl	8001cfc <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d803      	bhi.n	80037c0 <HAL_SPI_Receive+0x166>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d102      	bne.n	80037c6 <HAL_SPI_Receive+0x16c>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037ca:	e04a      	b.n	8003862 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1cb      	bne.n	800376e <HAL_SPI_Receive+0x114>
 80037d6:	e031      	b.n	800383c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d113      	bne.n	800380e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	b292      	uxth	r2, r2
 80037f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	1c9a      	adds	r2, r3, #2
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800380c:	e011      	b.n	8003832 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800380e:	f7fe fa75 	bl	8001cfc <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d803      	bhi.n	8003826 <HAL_SPI_Receive+0x1cc>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d102      	bne.n	800382c <HAL_SPI_Receive+0x1d2>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003830:	e017      	b.n	8003862 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1cd      	bne.n	80037d8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	6839      	ldr	r1, [r7, #0]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 fa45 	bl	8003cd0 <SPI_EndRxTransaction>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	75fb      	strb	r3, [r7, #23]
 800385e:	e000      	b.n	8003862 <HAL_SPI_Receive+0x208>
  }

error :
 8003860:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003872:	7dfb      	ldrb	r3, [r7, #23]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08c      	sub	sp, #48	; 0x30
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800388a:	2301      	movs	r3, #1
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_SPI_TransmitReceive+0x26>
 800389e:	2302      	movs	r3, #2
 80038a0:	e18a      	b.n	8003bb8 <HAL_SPI_TransmitReceive+0x33c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038aa:	f7fe fa27 	bl	8001cfc <HAL_GetTick>
 80038ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80038c0:	887b      	ldrh	r3, [r7, #2]
 80038c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d00f      	beq.n	80038ec <HAL_SPI_TransmitReceive+0x70>
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038d2:	d107      	bne.n	80038e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d103      	bne.n	80038e4 <HAL_SPI_TransmitReceive+0x68>
 80038dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d003      	beq.n	80038ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
 80038e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038ea:	e15b      	b.n	8003ba4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_SPI_TransmitReceive+0x82>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_SPI_TransmitReceive+0x82>
 80038f8:	887b      	ldrh	r3, [r7, #2]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d103      	bne.n	8003906 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003904:	e14e      	b.n	8003ba4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b04      	cmp	r3, #4
 8003910:	d003      	beq.n	800391a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2205      	movs	r2, #5
 8003916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	887a      	ldrh	r2, [r7, #2]
 800392a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	887a      	ldrh	r2, [r7, #2]
 8003942:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d007      	beq.n	800396e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800396c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003976:	d178      	bne.n	8003a6a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_SPI_TransmitReceive+0x10a>
 8003980:	8b7b      	ldrh	r3, [r7, #26]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d166      	bne.n	8003a54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	881a      	ldrh	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	1c9a      	adds	r2, r3, #2
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039aa:	e053      	b.n	8003a54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d11b      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0x176>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d016      	beq.n	80039f2 <HAL_SPI_TransmitReceive+0x176>
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d113      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	881a      	ldrh	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	1c9a      	adds	r2, r3, #2
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d119      	bne.n	8003a34 <HAL_SPI_TransmitReceive+0x1b8>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d014      	beq.n	8003a34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	b292      	uxth	r2, r2
 8003a16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	1c9a      	adds	r2, r3, #2
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a30:	2301      	movs	r3, #1
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a34:	f7fe f962 	bl	8001cfc <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d807      	bhi.n	8003a54 <HAL_SPI_TransmitReceive+0x1d8>
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	d003      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a52:	e0a7      	b.n	8003ba4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1a6      	bne.n	80039ac <HAL_SPI_TransmitReceive+0x130>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1a1      	bne.n	80039ac <HAL_SPI_TransmitReceive+0x130>
 8003a68:	e07c      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_SPI_TransmitReceive+0x1fc>
 8003a72:	8b7b      	ldrh	r3, [r7, #26]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d16b      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	7812      	ldrb	r2, [r2, #0]
 8003a84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a9e:	e057      	b.n	8003b50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d11c      	bne.n	8003ae8 <HAL_SPI_TransmitReceive+0x26c>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d017      	beq.n	8003ae8 <HAL_SPI_TransmitReceive+0x26c>
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d114      	bne.n	8003ae8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	7812      	ldrb	r2, [r2, #0]
 8003aca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d119      	bne.n	8003b2a <HAL_SPI_TransmitReceive+0x2ae>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d014      	beq.n	8003b2a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b26:	2301      	movs	r3, #1
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b2a:	f7fe f8e7 	bl	8001cfc <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d803      	bhi.n	8003b42 <HAL_SPI_TransmitReceive+0x2c6>
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d102      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x2cc>
 8003b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d103      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b4e:	e029      	b.n	8003ba4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1a2      	bne.n	8003aa0 <HAL_SPI_TransmitReceive+0x224>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d19d      	bne.n	8003aa0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f917 	bl	8003d9c <SPI_EndRxTxTransaction>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d006      	beq.n	8003b82 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b80:	e010      	b.n	8003ba4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10b      	bne.n	8003ba2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	e000      	b.n	8003ba4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ba2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3730      	adds	r7, #48	; 0x30
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bd0:	f7fe f894 	bl	8001cfc <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	4413      	add	r3, r2
 8003bde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003be0:	f7fe f88c 	bl	8001cfc <HAL_GetTick>
 8003be4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003be6:	4b39      	ldr	r3, [pc, #228]	; (8003ccc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	015b      	lsls	r3, r3, #5
 8003bec:	0d1b      	lsrs	r3, r3, #20
 8003bee:	69fa      	ldr	r2, [r7, #28]
 8003bf0:	fb02 f303 	mul.w	r3, r2, r3
 8003bf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bf6:	e054      	b.n	8003ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfe:	d050      	beq.n	8003ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c00:	f7fe f87c 	bl	8001cfc <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d902      	bls.n	8003c16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d13d      	bne.n	8003c92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c2e:	d111      	bne.n	8003c54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c38:	d004      	beq.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c42:	d107      	bne.n	8003c54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5c:	d10f      	bne.n	8003c7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e017      	b.n	8003cc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4013      	ands	r3, r2
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	bf0c      	ite	eq
 8003cb2:	2301      	moveq	r3, #1
 8003cb4:	2300      	movne	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d19b      	bne.n	8003bf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000000 	.word	0x20000000

08003cd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce4:	d111      	bne.n	8003d0a <SPI_EndRxTransaction+0x3a>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cee:	d004      	beq.n	8003cfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf8:	d107      	bne.n	8003d0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d12:	d12a      	bne.n	8003d6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1c:	d012      	beq.n	8003d44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2200      	movs	r2, #0
 8003d26:	2180      	movs	r1, #128	; 0x80
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f7ff ff49 	bl	8003bc0 <SPI_WaitFlagStateUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d02d      	beq.n	8003d90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e026      	b.n	8003d92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7ff ff36 	bl	8003bc0 <SPI_WaitFlagStateUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01a      	beq.n	8003d90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e013      	b.n	8003d92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2101      	movs	r1, #1
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f7ff ff23 	bl	8003bc0 <SPI_WaitFlagStateUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d007      	beq.n	8003d90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e000      	b.n	8003d92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003da8:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <SPI_EndRxTxTransaction+0x7c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <SPI_EndRxTxTransaction+0x80>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	0d5b      	lsrs	r3, r3, #21
 8003db4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc6:	d112      	bne.n	8003dee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2180      	movs	r1, #128	; 0x80
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f7ff fef4 	bl	8003bc0 <SPI_WaitFlagStateUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d016      	beq.n	8003e0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	f043 0220 	orr.w	r2, r3, #32
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e00f      	b.n	8003e0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e04:	2b80      	cmp	r3, #128	; 0x80
 8003e06:	d0f2      	beq.n	8003dee <SPI_EndRxTxTransaction+0x52>
 8003e08:	e000      	b.n	8003e0c <SPI_EndRxTxTransaction+0x70>
        break;
 8003e0a:	bf00      	nop
  }

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000000 	.word	0x20000000
 8003e1c:	165e9f81 	.word	0x165e9f81

08003e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e03f      	b.n	8003eb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fd fad8 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2224      	movs	r2, #36	; 0x24
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f929 	bl	80040bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b08a      	sub	sp, #40	; 0x28
 8003ebe:	af02      	add	r7, sp, #8
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d17c      	bne.n	8003fd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_UART_Transmit+0x2c>
 8003ee0:	88fb      	ldrh	r3, [r7, #6]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e075      	b.n	8003fd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_UART_Transmit+0x3e>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e06e      	b.n	8003fd6 <HAL_UART_Transmit+0x11c>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2221      	movs	r2, #33	; 0x21
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f0e:	f7fd fef5 	bl	8001cfc <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	88fa      	ldrh	r2, [r7, #6]
 8003f18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	88fa      	ldrh	r2, [r7, #6]
 8003f1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f28:	d108      	bne.n	8003f3c <HAL_UART_Transmit+0x82>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	e003      	b.n	8003f44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f4c:	e02a      	b.n	8003fa4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2200      	movs	r2, #0
 8003f56:	2180      	movs	r1, #128	; 0x80
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f840 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e036      	b.n	8003fd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10b      	bne.n	8003f86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	3302      	adds	r3, #2
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	e007      	b.n	8003f96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	781a      	ldrb	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	3301      	adds	r3, #1
 8003f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1cf      	bne.n	8003f4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2140      	movs	r1, #64	; 0x40
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f810 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e006      	b.n	8003fd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3720      	adds	r7, #32
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b090      	sub	sp, #64	; 0x40
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4613      	mov	r3, r2
 8003fec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fee:	e050      	b.n	8004092 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d04c      	beq.n	8004092 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0x30>
 8003ffe:	f7fd fe7d 	bl	8001cfc <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800400a:	429a      	cmp	r2, r3
 800400c:	d241      	bcs.n	8004092 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	330c      	adds	r3, #12
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800402e:	637a      	str	r2, [r7, #52]	; 0x34
 8004030:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e5      	bne.n	800400e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3314      	adds	r3, #20
 8004048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	613b      	str	r3, [r7, #16]
   return(result);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f023 0301 	bic.w	r3, r3, #1
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3314      	adds	r3, #20
 8004060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004062:	623a      	str	r2, [r7, #32]
 8004064:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	69f9      	ldr	r1, [r7, #28]
 8004068:	6a3a      	ldr	r2, [r7, #32]
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e5      	bne.n	8004042 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e00f      	b.n	80040b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4013      	ands	r3, r2
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	429a      	cmp	r2, r3
 80040a0:	bf0c      	ite	eq
 80040a2:	2301      	moveq	r3, #1
 80040a4:	2300      	movne	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d09f      	beq.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3740      	adds	r7, #64	; 0x40
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c0:	b0c0      	sub	sp, #256	; 0x100
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d8:	68d9      	ldr	r1, [r3, #12]
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	ea40 0301 	orr.w	r3, r0, r1
 80040e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004114:	f021 010c 	bic.w	r1, r1, #12
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004122:	430b      	orrs	r3, r1
 8004124:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	6999      	ldr	r1, [r3, #24]
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	ea40 0301 	orr.w	r3, r0, r1
 8004142:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4b8f      	ldr	r3, [pc, #572]	; (8004388 <UART_SetConfig+0x2cc>)
 800414c:	429a      	cmp	r2, r3
 800414e:	d005      	beq.n	800415c <UART_SetConfig+0xa0>
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4b8d      	ldr	r3, [pc, #564]	; (800438c <UART_SetConfig+0x2d0>)
 8004158:	429a      	cmp	r2, r3
 800415a:	d104      	bne.n	8004166 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800415c:	f7ff f8a4 	bl	80032a8 <HAL_RCC_GetPCLK2Freq>
 8004160:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004164:	e003      	b.n	800416e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004166:	f7ff f88b 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 800416a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004178:	f040 810c 	bne.w	8004394 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800417c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004180:	2200      	movs	r2, #0
 8004182:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004186:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800418a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800418e:	4622      	mov	r2, r4
 8004190:	462b      	mov	r3, r5
 8004192:	1891      	adds	r1, r2, r2
 8004194:	65b9      	str	r1, [r7, #88]	; 0x58
 8004196:	415b      	adcs	r3, r3
 8004198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800419a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800419e:	4621      	mov	r1, r4
 80041a0:	eb12 0801 	adds.w	r8, r2, r1
 80041a4:	4629      	mov	r1, r5
 80041a6:	eb43 0901 	adc.w	r9, r3, r1
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041be:	4690      	mov	r8, r2
 80041c0:	4699      	mov	r9, r3
 80041c2:	4623      	mov	r3, r4
 80041c4:	eb18 0303 	adds.w	r3, r8, r3
 80041c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041cc:	462b      	mov	r3, r5
 80041ce:	eb49 0303 	adc.w	r3, r9, r3
 80041d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041ea:	460b      	mov	r3, r1
 80041ec:	18db      	adds	r3, r3, r3
 80041ee:	653b      	str	r3, [r7, #80]	; 0x50
 80041f0:	4613      	mov	r3, r2
 80041f2:	eb42 0303 	adc.w	r3, r2, r3
 80041f6:	657b      	str	r3, [r7, #84]	; 0x54
 80041f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004200:	f7fc fcda 	bl	8000bb8 <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4b61      	ldr	r3, [pc, #388]	; (8004390 <UART_SetConfig+0x2d4>)
 800420a:	fba3 2302 	umull	r2, r3, r3, r2
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	011c      	lsls	r4, r3, #4
 8004212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004216:	2200      	movs	r2, #0
 8004218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800421c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004220:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004224:	4642      	mov	r2, r8
 8004226:	464b      	mov	r3, r9
 8004228:	1891      	adds	r1, r2, r2
 800422a:	64b9      	str	r1, [r7, #72]	; 0x48
 800422c:	415b      	adcs	r3, r3
 800422e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004230:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004234:	4641      	mov	r1, r8
 8004236:	eb12 0a01 	adds.w	sl, r2, r1
 800423a:	4649      	mov	r1, r9
 800423c:	eb43 0b01 	adc.w	fp, r3, r1
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800424c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004254:	4692      	mov	sl, r2
 8004256:	469b      	mov	fp, r3
 8004258:	4643      	mov	r3, r8
 800425a:	eb1a 0303 	adds.w	r3, sl, r3
 800425e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004262:	464b      	mov	r3, r9
 8004264:	eb4b 0303 	adc.w	r3, fp, r3
 8004268:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004278:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800427c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004280:	460b      	mov	r3, r1
 8004282:	18db      	adds	r3, r3, r3
 8004284:	643b      	str	r3, [r7, #64]	; 0x40
 8004286:	4613      	mov	r3, r2
 8004288:	eb42 0303 	adc.w	r3, r2, r3
 800428c:	647b      	str	r3, [r7, #68]	; 0x44
 800428e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004292:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004296:	f7fc fc8f 	bl	8000bb8 <__aeabi_uldivmod>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4611      	mov	r1, r2
 80042a0:	4b3b      	ldr	r3, [pc, #236]	; (8004390 <UART_SetConfig+0x2d4>)
 80042a2:	fba3 2301 	umull	r2, r3, r3, r1
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	2264      	movs	r2, #100	; 0x64
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	1acb      	subs	r3, r1, r3
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042b6:	4b36      	ldr	r3, [pc, #216]	; (8004390 <UART_SetConfig+0x2d4>)
 80042b8:	fba3 2302 	umull	r2, r3, r3, r2
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042c4:	441c      	add	r4, r3
 80042c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042d8:	4642      	mov	r2, r8
 80042da:	464b      	mov	r3, r9
 80042dc:	1891      	adds	r1, r2, r2
 80042de:	63b9      	str	r1, [r7, #56]	; 0x38
 80042e0:	415b      	adcs	r3, r3
 80042e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042e8:	4641      	mov	r1, r8
 80042ea:	1851      	adds	r1, r2, r1
 80042ec:	6339      	str	r1, [r7, #48]	; 0x30
 80042ee:	4649      	mov	r1, r9
 80042f0:	414b      	adcs	r3, r1
 80042f2:	637b      	str	r3, [r7, #52]	; 0x34
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004300:	4659      	mov	r1, fp
 8004302:	00cb      	lsls	r3, r1, #3
 8004304:	4651      	mov	r1, sl
 8004306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800430a:	4651      	mov	r1, sl
 800430c:	00ca      	lsls	r2, r1, #3
 800430e:	4610      	mov	r0, r2
 8004310:	4619      	mov	r1, r3
 8004312:	4603      	mov	r3, r0
 8004314:	4642      	mov	r2, r8
 8004316:	189b      	adds	r3, r3, r2
 8004318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800431c:	464b      	mov	r3, r9
 800431e:	460a      	mov	r2, r1
 8004320:	eb42 0303 	adc.w	r3, r2, r3
 8004324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004334:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004338:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800433c:	460b      	mov	r3, r1
 800433e:	18db      	adds	r3, r3, r3
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
 8004342:	4613      	mov	r3, r2
 8004344:	eb42 0303 	adc.w	r3, r2, r3
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800434e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004352:	f7fc fc31 	bl	8000bb8 <__aeabi_uldivmod>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <UART_SetConfig+0x2d4>)
 800435c:	fba3 1302 	umull	r1, r3, r3, r2
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	2164      	movs	r1, #100	; 0x64
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	3332      	adds	r3, #50	; 0x32
 800436e:	4a08      	ldr	r2, [pc, #32]	; (8004390 <UART_SetConfig+0x2d4>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	f003 0207 	and.w	r2, r3, #7
 800437a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4422      	add	r2, r4
 8004382:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004384:	e106      	b.n	8004594 <UART_SetConfig+0x4d8>
 8004386:	bf00      	nop
 8004388:	40011000 	.word	0x40011000
 800438c:	40011400 	.word	0x40011400
 8004390:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004398:	2200      	movs	r2, #0
 800439a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800439e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043a6:	4642      	mov	r2, r8
 80043a8:	464b      	mov	r3, r9
 80043aa:	1891      	adds	r1, r2, r2
 80043ac:	6239      	str	r1, [r7, #32]
 80043ae:	415b      	adcs	r3, r3
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
 80043b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043b6:	4641      	mov	r1, r8
 80043b8:	1854      	adds	r4, r2, r1
 80043ba:	4649      	mov	r1, r9
 80043bc:	eb43 0501 	adc.w	r5, r3, r1
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	00eb      	lsls	r3, r5, #3
 80043ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ce:	00e2      	lsls	r2, r4, #3
 80043d0:	4614      	mov	r4, r2
 80043d2:	461d      	mov	r5, r3
 80043d4:	4643      	mov	r3, r8
 80043d6:	18e3      	adds	r3, r4, r3
 80043d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043dc:	464b      	mov	r3, r9
 80043de:	eb45 0303 	adc.w	r3, r5, r3
 80043e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004402:	4629      	mov	r1, r5
 8004404:	008b      	lsls	r3, r1, #2
 8004406:	4621      	mov	r1, r4
 8004408:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800440c:	4621      	mov	r1, r4
 800440e:	008a      	lsls	r2, r1, #2
 8004410:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004414:	f7fc fbd0 	bl	8000bb8 <__aeabi_uldivmod>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4b60      	ldr	r3, [pc, #384]	; (80045a0 <UART_SetConfig+0x4e4>)
 800441e:	fba3 2302 	umull	r2, r3, r3, r2
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	011c      	lsls	r4, r3, #4
 8004426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800442a:	2200      	movs	r2, #0
 800442c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004430:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004434:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004438:	4642      	mov	r2, r8
 800443a:	464b      	mov	r3, r9
 800443c:	1891      	adds	r1, r2, r2
 800443e:	61b9      	str	r1, [r7, #24]
 8004440:	415b      	adcs	r3, r3
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004448:	4641      	mov	r1, r8
 800444a:	1851      	adds	r1, r2, r1
 800444c:	6139      	str	r1, [r7, #16]
 800444e:	4649      	mov	r1, r9
 8004450:	414b      	adcs	r3, r1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004460:	4659      	mov	r1, fp
 8004462:	00cb      	lsls	r3, r1, #3
 8004464:	4651      	mov	r1, sl
 8004466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800446a:	4651      	mov	r1, sl
 800446c:	00ca      	lsls	r2, r1, #3
 800446e:	4610      	mov	r0, r2
 8004470:	4619      	mov	r1, r3
 8004472:	4603      	mov	r3, r0
 8004474:	4642      	mov	r2, r8
 8004476:	189b      	adds	r3, r3, r2
 8004478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800447c:	464b      	mov	r3, r9
 800447e:	460a      	mov	r2, r1
 8004480:	eb42 0303 	adc.w	r3, r2, r3
 8004484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	67bb      	str	r3, [r7, #120]	; 0x78
 8004492:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044a0:	4649      	mov	r1, r9
 80044a2:	008b      	lsls	r3, r1, #2
 80044a4:	4641      	mov	r1, r8
 80044a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044aa:	4641      	mov	r1, r8
 80044ac:	008a      	lsls	r2, r1, #2
 80044ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044b2:	f7fc fb81 	bl	8000bb8 <__aeabi_uldivmod>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4611      	mov	r1, r2
 80044bc:	4b38      	ldr	r3, [pc, #224]	; (80045a0 <UART_SetConfig+0x4e4>)
 80044be:	fba3 2301 	umull	r2, r3, r3, r1
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	2264      	movs	r2, #100	; 0x64
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
 80044ca:	1acb      	subs	r3, r1, r3
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	3332      	adds	r3, #50	; 0x32
 80044d0:	4a33      	ldr	r2, [pc, #204]	; (80045a0 <UART_SetConfig+0x4e4>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044dc:	441c      	add	r4, r3
 80044de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044e2:	2200      	movs	r2, #0
 80044e4:	673b      	str	r3, [r7, #112]	; 0x70
 80044e6:	677a      	str	r2, [r7, #116]	; 0x74
 80044e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044ec:	4642      	mov	r2, r8
 80044ee:	464b      	mov	r3, r9
 80044f0:	1891      	adds	r1, r2, r2
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	415b      	adcs	r3, r3
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044fc:	4641      	mov	r1, r8
 80044fe:	1851      	adds	r1, r2, r1
 8004500:	6039      	str	r1, [r7, #0]
 8004502:	4649      	mov	r1, r9
 8004504:	414b      	adcs	r3, r1
 8004506:	607b      	str	r3, [r7, #4]
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004514:	4659      	mov	r1, fp
 8004516:	00cb      	lsls	r3, r1, #3
 8004518:	4651      	mov	r1, sl
 800451a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451e:	4651      	mov	r1, sl
 8004520:	00ca      	lsls	r2, r1, #3
 8004522:	4610      	mov	r0, r2
 8004524:	4619      	mov	r1, r3
 8004526:	4603      	mov	r3, r0
 8004528:	4642      	mov	r2, r8
 800452a:	189b      	adds	r3, r3, r2
 800452c:	66bb      	str	r3, [r7, #104]	; 0x68
 800452e:	464b      	mov	r3, r9
 8004530:	460a      	mov	r2, r1
 8004532:	eb42 0303 	adc.w	r3, r2, r3
 8004536:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	663b      	str	r3, [r7, #96]	; 0x60
 8004542:	667a      	str	r2, [r7, #100]	; 0x64
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004550:	4649      	mov	r1, r9
 8004552:	008b      	lsls	r3, r1, #2
 8004554:	4641      	mov	r1, r8
 8004556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800455a:	4641      	mov	r1, r8
 800455c:	008a      	lsls	r2, r1, #2
 800455e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004562:	f7fc fb29 	bl	8000bb8 <__aeabi_uldivmod>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <UART_SetConfig+0x4e4>)
 800456c:	fba3 1302 	umull	r1, r3, r3, r2
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	2164      	movs	r1, #100	; 0x64
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	3332      	adds	r3, #50	; 0x32
 800457e:	4a08      	ldr	r2, [pc, #32]	; (80045a0 <UART_SetConfig+0x4e4>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	f003 020f 	and.w	r2, r3, #15
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4422      	add	r2, r4
 8004592:	609a      	str	r2, [r3, #8]
}
 8004594:	bf00      	nop
 8004596:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800459a:	46bd      	mov	sp, r7
 800459c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045a0:	51eb851f 	.word	0x51eb851f

080045a4 <__cvt>:
 80045a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045a8:	ec55 4b10 	vmov	r4, r5, d0
 80045ac:	2d00      	cmp	r5, #0
 80045ae:	460e      	mov	r6, r1
 80045b0:	4619      	mov	r1, r3
 80045b2:	462b      	mov	r3, r5
 80045b4:	bfbb      	ittet	lt
 80045b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80045ba:	461d      	movlt	r5, r3
 80045bc:	2300      	movge	r3, #0
 80045be:	232d      	movlt	r3, #45	; 0x2d
 80045c0:	700b      	strb	r3, [r1, #0]
 80045c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80045c8:	4691      	mov	r9, r2
 80045ca:	f023 0820 	bic.w	r8, r3, #32
 80045ce:	bfbc      	itt	lt
 80045d0:	4622      	movlt	r2, r4
 80045d2:	4614      	movlt	r4, r2
 80045d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045d8:	d005      	beq.n	80045e6 <__cvt+0x42>
 80045da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045de:	d100      	bne.n	80045e2 <__cvt+0x3e>
 80045e0:	3601      	adds	r6, #1
 80045e2:	2102      	movs	r1, #2
 80045e4:	e000      	b.n	80045e8 <__cvt+0x44>
 80045e6:	2103      	movs	r1, #3
 80045e8:	ab03      	add	r3, sp, #12
 80045ea:	9301      	str	r3, [sp, #4]
 80045ec:	ab02      	add	r3, sp, #8
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	ec45 4b10 	vmov	d0, r4, r5
 80045f4:	4653      	mov	r3, sl
 80045f6:	4632      	mov	r2, r6
 80045f8:	f000 fe6a 	bl	80052d0 <_dtoa_r>
 80045fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004600:	4607      	mov	r7, r0
 8004602:	d102      	bne.n	800460a <__cvt+0x66>
 8004604:	f019 0f01 	tst.w	r9, #1
 8004608:	d022      	beq.n	8004650 <__cvt+0xac>
 800460a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800460e:	eb07 0906 	add.w	r9, r7, r6
 8004612:	d110      	bne.n	8004636 <__cvt+0x92>
 8004614:	783b      	ldrb	r3, [r7, #0]
 8004616:	2b30      	cmp	r3, #48	; 0x30
 8004618:	d10a      	bne.n	8004630 <__cvt+0x8c>
 800461a:	2200      	movs	r2, #0
 800461c:	2300      	movs	r3, #0
 800461e:	4620      	mov	r0, r4
 8004620:	4629      	mov	r1, r5
 8004622:	f7fc fa59 	bl	8000ad8 <__aeabi_dcmpeq>
 8004626:	b918      	cbnz	r0, 8004630 <__cvt+0x8c>
 8004628:	f1c6 0601 	rsb	r6, r6, #1
 800462c:	f8ca 6000 	str.w	r6, [sl]
 8004630:	f8da 3000 	ldr.w	r3, [sl]
 8004634:	4499      	add	r9, r3
 8004636:	2200      	movs	r2, #0
 8004638:	2300      	movs	r3, #0
 800463a:	4620      	mov	r0, r4
 800463c:	4629      	mov	r1, r5
 800463e:	f7fc fa4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004642:	b108      	cbz	r0, 8004648 <__cvt+0xa4>
 8004644:	f8cd 900c 	str.w	r9, [sp, #12]
 8004648:	2230      	movs	r2, #48	; 0x30
 800464a:	9b03      	ldr	r3, [sp, #12]
 800464c:	454b      	cmp	r3, r9
 800464e:	d307      	bcc.n	8004660 <__cvt+0xbc>
 8004650:	9b03      	ldr	r3, [sp, #12]
 8004652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004654:	1bdb      	subs	r3, r3, r7
 8004656:	4638      	mov	r0, r7
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	b004      	add	sp, #16
 800465c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004660:	1c59      	adds	r1, r3, #1
 8004662:	9103      	str	r1, [sp, #12]
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	e7f0      	b.n	800464a <__cvt+0xa6>

08004668 <__exponent>:
 8004668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800466a:	4603      	mov	r3, r0
 800466c:	2900      	cmp	r1, #0
 800466e:	bfb8      	it	lt
 8004670:	4249      	neglt	r1, r1
 8004672:	f803 2b02 	strb.w	r2, [r3], #2
 8004676:	bfb4      	ite	lt
 8004678:	222d      	movlt	r2, #45	; 0x2d
 800467a:	222b      	movge	r2, #43	; 0x2b
 800467c:	2909      	cmp	r1, #9
 800467e:	7042      	strb	r2, [r0, #1]
 8004680:	dd2a      	ble.n	80046d8 <__exponent+0x70>
 8004682:	f10d 0207 	add.w	r2, sp, #7
 8004686:	4617      	mov	r7, r2
 8004688:	260a      	movs	r6, #10
 800468a:	4694      	mov	ip, r2
 800468c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004690:	fb06 1415 	mls	r4, r6, r5, r1
 8004694:	3430      	adds	r4, #48	; 0x30
 8004696:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800469a:	460c      	mov	r4, r1
 800469c:	2c63      	cmp	r4, #99	; 0x63
 800469e:	f102 32ff 	add.w	r2, r2, #4294967295
 80046a2:	4629      	mov	r1, r5
 80046a4:	dcf1      	bgt.n	800468a <__exponent+0x22>
 80046a6:	3130      	adds	r1, #48	; 0x30
 80046a8:	f1ac 0402 	sub.w	r4, ip, #2
 80046ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80046b0:	1c41      	adds	r1, r0, #1
 80046b2:	4622      	mov	r2, r4
 80046b4:	42ba      	cmp	r2, r7
 80046b6:	d30a      	bcc.n	80046ce <__exponent+0x66>
 80046b8:	f10d 0209 	add.w	r2, sp, #9
 80046bc:	eba2 020c 	sub.w	r2, r2, ip
 80046c0:	42bc      	cmp	r4, r7
 80046c2:	bf88      	it	hi
 80046c4:	2200      	movhi	r2, #0
 80046c6:	4413      	add	r3, r2
 80046c8:	1a18      	subs	r0, r3, r0
 80046ca:	b003      	add	sp, #12
 80046cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ce:	f812 5b01 	ldrb.w	r5, [r2], #1
 80046d2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80046d6:	e7ed      	b.n	80046b4 <__exponent+0x4c>
 80046d8:	2330      	movs	r3, #48	; 0x30
 80046da:	3130      	adds	r1, #48	; 0x30
 80046dc:	7083      	strb	r3, [r0, #2]
 80046de:	70c1      	strb	r1, [r0, #3]
 80046e0:	1d03      	adds	r3, r0, #4
 80046e2:	e7f1      	b.n	80046c8 <__exponent+0x60>

080046e4 <_printf_float>:
 80046e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e8:	ed2d 8b02 	vpush	{d8}
 80046ec:	b08d      	sub	sp, #52	; 0x34
 80046ee:	460c      	mov	r4, r1
 80046f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80046f4:	4616      	mov	r6, r2
 80046f6:	461f      	mov	r7, r3
 80046f8:	4605      	mov	r5, r0
 80046fa:	f000 fce7 	bl	80050cc <_localeconv_r>
 80046fe:	f8d0 a000 	ldr.w	sl, [r0]
 8004702:	4650      	mov	r0, sl
 8004704:	f7fb fdbc 	bl	8000280 <strlen>
 8004708:	2300      	movs	r3, #0
 800470a:	930a      	str	r3, [sp, #40]	; 0x28
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	9305      	str	r3, [sp, #20]
 8004710:	f8d8 3000 	ldr.w	r3, [r8]
 8004714:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004718:	3307      	adds	r3, #7
 800471a:	f023 0307 	bic.w	r3, r3, #7
 800471e:	f103 0208 	add.w	r2, r3, #8
 8004722:	f8c8 2000 	str.w	r2, [r8]
 8004726:	e9d3 8900 	ldrd	r8, r9, [r3]
 800472a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800472e:	9307      	str	r3, [sp, #28]
 8004730:	f8cd 8018 	str.w	r8, [sp, #24]
 8004734:	ee08 0a10 	vmov	s16, r0
 8004738:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800473c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004740:	4b9e      	ldr	r3, [pc, #632]	; (80049bc <_printf_float+0x2d8>)
 8004742:	f04f 32ff 	mov.w	r2, #4294967295
 8004746:	f7fc f9f9 	bl	8000b3c <__aeabi_dcmpun>
 800474a:	bb88      	cbnz	r0, 80047b0 <_printf_float+0xcc>
 800474c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004750:	4b9a      	ldr	r3, [pc, #616]	; (80049bc <_printf_float+0x2d8>)
 8004752:	f04f 32ff 	mov.w	r2, #4294967295
 8004756:	f7fc f9d3 	bl	8000b00 <__aeabi_dcmple>
 800475a:	bb48      	cbnz	r0, 80047b0 <_printf_float+0xcc>
 800475c:	2200      	movs	r2, #0
 800475e:	2300      	movs	r3, #0
 8004760:	4640      	mov	r0, r8
 8004762:	4649      	mov	r1, r9
 8004764:	f7fc f9c2 	bl	8000aec <__aeabi_dcmplt>
 8004768:	b110      	cbz	r0, 8004770 <_printf_float+0x8c>
 800476a:	232d      	movs	r3, #45	; 0x2d
 800476c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004770:	4a93      	ldr	r2, [pc, #588]	; (80049c0 <_printf_float+0x2dc>)
 8004772:	4b94      	ldr	r3, [pc, #592]	; (80049c4 <_printf_float+0x2e0>)
 8004774:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004778:	bf94      	ite	ls
 800477a:	4690      	movls	r8, r2
 800477c:	4698      	movhi	r8, r3
 800477e:	2303      	movs	r3, #3
 8004780:	6123      	str	r3, [r4, #16]
 8004782:	9b05      	ldr	r3, [sp, #20]
 8004784:	f023 0304 	bic.w	r3, r3, #4
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	f04f 0900 	mov.w	r9, #0
 800478e:	9700      	str	r7, [sp, #0]
 8004790:	4633      	mov	r3, r6
 8004792:	aa0b      	add	r2, sp, #44	; 0x2c
 8004794:	4621      	mov	r1, r4
 8004796:	4628      	mov	r0, r5
 8004798:	f000 f9da 	bl	8004b50 <_printf_common>
 800479c:	3001      	adds	r0, #1
 800479e:	f040 8090 	bne.w	80048c2 <_printf_float+0x1de>
 80047a2:	f04f 30ff 	mov.w	r0, #4294967295
 80047a6:	b00d      	add	sp, #52	; 0x34
 80047a8:	ecbd 8b02 	vpop	{d8}
 80047ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	4640      	mov	r0, r8
 80047b6:	4649      	mov	r1, r9
 80047b8:	f7fc f9c0 	bl	8000b3c <__aeabi_dcmpun>
 80047bc:	b140      	cbz	r0, 80047d0 <_printf_float+0xec>
 80047be:	464b      	mov	r3, r9
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bfbc      	itt	lt
 80047c4:	232d      	movlt	r3, #45	; 0x2d
 80047c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80047ca:	4a7f      	ldr	r2, [pc, #508]	; (80049c8 <_printf_float+0x2e4>)
 80047cc:	4b7f      	ldr	r3, [pc, #508]	; (80049cc <_printf_float+0x2e8>)
 80047ce:	e7d1      	b.n	8004774 <_printf_float+0x90>
 80047d0:	6863      	ldr	r3, [r4, #4]
 80047d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80047d6:	9206      	str	r2, [sp, #24]
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	d13f      	bne.n	800485c <_printf_float+0x178>
 80047dc:	2306      	movs	r3, #6
 80047de:	6063      	str	r3, [r4, #4]
 80047e0:	9b05      	ldr	r3, [sp, #20]
 80047e2:	6861      	ldr	r1, [r4, #4]
 80047e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047e8:	2300      	movs	r3, #0
 80047ea:	9303      	str	r3, [sp, #12]
 80047ec:	ab0a      	add	r3, sp, #40	; 0x28
 80047ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80047f2:	ab09      	add	r3, sp, #36	; 0x24
 80047f4:	ec49 8b10 	vmov	d0, r8, r9
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	6022      	str	r2, [r4, #0]
 80047fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004800:	4628      	mov	r0, r5
 8004802:	f7ff fecf 	bl	80045a4 <__cvt>
 8004806:	9b06      	ldr	r3, [sp, #24]
 8004808:	9909      	ldr	r1, [sp, #36]	; 0x24
 800480a:	2b47      	cmp	r3, #71	; 0x47
 800480c:	4680      	mov	r8, r0
 800480e:	d108      	bne.n	8004822 <_printf_float+0x13e>
 8004810:	1cc8      	adds	r0, r1, #3
 8004812:	db02      	blt.n	800481a <_printf_float+0x136>
 8004814:	6863      	ldr	r3, [r4, #4]
 8004816:	4299      	cmp	r1, r3
 8004818:	dd41      	ble.n	800489e <_printf_float+0x1ba>
 800481a:	f1ab 0302 	sub.w	r3, fp, #2
 800481e:	fa5f fb83 	uxtb.w	fp, r3
 8004822:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004826:	d820      	bhi.n	800486a <_printf_float+0x186>
 8004828:	3901      	subs	r1, #1
 800482a:	465a      	mov	r2, fp
 800482c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004830:	9109      	str	r1, [sp, #36]	; 0x24
 8004832:	f7ff ff19 	bl	8004668 <__exponent>
 8004836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004838:	1813      	adds	r3, r2, r0
 800483a:	2a01      	cmp	r2, #1
 800483c:	4681      	mov	r9, r0
 800483e:	6123      	str	r3, [r4, #16]
 8004840:	dc02      	bgt.n	8004848 <_printf_float+0x164>
 8004842:	6822      	ldr	r2, [r4, #0]
 8004844:	07d2      	lsls	r2, r2, #31
 8004846:	d501      	bpl.n	800484c <_printf_float+0x168>
 8004848:	3301      	adds	r3, #1
 800484a:	6123      	str	r3, [r4, #16]
 800484c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004850:	2b00      	cmp	r3, #0
 8004852:	d09c      	beq.n	800478e <_printf_float+0xaa>
 8004854:	232d      	movs	r3, #45	; 0x2d
 8004856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800485a:	e798      	b.n	800478e <_printf_float+0xaa>
 800485c:	9a06      	ldr	r2, [sp, #24]
 800485e:	2a47      	cmp	r2, #71	; 0x47
 8004860:	d1be      	bne.n	80047e0 <_printf_float+0xfc>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1bc      	bne.n	80047e0 <_printf_float+0xfc>
 8004866:	2301      	movs	r3, #1
 8004868:	e7b9      	b.n	80047de <_printf_float+0xfa>
 800486a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800486e:	d118      	bne.n	80048a2 <_printf_float+0x1be>
 8004870:	2900      	cmp	r1, #0
 8004872:	6863      	ldr	r3, [r4, #4]
 8004874:	dd0b      	ble.n	800488e <_printf_float+0x1aa>
 8004876:	6121      	str	r1, [r4, #16]
 8004878:	b913      	cbnz	r3, 8004880 <_printf_float+0x19c>
 800487a:	6822      	ldr	r2, [r4, #0]
 800487c:	07d0      	lsls	r0, r2, #31
 800487e:	d502      	bpl.n	8004886 <_printf_float+0x1a2>
 8004880:	3301      	adds	r3, #1
 8004882:	440b      	add	r3, r1
 8004884:	6123      	str	r3, [r4, #16]
 8004886:	65a1      	str	r1, [r4, #88]	; 0x58
 8004888:	f04f 0900 	mov.w	r9, #0
 800488c:	e7de      	b.n	800484c <_printf_float+0x168>
 800488e:	b913      	cbnz	r3, 8004896 <_printf_float+0x1b2>
 8004890:	6822      	ldr	r2, [r4, #0]
 8004892:	07d2      	lsls	r2, r2, #31
 8004894:	d501      	bpl.n	800489a <_printf_float+0x1b6>
 8004896:	3302      	adds	r3, #2
 8004898:	e7f4      	b.n	8004884 <_printf_float+0x1a0>
 800489a:	2301      	movs	r3, #1
 800489c:	e7f2      	b.n	8004884 <_printf_float+0x1a0>
 800489e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80048a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048a4:	4299      	cmp	r1, r3
 80048a6:	db05      	blt.n	80048b4 <_printf_float+0x1d0>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	6121      	str	r1, [r4, #16]
 80048ac:	07d8      	lsls	r0, r3, #31
 80048ae:	d5ea      	bpl.n	8004886 <_printf_float+0x1a2>
 80048b0:	1c4b      	adds	r3, r1, #1
 80048b2:	e7e7      	b.n	8004884 <_printf_float+0x1a0>
 80048b4:	2900      	cmp	r1, #0
 80048b6:	bfd4      	ite	le
 80048b8:	f1c1 0202 	rsble	r2, r1, #2
 80048bc:	2201      	movgt	r2, #1
 80048be:	4413      	add	r3, r2
 80048c0:	e7e0      	b.n	8004884 <_printf_float+0x1a0>
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	055a      	lsls	r2, r3, #21
 80048c6:	d407      	bmi.n	80048d8 <_printf_float+0x1f4>
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	4642      	mov	r2, r8
 80048cc:	4631      	mov	r1, r6
 80048ce:	4628      	mov	r0, r5
 80048d0:	47b8      	blx	r7
 80048d2:	3001      	adds	r0, #1
 80048d4:	d12c      	bne.n	8004930 <_printf_float+0x24c>
 80048d6:	e764      	b.n	80047a2 <_printf_float+0xbe>
 80048d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048dc:	f240 80e0 	bls.w	8004aa0 <_printf_float+0x3bc>
 80048e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048e4:	2200      	movs	r2, #0
 80048e6:	2300      	movs	r3, #0
 80048e8:	f7fc f8f6 	bl	8000ad8 <__aeabi_dcmpeq>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d034      	beq.n	800495a <_printf_float+0x276>
 80048f0:	4a37      	ldr	r2, [pc, #220]	; (80049d0 <_printf_float+0x2ec>)
 80048f2:	2301      	movs	r3, #1
 80048f4:	4631      	mov	r1, r6
 80048f6:	4628      	mov	r0, r5
 80048f8:	47b8      	blx	r7
 80048fa:	3001      	adds	r0, #1
 80048fc:	f43f af51 	beq.w	80047a2 <_printf_float+0xbe>
 8004900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004904:	429a      	cmp	r2, r3
 8004906:	db02      	blt.n	800490e <_printf_float+0x22a>
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	07d8      	lsls	r0, r3, #31
 800490c:	d510      	bpl.n	8004930 <_printf_float+0x24c>
 800490e:	ee18 3a10 	vmov	r3, s16
 8004912:	4652      	mov	r2, sl
 8004914:	4631      	mov	r1, r6
 8004916:	4628      	mov	r0, r5
 8004918:	47b8      	blx	r7
 800491a:	3001      	adds	r0, #1
 800491c:	f43f af41 	beq.w	80047a2 <_printf_float+0xbe>
 8004920:	f04f 0800 	mov.w	r8, #0
 8004924:	f104 091a 	add.w	r9, r4, #26
 8004928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800492a:	3b01      	subs	r3, #1
 800492c:	4543      	cmp	r3, r8
 800492e:	dc09      	bgt.n	8004944 <_printf_float+0x260>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	079b      	lsls	r3, r3, #30
 8004934:	f100 8107 	bmi.w	8004b46 <_printf_float+0x462>
 8004938:	68e0      	ldr	r0, [r4, #12]
 800493a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800493c:	4298      	cmp	r0, r3
 800493e:	bfb8      	it	lt
 8004940:	4618      	movlt	r0, r3
 8004942:	e730      	b.n	80047a6 <_printf_float+0xc2>
 8004944:	2301      	movs	r3, #1
 8004946:	464a      	mov	r2, r9
 8004948:	4631      	mov	r1, r6
 800494a:	4628      	mov	r0, r5
 800494c:	47b8      	blx	r7
 800494e:	3001      	adds	r0, #1
 8004950:	f43f af27 	beq.w	80047a2 <_printf_float+0xbe>
 8004954:	f108 0801 	add.w	r8, r8, #1
 8004958:	e7e6      	b.n	8004928 <_printf_float+0x244>
 800495a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800495c:	2b00      	cmp	r3, #0
 800495e:	dc39      	bgt.n	80049d4 <_printf_float+0x2f0>
 8004960:	4a1b      	ldr	r2, [pc, #108]	; (80049d0 <_printf_float+0x2ec>)
 8004962:	2301      	movs	r3, #1
 8004964:	4631      	mov	r1, r6
 8004966:	4628      	mov	r0, r5
 8004968:	47b8      	blx	r7
 800496a:	3001      	adds	r0, #1
 800496c:	f43f af19 	beq.w	80047a2 <_printf_float+0xbe>
 8004970:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004974:	4313      	orrs	r3, r2
 8004976:	d102      	bne.n	800497e <_printf_float+0x29a>
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	07d9      	lsls	r1, r3, #31
 800497c:	d5d8      	bpl.n	8004930 <_printf_float+0x24c>
 800497e:	ee18 3a10 	vmov	r3, s16
 8004982:	4652      	mov	r2, sl
 8004984:	4631      	mov	r1, r6
 8004986:	4628      	mov	r0, r5
 8004988:	47b8      	blx	r7
 800498a:	3001      	adds	r0, #1
 800498c:	f43f af09 	beq.w	80047a2 <_printf_float+0xbe>
 8004990:	f04f 0900 	mov.w	r9, #0
 8004994:	f104 0a1a 	add.w	sl, r4, #26
 8004998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800499a:	425b      	negs	r3, r3
 800499c:	454b      	cmp	r3, r9
 800499e:	dc01      	bgt.n	80049a4 <_printf_float+0x2c0>
 80049a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049a2:	e792      	b.n	80048ca <_printf_float+0x1e6>
 80049a4:	2301      	movs	r3, #1
 80049a6:	4652      	mov	r2, sl
 80049a8:	4631      	mov	r1, r6
 80049aa:	4628      	mov	r0, r5
 80049ac:	47b8      	blx	r7
 80049ae:	3001      	adds	r0, #1
 80049b0:	f43f aef7 	beq.w	80047a2 <_printf_float+0xbe>
 80049b4:	f109 0901 	add.w	r9, r9, #1
 80049b8:	e7ee      	b.n	8004998 <_printf_float+0x2b4>
 80049ba:	bf00      	nop
 80049bc:	7fefffff 	.word	0x7fefffff
 80049c0:	080073a0 	.word	0x080073a0
 80049c4:	080073a4 	.word	0x080073a4
 80049c8:	080073a8 	.word	0x080073a8
 80049cc:	080073ac 	.word	0x080073ac
 80049d0:	080073b0 	.word	0x080073b0
 80049d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049d8:	429a      	cmp	r2, r3
 80049da:	bfa8      	it	ge
 80049dc:	461a      	movge	r2, r3
 80049de:	2a00      	cmp	r2, #0
 80049e0:	4691      	mov	r9, r2
 80049e2:	dc37      	bgt.n	8004a54 <_printf_float+0x370>
 80049e4:	f04f 0b00 	mov.w	fp, #0
 80049e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049ec:	f104 021a 	add.w	r2, r4, #26
 80049f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049f2:	9305      	str	r3, [sp, #20]
 80049f4:	eba3 0309 	sub.w	r3, r3, r9
 80049f8:	455b      	cmp	r3, fp
 80049fa:	dc33      	bgt.n	8004a64 <_printf_float+0x380>
 80049fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a00:	429a      	cmp	r2, r3
 8004a02:	db3b      	blt.n	8004a7c <_printf_float+0x398>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	07da      	lsls	r2, r3, #31
 8004a08:	d438      	bmi.n	8004a7c <_printf_float+0x398>
 8004a0a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004a0e:	eba2 0903 	sub.w	r9, r2, r3
 8004a12:	9b05      	ldr	r3, [sp, #20]
 8004a14:	1ad2      	subs	r2, r2, r3
 8004a16:	4591      	cmp	r9, r2
 8004a18:	bfa8      	it	ge
 8004a1a:	4691      	movge	r9, r2
 8004a1c:	f1b9 0f00 	cmp.w	r9, #0
 8004a20:	dc35      	bgt.n	8004a8e <_printf_float+0x3aa>
 8004a22:	f04f 0800 	mov.w	r8, #0
 8004a26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a2a:	f104 0a1a 	add.w	sl, r4, #26
 8004a2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	eba3 0309 	sub.w	r3, r3, r9
 8004a38:	4543      	cmp	r3, r8
 8004a3a:	f77f af79 	ble.w	8004930 <_printf_float+0x24c>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	4652      	mov	r2, sl
 8004a42:	4631      	mov	r1, r6
 8004a44:	4628      	mov	r0, r5
 8004a46:	47b8      	blx	r7
 8004a48:	3001      	adds	r0, #1
 8004a4a:	f43f aeaa 	beq.w	80047a2 <_printf_float+0xbe>
 8004a4e:	f108 0801 	add.w	r8, r8, #1
 8004a52:	e7ec      	b.n	8004a2e <_printf_float+0x34a>
 8004a54:	4613      	mov	r3, r2
 8004a56:	4631      	mov	r1, r6
 8004a58:	4642      	mov	r2, r8
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	47b8      	blx	r7
 8004a5e:	3001      	adds	r0, #1
 8004a60:	d1c0      	bne.n	80049e4 <_printf_float+0x300>
 8004a62:	e69e      	b.n	80047a2 <_printf_float+0xbe>
 8004a64:	2301      	movs	r3, #1
 8004a66:	4631      	mov	r1, r6
 8004a68:	4628      	mov	r0, r5
 8004a6a:	9205      	str	r2, [sp, #20]
 8004a6c:	47b8      	blx	r7
 8004a6e:	3001      	adds	r0, #1
 8004a70:	f43f ae97 	beq.w	80047a2 <_printf_float+0xbe>
 8004a74:	9a05      	ldr	r2, [sp, #20]
 8004a76:	f10b 0b01 	add.w	fp, fp, #1
 8004a7a:	e7b9      	b.n	80049f0 <_printf_float+0x30c>
 8004a7c:	ee18 3a10 	vmov	r3, s16
 8004a80:	4652      	mov	r2, sl
 8004a82:	4631      	mov	r1, r6
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b8      	blx	r7
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d1be      	bne.n	8004a0a <_printf_float+0x326>
 8004a8c:	e689      	b.n	80047a2 <_printf_float+0xbe>
 8004a8e:	9a05      	ldr	r2, [sp, #20]
 8004a90:	464b      	mov	r3, r9
 8004a92:	4442      	add	r2, r8
 8004a94:	4631      	mov	r1, r6
 8004a96:	4628      	mov	r0, r5
 8004a98:	47b8      	blx	r7
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	d1c1      	bne.n	8004a22 <_printf_float+0x33e>
 8004a9e:	e680      	b.n	80047a2 <_printf_float+0xbe>
 8004aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aa2:	2a01      	cmp	r2, #1
 8004aa4:	dc01      	bgt.n	8004aaa <_printf_float+0x3c6>
 8004aa6:	07db      	lsls	r3, r3, #31
 8004aa8:	d53a      	bpl.n	8004b20 <_printf_float+0x43c>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4642      	mov	r2, r8
 8004aae:	4631      	mov	r1, r6
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	47b8      	blx	r7
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	f43f ae74 	beq.w	80047a2 <_printf_float+0xbe>
 8004aba:	ee18 3a10 	vmov	r3, s16
 8004abe:	4652      	mov	r2, sl
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b8      	blx	r7
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	f43f ae6b 	beq.w	80047a2 <_printf_float+0xbe>
 8004acc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004ad8:	f7fb fffe 	bl	8000ad8 <__aeabi_dcmpeq>
 8004adc:	b9d8      	cbnz	r0, 8004b16 <_printf_float+0x432>
 8004ade:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004ae2:	f108 0201 	add.w	r2, r8, #1
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	4628      	mov	r0, r5
 8004aea:	47b8      	blx	r7
 8004aec:	3001      	adds	r0, #1
 8004aee:	d10e      	bne.n	8004b0e <_printf_float+0x42a>
 8004af0:	e657      	b.n	80047a2 <_printf_float+0xbe>
 8004af2:	2301      	movs	r3, #1
 8004af4:	4652      	mov	r2, sl
 8004af6:	4631      	mov	r1, r6
 8004af8:	4628      	mov	r0, r5
 8004afa:	47b8      	blx	r7
 8004afc:	3001      	adds	r0, #1
 8004afe:	f43f ae50 	beq.w	80047a2 <_printf_float+0xbe>
 8004b02:	f108 0801 	add.w	r8, r8, #1
 8004b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	4543      	cmp	r3, r8
 8004b0c:	dcf1      	bgt.n	8004af2 <_printf_float+0x40e>
 8004b0e:	464b      	mov	r3, r9
 8004b10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b14:	e6da      	b.n	80048cc <_printf_float+0x1e8>
 8004b16:	f04f 0800 	mov.w	r8, #0
 8004b1a:	f104 0a1a 	add.w	sl, r4, #26
 8004b1e:	e7f2      	b.n	8004b06 <_printf_float+0x422>
 8004b20:	2301      	movs	r3, #1
 8004b22:	4642      	mov	r2, r8
 8004b24:	e7df      	b.n	8004ae6 <_printf_float+0x402>
 8004b26:	2301      	movs	r3, #1
 8004b28:	464a      	mov	r2, r9
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b8      	blx	r7
 8004b30:	3001      	adds	r0, #1
 8004b32:	f43f ae36 	beq.w	80047a2 <_printf_float+0xbe>
 8004b36:	f108 0801 	add.w	r8, r8, #1
 8004b3a:	68e3      	ldr	r3, [r4, #12]
 8004b3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b3e:	1a5b      	subs	r3, r3, r1
 8004b40:	4543      	cmp	r3, r8
 8004b42:	dcf0      	bgt.n	8004b26 <_printf_float+0x442>
 8004b44:	e6f8      	b.n	8004938 <_printf_float+0x254>
 8004b46:	f04f 0800 	mov.w	r8, #0
 8004b4a:	f104 0919 	add.w	r9, r4, #25
 8004b4e:	e7f4      	b.n	8004b3a <_printf_float+0x456>

08004b50 <_printf_common>:
 8004b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b54:	4616      	mov	r6, r2
 8004b56:	4699      	mov	r9, r3
 8004b58:	688a      	ldr	r2, [r1, #8]
 8004b5a:	690b      	ldr	r3, [r1, #16]
 8004b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b60:	4293      	cmp	r3, r2
 8004b62:	bfb8      	it	lt
 8004b64:	4613      	movlt	r3, r2
 8004b66:	6033      	str	r3, [r6, #0]
 8004b68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b6c:	4607      	mov	r7, r0
 8004b6e:	460c      	mov	r4, r1
 8004b70:	b10a      	cbz	r2, 8004b76 <_printf_common+0x26>
 8004b72:	3301      	adds	r3, #1
 8004b74:	6033      	str	r3, [r6, #0]
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	0699      	lsls	r1, r3, #26
 8004b7a:	bf42      	ittt	mi
 8004b7c:	6833      	ldrmi	r3, [r6, #0]
 8004b7e:	3302      	addmi	r3, #2
 8004b80:	6033      	strmi	r3, [r6, #0]
 8004b82:	6825      	ldr	r5, [r4, #0]
 8004b84:	f015 0506 	ands.w	r5, r5, #6
 8004b88:	d106      	bne.n	8004b98 <_printf_common+0x48>
 8004b8a:	f104 0a19 	add.w	sl, r4, #25
 8004b8e:	68e3      	ldr	r3, [r4, #12]
 8004b90:	6832      	ldr	r2, [r6, #0]
 8004b92:	1a9b      	subs	r3, r3, r2
 8004b94:	42ab      	cmp	r3, r5
 8004b96:	dc26      	bgt.n	8004be6 <_printf_common+0x96>
 8004b98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b9c:	1e13      	subs	r3, r2, #0
 8004b9e:	6822      	ldr	r2, [r4, #0]
 8004ba0:	bf18      	it	ne
 8004ba2:	2301      	movne	r3, #1
 8004ba4:	0692      	lsls	r2, r2, #26
 8004ba6:	d42b      	bmi.n	8004c00 <_printf_common+0xb0>
 8004ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bac:	4649      	mov	r1, r9
 8004bae:	4638      	mov	r0, r7
 8004bb0:	47c0      	blx	r8
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d01e      	beq.n	8004bf4 <_printf_common+0xa4>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	6922      	ldr	r2, [r4, #16]
 8004bba:	f003 0306 	and.w	r3, r3, #6
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	bf02      	ittt	eq
 8004bc2:	68e5      	ldreq	r5, [r4, #12]
 8004bc4:	6833      	ldreq	r3, [r6, #0]
 8004bc6:	1aed      	subeq	r5, r5, r3
 8004bc8:	68a3      	ldr	r3, [r4, #8]
 8004bca:	bf0c      	ite	eq
 8004bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bd0:	2500      	movne	r5, #0
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	bfc4      	itt	gt
 8004bd6:	1a9b      	subgt	r3, r3, r2
 8004bd8:	18ed      	addgt	r5, r5, r3
 8004bda:	2600      	movs	r6, #0
 8004bdc:	341a      	adds	r4, #26
 8004bde:	42b5      	cmp	r5, r6
 8004be0:	d11a      	bne.n	8004c18 <_printf_common+0xc8>
 8004be2:	2000      	movs	r0, #0
 8004be4:	e008      	b.n	8004bf8 <_printf_common+0xa8>
 8004be6:	2301      	movs	r3, #1
 8004be8:	4652      	mov	r2, sl
 8004bea:	4649      	mov	r1, r9
 8004bec:	4638      	mov	r0, r7
 8004bee:	47c0      	blx	r8
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d103      	bne.n	8004bfc <_printf_common+0xac>
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bfc:	3501      	adds	r5, #1
 8004bfe:	e7c6      	b.n	8004b8e <_printf_common+0x3e>
 8004c00:	18e1      	adds	r1, r4, r3
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	2030      	movs	r0, #48	; 0x30
 8004c06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c0a:	4422      	add	r2, r4
 8004c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c14:	3302      	adds	r3, #2
 8004c16:	e7c7      	b.n	8004ba8 <_printf_common+0x58>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	4638      	mov	r0, r7
 8004c20:	47c0      	blx	r8
 8004c22:	3001      	adds	r0, #1
 8004c24:	d0e6      	beq.n	8004bf4 <_printf_common+0xa4>
 8004c26:	3601      	adds	r6, #1
 8004c28:	e7d9      	b.n	8004bde <_printf_common+0x8e>
	...

08004c2c <_printf_i>:
 8004c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c30:	7e0f      	ldrb	r7, [r1, #24]
 8004c32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c34:	2f78      	cmp	r7, #120	; 0x78
 8004c36:	4691      	mov	r9, r2
 8004c38:	4680      	mov	r8, r0
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	469a      	mov	sl, r3
 8004c3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c42:	d807      	bhi.n	8004c54 <_printf_i+0x28>
 8004c44:	2f62      	cmp	r7, #98	; 0x62
 8004c46:	d80a      	bhi.n	8004c5e <_printf_i+0x32>
 8004c48:	2f00      	cmp	r7, #0
 8004c4a:	f000 80d4 	beq.w	8004df6 <_printf_i+0x1ca>
 8004c4e:	2f58      	cmp	r7, #88	; 0x58
 8004c50:	f000 80c0 	beq.w	8004dd4 <_printf_i+0x1a8>
 8004c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c5c:	e03a      	b.n	8004cd4 <_printf_i+0xa8>
 8004c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c62:	2b15      	cmp	r3, #21
 8004c64:	d8f6      	bhi.n	8004c54 <_printf_i+0x28>
 8004c66:	a101      	add	r1, pc, #4	; (adr r1, 8004c6c <_printf_i+0x40>)
 8004c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c6c:	08004cc5 	.word	0x08004cc5
 8004c70:	08004cd9 	.word	0x08004cd9
 8004c74:	08004c55 	.word	0x08004c55
 8004c78:	08004c55 	.word	0x08004c55
 8004c7c:	08004c55 	.word	0x08004c55
 8004c80:	08004c55 	.word	0x08004c55
 8004c84:	08004cd9 	.word	0x08004cd9
 8004c88:	08004c55 	.word	0x08004c55
 8004c8c:	08004c55 	.word	0x08004c55
 8004c90:	08004c55 	.word	0x08004c55
 8004c94:	08004c55 	.word	0x08004c55
 8004c98:	08004ddd 	.word	0x08004ddd
 8004c9c:	08004d05 	.word	0x08004d05
 8004ca0:	08004d97 	.word	0x08004d97
 8004ca4:	08004c55 	.word	0x08004c55
 8004ca8:	08004c55 	.word	0x08004c55
 8004cac:	08004dff 	.word	0x08004dff
 8004cb0:	08004c55 	.word	0x08004c55
 8004cb4:	08004d05 	.word	0x08004d05
 8004cb8:	08004c55 	.word	0x08004c55
 8004cbc:	08004c55 	.word	0x08004c55
 8004cc0:	08004d9f 	.word	0x08004d9f
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	1d1a      	adds	r2, r3, #4
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	602a      	str	r2, [r5, #0]
 8004ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e09f      	b.n	8004e18 <_printf_i+0x1ec>
 8004cd8:	6820      	ldr	r0, [r4, #0]
 8004cda:	682b      	ldr	r3, [r5, #0]
 8004cdc:	0607      	lsls	r7, r0, #24
 8004cde:	f103 0104 	add.w	r1, r3, #4
 8004ce2:	6029      	str	r1, [r5, #0]
 8004ce4:	d501      	bpl.n	8004cea <_printf_i+0xbe>
 8004ce6:	681e      	ldr	r6, [r3, #0]
 8004ce8:	e003      	b.n	8004cf2 <_printf_i+0xc6>
 8004cea:	0646      	lsls	r6, r0, #25
 8004cec:	d5fb      	bpl.n	8004ce6 <_printf_i+0xba>
 8004cee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004cf2:	2e00      	cmp	r6, #0
 8004cf4:	da03      	bge.n	8004cfe <_printf_i+0xd2>
 8004cf6:	232d      	movs	r3, #45	; 0x2d
 8004cf8:	4276      	negs	r6, r6
 8004cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cfe:	485a      	ldr	r0, [pc, #360]	; (8004e68 <_printf_i+0x23c>)
 8004d00:	230a      	movs	r3, #10
 8004d02:	e012      	b.n	8004d2a <_printf_i+0xfe>
 8004d04:	682b      	ldr	r3, [r5, #0]
 8004d06:	6820      	ldr	r0, [r4, #0]
 8004d08:	1d19      	adds	r1, r3, #4
 8004d0a:	6029      	str	r1, [r5, #0]
 8004d0c:	0605      	lsls	r5, r0, #24
 8004d0e:	d501      	bpl.n	8004d14 <_printf_i+0xe8>
 8004d10:	681e      	ldr	r6, [r3, #0]
 8004d12:	e002      	b.n	8004d1a <_printf_i+0xee>
 8004d14:	0641      	lsls	r1, r0, #25
 8004d16:	d5fb      	bpl.n	8004d10 <_printf_i+0xe4>
 8004d18:	881e      	ldrh	r6, [r3, #0]
 8004d1a:	4853      	ldr	r0, [pc, #332]	; (8004e68 <_printf_i+0x23c>)
 8004d1c:	2f6f      	cmp	r7, #111	; 0x6f
 8004d1e:	bf0c      	ite	eq
 8004d20:	2308      	moveq	r3, #8
 8004d22:	230a      	movne	r3, #10
 8004d24:	2100      	movs	r1, #0
 8004d26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d2a:	6865      	ldr	r5, [r4, #4]
 8004d2c:	60a5      	str	r5, [r4, #8]
 8004d2e:	2d00      	cmp	r5, #0
 8004d30:	bfa2      	ittt	ge
 8004d32:	6821      	ldrge	r1, [r4, #0]
 8004d34:	f021 0104 	bicge.w	r1, r1, #4
 8004d38:	6021      	strge	r1, [r4, #0]
 8004d3a:	b90e      	cbnz	r6, 8004d40 <_printf_i+0x114>
 8004d3c:	2d00      	cmp	r5, #0
 8004d3e:	d04b      	beq.n	8004dd8 <_printf_i+0x1ac>
 8004d40:	4615      	mov	r5, r2
 8004d42:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d46:	fb03 6711 	mls	r7, r3, r1, r6
 8004d4a:	5dc7      	ldrb	r7, [r0, r7]
 8004d4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d50:	4637      	mov	r7, r6
 8004d52:	42bb      	cmp	r3, r7
 8004d54:	460e      	mov	r6, r1
 8004d56:	d9f4      	bls.n	8004d42 <_printf_i+0x116>
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d10b      	bne.n	8004d74 <_printf_i+0x148>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	07de      	lsls	r6, r3, #31
 8004d60:	d508      	bpl.n	8004d74 <_printf_i+0x148>
 8004d62:	6923      	ldr	r3, [r4, #16]
 8004d64:	6861      	ldr	r1, [r4, #4]
 8004d66:	4299      	cmp	r1, r3
 8004d68:	bfde      	ittt	le
 8004d6a:	2330      	movle	r3, #48	; 0x30
 8004d6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d74:	1b52      	subs	r2, r2, r5
 8004d76:	6122      	str	r2, [r4, #16]
 8004d78:	f8cd a000 	str.w	sl, [sp]
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	aa03      	add	r2, sp, #12
 8004d80:	4621      	mov	r1, r4
 8004d82:	4640      	mov	r0, r8
 8004d84:	f7ff fee4 	bl	8004b50 <_printf_common>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d14a      	bne.n	8004e22 <_printf_i+0x1f6>
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	b004      	add	sp, #16
 8004d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	f043 0320 	orr.w	r3, r3, #32
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	4833      	ldr	r0, [pc, #204]	; (8004e6c <_printf_i+0x240>)
 8004da0:	2778      	movs	r7, #120	; 0x78
 8004da2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	6829      	ldr	r1, [r5, #0]
 8004daa:	061f      	lsls	r7, r3, #24
 8004dac:	f851 6b04 	ldr.w	r6, [r1], #4
 8004db0:	d402      	bmi.n	8004db8 <_printf_i+0x18c>
 8004db2:	065f      	lsls	r7, r3, #25
 8004db4:	bf48      	it	mi
 8004db6:	b2b6      	uxthmi	r6, r6
 8004db8:	07df      	lsls	r7, r3, #31
 8004dba:	bf48      	it	mi
 8004dbc:	f043 0320 	orrmi.w	r3, r3, #32
 8004dc0:	6029      	str	r1, [r5, #0]
 8004dc2:	bf48      	it	mi
 8004dc4:	6023      	strmi	r3, [r4, #0]
 8004dc6:	b91e      	cbnz	r6, 8004dd0 <_printf_i+0x1a4>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	f023 0320 	bic.w	r3, r3, #32
 8004dce:	6023      	str	r3, [r4, #0]
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	e7a7      	b.n	8004d24 <_printf_i+0xf8>
 8004dd4:	4824      	ldr	r0, [pc, #144]	; (8004e68 <_printf_i+0x23c>)
 8004dd6:	e7e4      	b.n	8004da2 <_printf_i+0x176>
 8004dd8:	4615      	mov	r5, r2
 8004dda:	e7bd      	b.n	8004d58 <_printf_i+0x12c>
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	6826      	ldr	r6, [r4, #0]
 8004de0:	6961      	ldr	r1, [r4, #20]
 8004de2:	1d18      	adds	r0, r3, #4
 8004de4:	6028      	str	r0, [r5, #0]
 8004de6:	0635      	lsls	r5, r6, #24
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	d501      	bpl.n	8004df0 <_printf_i+0x1c4>
 8004dec:	6019      	str	r1, [r3, #0]
 8004dee:	e002      	b.n	8004df6 <_printf_i+0x1ca>
 8004df0:	0670      	lsls	r0, r6, #25
 8004df2:	d5fb      	bpl.n	8004dec <_printf_i+0x1c0>
 8004df4:	8019      	strh	r1, [r3, #0]
 8004df6:	2300      	movs	r3, #0
 8004df8:	6123      	str	r3, [r4, #16]
 8004dfa:	4615      	mov	r5, r2
 8004dfc:	e7bc      	b.n	8004d78 <_printf_i+0x14c>
 8004dfe:	682b      	ldr	r3, [r5, #0]
 8004e00:	1d1a      	adds	r2, r3, #4
 8004e02:	602a      	str	r2, [r5, #0]
 8004e04:	681d      	ldr	r5, [r3, #0]
 8004e06:	6862      	ldr	r2, [r4, #4]
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f7fb f9e8 	bl	80001e0 <memchr>
 8004e10:	b108      	cbz	r0, 8004e16 <_printf_i+0x1ea>
 8004e12:	1b40      	subs	r0, r0, r5
 8004e14:	6060      	str	r0, [r4, #4]
 8004e16:	6863      	ldr	r3, [r4, #4]
 8004e18:	6123      	str	r3, [r4, #16]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e20:	e7aa      	b.n	8004d78 <_printf_i+0x14c>
 8004e22:	6923      	ldr	r3, [r4, #16]
 8004e24:	462a      	mov	r2, r5
 8004e26:	4649      	mov	r1, r9
 8004e28:	4640      	mov	r0, r8
 8004e2a:	47d0      	blx	sl
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d0ad      	beq.n	8004d8c <_printf_i+0x160>
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	079b      	lsls	r3, r3, #30
 8004e34:	d413      	bmi.n	8004e5e <_printf_i+0x232>
 8004e36:	68e0      	ldr	r0, [r4, #12]
 8004e38:	9b03      	ldr	r3, [sp, #12]
 8004e3a:	4298      	cmp	r0, r3
 8004e3c:	bfb8      	it	lt
 8004e3e:	4618      	movlt	r0, r3
 8004e40:	e7a6      	b.n	8004d90 <_printf_i+0x164>
 8004e42:	2301      	movs	r3, #1
 8004e44:	4632      	mov	r2, r6
 8004e46:	4649      	mov	r1, r9
 8004e48:	4640      	mov	r0, r8
 8004e4a:	47d0      	blx	sl
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d09d      	beq.n	8004d8c <_printf_i+0x160>
 8004e50:	3501      	adds	r5, #1
 8004e52:	68e3      	ldr	r3, [r4, #12]
 8004e54:	9903      	ldr	r1, [sp, #12]
 8004e56:	1a5b      	subs	r3, r3, r1
 8004e58:	42ab      	cmp	r3, r5
 8004e5a:	dcf2      	bgt.n	8004e42 <_printf_i+0x216>
 8004e5c:	e7eb      	b.n	8004e36 <_printf_i+0x20a>
 8004e5e:	2500      	movs	r5, #0
 8004e60:	f104 0619 	add.w	r6, r4, #25
 8004e64:	e7f5      	b.n	8004e52 <_printf_i+0x226>
 8004e66:	bf00      	nop
 8004e68:	080073b2 	.word	0x080073b2
 8004e6c:	080073c3 	.word	0x080073c3

08004e70 <std>:
 8004e70:	2300      	movs	r3, #0
 8004e72:	b510      	push	{r4, lr}
 8004e74:	4604      	mov	r4, r0
 8004e76:	e9c0 3300 	strd	r3, r3, [r0]
 8004e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e7e:	6083      	str	r3, [r0, #8]
 8004e80:	8181      	strh	r1, [r0, #12]
 8004e82:	6643      	str	r3, [r0, #100]	; 0x64
 8004e84:	81c2      	strh	r2, [r0, #14]
 8004e86:	6183      	str	r3, [r0, #24]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	305c      	adds	r0, #92	; 0x5c
 8004e8e:	f000 f914 	bl	80050ba <memset>
 8004e92:	4b0d      	ldr	r3, [pc, #52]	; (8004ec8 <std+0x58>)
 8004e94:	6263      	str	r3, [r4, #36]	; 0x24
 8004e96:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <std+0x5c>)
 8004e98:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <std+0x60>)
 8004e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <std+0x64>)
 8004ea0:	6323      	str	r3, [r4, #48]	; 0x30
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <std+0x68>)
 8004ea4:	6224      	str	r4, [r4, #32]
 8004ea6:	429c      	cmp	r4, r3
 8004ea8:	d006      	beq.n	8004eb8 <std+0x48>
 8004eaa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004eae:	4294      	cmp	r4, r2
 8004eb0:	d002      	beq.n	8004eb8 <std+0x48>
 8004eb2:	33d0      	adds	r3, #208	; 0xd0
 8004eb4:	429c      	cmp	r4, r3
 8004eb6:	d105      	bne.n	8004ec4 <std+0x54>
 8004eb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec0:	f000 b978 	b.w	80051b4 <__retarget_lock_init_recursive>
 8004ec4:	bd10      	pop	{r4, pc}
 8004ec6:	bf00      	nop
 8004ec8:	08005035 	.word	0x08005035
 8004ecc:	08005057 	.word	0x08005057
 8004ed0:	0800508f 	.word	0x0800508f
 8004ed4:	080050b3 	.word	0x080050b3
 8004ed8:	2000030c 	.word	0x2000030c

08004edc <stdio_exit_handler>:
 8004edc:	4a02      	ldr	r2, [pc, #8]	; (8004ee8 <stdio_exit_handler+0xc>)
 8004ede:	4903      	ldr	r1, [pc, #12]	; (8004eec <stdio_exit_handler+0x10>)
 8004ee0:	4803      	ldr	r0, [pc, #12]	; (8004ef0 <stdio_exit_handler+0x14>)
 8004ee2:	f000 b869 	b.w	8004fb8 <_fwalk_sglue>
 8004ee6:	bf00      	nop
 8004ee8:	20000014 	.word	0x20000014
 8004eec:	08006b69 	.word	0x08006b69
 8004ef0:	20000020 	.word	0x20000020

08004ef4 <cleanup_stdio>:
 8004ef4:	6841      	ldr	r1, [r0, #4]
 8004ef6:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <cleanup_stdio+0x34>)
 8004ef8:	4299      	cmp	r1, r3
 8004efa:	b510      	push	{r4, lr}
 8004efc:	4604      	mov	r4, r0
 8004efe:	d001      	beq.n	8004f04 <cleanup_stdio+0x10>
 8004f00:	f001 fe32 	bl	8006b68 <_fflush_r>
 8004f04:	68a1      	ldr	r1, [r4, #8]
 8004f06:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <cleanup_stdio+0x38>)
 8004f08:	4299      	cmp	r1, r3
 8004f0a:	d002      	beq.n	8004f12 <cleanup_stdio+0x1e>
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f001 fe2b 	bl	8006b68 <_fflush_r>
 8004f12:	68e1      	ldr	r1, [r4, #12]
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <cleanup_stdio+0x3c>)
 8004f16:	4299      	cmp	r1, r3
 8004f18:	d004      	beq.n	8004f24 <cleanup_stdio+0x30>
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f20:	f001 be22 	b.w	8006b68 <_fflush_r>
 8004f24:	bd10      	pop	{r4, pc}
 8004f26:	bf00      	nop
 8004f28:	2000030c 	.word	0x2000030c
 8004f2c:	20000374 	.word	0x20000374
 8004f30:	200003dc 	.word	0x200003dc

08004f34 <global_stdio_init.part.0>:
 8004f34:	b510      	push	{r4, lr}
 8004f36:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <global_stdio_init.part.0+0x30>)
 8004f38:	4c0b      	ldr	r4, [pc, #44]	; (8004f68 <global_stdio_init.part.0+0x34>)
 8004f3a:	4a0c      	ldr	r2, [pc, #48]	; (8004f6c <global_stdio_init.part.0+0x38>)
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	4620      	mov	r0, r4
 8004f40:	2200      	movs	r2, #0
 8004f42:	2104      	movs	r1, #4
 8004f44:	f7ff ff94 	bl	8004e70 <std>
 8004f48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	2109      	movs	r1, #9
 8004f50:	f7ff ff8e 	bl	8004e70 <std>
 8004f54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004f58:	2202      	movs	r2, #2
 8004f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f5e:	2112      	movs	r1, #18
 8004f60:	f7ff bf86 	b.w	8004e70 <std>
 8004f64:	20000444 	.word	0x20000444
 8004f68:	2000030c 	.word	0x2000030c
 8004f6c:	08004edd 	.word	0x08004edd

08004f70 <__sfp_lock_acquire>:
 8004f70:	4801      	ldr	r0, [pc, #4]	; (8004f78 <__sfp_lock_acquire+0x8>)
 8004f72:	f000 b920 	b.w	80051b6 <__retarget_lock_acquire_recursive>
 8004f76:	bf00      	nop
 8004f78:	2000044d 	.word	0x2000044d

08004f7c <__sfp_lock_release>:
 8004f7c:	4801      	ldr	r0, [pc, #4]	; (8004f84 <__sfp_lock_release+0x8>)
 8004f7e:	f000 b91b 	b.w	80051b8 <__retarget_lock_release_recursive>
 8004f82:	bf00      	nop
 8004f84:	2000044d 	.word	0x2000044d

08004f88 <__sinit>:
 8004f88:	b510      	push	{r4, lr}
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	f7ff fff0 	bl	8004f70 <__sfp_lock_acquire>
 8004f90:	6a23      	ldr	r3, [r4, #32]
 8004f92:	b11b      	cbz	r3, 8004f9c <__sinit+0x14>
 8004f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f98:	f7ff bff0 	b.w	8004f7c <__sfp_lock_release>
 8004f9c:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <__sinit+0x28>)
 8004f9e:	6223      	str	r3, [r4, #32]
 8004fa0:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <__sinit+0x2c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1f5      	bne.n	8004f94 <__sinit+0xc>
 8004fa8:	f7ff ffc4 	bl	8004f34 <global_stdio_init.part.0>
 8004fac:	e7f2      	b.n	8004f94 <__sinit+0xc>
 8004fae:	bf00      	nop
 8004fb0:	08004ef5 	.word	0x08004ef5
 8004fb4:	20000444 	.word	0x20000444

08004fb8 <_fwalk_sglue>:
 8004fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fbc:	4607      	mov	r7, r0
 8004fbe:	4688      	mov	r8, r1
 8004fc0:	4614      	mov	r4, r2
 8004fc2:	2600      	movs	r6, #0
 8004fc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fc8:	f1b9 0901 	subs.w	r9, r9, #1
 8004fcc:	d505      	bpl.n	8004fda <_fwalk_sglue+0x22>
 8004fce:	6824      	ldr	r4, [r4, #0]
 8004fd0:	2c00      	cmp	r4, #0
 8004fd2:	d1f7      	bne.n	8004fc4 <_fwalk_sglue+0xc>
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fda:	89ab      	ldrh	r3, [r5, #12]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d907      	bls.n	8004ff0 <_fwalk_sglue+0x38>
 8004fe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	d003      	beq.n	8004ff0 <_fwalk_sglue+0x38>
 8004fe8:	4629      	mov	r1, r5
 8004fea:	4638      	mov	r0, r7
 8004fec:	47c0      	blx	r8
 8004fee:	4306      	orrs	r6, r0
 8004ff0:	3568      	adds	r5, #104	; 0x68
 8004ff2:	e7e9      	b.n	8004fc8 <_fwalk_sglue+0x10>

08004ff4 <siprintf>:
 8004ff4:	b40e      	push	{r1, r2, r3}
 8004ff6:	b500      	push	{lr}
 8004ff8:	b09c      	sub	sp, #112	; 0x70
 8004ffa:	ab1d      	add	r3, sp, #116	; 0x74
 8004ffc:	9002      	str	r0, [sp, #8]
 8004ffe:	9006      	str	r0, [sp, #24]
 8005000:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005004:	4809      	ldr	r0, [pc, #36]	; (800502c <siprintf+0x38>)
 8005006:	9107      	str	r1, [sp, #28]
 8005008:	9104      	str	r1, [sp, #16]
 800500a:	4909      	ldr	r1, [pc, #36]	; (8005030 <siprintf+0x3c>)
 800500c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005010:	9105      	str	r1, [sp, #20]
 8005012:	6800      	ldr	r0, [r0, #0]
 8005014:	9301      	str	r3, [sp, #4]
 8005016:	a902      	add	r1, sp, #8
 8005018:	f001 fc22 	bl	8006860 <_svfiprintf_r>
 800501c:	9b02      	ldr	r3, [sp, #8]
 800501e:	2200      	movs	r2, #0
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	b01c      	add	sp, #112	; 0x70
 8005024:	f85d eb04 	ldr.w	lr, [sp], #4
 8005028:	b003      	add	sp, #12
 800502a:	4770      	bx	lr
 800502c:	2000006c 	.word	0x2000006c
 8005030:	ffff0208 	.word	0xffff0208

08005034 <__sread>:
 8005034:	b510      	push	{r4, lr}
 8005036:	460c      	mov	r4, r1
 8005038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503c:	f000 f86c 	bl	8005118 <_read_r>
 8005040:	2800      	cmp	r0, #0
 8005042:	bfab      	itete	ge
 8005044:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005046:	89a3      	ldrhlt	r3, [r4, #12]
 8005048:	181b      	addge	r3, r3, r0
 800504a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800504e:	bfac      	ite	ge
 8005050:	6563      	strge	r3, [r4, #84]	; 0x54
 8005052:	81a3      	strhlt	r3, [r4, #12]
 8005054:	bd10      	pop	{r4, pc}

08005056 <__swrite>:
 8005056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800505a:	461f      	mov	r7, r3
 800505c:	898b      	ldrh	r3, [r1, #12]
 800505e:	05db      	lsls	r3, r3, #23
 8005060:	4605      	mov	r5, r0
 8005062:	460c      	mov	r4, r1
 8005064:	4616      	mov	r6, r2
 8005066:	d505      	bpl.n	8005074 <__swrite+0x1e>
 8005068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800506c:	2302      	movs	r3, #2
 800506e:	2200      	movs	r2, #0
 8005070:	f000 f840 	bl	80050f4 <_lseek_r>
 8005074:	89a3      	ldrh	r3, [r4, #12]
 8005076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800507a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800507e:	81a3      	strh	r3, [r4, #12]
 8005080:	4632      	mov	r2, r6
 8005082:	463b      	mov	r3, r7
 8005084:	4628      	mov	r0, r5
 8005086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800508a:	f000 b857 	b.w	800513c <_write_r>

0800508e <__sseek>:
 800508e:	b510      	push	{r4, lr}
 8005090:	460c      	mov	r4, r1
 8005092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005096:	f000 f82d 	bl	80050f4 <_lseek_r>
 800509a:	1c43      	adds	r3, r0, #1
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	bf15      	itete	ne
 80050a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80050a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050aa:	81a3      	strheq	r3, [r4, #12]
 80050ac:	bf18      	it	ne
 80050ae:	81a3      	strhne	r3, [r4, #12]
 80050b0:	bd10      	pop	{r4, pc}

080050b2 <__sclose>:
 80050b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b6:	f000 b80d 	b.w	80050d4 <_close_r>

080050ba <memset>:
 80050ba:	4402      	add	r2, r0
 80050bc:	4603      	mov	r3, r0
 80050be:	4293      	cmp	r3, r2
 80050c0:	d100      	bne.n	80050c4 <memset+0xa>
 80050c2:	4770      	bx	lr
 80050c4:	f803 1b01 	strb.w	r1, [r3], #1
 80050c8:	e7f9      	b.n	80050be <memset+0x4>
	...

080050cc <_localeconv_r>:
 80050cc:	4800      	ldr	r0, [pc, #0]	; (80050d0 <_localeconv_r+0x4>)
 80050ce:	4770      	bx	lr
 80050d0:	20000160 	.word	0x20000160

080050d4 <_close_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4d06      	ldr	r5, [pc, #24]	; (80050f0 <_close_r+0x1c>)
 80050d8:	2300      	movs	r3, #0
 80050da:	4604      	mov	r4, r0
 80050dc:	4608      	mov	r0, r1
 80050de:	602b      	str	r3, [r5, #0]
 80050e0:	f7fc fa6b 	bl	80015ba <_close>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d102      	bne.n	80050ee <_close_r+0x1a>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	b103      	cbz	r3, 80050ee <_close_r+0x1a>
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	20000448 	.word	0x20000448

080050f4 <_lseek_r>:
 80050f4:	b538      	push	{r3, r4, r5, lr}
 80050f6:	4d07      	ldr	r5, [pc, #28]	; (8005114 <_lseek_r+0x20>)
 80050f8:	4604      	mov	r4, r0
 80050fa:	4608      	mov	r0, r1
 80050fc:	4611      	mov	r1, r2
 80050fe:	2200      	movs	r2, #0
 8005100:	602a      	str	r2, [r5, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	f7fc fa80 	bl	8001608 <_lseek>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d102      	bne.n	8005112 <_lseek_r+0x1e>
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	b103      	cbz	r3, 8005112 <_lseek_r+0x1e>
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	bd38      	pop	{r3, r4, r5, pc}
 8005114:	20000448 	.word	0x20000448

08005118 <_read_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4d07      	ldr	r5, [pc, #28]	; (8005138 <_read_r+0x20>)
 800511c:	4604      	mov	r4, r0
 800511e:	4608      	mov	r0, r1
 8005120:	4611      	mov	r1, r2
 8005122:	2200      	movs	r2, #0
 8005124:	602a      	str	r2, [r5, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	f7fc fa0e 	bl	8001548 <_read>
 800512c:	1c43      	adds	r3, r0, #1
 800512e:	d102      	bne.n	8005136 <_read_r+0x1e>
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	b103      	cbz	r3, 8005136 <_read_r+0x1e>
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	bd38      	pop	{r3, r4, r5, pc}
 8005138:	20000448 	.word	0x20000448

0800513c <_write_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4d07      	ldr	r5, [pc, #28]	; (800515c <_write_r+0x20>)
 8005140:	4604      	mov	r4, r0
 8005142:	4608      	mov	r0, r1
 8005144:	4611      	mov	r1, r2
 8005146:	2200      	movs	r2, #0
 8005148:	602a      	str	r2, [r5, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	f7fc fa19 	bl	8001582 <_write>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_write_r+0x1e>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	b103      	cbz	r3, 800515a <_write_r+0x1e>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	20000448 	.word	0x20000448

08005160 <__errno>:
 8005160:	4b01      	ldr	r3, [pc, #4]	; (8005168 <__errno+0x8>)
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	2000006c 	.word	0x2000006c

0800516c <__libc_init_array>:
 800516c:	b570      	push	{r4, r5, r6, lr}
 800516e:	4d0d      	ldr	r5, [pc, #52]	; (80051a4 <__libc_init_array+0x38>)
 8005170:	4c0d      	ldr	r4, [pc, #52]	; (80051a8 <__libc_init_array+0x3c>)
 8005172:	1b64      	subs	r4, r4, r5
 8005174:	10a4      	asrs	r4, r4, #2
 8005176:	2600      	movs	r6, #0
 8005178:	42a6      	cmp	r6, r4
 800517a:	d109      	bne.n	8005190 <__libc_init_array+0x24>
 800517c:	4d0b      	ldr	r5, [pc, #44]	; (80051ac <__libc_init_array+0x40>)
 800517e:	4c0c      	ldr	r4, [pc, #48]	; (80051b0 <__libc_init_array+0x44>)
 8005180:	f002 f896 	bl	80072b0 <_init>
 8005184:	1b64      	subs	r4, r4, r5
 8005186:	10a4      	asrs	r4, r4, #2
 8005188:	2600      	movs	r6, #0
 800518a:	42a6      	cmp	r6, r4
 800518c:	d105      	bne.n	800519a <__libc_init_array+0x2e>
 800518e:	bd70      	pop	{r4, r5, r6, pc}
 8005190:	f855 3b04 	ldr.w	r3, [r5], #4
 8005194:	4798      	blx	r3
 8005196:	3601      	adds	r6, #1
 8005198:	e7ee      	b.n	8005178 <__libc_init_array+0xc>
 800519a:	f855 3b04 	ldr.w	r3, [r5], #4
 800519e:	4798      	blx	r3
 80051a0:	3601      	adds	r6, #1
 80051a2:	e7f2      	b.n	800518a <__libc_init_array+0x1e>
 80051a4:	0800771c 	.word	0x0800771c
 80051a8:	0800771c 	.word	0x0800771c
 80051ac:	0800771c 	.word	0x0800771c
 80051b0:	08007720 	.word	0x08007720

080051b4 <__retarget_lock_init_recursive>:
 80051b4:	4770      	bx	lr

080051b6 <__retarget_lock_acquire_recursive>:
 80051b6:	4770      	bx	lr

080051b8 <__retarget_lock_release_recursive>:
 80051b8:	4770      	bx	lr

080051ba <quorem>:
 80051ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051be:	6903      	ldr	r3, [r0, #16]
 80051c0:	690c      	ldr	r4, [r1, #16]
 80051c2:	42a3      	cmp	r3, r4
 80051c4:	4607      	mov	r7, r0
 80051c6:	db7e      	blt.n	80052c6 <quorem+0x10c>
 80051c8:	3c01      	subs	r4, #1
 80051ca:	f101 0814 	add.w	r8, r1, #20
 80051ce:	f100 0514 	add.w	r5, r0, #20
 80051d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051e0:	3301      	adds	r3, #1
 80051e2:	429a      	cmp	r2, r3
 80051e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80051f0:	d331      	bcc.n	8005256 <quorem+0x9c>
 80051f2:	f04f 0e00 	mov.w	lr, #0
 80051f6:	4640      	mov	r0, r8
 80051f8:	46ac      	mov	ip, r5
 80051fa:	46f2      	mov	sl, lr
 80051fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005200:	b293      	uxth	r3, r2
 8005202:	fb06 e303 	mla	r3, r6, r3, lr
 8005206:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800520a:	0c1a      	lsrs	r2, r3, #16
 800520c:	b29b      	uxth	r3, r3
 800520e:	ebaa 0303 	sub.w	r3, sl, r3
 8005212:	f8dc a000 	ldr.w	sl, [ip]
 8005216:	fa13 f38a 	uxtah	r3, r3, sl
 800521a:	fb06 220e 	mla	r2, r6, lr, r2
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	9b00      	ldr	r3, [sp, #0]
 8005222:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005226:	b292      	uxth	r2, r2
 8005228:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800522c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005230:	f8bd 3000 	ldrh.w	r3, [sp]
 8005234:	4581      	cmp	r9, r0
 8005236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800523a:	f84c 3b04 	str.w	r3, [ip], #4
 800523e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005242:	d2db      	bcs.n	80051fc <quorem+0x42>
 8005244:	f855 300b 	ldr.w	r3, [r5, fp]
 8005248:	b92b      	cbnz	r3, 8005256 <quorem+0x9c>
 800524a:	9b01      	ldr	r3, [sp, #4]
 800524c:	3b04      	subs	r3, #4
 800524e:	429d      	cmp	r5, r3
 8005250:	461a      	mov	r2, r3
 8005252:	d32c      	bcc.n	80052ae <quorem+0xf4>
 8005254:	613c      	str	r4, [r7, #16]
 8005256:	4638      	mov	r0, r7
 8005258:	f001 f9a8 	bl	80065ac <__mcmp>
 800525c:	2800      	cmp	r0, #0
 800525e:	db22      	blt.n	80052a6 <quorem+0xec>
 8005260:	3601      	adds	r6, #1
 8005262:	4629      	mov	r1, r5
 8005264:	2000      	movs	r0, #0
 8005266:	f858 2b04 	ldr.w	r2, [r8], #4
 800526a:	f8d1 c000 	ldr.w	ip, [r1]
 800526e:	b293      	uxth	r3, r2
 8005270:	1ac3      	subs	r3, r0, r3
 8005272:	0c12      	lsrs	r2, r2, #16
 8005274:	fa13 f38c 	uxtah	r3, r3, ip
 8005278:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800527c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005280:	b29b      	uxth	r3, r3
 8005282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005286:	45c1      	cmp	r9, r8
 8005288:	f841 3b04 	str.w	r3, [r1], #4
 800528c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005290:	d2e9      	bcs.n	8005266 <quorem+0xac>
 8005292:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005296:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800529a:	b922      	cbnz	r2, 80052a6 <quorem+0xec>
 800529c:	3b04      	subs	r3, #4
 800529e:	429d      	cmp	r5, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	d30a      	bcc.n	80052ba <quorem+0x100>
 80052a4:	613c      	str	r4, [r7, #16]
 80052a6:	4630      	mov	r0, r6
 80052a8:	b003      	add	sp, #12
 80052aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	3b04      	subs	r3, #4
 80052b2:	2a00      	cmp	r2, #0
 80052b4:	d1ce      	bne.n	8005254 <quorem+0x9a>
 80052b6:	3c01      	subs	r4, #1
 80052b8:	e7c9      	b.n	800524e <quorem+0x94>
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	3b04      	subs	r3, #4
 80052be:	2a00      	cmp	r2, #0
 80052c0:	d1f0      	bne.n	80052a4 <quorem+0xea>
 80052c2:	3c01      	subs	r4, #1
 80052c4:	e7eb      	b.n	800529e <quorem+0xe4>
 80052c6:	2000      	movs	r0, #0
 80052c8:	e7ee      	b.n	80052a8 <quorem+0xee>
 80052ca:	0000      	movs	r0, r0
 80052cc:	0000      	movs	r0, r0
	...

080052d0 <_dtoa_r>:
 80052d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d4:	ed2d 8b04 	vpush	{d8-d9}
 80052d8:	69c5      	ldr	r5, [r0, #28]
 80052da:	b093      	sub	sp, #76	; 0x4c
 80052dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80052e0:	ec57 6b10 	vmov	r6, r7, d0
 80052e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80052e8:	9107      	str	r1, [sp, #28]
 80052ea:	4604      	mov	r4, r0
 80052ec:	920a      	str	r2, [sp, #40]	; 0x28
 80052ee:	930d      	str	r3, [sp, #52]	; 0x34
 80052f0:	b975      	cbnz	r5, 8005310 <_dtoa_r+0x40>
 80052f2:	2010      	movs	r0, #16
 80052f4:	f000 fe2a 	bl	8005f4c <malloc>
 80052f8:	4602      	mov	r2, r0
 80052fa:	61e0      	str	r0, [r4, #28]
 80052fc:	b920      	cbnz	r0, 8005308 <_dtoa_r+0x38>
 80052fe:	4bae      	ldr	r3, [pc, #696]	; (80055b8 <_dtoa_r+0x2e8>)
 8005300:	21ef      	movs	r1, #239	; 0xef
 8005302:	48ae      	ldr	r0, [pc, #696]	; (80055bc <_dtoa_r+0x2ec>)
 8005304:	f001 fc90 	bl	8006c28 <__assert_func>
 8005308:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800530c:	6005      	str	r5, [r0, #0]
 800530e:	60c5      	str	r5, [r0, #12]
 8005310:	69e3      	ldr	r3, [r4, #28]
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	b151      	cbz	r1, 800532c <_dtoa_r+0x5c>
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	604a      	str	r2, [r1, #4]
 800531a:	2301      	movs	r3, #1
 800531c:	4093      	lsls	r3, r2
 800531e:	608b      	str	r3, [r1, #8]
 8005320:	4620      	mov	r0, r4
 8005322:	f000 ff07 	bl	8006134 <_Bfree>
 8005326:	69e3      	ldr	r3, [r4, #28]
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	1e3b      	subs	r3, r7, #0
 800532e:	bfbb      	ittet	lt
 8005330:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005334:	9303      	strlt	r3, [sp, #12]
 8005336:	2300      	movge	r3, #0
 8005338:	2201      	movlt	r2, #1
 800533a:	bfac      	ite	ge
 800533c:	f8c8 3000 	strge.w	r3, [r8]
 8005340:	f8c8 2000 	strlt.w	r2, [r8]
 8005344:	4b9e      	ldr	r3, [pc, #632]	; (80055c0 <_dtoa_r+0x2f0>)
 8005346:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800534a:	ea33 0308 	bics.w	r3, r3, r8
 800534e:	d11b      	bne.n	8005388 <_dtoa_r+0xb8>
 8005350:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005352:	f242 730f 	movw	r3, #9999	; 0x270f
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800535c:	4333      	orrs	r3, r6
 800535e:	f000 8593 	beq.w	8005e88 <_dtoa_r+0xbb8>
 8005362:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005364:	b963      	cbnz	r3, 8005380 <_dtoa_r+0xb0>
 8005366:	4b97      	ldr	r3, [pc, #604]	; (80055c4 <_dtoa_r+0x2f4>)
 8005368:	e027      	b.n	80053ba <_dtoa_r+0xea>
 800536a:	4b97      	ldr	r3, [pc, #604]	; (80055c8 <_dtoa_r+0x2f8>)
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	3308      	adds	r3, #8
 8005370:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	9800      	ldr	r0, [sp, #0]
 8005376:	b013      	add	sp, #76	; 0x4c
 8005378:	ecbd 8b04 	vpop	{d8-d9}
 800537c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005380:	4b90      	ldr	r3, [pc, #576]	; (80055c4 <_dtoa_r+0x2f4>)
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	3303      	adds	r3, #3
 8005386:	e7f3      	b.n	8005370 <_dtoa_r+0xa0>
 8005388:	ed9d 7b02 	vldr	d7, [sp, #8]
 800538c:	2200      	movs	r2, #0
 800538e:	ec51 0b17 	vmov	r0, r1, d7
 8005392:	eeb0 8a47 	vmov.f32	s16, s14
 8005396:	eef0 8a67 	vmov.f32	s17, s15
 800539a:	2300      	movs	r3, #0
 800539c:	f7fb fb9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80053a0:	4681      	mov	r9, r0
 80053a2:	b160      	cbz	r0, 80053be <_dtoa_r+0xee>
 80053a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053a6:	2301      	movs	r3, #1
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8568 	beq.w	8005e82 <_dtoa_r+0xbb2>
 80053b2:	4b86      	ldr	r3, [pc, #536]	; (80055cc <_dtoa_r+0x2fc>)
 80053b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	e7da      	b.n	8005374 <_dtoa_r+0xa4>
 80053be:	aa10      	add	r2, sp, #64	; 0x40
 80053c0:	a911      	add	r1, sp, #68	; 0x44
 80053c2:	4620      	mov	r0, r4
 80053c4:	eeb0 0a48 	vmov.f32	s0, s16
 80053c8:	eef0 0a68 	vmov.f32	s1, s17
 80053cc:	f001 f994 	bl	80066f8 <__d2b>
 80053d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80053d4:	4682      	mov	sl, r0
 80053d6:	2d00      	cmp	r5, #0
 80053d8:	d07f      	beq.n	80054da <_dtoa_r+0x20a>
 80053da:	ee18 3a90 	vmov	r3, s17
 80053de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80053e6:	ec51 0b18 	vmov	r0, r1, d8
 80053ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80053ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80053f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80053f6:	4619      	mov	r1, r3
 80053f8:	2200      	movs	r2, #0
 80053fa:	4b75      	ldr	r3, [pc, #468]	; (80055d0 <_dtoa_r+0x300>)
 80053fc:	f7fa ff4c 	bl	8000298 <__aeabi_dsub>
 8005400:	a367      	add	r3, pc, #412	; (adr r3, 80055a0 <_dtoa_r+0x2d0>)
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	f7fb f8ff 	bl	8000608 <__aeabi_dmul>
 800540a:	a367      	add	r3, pc, #412	; (adr r3, 80055a8 <_dtoa_r+0x2d8>)
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	f7fa ff44 	bl	800029c <__adddf3>
 8005414:	4606      	mov	r6, r0
 8005416:	4628      	mov	r0, r5
 8005418:	460f      	mov	r7, r1
 800541a:	f7fb f88b 	bl	8000534 <__aeabi_i2d>
 800541e:	a364      	add	r3, pc, #400	; (adr r3, 80055b0 <_dtoa_r+0x2e0>)
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	f7fb f8f0 	bl	8000608 <__aeabi_dmul>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4630      	mov	r0, r6
 800542e:	4639      	mov	r1, r7
 8005430:	f7fa ff34 	bl	800029c <__adddf3>
 8005434:	4606      	mov	r6, r0
 8005436:	460f      	mov	r7, r1
 8005438:	f7fb fb96 	bl	8000b68 <__aeabi_d2iz>
 800543c:	2200      	movs	r2, #0
 800543e:	4683      	mov	fp, r0
 8005440:	2300      	movs	r3, #0
 8005442:	4630      	mov	r0, r6
 8005444:	4639      	mov	r1, r7
 8005446:	f7fb fb51 	bl	8000aec <__aeabi_dcmplt>
 800544a:	b148      	cbz	r0, 8005460 <_dtoa_r+0x190>
 800544c:	4658      	mov	r0, fp
 800544e:	f7fb f871 	bl	8000534 <__aeabi_i2d>
 8005452:	4632      	mov	r2, r6
 8005454:	463b      	mov	r3, r7
 8005456:	f7fb fb3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800545a:	b908      	cbnz	r0, 8005460 <_dtoa_r+0x190>
 800545c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005460:	f1bb 0f16 	cmp.w	fp, #22
 8005464:	d857      	bhi.n	8005516 <_dtoa_r+0x246>
 8005466:	4b5b      	ldr	r3, [pc, #364]	; (80055d4 <_dtoa_r+0x304>)
 8005468:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	ec51 0b18 	vmov	r0, r1, d8
 8005474:	f7fb fb3a 	bl	8000aec <__aeabi_dcmplt>
 8005478:	2800      	cmp	r0, #0
 800547a:	d04e      	beq.n	800551a <_dtoa_r+0x24a>
 800547c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005480:	2300      	movs	r3, #0
 8005482:	930c      	str	r3, [sp, #48]	; 0x30
 8005484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005486:	1b5b      	subs	r3, r3, r5
 8005488:	1e5a      	subs	r2, r3, #1
 800548a:	bf45      	ittet	mi
 800548c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005490:	9305      	strmi	r3, [sp, #20]
 8005492:	2300      	movpl	r3, #0
 8005494:	2300      	movmi	r3, #0
 8005496:	9206      	str	r2, [sp, #24]
 8005498:	bf54      	ite	pl
 800549a:	9305      	strpl	r3, [sp, #20]
 800549c:	9306      	strmi	r3, [sp, #24]
 800549e:	f1bb 0f00 	cmp.w	fp, #0
 80054a2:	db3c      	blt.n	800551e <_dtoa_r+0x24e>
 80054a4:	9b06      	ldr	r3, [sp, #24]
 80054a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80054aa:	445b      	add	r3, fp
 80054ac:	9306      	str	r3, [sp, #24]
 80054ae:	2300      	movs	r3, #0
 80054b0:	9308      	str	r3, [sp, #32]
 80054b2:	9b07      	ldr	r3, [sp, #28]
 80054b4:	2b09      	cmp	r3, #9
 80054b6:	d868      	bhi.n	800558a <_dtoa_r+0x2ba>
 80054b8:	2b05      	cmp	r3, #5
 80054ba:	bfc4      	itt	gt
 80054bc:	3b04      	subgt	r3, #4
 80054be:	9307      	strgt	r3, [sp, #28]
 80054c0:	9b07      	ldr	r3, [sp, #28]
 80054c2:	f1a3 0302 	sub.w	r3, r3, #2
 80054c6:	bfcc      	ite	gt
 80054c8:	2500      	movgt	r5, #0
 80054ca:	2501      	movle	r5, #1
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	f200 8085 	bhi.w	80055dc <_dtoa_r+0x30c>
 80054d2:	e8df f003 	tbb	[pc, r3]
 80054d6:	3b2e      	.short	0x3b2e
 80054d8:	5839      	.short	0x5839
 80054da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80054de:	441d      	add	r5, r3
 80054e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	bfc1      	itttt	gt
 80054e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80054f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80054f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80054f8:	bfd6      	itet	le
 80054fa:	f1c3 0320 	rsble	r3, r3, #32
 80054fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8005502:	fa06 f003 	lslle.w	r0, r6, r3
 8005506:	f7fb f805 	bl	8000514 <__aeabi_ui2d>
 800550a:	2201      	movs	r2, #1
 800550c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005510:	3d01      	subs	r5, #1
 8005512:	920e      	str	r2, [sp, #56]	; 0x38
 8005514:	e76f      	b.n	80053f6 <_dtoa_r+0x126>
 8005516:	2301      	movs	r3, #1
 8005518:	e7b3      	b.n	8005482 <_dtoa_r+0x1b2>
 800551a:	900c      	str	r0, [sp, #48]	; 0x30
 800551c:	e7b2      	b.n	8005484 <_dtoa_r+0x1b4>
 800551e:	9b05      	ldr	r3, [sp, #20]
 8005520:	eba3 030b 	sub.w	r3, r3, fp
 8005524:	9305      	str	r3, [sp, #20]
 8005526:	f1cb 0300 	rsb	r3, fp, #0
 800552a:	9308      	str	r3, [sp, #32]
 800552c:	2300      	movs	r3, #0
 800552e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005530:	e7bf      	b.n	80054b2 <_dtoa_r+0x1e2>
 8005532:	2300      	movs	r3, #0
 8005534:	9309      	str	r3, [sp, #36]	; 0x24
 8005536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	dc52      	bgt.n	80055e2 <_dtoa_r+0x312>
 800553c:	2301      	movs	r3, #1
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	9304      	str	r3, [sp, #16]
 8005542:	461a      	mov	r2, r3
 8005544:	920a      	str	r2, [sp, #40]	; 0x28
 8005546:	e00b      	b.n	8005560 <_dtoa_r+0x290>
 8005548:	2301      	movs	r3, #1
 800554a:	e7f3      	b.n	8005534 <_dtoa_r+0x264>
 800554c:	2300      	movs	r3, #0
 800554e:	9309      	str	r3, [sp, #36]	; 0x24
 8005550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005552:	445b      	add	r3, fp
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	3301      	adds	r3, #1
 8005558:	2b01      	cmp	r3, #1
 800555a:	9304      	str	r3, [sp, #16]
 800555c:	bfb8      	it	lt
 800555e:	2301      	movlt	r3, #1
 8005560:	69e0      	ldr	r0, [r4, #28]
 8005562:	2100      	movs	r1, #0
 8005564:	2204      	movs	r2, #4
 8005566:	f102 0614 	add.w	r6, r2, #20
 800556a:	429e      	cmp	r6, r3
 800556c:	d93d      	bls.n	80055ea <_dtoa_r+0x31a>
 800556e:	6041      	str	r1, [r0, #4]
 8005570:	4620      	mov	r0, r4
 8005572:	f000 fd9f 	bl	80060b4 <_Balloc>
 8005576:	9000      	str	r0, [sp, #0]
 8005578:	2800      	cmp	r0, #0
 800557a:	d139      	bne.n	80055f0 <_dtoa_r+0x320>
 800557c:	4b16      	ldr	r3, [pc, #88]	; (80055d8 <_dtoa_r+0x308>)
 800557e:	4602      	mov	r2, r0
 8005580:	f240 11af 	movw	r1, #431	; 0x1af
 8005584:	e6bd      	b.n	8005302 <_dtoa_r+0x32>
 8005586:	2301      	movs	r3, #1
 8005588:	e7e1      	b.n	800554e <_dtoa_r+0x27e>
 800558a:	2501      	movs	r5, #1
 800558c:	2300      	movs	r3, #0
 800558e:	9307      	str	r3, [sp, #28]
 8005590:	9509      	str	r5, [sp, #36]	; 0x24
 8005592:	f04f 33ff 	mov.w	r3, #4294967295
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	9304      	str	r3, [sp, #16]
 800559a:	2200      	movs	r2, #0
 800559c:	2312      	movs	r3, #18
 800559e:	e7d1      	b.n	8005544 <_dtoa_r+0x274>
 80055a0:	636f4361 	.word	0x636f4361
 80055a4:	3fd287a7 	.word	0x3fd287a7
 80055a8:	8b60c8b3 	.word	0x8b60c8b3
 80055ac:	3fc68a28 	.word	0x3fc68a28
 80055b0:	509f79fb 	.word	0x509f79fb
 80055b4:	3fd34413 	.word	0x3fd34413
 80055b8:	080073e1 	.word	0x080073e1
 80055bc:	080073f8 	.word	0x080073f8
 80055c0:	7ff00000 	.word	0x7ff00000
 80055c4:	080073dd 	.word	0x080073dd
 80055c8:	080073d4 	.word	0x080073d4
 80055cc:	080073b1 	.word	0x080073b1
 80055d0:	3ff80000 	.word	0x3ff80000
 80055d4:	080074e8 	.word	0x080074e8
 80055d8:	08007450 	.word	0x08007450
 80055dc:	2301      	movs	r3, #1
 80055de:	9309      	str	r3, [sp, #36]	; 0x24
 80055e0:	e7d7      	b.n	8005592 <_dtoa_r+0x2c2>
 80055e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	e7ba      	b.n	8005560 <_dtoa_r+0x290>
 80055ea:	3101      	adds	r1, #1
 80055ec:	0052      	lsls	r2, r2, #1
 80055ee:	e7ba      	b.n	8005566 <_dtoa_r+0x296>
 80055f0:	69e3      	ldr	r3, [r4, #28]
 80055f2:	9a00      	ldr	r2, [sp, #0]
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	9b04      	ldr	r3, [sp, #16]
 80055f8:	2b0e      	cmp	r3, #14
 80055fa:	f200 80a8 	bhi.w	800574e <_dtoa_r+0x47e>
 80055fe:	2d00      	cmp	r5, #0
 8005600:	f000 80a5 	beq.w	800574e <_dtoa_r+0x47e>
 8005604:	f1bb 0f00 	cmp.w	fp, #0
 8005608:	dd38      	ble.n	800567c <_dtoa_r+0x3ac>
 800560a:	4bc0      	ldr	r3, [pc, #768]	; (800590c <_dtoa_r+0x63c>)
 800560c:	f00b 020f 	and.w	r2, fp, #15
 8005610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005614:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005618:	e9d3 6700 	ldrd	r6, r7, [r3]
 800561c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005620:	d019      	beq.n	8005656 <_dtoa_r+0x386>
 8005622:	4bbb      	ldr	r3, [pc, #748]	; (8005910 <_dtoa_r+0x640>)
 8005624:	ec51 0b18 	vmov	r0, r1, d8
 8005628:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800562c:	f7fb f916 	bl	800085c <__aeabi_ddiv>
 8005630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005634:	f008 080f 	and.w	r8, r8, #15
 8005638:	2503      	movs	r5, #3
 800563a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005910 <_dtoa_r+0x640>
 800563e:	f1b8 0f00 	cmp.w	r8, #0
 8005642:	d10a      	bne.n	800565a <_dtoa_r+0x38a>
 8005644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005648:	4632      	mov	r2, r6
 800564a:	463b      	mov	r3, r7
 800564c:	f7fb f906 	bl	800085c <__aeabi_ddiv>
 8005650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005654:	e02b      	b.n	80056ae <_dtoa_r+0x3de>
 8005656:	2502      	movs	r5, #2
 8005658:	e7ef      	b.n	800563a <_dtoa_r+0x36a>
 800565a:	f018 0f01 	tst.w	r8, #1
 800565e:	d008      	beq.n	8005672 <_dtoa_r+0x3a2>
 8005660:	4630      	mov	r0, r6
 8005662:	4639      	mov	r1, r7
 8005664:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005668:	f7fa ffce 	bl	8000608 <__aeabi_dmul>
 800566c:	3501      	adds	r5, #1
 800566e:	4606      	mov	r6, r0
 8005670:	460f      	mov	r7, r1
 8005672:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005676:	f109 0908 	add.w	r9, r9, #8
 800567a:	e7e0      	b.n	800563e <_dtoa_r+0x36e>
 800567c:	f000 809f 	beq.w	80057be <_dtoa_r+0x4ee>
 8005680:	f1cb 0600 	rsb	r6, fp, #0
 8005684:	4ba1      	ldr	r3, [pc, #644]	; (800590c <_dtoa_r+0x63c>)
 8005686:	4fa2      	ldr	r7, [pc, #648]	; (8005910 <_dtoa_r+0x640>)
 8005688:	f006 020f 	and.w	r2, r6, #15
 800568c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	ec51 0b18 	vmov	r0, r1, d8
 8005698:	f7fa ffb6 	bl	8000608 <__aeabi_dmul>
 800569c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056a0:	1136      	asrs	r6, r6, #4
 80056a2:	2300      	movs	r3, #0
 80056a4:	2502      	movs	r5, #2
 80056a6:	2e00      	cmp	r6, #0
 80056a8:	d17e      	bne.n	80057a8 <_dtoa_r+0x4d8>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1d0      	bne.n	8005650 <_dtoa_r+0x380>
 80056ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8084 	beq.w	80057c2 <_dtoa_r+0x4f2>
 80056ba:	4b96      	ldr	r3, [pc, #600]	; (8005914 <_dtoa_r+0x644>)
 80056bc:	2200      	movs	r2, #0
 80056be:	4640      	mov	r0, r8
 80056c0:	4649      	mov	r1, r9
 80056c2:	f7fb fa13 	bl	8000aec <__aeabi_dcmplt>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d07b      	beq.n	80057c2 <_dtoa_r+0x4f2>
 80056ca:	9b04      	ldr	r3, [sp, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d078      	beq.n	80057c2 <_dtoa_r+0x4f2>
 80056d0:	9b01      	ldr	r3, [sp, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	dd39      	ble.n	800574a <_dtoa_r+0x47a>
 80056d6:	4b90      	ldr	r3, [pc, #576]	; (8005918 <_dtoa_r+0x648>)
 80056d8:	2200      	movs	r2, #0
 80056da:	4640      	mov	r0, r8
 80056dc:	4649      	mov	r1, r9
 80056de:	f7fa ff93 	bl	8000608 <__aeabi_dmul>
 80056e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056e6:	9e01      	ldr	r6, [sp, #4]
 80056e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80056ec:	3501      	adds	r5, #1
 80056ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80056f2:	4628      	mov	r0, r5
 80056f4:	f7fa ff1e 	bl	8000534 <__aeabi_i2d>
 80056f8:	4642      	mov	r2, r8
 80056fa:	464b      	mov	r3, r9
 80056fc:	f7fa ff84 	bl	8000608 <__aeabi_dmul>
 8005700:	4b86      	ldr	r3, [pc, #536]	; (800591c <_dtoa_r+0x64c>)
 8005702:	2200      	movs	r2, #0
 8005704:	f7fa fdca 	bl	800029c <__adddf3>
 8005708:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800570c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005710:	9303      	str	r3, [sp, #12]
 8005712:	2e00      	cmp	r6, #0
 8005714:	d158      	bne.n	80057c8 <_dtoa_r+0x4f8>
 8005716:	4b82      	ldr	r3, [pc, #520]	; (8005920 <_dtoa_r+0x650>)
 8005718:	2200      	movs	r2, #0
 800571a:	4640      	mov	r0, r8
 800571c:	4649      	mov	r1, r9
 800571e:	f7fa fdbb 	bl	8000298 <__aeabi_dsub>
 8005722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005726:	4680      	mov	r8, r0
 8005728:	4689      	mov	r9, r1
 800572a:	f7fb f9fd 	bl	8000b28 <__aeabi_dcmpgt>
 800572e:	2800      	cmp	r0, #0
 8005730:	f040 8296 	bne.w	8005c60 <_dtoa_r+0x990>
 8005734:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005738:	4640      	mov	r0, r8
 800573a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800573e:	4649      	mov	r1, r9
 8005740:	f7fb f9d4 	bl	8000aec <__aeabi_dcmplt>
 8005744:	2800      	cmp	r0, #0
 8005746:	f040 8289 	bne.w	8005c5c <_dtoa_r+0x98c>
 800574a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800574e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005750:	2b00      	cmp	r3, #0
 8005752:	f2c0 814e 	blt.w	80059f2 <_dtoa_r+0x722>
 8005756:	f1bb 0f0e 	cmp.w	fp, #14
 800575a:	f300 814a 	bgt.w	80059f2 <_dtoa_r+0x722>
 800575e:	4b6b      	ldr	r3, [pc, #428]	; (800590c <_dtoa_r+0x63c>)
 8005760:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005764:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800576a:	2b00      	cmp	r3, #0
 800576c:	f280 80dc 	bge.w	8005928 <_dtoa_r+0x658>
 8005770:	9b04      	ldr	r3, [sp, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	f300 80d8 	bgt.w	8005928 <_dtoa_r+0x658>
 8005778:	f040 826f 	bne.w	8005c5a <_dtoa_r+0x98a>
 800577c:	4b68      	ldr	r3, [pc, #416]	; (8005920 <_dtoa_r+0x650>)
 800577e:	2200      	movs	r2, #0
 8005780:	4640      	mov	r0, r8
 8005782:	4649      	mov	r1, r9
 8005784:	f7fa ff40 	bl	8000608 <__aeabi_dmul>
 8005788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800578c:	f7fb f9c2 	bl	8000b14 <__aeabi_dcmpge>
 8005790:	9e04      	ldr	r6, [sp, #16]
 8005792:	4637      	mov	r7, r6
 8005794:	2800      	cmp	r0, #0
 8005796:	f040 8245 	bne.w	8005c24 <_dtoa_r+0x954>
 800579a:	9d00      	ldr	r5, [sp, #0]
 800579c:	2331      	movs	r3, #49	; 0x31
 800579e:	f805 3b01 	strb.w	r3, [r5], #1
 80057a2:	f10b 0b01 	add.w	fp, fp, #1
 80057a6:	e241      	b.n	8005c2c <_dtoa_r+0x95c>
 80057a8:	07f2      	lsls	r2, r6, #31
 80057aa:	d505      	bpl.n	80057b8 <_dtoa_r+0x4e8>
 80057ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057b0:	f7fa ff2a 	bl	8000608 <__aeabi_dmul>
 80057b4:	3501      	adds	r5, #1
 80057b6:	2301      	movs	r3, #1
 80057b8:	1076      	asrs	r6, r6, #1
 80057ba:	3708      	adds	r7, #8
 80057bc:	e773      	b.n	80056a6 <_dtoa_r+0x3d6>
 80057be:	2502      	movs	r5, #2
 80057c0:	e775      	b.n	80056ae <_dtoa_r+0x3de>
 80057c2:	9e04      	ldr	r6, [sp, #16]
 80057c4:	465f      	mov	r7, fp
 80057c6:	e792      	b.n	80056ee <_dtoa_r+0x41e>
 80057c8:	9900      	ldr	r1, [sp, #0]
 80057ca:	4b50      	ldr	r3, [pc, #320]	; (800590c <_dtoa_r+0x63c>)
 80057cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057d0:	4431      	add	r1, r6
 80057d2:	9102      	str	r1, [sp, #8]
 80057d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057d6:	eeb0 9a47 	vmov.f32	s18, s14
 80057da:	eef0 9a67 	vmov.f32	s19, s15
 80057de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80057e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057e6:	2900      	cmp	r1, #0
 80057e8:	d044      	beq.n	8005874 <_dtoa_r+0x5a4>
 80057ea:	494e      	ldr	r1, [pc, #312]	; (8005924 <_dtoa_r+0x654>)
 80057ec:	2000      	movs	r0, #0
 80057ee:	f7fb f835 	bl	800085c <__aeabi_ddiv>
 80057f2:	ec53 2b19 	vmov	r2, r3, d9
 80057f6:	f7fa fd4f 	bl	8000298 <__aeabi_dsub>
 80057fa:	9d00      	ldr	r5, [sp, #0]
 80057fc:	ec41 0b19 	vmov	d9, r0, r1
 8005800:	4649      	mov	r1, r9
 8005802:	4640      	mov	r0, r8
 8005804:	f7fb f9b0 	bl	8000b68 <__aeabi_d2iz>
 8005808:	4606      	mov	r6, r0
 800580a:	f7fa fe93 	bl	8000534 <__aeabi_i2d>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4640      	mov	r0, r8
 8005814:	4649      	mov	r1, r9
 8005816:	f7fa fd3f 	bl	8000298 <__aeabi_dsub>
 800581a:	3630      	adds	r6, #48	; 0x30
 800581c:	f805 6b01 	strb.w	r6, [r5], #1
 8005820:	ec53 2b19 	vmov	r2, r3, d9
 8005824:	4680      	mov	r8, r0
 8005826:	4689      	mov	r9, r1
 8005828:	f7fb f960 	bl	8000aec <__aeabi_dcmplt>
 800582c:	2800      	cmp	r0, #0
 800582e:	d164      	bne.n	80058fa <_dtoa_r+0x62a>
 8005830:	4642      	mov	r2, r8
 8005832:	464b      	mov	r3, r9
 8005834:	4937      	ldr	r1, [pc, #220]	; (8005914 <_dtoa_r+0x644>)
 8005836:	2000      	movs	r0, #0
 8005838:	f7fa fd2e 	bl	8000298 <__aeabi_dsub>
 800583c:	ec53 2b19 	vmov	r2, r3, d9
 8005840:	f7fb f954 	bl	8000aec <__aeabi_dcmplt>
 8005844:	2800      	cmp	r0, #0
 8005846:	f040 80b6 	bne.w	80059b6 <_dtoa_r+0x6e6>
 800584a:	9b02      	ldr	r3, [sp, #8]
 800584c:	429d      	cmp	r5, r3
 800584e:	f43f af7c 	beq.w	800574a <_dtoa_r+0x47a>
 8005852:	4b31      	ldr	r3, [pc, #196]	; (8005918 <_dtoa_r+0x648>)
 8005854:	ec51 0b19 	vmov	r0, r1, d9
 8005858:	2200      	movs	r2, #0
 800585a:	f7fa fed5 	bl	8000608 <__aeabi_dmul>
 800585e:	4b2e      	ldr	r3, [pc, #184]	; (8005918 <_dtoa_r+0x648>)
 8005860:	ec41 0b19 	vmov	d9, r0, r1
 8005864:	2200      	movs	r2, #0
 8005866:	4640      	mov	r0, r8
 8005868:	4649      	mov	r1, r9
 800586a:	f7fa fecd 	bl	8000608 <__aeabi_dmul>
 800586e:	4680      	mov	r8, r0
 8005870:	4689      	mov	r9, r1
 8005872:	e7c5      	b.n	8005800 <_dtoa_r+0x530>
 8005874:	ec51 0b17 	vmov	r0, r1, d7
 8005878:	f7fa fec6 	bl	8000608 <__aeabi_dmul>
 800587c:	9b02      	ldr	r3, [sp, #8]
 800587e:	9d00      	ldr	r5, [sp, #0]
 8005880:	930f      	str	r3, [sp, #60]	; 0x3c
 8005882:	ec41 0b19 	vmov	d9, r0, r1
 8005886:	4649      	mov	r1, r9
 8005888:	4640      	mov	r0, r8
 800588a:	f7fb f96d 	bl	8000b68 <__aeabi_d2iz>
 800588e:	4606      	mov	r6, r0
 8005890:	f7fa fe50 	bl	8000534 <__aeabi_i2d>
 8005894:	3630      	adds	r6, #48	; 0x30
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4640      	mov	r0, r8
 800589c:	4649      	mov	r1, r9
 800589e:	f7fa fcfb 	bl	8000298 <__aeabi_dsub>
 80058a2:	f805 6b01 	strb.w	r6, [r5], #1
 80058a6:	9b02      	ldr	r3, [sp, #8]
 80058a8:	429d      	cmp	r5, r3
 80058aa:	4680      	mov	r8, r0
 80058ac:	4689      	mov	r9, r1
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	d124      	bne.n	80058fe <_dtoa_r+0x62e>
 80058b4:	4b1b      	ldr	r3, [pc, #108]	; (8005924 <_dtoa_r+0x654>)
 80058b6:	ec51 0b19 	vmov	r0, r1, d9
 80058ba:	f7fa fcef 	bl	800029c <__adddf3>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4640      	mov	r0, r8
 80058c4:	4649      	mov	r1, r9
 80058c6:	f7fb f92f 	bl	8000b28 <__aeabi_dcmpgt>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d173      	bne.n	80059b6 <_dtoa_r+0x6e6>
 80058ce:	ec53 2b19 	vmov	r2, r3, d9
 80058d2:	4914      	ldr	r1, [pc, #80]	; (8005924 <_dtoa_r+0x654>)
 80058d4:	2000      	movs	r0, #0
 80058d6:	f7fa fcdf 	bl	8000298 <__aeabi_dsub>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	4640      	mov	r0, r8
 80058e0:	4649      	mov	r1, r9
 80058e2:	f7fb f903 	bl	8000aec <__aeabi_dcmplt>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	f43f af2f 	beq.w	800574a <_dtoa_r+0x47a>
 80058ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80058ee:	1e6b      	subs	r3, r5, #1
 80058f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80058f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058f6:	2b30      	cmp	r3, #48	; 0x30
 80058f8:	d0f8      	beq.n	80058ec <_dtoa_r+0x61c>
 80058fa:	46bb      	mov	fp, r7
 80058fc:	e04a      	b.n	8005994 <_dtoa_r+0x6c4>
 80058fe:	4b06      	ldr	r3, [pc, #24]	; (8005918 <_dtoa_r+0x648>)
 8005900:	f7fa fe82 	bl	8000608 <__aeabi_dmul>
 8005904:	4680      	mov	r8, r0
 8005906:	4689      	mov	r9, r1
 8005908:	e7bd      	b.n	8005886 <_dtoa_r+0x5b6>
 800590a:	bf00      	nop
 800590c:	080074e8 	.word	0x080074e8
 8005910:	080074c0 	.word	0x080074c0
 8005914:	3ff00000 	.word	0x3ff00000
 8005918:	40240000 	.word	0x40240000
 800591c:	401c0000 	.word	0x401c0000
 8005920:	40140000 	.word	0x40140000
 8005924:	3fe00000 	.word	0x3fe00000
 8005928:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800592c:	9d00      	ldr	r5, [sp, #0]
 800592e:	4642      	mov	r2, r8
 8005930:	464b      	mov	r3, r9
 8005932:	4630      	mov	r0, r6
 8005934:	4639      	mov	r1, r7
 8005936:	f7fa ff91 	bl	800085c <__aeabi_ddiv>
 800593a:	f7fb f915 	bl	8000b68 <__aeabi_d2iz>
 800593e:	9001      	str	r0, [sp, #4]
 8005940:	f7fa fdf8 	bl	8000534 <__aeabi_i2d>
 8005944:	4642      	mov	r2, r8
 8005946:	464b      	mov	r3, r9
 8005948:	f7fa fe5e 	bl	8000608 <__aeabi_dmul>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4630      	mov	r0, r6
 8005952:	4639      	mov	r1, r7
 8005954:	f7fa fca0 	bl	8000298 <__aeabi_dsub>
 8005958:	9e01      	ldr	r6, [sp, #4]
 800595a:	9f04      	ldr	r7, [sp, #16]
 800595c:	3630      	adds	r6, #48	; 0x30
 800595e:	f805 6b01 	strb.w	r6, [r5], #1
 8005962:	9e00      	ldr	r6, [sp, #0]
 8005964:	1bae      	subs	r6, r5, r6
 8005966:	42b7      	cmp	r7, r6
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	d134      	bne.n	80059d8 <_dtoa_r+0x708>
 800596e:	f7fa fc95 	bl	800029c <__adddf3>
 8005972:	4642      	mov	r2, r8
 8005974:	464b      	mov	r3, r9
 8005976:	4606      	mov	r6, r0
 8005978:	460f      	mov	r7, r1
 800597a:	f7fb f8d5 	bl	8000b28 <__aeabi_dcmpgt>
 800597e:	b9c8      	cbnz	r0, 80059b4 <_dtoa_r+0x6e4>
 8005980:	4642      	mov	r2, r8
 8005982:	464b      	mov	r3, r9
 8005984:	4630      	mov	r0, r6
 8005986:	4639      	mov	r1, r7
 8005988:	f7fb f8a6 	bl	8000ad8 <__aeabi_dcmpeq>
 800598c:	b110      	cbz	r0, 8005994 <_dtoa_r+0x6c4>
 800598e:	9b01      	ldr	r3, [sp, #4]
 8005990:	07db      	lsls	r3, r3, #31
 8005992:	d40f      	bmi.n	80059b4 <_dtoa_r+0x6e4>
 8005994:	4651      	mov	r1, sl
 8005996:	4620      	mov	r0, r4
 8005998:	f000 fbcc 	bl	8006134 <_Bfree>
 800599c:	2300      	movs	r3, #0
 800599e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059a0:	702b      	strb	r3, [r5, #0]
 80059a2:	f10b 0301 	add.w	r3, fp, #1
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f43f ace2 	beq.w	8005374 <_dtoa_r+0xa4>
 80059b0:	601d      	str	r5, [r3, #0]
 80059b2:	e4df      	b.n	8005374 <_dtoa_r+0xa4>
 80059b4:	465f      	mov	r7, fp
 80059b6:	462b      	mov	r3, r5
 80059b8:	461d      	mov	r5, r3
 80059ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059be:	2a39      	cmp	r2, #57	; 0x39
 80059c0:	d106      	bne.n	80059d0 <_dtoa_r+0x700>
 80059c2:	9a00      	ldr	r2, [sp, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d1f7      	bne.n	80059b8 <_dtoa_r+0x6e8>
 80059c8:	9900      	ldr	r1, [sp, #0]
 80059ca:	2230      	movs	r2, #48	; 0x30
 80059cc:	3701      	adds	r7, #1
 80059ce:	700a      	strb	r2, [r1, #0]
 80059d0:	781a      	ldrb	r2, [r3, #0]
 80059d2:	3201      	adds	r2, #1
 80059d4:	701a      	strb	r2, [r3, #0]
 80059d6:	e790      	b.n	80058fa <_dtoa_r+0x62a>
 80059d8:	4ba3      	ldr	r3, [pc, #652]	; (8005c68 <_dtoa_r+0x998>)
 80059da:	2200      	movs	r2, #0
 80059dc:	f7fa fe14 	bl	8000608 <__aeabi_dmul>
 80059e0:	2200      	movs	r2, #0
 80059e2:	2300      	movs	r3, #0
 80059e4:	4606      	mov	r6, r0
 80059e6:	460f      	mov	r7, r1
 80059e8:	f7fb f876 	bl	8000ad8 <__aeabi_dcmpeq>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d09e      	beq.n	800592e <_dtoa_r+0x65e>
 80059f0:	e7d0      	b.n	8005994 <_dtoa_r+0x6c4>
 80059f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059f4:	2a00      	cmp	r2, #0
 80059f6:	f000 80ca 	beq.w	8005b8e <_dtoa_r+0x8be>
 80059fa:	9a07      	ldr	r2, [sp, #28]
 80059fc:	2a01      	cmp	r2, #1
 80059fe:	f300 80ad 	bgt.w	8005b5c <_dtoa_r+0x88c>
 8005a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a04:	2a00      	cmp	r2, #0
 8005a06:	f000 80a5 	beq.w	8005b54 <_dtoa_r+0x884>
 8005a0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a0e:	9e08      	ldr	r6, [sp, #32]
 8005a10:	9d05      	ldr	r5, [sp, #20]
 8005a12:	9a05      	ldr	r2, [sp, #20]
 8005a14:	441a      	add	r2, r3
 8005a16:	9205      	str	r2, [sp, #20]
 8005a18:	9a06      	ldr	r2, [sp, #24]
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	441a      	add	r2, r3
 8005a1e:	4620      	mov	r0, r4
 8005a20:	9206      	str	r2, [sp, #24]
 8005a22:	f000 fc3d 	bl	80062a0 <__i2b>
 8005a26:	4607      	mov	r7, r0
 8005a28:	b165      	cbz	r5, 8005a44 <_dtoa_r+0x774>
 8005a2a:	9b06      	ldr	r3, [sp, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	dd09      	ble.n	8005a44 <_dtoa_r+0x774>
 8005a30:	42ab      	cmp	r3, r5
 8005a32:	9a05      	ldr	r2, [sp, #20]
 8005a34:	bfa8      	it	ge
 8005a36:	462b      	movge	r3, r5
 8005a38:	1ad2      	subs	r2, r2, r3
 8005a3a:	9205      	str	r2, [sp, #20]
 8005a3c:	9a06      	ldr	r2, [sp, #24]
 8005a3e:	1aed      	subs	r5, r5, r3
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	9306      	str	r3, [sp, #24]
 8005a44:	9b08      	ldr	r3, [sp, #32]
 8005a46:	b1f3      	cbz	r3, 8005a86 <_dtoa_r+0x7b6>
 8005a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80a3 	beq.w	8005b96 <_dtoa_r+0x8c6>
 8005a50:	2e00      	cmp	r6, #0
 8005a52:	dd10      	ble.n	8005a76 <_dtoa_r+0x7a6>
 8005a54:	4639      	mov	r1, r7
 8005a56:	4632      	mov	r2, r6
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f000 fce1 	bl	8006420 <__pow5mult>
 8005a5e:	4652      	mov	r2, sl
 8005a60:	4601      	mov	r1, r0
 8005a62:	4607      	mov	r7, r0
 8005a64:	4620      	mov	r0, r4
 8005a66:	f000 fc31 	bl	80062cc <__multiply>
 8005a6a:	4651      	mov	r1, sl
 8005a6c:	4680      	mov	r8, r0
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f000 fb60 	bl	8006134 <_Bfree>
 8005a74:	46c2      	mov	sl, r8
 8005a76:	9b08      	ldr	r3, [sp, #32]
 8005a78:	1b9a      	subs	r2, r3, r6
 8005a7a:	d004      	beq.n	8005a86 <_dtoa_r+0x7b6>
 8005a7c:	4651      	mov	r1, sl
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f000 fcce 	bl	8006420 <__pow5mult>
 8005a84:	4682      	mov	sl, r0
 8005a86:	2101      	movs	r1, #1
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f000 fc09 	bl	80062a0 <__i2b>
 8005a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	4606      	mov	r6, r0
 8005a94:	f340 8081 	ble.w	8005b9a <_dtoa_r+0x8ca>
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4601      	mov	r1, r0
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 fcbf 	bl	8006420 <__pow5mult>
 8005aa2:	9b07      	ldr	r3, [sp, #28]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	dd7a      	ble.n	8005ba0 <_dtoa_r+0x8d0>
 8005aaa:	f04f 0800 	mov.w	r8, #0
 8005aae:	6933      	ldr	r3, [r6, #16]
 8005ab0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ab4:	6918      	ldr	r0, [r3, #16]
 8005ab6:	f000 fba5 	bl	8006204 <__hi0bits>
 8005aba:	f1c0 0020 	rsb	r0, r0, #32
 8005abe:	9b06      	ldr	r3, [sp, #24]
 8005ac0:	4418      	add	r0, r3
 8005ac2:	f010 001f 	ands.w	r0, r0, #31
 8005ac6:	f000 8094 	beq.w	8005bf2 <_dtoa_r+0x922>
 8005aca:	f1c0 0320 	rsb	r3, r0, #32
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	f340 8085 	ble.w	8005bde <_dtoa_r+0x90e>
 8005ad4:	9b05      	ldr	r3, [sp, #20]
 8005ad6:	f1c0 001c 	rsb	r0, r0, #28
 8005ada:	4403      	add	r3, r0
 8005adc:	9305      	str	r3, [sp, #20]
 8005ade:	9b06      	ldr	r3, [sp, #24]
 8005ae0:	4403      	add	r3, r0
 8005ae2:	4405      	add	r5, r0
 8005ae4:	9306      	str	r3, [sp, #24]
 8005ae6:	9b05      	ldr	r3, [sp, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	dd05      	ble.n	8005af8 <_dtoa_r+0x828>
 8005aec:	4651      	mov	r1, sl
 8005aee:	461a      	mov	r2, r3
 8005af0:	4620      	mov	r0, r4
 8005af2:	f000 fcef 	bl	80064d4 <__lshift>
 8005af6:	4682      	mov	sl, r0
 8005af8:	9b06      	ldr	r3, [sp, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	dd05      	ble.n	8005b0a <_dtoa_r+0x83a>
 8005afe:	4631      	mov	r1, r6
 8005b00:	461a      	mov	r2, r3
 8005b02:	4620      	mov	r0, r4
 8005b04:	f000 fce6 	bl	80064d4 <__lshift>
 8005b08:	4606      	mov	r6, r0
 8005b0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d072      	beq.n	8005bf6 <_dtoa_r+0x926>
 8005b10:	4631      	mov	r1, r6
 8005b12:	4650      	mov	r0, sl
 8005b14:	f000 fd4a 	bl	80065ac <__mcmp>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	da6c      	bge.n	8005bf6 <_dtoa_r+0x926>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	4651      	mov	r1, sl
 8005b20:	220a      	movs	r2, #10
 8005b22:	4620      	mov	r0, r4
 8005b24:	f000 fb28 	bl	8006178 <__multadd>
 8005b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b2e:	4682      	mov	sl, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 81b0 	beq.w	8005e96 <_dtoa_r+0xbc6>
 8005b36:	2300      	movs	r3, #0
 8005b38:	4639      	mov	r1, r7
 8005b3a:	220a      	movs	r2, #10
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f000 fb1b 	bl	8006178 <__multadd>
 8005b42:	9b01      	ldr	r3, [sp, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	4607      	mov	r7, r0
 8005b48:	f300 8096 	bgt.w	8005c78 <_dtoa_r+0x9a8>
 8005b4c:	9b07      	ldr	r3, [sp, #28]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	dc59      	bgt.n	8005c06 <_dtoa_r+0x936>
 8005b52:	e091      	b.n	8005c78 <_dtoa_r+0x9a8>
 8005b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b5a:	e758      	b.n	8005a0e <_dtoa_r+0x73e>
 8005b5c:	9b04      	ldr	r3, [sp, #16]
 8005b5e:	1e5e      	subs	r6, r3, #1
 8005b60:	9b08      	ldr	r3, [sp, #32]
 8005b62:	42b3      	cmp	r3, r6
 8005b64:	bfbf      	itttt	lt
 8005b66:	9b08      	ldrlt	r3, [sp, #32]
 8005b68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005b6a:	9608      	strlt	r6, [sp, #32]
 8005b6c:	1af3      	sublt	r3, r6, r3
 8005b6e:	bfb4      	ite	lt
 8005b70:	18d2      	addlt	r2, r2, r3
 8005b72:	1b9e      	subge	r6, r3, r6
 8005b74:	9b04      	ldr	r3, [sp, #16]
 8005b76:	bfbc      	itt	lt
 8005b78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005b7a:	2600      	movlt	r6, #0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	bfb7      	itett	lt
 8005b80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005b84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005b88:	1a9d      	sublt	r5, r3, r2
 8005b8a:	2300      	movlt	r3, #0
 8005b8c:	e741      	b.n	8005a12 <_dtoa_r+0x742>
 8005b8e:	9e08      	ldr	r6, [sp, #32]
 8005b90:	9d05      	ldr	r5, [sp, #20]
 8005b92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005b94:	e748      	b.n	8005a28 <_dtoa_r+0x758>
 8005b96:	9a08      	ldr	r2, [sp, #32]
 8005b98:	e770      	b.n	8005a7c <_dtoa_r+0x7ac>
 8005b9a:	9b07      	ldr	r3, [sp, #28]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	dc19      	bgt.n	8005bd4 <_dtoa_r+0x904>
 8005ba0:	9b02      	ldr	r3, [sp, #8]
 8005ba2:	b9bb      	cbnz	r3, 8005bd4 <_dtoa_r+0x904>
 8005ba4:	9b03      	ldr	r3, [sp, #12]
 8005ba6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005baa:	b99b      	cbnz	r3, 8005bd4 <_dtoa_r+0x904>
 8005bac:	9b03      	ldr	r3, [sp, #12]
 8005bae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bb2:	0d1b      	lsrs	r3, r3, #20
 8005bb4:	051b      	lsls	r3, r3, #20
 8005bb6:	b183      	cbz	r3, 8005bda <_dtoa_r+0x90a>
 8005bb8:	9b05      	ldr	r3, [sp, #20]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	9305      	str	r3, [sp, #20]
 8005bbe:	9b06      	ldr	r3, [sp, #24]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	9306      	str	r3, [sp, #24]
 8005bc4:	f04f 0801 	mov.w	r8, #1
 8005bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f47f af6f 	bne.w	8005aae <_dtoa_r+0x7de>
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	e774      	b.n	8005abe <_dtoa_r+0x7ee>
 8005bd4:	f04f 0800 	mov.w	r8, #0
 8005bd8:	e7f6      	b.n	8005bc8 <_dtoa_r+0x8f8>
 8005bda:	4698      	mov	r8, r3
 8005bdc:	e7f4      	b.n	8005bc8 <_dtoa_r+0x8f8>
 8005bde:	d082      	beq.n	8005ae6 <_dtoa_r+0x816>
 8005be0:	9a05      	ldr	r2, [sp, #20]
 8005be2:	331c      	adds	r3, #28
 8005be4:	441a      	add	r2, r3
 8005be6:	9205      	str	r2, [sp, #20]
 8005be8:	9a06      	ldr	r2, [sp, #24]
 8005bea:	441a      	add	r2, r3
 8005bec:	441d      	add	r5, r3
 8005bee:	9206      	str	r2, [sp, #24]
 8005bf0:	e779      	b.n	8005ae6 <_dtoa_r+0x816>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	e7f4      	b.n	8005be0 <_dtoa_r+0x910>
 8005bf6:	9b04      	ldr	r3, [sp, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	dc37      	bgt.n	8005c6c <_dtoa_r+0x99c>
 8005bfc:	9b07      	ldr	r3, [sp, #28]
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	dd34      	ble.n	8005c6c <_dtoa_r+0x99c>
 8005c02:	9b04      	ldr	r3, [sp, #16]
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	9b01      	ldr	r3, [sp, #4]
 8005c08:	b963      	cbnz	r3, 8005c24 <_dtoa_r+0x954>
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	2205      	movs	r2, #5
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f000 fab2 	bl	8006178 <__multadd>
 8005c14:	4601      	mov	r1, r0
 8005c16:	4606      	mov	r6, r0
 8005c18:	4650      	mov	r0, sl
 8005c1a:	f000 fcc7 	bl	80065ac <__mcmp>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f73f adbb 	bgt.w	800579a <_dtoa_r+0x4ca>
 8005c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c26:	9d00      	ldr	r5, [sp, #0]
 8005c28:	ea6f 0b03 	mvn.w	fp, r3
 8005c2c:	f04f 0800 	mov.w	r8, #0
 8005c30:	4631      	mov	r1, r6
 8005c32:	4620      	mov	r0, r4
 8005c34:	f000 fa7e 	bl	8006134 <_Bfree>
 8005c38:	2f00      	cmp	r7, #0
 8005c3a:	f43f aeab 	beq.w	8005994 <_dtoa_r+0x6c4>
 8005c3e:	f1b8 0f00 	cmp.w	r8, #0
 8005c42:	d005      	beq.n	8005c50 <_dtoa_r+0x980>
 8005c44:	45b8      	cmp	r8, r7
 8005c46:	d003      	beq.n	8005c50 <_dtoa_r+0x980>
 8005c48:	4641      	mov	r1, r8
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 fa72 	bl	8006134 <_Bfree>
 8005c50:	4639      	mov	r1, r7
 8005c52:	4620      	mov	r0, r4
 8005c54:	f000 fa6e 	bl	8006134 <_Bfree>
 8005c58:	e69c      	b.n	8005994 <_dtoa_r+0x6c4>
 8005c5a:	2600      	movs	r6, #0
 8005c5c:	4637      	mov	r7, r6
 8005c5e:	e7e1      	b.n	8005c24 <_dtoa_r+0x954>
 8005c60:	46bb      	mov	fp, r7
 8005c62:	4637      	mov	r7, r6
 8005c64:	e599      	b.n	800579a <_dtoa_r+0x4ca>
 8005c66:	bf00      	nop
 8005c68:	40240000 	.word	0x40240000
 8005c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 80c8 	beq.w	8005e04 <_dtoa_r+0xb34>
 8005c74:	9b04      	ldr	r3, [sp, #16]
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	2d00      	cmp	r5, #0
 8005c7a:	dd05      	ble.n	8005c88 <_dtoa_r+0x9b8>
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	462a      	mov	r2, r5
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 fc27 	bl	80064d4 <__lshift>
 8005c86:	4607      	mov	r7, r0
 8005c88:	f1b8 0f00 	cmp.w	r8, #0
 8005c8c:	d05b      	beq.n	8005d46 <_dtoa_r+0xa76>
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 fa0f 	bl	80060b4 <_Balloc>
 8005c96:	4605      	mov	r5, r0
 8005c98:	b928      	cbnz	r0, 8005ca6 <_dtoa_r+0x9d6>
 8005c9a:	4b83      	ldr	r3, [pc, #524]	; (8005ea8 <_dtoa_r+0xbd8>)
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005ca2:	f7ff bb2e 	b.w	8005302 <_dtoa_r+0x32>
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	3202      	adds	r2, #2
 8005caa:	0092      	lsls	r2, r2, #2
 8005cac:	f107 010c 	add.w	r1, r7, #12
 8005cb0:	300c      	adds	r0, #12
 8005cb2:	f000 ffab 	bl	8006c0c <memcpy>
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	4629      	mov	r1, r5
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 fc0a 	bl	80064d4 <__lshift>
 8005cc0:	9b00      	ldr	r3, [sp, #0]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	9304      	str	r3, [sp, #16]
 8005cc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cca:	4413      	add	r3, r2
 8005ccc:	9308      	str	r3, [sp, #32]
 8005cce:	9b02      	ldr	r3, [sp, #8]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	46b8      	mov	r8, r7
 8005cd6:	9306      	str	r3, [sp, #24]
 8005cd8:	4607      	mov	r7, r0
 8005cda:	9b04      	ldr	r3, [sp, #16]
 8005cdc:	4631      	mov	r1, r6
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	4650      	mov	r0, sl
 8005ce2:	9301      	str	r3, [sp, #4]
 8005ce4:	f7ff fa69 	bl	80051ba <quorem>
 8005ce8:	4641      	mov	r1, r8
 8005cea:	9002      	str	r0, [sp, #8]
 8005cec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005cf0:	4650      	mov	r0, sl
 8005cf2:	f000 fc5b 	bl	80065ac <__mcmp>
 8005cf6:	463a      	mov	r2, r7
 8005cf8:	9005      	str	r0, [sp, #20]
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f000 fc71 	bl	80065e4 <__mdiff>
 8005d02:	68c2      	ldr	r2, [r0, #12]
 8005d04:	4605      	mov	r5, r0
 8005d06:	bb02      	cbnz	r2, 8005d4a <_dtoa_r+0xa7a>
 8005d08:	4601      	mov	r1, r0
 8005d0a:	4650      	mov	r0, sl
 8005d0c:	f000 fc4e 	bl	80065ac <__mcmp>
 8005d10:	4602      	mov	r2, r0
 8005d12:	4629      	mov	r1, r5
 8005d14:	4620      	mov	r0, r4
 8005d16:	9209      	str	r2, [sp, #36]	; 0x24
 8005d18:	f000 fa0c 	bl	8006134 <_Bfree>
 8005d1c:	9b07      	ldr	r3, [sp, #28]
 8005d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d20:	9d04      	ldr	r5, [sp, #16]
 8005d22:	ea43 0102 	orr.w	r1, r3, r2
 8005d26:	9b06      	ldr	r3, [sp, #24]
 8005d28:	4319      	orrs	r1, r3
 8005d2a:	d110      	bne.n	8005d4e <_dtoa_r+0xa7e>
 8005d2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d30:	d029      	beq.n	8005d86 <_dtoa_r+0xab6>
 8005d32:	9b05      	ldr	r3, [sp, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	dd02      	ble.n	8005d3e <_dtoa_r+0xa6e>
 8005d38:	9b02      	ldr	r3, [sp, #8]
 8005d3a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005d3e:	9b01      	ldr	r3, [sp, #4]
 8005d40:	f883 9000 	strb.w	r9, [r3]
 8005d44:	e774      	b.n	8005c30 <_dtoa_r+0x960>
 8005d46:	4638      	mov	r0, r7
 8005d48:	e7ba      	b.n	8005cc0 <_dtoa_r+0x9f0>
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	e7e1      	b.n	8005d12 <_dtoa_r+0xa42>
 8005d4e:	9b05      	ldr	r3, [sp, #20]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	db04      	blt.n	8005d5e <_dtoa_r+0xa8e>
 8005d54:	9907      	ldr	r1, [sp, #28]
 8005d56:	430b      	orrs	r3, r1
 8005d58:	9906      	ldr	r1, [sp, #24]
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	d120      	bne.n	8005da0 <_dtoa_r+0xad0>
 8005d5e:	2a00      	cmp	r2, #0
 8005d60:	dded      	ble.n	8005d3e <_dtoa_r+0xa6e>
 8005d62:	4651      	mov	r1, sl
 8005d64:	2201      	movs	r2, #1
 8005d66:	4620      	mov	r0, r4
 8005d68:	f000 fbb4 	bl	80064d4 <__lshift>
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	4682      	mov	sl, r0
 8005d70:	f000 fc1c 	bl	80065ac <__mcmp>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	dc03      	bgt.n	8005d80 <_dtoa_r+0xab0>
 8005d78:	d1e1      	bne.n	8005d3e <_dtoa_r+0xa6e>
 8005d7a:	f019 0f01 	tst.w	r9, #1
 8005d7e:	d0de      	beq.n	8005d3e <_dtoa_r+0xa6e>
 8005d80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d84:	d1d8      	bne.n	8005d38 <_dtoa_r+0xa68>
 8005d86:	9a01      	ldr	r2, [sp, #4]
 8005d88:	2339      	movs	r3, #57	; 0x39
 8005d8a:	7013      	strb	r3, [r2, #0]
 8005d8c:	462b      	mov	r3, r5
 8005d8e:	461d      	mov	r5, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d96:	2a39      	cmp	r2, #57	; 0x39
 8005d98:	d06c      	beq.n	8005e74 <_dtoa_r+0xba4>
 8005d9a:	3201      	adds	r2, #1
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	e747      	b.n	8005c30 <_dtoa_r+0x960>
 8005da0:	2a00      	cmp	r2, #0
 8005da2:	dd07      	ble.n	8005db4 <_dtoa_r+0xae4>
 8005da4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005da8:	d0ed      	beq.n	8005d86 <_dtoa_r+0xab6>
 8005daa:	9a01      	ldr	r2, [sp, #4]
 8005dac:	f109 0301 	add.w	r3, r9, #1
 8005db0:	7013      	strb	r3, [r2, #0]
 8005db2:	e73d      	b.n	8005c30 <_dtoa_r+0x960>
 8005db4:	9b04      	ldr	r3, [sp, #16]
 8005db6:	9a08      	ldr	r2, [sp, #32]
 8005db8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d043      	beq.n	8005e48 <_dtoa_r+0xb78>
 8005dc0:	4651      	mov	r1, sl
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	220a      	movs	r2, #10
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f000 f9d6 	bl	8006178 <__multadd>
 8005dcc:	45b8      	cmp	r8, r7
 8005dce:	4682      	mov	sl, r0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	f04f 020a 	mov.w	r2, #10
 8005dd8:	4641      	mov	r1, r8
 8005dda:	4620      	mov	r0, r4
 8005ddc:	d107      	bne.n	8005dee <_dtoa_r+0xb1e>
 8005dde:	f000 f9cb 	bl	8006178 <__multadd>
 8005de2:	4680      	mov	r8, r0
 8005de4:	4607      	mov	r7, r0
 8005de6:	9b04      	ldr	r3, [sp, #16]
 8005de8:	3301      	adds	r3, #1
 8005dea:	9304      	str	r3, [sp, #16]
 8005dec:	e775      	b.n	8005cda <_dtoa_r+0xa0a>
 8005dee:	f000 f9c3 	bl	8006178 <__multadd>
 8005df2:	4639      	mov	r1, r7
 8005df4:	4680      	mov	r8, r0
 8005df6:	2300      	movs	r3, #0
 8005df8:	220a      	movs	r2, #10
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f000 f9bc 	bl	8006178 <__multadd>
 8005e00:	4607      	mov	r7, r0
 8005e02:	e7f0      	b.n	8005de6 <_dtoa_r+0xb16>
 8005e04:	9b04      	ldr	r3, [sp, #16]
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	9d00      	ldr	r5, [sp, #0]
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	4650      	mov	r0, sl
 8005e0e:	f7ff f9d4 	bl	80051ba <quorem>
 8005e12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005e16:	9b00      	ldr	r3, [sp, #0]
 8005e18:	f805 9b01 	strb.w	r9, [r5], #1
 8005e1c:	1aea      	subs	r2, r5, r3
 8005e1e:	9b01      	ldr	r3, [sp, #4]
 8005e20:	4293      	cmp	r3, r2
 8005e22:	dd07      	ble.n	8005e34 <_dtoa_r+0xb64>
 8005e24:	4651      	mov	r1, sl
 8005e26:	2300      	movs	r3, #0
 8005e28:	220a      	movs	r2, #10
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 f9a4 	bl	8006178 <__multadd>
 8005e30:	4682      	mov	sl, r0
 8005e32:	e7ea      	b.n	8005e0a <_dtoa_r+0xb3a>
 8005e34:	9b01      	ldr	r3, [sp, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bfc8      	it	gt
 8005e3a:	461d      	movgt	r5, r3
 8005e3c:	9b00      	ldr	r3, [sp, #0]
 8005e3e:	bfd8      	it	le
 8005e40:	2501      	movle	r5, #1
 8005e42:	441d      	add	r5, r3
 8005e44:	f04f 0800 	mov.w	r8, #0
 8005e48:	4651      	mov	r1, sl
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f000 fb41 	bl	80064d4 <__lshift>
 8005e52:	4631      	mov	r1, r6
 8005e54:	4682      	mov	sl, r0
 8005e56:	f000 fba9 	bl	80065ac <__mcmp>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	dc96      	bgt.n	8005d8c <_dtoa_r+0xabc>
 8005e5e:	d102      	bne.n	8005e66 <_dtoa_r+0xb96>
 8005e60:	f019 0f01 	tst.w	r9, #1
 8005e64:	d192      	bne.n	8005d8c <_dtoa_r+0xabc>
 8005e66:	462b      	mov	r3, r5
 8005e68:	461d      	mov	r5, r3
 8005e6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e6e:	2a30      	cmp	r2, #48	; 0x30
 8005e70:	d0fa      	beq.n	8005e68 <_dtoa_r+0xb98>
 8005e72:	e6dd      	b.n	8005c30 <_dtoa_r+0x960>
 8005e74:	9a00      	ldr	r2, [sp, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d189      	bne.n	8005d8e <_dtoa_r+0xabe>
 8005e7a:	f10b 0b01 	add.w	fp, fp, #1
 8005e7e:	2331      	movs	r3, #49	; 0x31
 8005e80:	e796      	b.n	8005db0 <_dtoa_r+0xae0>
 8005e82:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <_dtoa_r+0xbdc>)
 8005e84:	f7ff ba99 	b.w	80053ba <_dtoa_r+0xea>
 8005e88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f47f aa6d 	bne.w	800536a <_dtoa_r+0x9a>
 8005e90:	4b07      	ldr	r3, [pc, #28]	; (8005eb0 <_dtoa_r+0xbe0>)
 8005e92:	f7ff ba92 	b.w	80053ba <_dtoa_r+0xea>
 8005e96:	9b01      	ldr	r3, [sp, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	dcb5      	bgt.n	8005e08 <_dtoa_r+0xb38>
 8005e9c:	9b07      	ldr	r3, [sp, #28]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	f73f aeb1 	bgt.w	8005c06 <_dtoa_r+0x936>
 8005ea4:	e7b0      	b.n	8005e08 <_dtoa_r+0xb38>
 8005ea6:	bf00      	nop
 8005ea8:	08007450 	.word	0x08007450
 8005eac:	080073b0 	.word	0x080073b0
 8005eb0:	080073d4 	.word	0x080073d4

08005eb4 <_free_r>:
 8005eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eb6:	2900      	cmp	r1, #0
 8005eb8:	d044      	beq.n	8005f44 <_free_r+0x90>
 8005eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ebe:	9001      	str	r0, [sp, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f1a1 0404 	sub.w	r4, r1, #4
 8005ec6:	bfb8      	it	lt
 8005ec8:	18e4      	addlt	r4, r4, r3
 8005eca:	f000 f8e7 	bl	800609c <__malloc_lock>
 8005ece:	4a1e      	ldr	r2, [pc, #120]	; (8005f48 <_free_r+0x94>)
 8005ed0:	9801      	ldr	r0, [sp, #4]
 8005ed2:	6813      	ldr	r3, [r2, #0]
 8005ed4:	b933      	cbnz	r3, 8005ee4 <_free_r+0x30>
 8005ed6:	6063      	str	r3, [r4, #4]
 8005ed8:	6014      	str	r4, [r2, #0]
 8005eda:	b003      	add	sp, #12
 8005edc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ee0:	f000 b8e2 	b.w	80060a8 <__malloc_unlock>
 8005ee4:	42a3      	cmp	r3, r4
 8005ee6:	d908      	bls.n	8005efa <_free_r+0x46>
 8005ee8:	6825      	ldr	r5, [r4, #0]
 8005eea:	1961      	adds	r1, r4, r5
 8005eec:	428b      	cmp	r3, r1
 8005eee:	bf01      	itttt	eq
 8005ef0:	6819      	ldreq	r1, [r3, #0]
 8005ef2:	685b      	ldreq	r3, [r3, #4]
 8005ef4:	1949      	addeq	r1, r1, r5
 8005ef6:	6021      	streq	r1, [r4, #0]
 8005ef8:	e7ed      	b.n	8005ed6 <_free_r+0x22>
 8005efa:	461a      	mov	r2, r3
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	b10b      	cbz	r3, 8005f04 <_free_r+0x50>
 8005f00:	42a3      	cmp	r3, r4
 8005f02:	d9fa      	bls.n	8005efa <_free_r+0x46>
 8005f04:	6811      	ldr	r1, [r2, #0]
 8005f06:	1855      	adds	r5, r2, r1
 8005f08:	42a5      	cmp	r5, r4
 8005f0a:	d10b      	bne.n	8005f24 <_free_r+0x70>
 8005f0c:	6824      	ldr	r4, [r4, #0]
 8005f0e:	4421      	add	r1, r4
 8005f10:	1854      	adds	r4, r2, r1
 8005f12:	42a3      	cmp	r3, r4
 8005f14:	6011      	str	r1, [r2, #0]
 8005f16:	d1e0      	bne.n	8005eda <_free_r+0x26>
 8005f18:	681c      	ldr	r4, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	6053      	str	r3, [r2, #4]
 8005f1e:	440c      	add	r4, r1
 8005f20:	6014      	str	r4, [r2, #0]
 8005f22:	e7da      	b.n	8005eda <_free_r+0x26>
 8005f24:	d902      	bls.n	8005f2c <_free_r+0x78>
 8005f26:	230c      	movs	r3, #12
 8005f28:	6003      	str	r3, [r0, #0]
 8005f2a:	e7d6      	b.n	8005eda <_free_r+0x26>
 8005f2c:	6825      	ldr	r5, [r4, #0]
 8005f2e:	1961      	adds	r1, r4, r5
 8005f30:	428b      	cmp	r3, r1
 8005f32:	bf04      	itt	eq
 8005f34:	6819      	ldreq	r1, [r3, #0]
 8005f36:	685b      	ldreq	r3, [r3, #4]
 8005f38:	6063      	str	r3, [r4, #4]
 8005f3a:	bf04      	itt	eq
 8005f3c:	1949      	addeq	r1, r1, r5
 8005f3e:	6021      	streq	r1, [r4, #0]
 8005f40:	6054      	str	r4, [r2, #4]
 8005f42:	e7ca      	b.n	8005eda <_free_r+0x26>
 8005f44:	b003      	add	sp, #12
 8005f46:	bd30      	pop	{r4, r5, pc}
 8005f48:	20000450 	.word	0x20000450

08005f4c <malloc>:
 8005f4c:	4b02      	ldr	r3, [pc, #8]	; (8005f58 <malloc+0xc>)
 8005f4e:	4601      	mov	r1, r0
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	f000 b823 	b.w	8005f9c <_malloc_r>
 8005f56:	bf00      	nop
 8005f58:	2000006c 	.word	0x2000006c

08005f5c <sbrk_aligned>:
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	4e0e      	ldr	r6, [pc, #56]	; (8005f98 <sbrk_aligned+0x3c>)
 8005f60:	460c      	mov	r4, r1
 8005f62:	6831      	ldr	r1, [r6, #0]
 8005f64:	4605      	mov	r5, r0
 8005f66:	b911      	cbnz	r1, 8005f6e <sbrk_aligned+0x12>
 8005f68:	f000 fe40 	bl	8006bec <_sbrk_r>
 8005f6c:	6030      	str	r0, [r6, #0]
 8005f6e:	4621      	mov	r1, r4
 8005f70:	4628      	mov	r0, r5
 8005f72:	f000 fe3b 	bl	8006bec <_sbrk_r>
 8005f76:	1c43      	adds	r3, r0, #1
 8005f78:	d00a      	beq.n	8005f90 <sbrk_aligned+0x34>
 8005f7a:	1cc4      	adds	r4, r0, #3
 8005f7c:	f024 0403 	bic.w	r4, r4, #3
 8005f80:	42a0      	cmp	r0, r4
 8005f82:	d007      	beq.n	8005f94 <sbrk_aligned+0x38>
 8005f84:	1a21      	subs	r1, r4, r0
 8005f86:	4628      	mov	r0, r5
 8005f88:	f000 fe30 	bl	8006bec <_sbrk_r>
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d101      	bne.n	8005f94 <sbrk_aligned+0x38>
 8005f90:	f04f 34ff 	mov.w	r4, #4294967295
 8005f94:	4620      	mov	r0, r4
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
 8005f98:	20000454 	.word	0x20000454

08005f9c <_malloc_r>:
 8005f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fa0:	1ccd      	adds	r5, r1, #3
 8005fa2:	f025 0503 	bic.w	r5, r5, #3
 8005fa6:	3508      	adds	r5, #8
 8005fa8:	2d0c      	cmp	r5, #12
 8005faa:	bf38      	it	cc
 8005fac:	250c      	movcc	r5, #12
 8005fae:	2d00      	cmp	r5, #0
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	db01      	blt.n	8005fb8 <_malloc_r+0x1c>
 8005fb4:	42a9      	cmp	r1, r5
 8005fb6:	d905      	bls.n	8005fc4 <_malloc_r+0x28>
 8005fb8:	230c      	movs	r3, #12
 8005fba:	603b      	str	r3, [r7, #0]
 8005fbc:	2600      	movs	r6, #0
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006098 <_malloc_r+0xfc>
 8005fc8:	f000 f868 	bl	800609c <__malloc_lock>
 8005fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8005fd0:	461c      	mov	r4, r3
 8005fd2:	bb5c      	cbnz	r4, 800602c <_malloc_r+0x90>
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	f7ff ffc0 	bl	8005f5c <sbrk_aligned>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	4604      	mov	r4, r0
 8005fe0:	d155      	bne.n	800608e <_malloc_r+0xf2>
 8005fe2:	f8d8 4000 	ldr.w	r4, [r8]
 8005fe6:	4626      	mov	r6, r4
 8005fe8:	2e00      	cmp	r6, #0
 8005fea:	d145      	bne.n	8006078 <_malloc_r+0xdc>
 8005fec:	2c00      	cmp	r4, #0
 8005fee:	d048      	beq.n	8006082 <_malloc_r+0xe6>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4638      	mov	r0, r7
 8005ff6:	eb04 0903 	add.w	r9, r4, r3
 8005ffa:	f000 fdf7 	bl	8006bec <_sbrk_r>
 8005ffe:	4581      	cmp	r9, r0
 8006000:	d13f      	bne.n	8006082 <_malloc_r+0xe6>
 8006002:	6821      	ldr	r1, [r4, #0]
 8006004:	1a6d      	subs	r5, r5, r1
 8006006:	4629      	mov	r1, r5
 8006008:	4638      	mov	r0, r7
 800600a:	f7ff ffa7 	bl	8005f5c <sbrk_aligned>
 800600e:	3001      	adds	r0, #1
 8006010:	d037      	beq.n	8006082 <_malloc_r+0xe6>
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	442b      	add	r3, r5
 8006016:	6023      	str	r3, [r4, #0]
 8006018:	f8d8 3000 	ldr.w	r3, [r8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d038      	beq.n	8006092 <_malloc_r+0xf6>
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	42a2      	cmp	r2, r4
 8006024:	d12b      	bne.n	800607e <_malloc_r+0xe2>
 8006026:	2200      	movs	r2, #0
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	e00f      	b.n	800604c <_malloc_r+0xb0>
 800602c:	6822      	ldr	r2, [r4, #0]
 800602e:	1b52      	subs	r2, r2, r5
 8006030:	d41f      	bmi.n	8006072 <_malloc_r+0xd6>
 8006032:	2a0b      	cmp	r2, #11
 8006034:	d917      	bls.n	8006066 <_malloc_r+0xca>
 8006036:	1961      	adds	r1, r4, r5
 8006038:	42a3      	cmp	r3, r4
 800603a:	6025      	str	r5, [r4, #0]
 800603c:	bf18      	it	ne
 800603e:	6059      	strne	r1, [r3, #4]
 8006040:	6863      	ldr	r3, [r4, #4]
 8006042:	bf08      	it	eq
 8006044:	f8c8 1000 	streq.w	r1, [r8]
 8006048:	5162      	str	r2, [r4, r5]
 800604a:	604b      	str	r3, [r1, #4]
 800604c:	4638      	mov	r0, r7
 800604e:	f104 060b 	add.w	r6, r4, #11
 8006052:	f000 f829 	bl	80060a8 <__malloc_unlock>
 8006056:	f026 0607 	bic.w	r6, r6, #7
 800605a:	1d23      	adds	r3, r4, #4
 800605c:	1af2      	subs	r2, r6, r3
 800605e:	d0ae      	beq.n	8005fbe <_malloc_r+0x22>
 8006060:	1b9b      	subs	r3, r3, r6
 8006062:	50a3      	str	r3, [r4, r2]
 8006064:	e7ab      	b.n	8005fbe <_malloc_r+0x22>
 8006066:	42a3      	cmp	r3, r4
 8006068:	6862      	ldr	r2, [r4, #4]
 800606a:	d1dd      	bne.n	8006028 <_malloc_r+0x8c>
 800606c:	f8c8 2000 	str.w	r2, [r8]
 8006070:	e7ec      	b.n	800604c <_malloc_r+0xb0>
 8006072:	4623      	mov	r3, r4
 8006074:	6864      	ldr	r4, [r4, #4]
 8006076:	e7ac      	b.n	8005fd2 <_malloc_r+0x36>
 8006078:	4634      	mov	r4, r6
 800607a:	6876      	ldr	r6, [r6, #4]
 800607c:	e7b4      	b.n	8005fe8 <_malloc_r+0x4c>
 800607e:	4613      	mov	r3, r2
 8006080:	e7cc      	b.n	800601c <_malloc_r+0x80>
 8006082:	230c      	movs	r3, #12
 8006084:	603b      	str	r3, [r7, #0]
 8006086:	4638      	mov	r0, r7
 8006088:	f000 f80e 	bl	80060a8 <__malloc_unlock>
 800608c:	e797      	b.n	8005fbe <_malloc_r+0x22>
 800608e:	6025      	str	r5, [r4, #0]
 8006090:	e7dc      	b.n	800604c <_malloc_r+0xb0>
 8006092:	605b      	str	r3, [r3, #4]
 8006094:	deff      	udf	#255	; 0xff
 8006096:	bf00      	nop
 8006098:	20000450 	.word	0x20000450

0800609c <__malloc_lock>:
 800609c:	4801      	ldr	r0, [pc, #4]	; (80060a4 <__malloc_lock+0x8>)
 800609e:	f7ff b88a 	b.w	80051b6 <__retarget_lock_acquire_recursive>
 80060a2:	bf00      	nop
 80060a4:	2000044c 	.word	0x2000044c

080060a8 <__malloc_unlock>:
 80060a8:	4801      	ldr	r0, [pc, #4]	; (80060b0 <__malloc_unlock+0x8>)
 80060aa:	f7ff b885 	b.w	80051b8 <__retarget_lock_release_recursive>
 80060ae:	bf00      	nop
 80060b0:	2000044c 	.word	0x2000044c

080060b4 <_Balloc>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	69c6      	ldr	r6, [r0, #28]
 80060b8:	4604      	mov	r4, r0
 80060ba:	460d      	mov	r5, r1
 80060bc:	b976      	cbnz	r6, 80060dc <_Balloc+0x28>
 80060be:	2010      	movs	r0, #16
 80060c0:	f7ff ff44 	bl	8005f4c <malloc>
 80060c4:	4602      	mov	r2, r0
 80060c6:	61e0      	str	r0, [r4, #28]
 80060c8:	b920      	cbnz	r0, 80060d4 <_Balloc+0x20>
 80060ca:	4b18      	ldr	r3, [pc, #96]	; (800612c <_Balloc+0x78>)
 80060cc:	4818      	ldr	r0, [pc, #96]	; (8006130 <_Balloc+0x7c>)
 80060ce:	216b      	movs	r1, #107	; 0x6b
 80060d0:	f000 fdaa 	bl	8006c28 <__assert_func>
 80060d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060d8:	6006      	str	r6, [r0, #0]
 80060da:	60c6      	str	r6, [r0, #12]
 80060dc:	69e6      	ldr	r6, [r4, #28]
 80060de:	68f3      	ldr	r3, [r6, #12]
 80060e0:	b183      	cbz	r3, 8006104 <_Balloc+0x50>
 80060e2:	69e3      	ldr	r3, [r4, #28]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060ea:	b9b8      	cbnz	r0, 800611c <_Balloc+0x68>
 80060ec:	2101      	movs	r1, #1
 80060ee:	fa01 f605 	lsl.w	r6, r1, r5
 80060f2:	1d72      	adds	r2, r6, #5
 80060f4:	0092      	lsls	r2, r2, #2
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 fdb4 	bl	8006c64 <_calloc_r>
 80060fc:	b160      	cbz	r0, 8006118 <_Balloc+0x64>
 80060fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006102:	e00e      	b.n	8006122 <_Balloc+0x6e>
 8006104:	2221      	movs	r2, #33	; 0x21
 8006106:	2104      	movs	r1, #4
 8006108:	4620      	mov	r0, r4
 800610a:	f000 fdab 	bl	8006c64 <_calloc_r>
 800610e:	69e3      	ldr	r3, [r4, #28]
 8006110:	60f0      	str	r0, [r6, #12]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e4      	bne.n	80060e2 <_Balloc+0x2e>
 8006118:	2000      	movs	r0, #0
 800611a:	bd70      	pop	{r4, r5, r6, pc}
 800611c:	6802      	ldr	r2, [r0, #0]
 800611e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006122:	2300      	movs	r3, #0
 8006124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006128:	e7f7      	b.n	800611a <_Balloc+0x66>
 800612a:	bf00      	nop
 800612c:	080073e1 	.word	0x080073e1
 8006130:	08007461 	.word	0x08007461

08006134 <_Bfree>:
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	69c6      	ldr	r6, [r0, #28]
 8006138:	4605      	mov	r5, r0
 800613a:	460c      	mov	r4, r1
 800613c:	b976      	cbnz	r6, 800615c <_Bfree+0x28>
 800613e:	2010      	movs	r0, #16
 8006140:	f7ff ff04 	bl	8005f4c <malloc>
 8006144:	4602      	mov	r2, r0
 8006146:	61e8      	str	r0, [r5, #28]
 8006148:	b920      	cbnz	r0, 8006154 <_Bfree+0x20>
 800614a:	4b09      	ldr	r3, [pc, #36]	; (8006170 <_Bfree+0x3c>)
 800614c:	4809      	ldr	r0, [pc, #36]	; (8006174 <_Bfree+0x40>)
 800614e:	218f      	movs	r1, #143	; 0x8f
 8006150:	f000 fd6a 	bl	8006c28 <__assert_func>
 8006154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006158:	6006      	str	r6, [r0, #0]
 800615a:	60c6      	str	r6, [r0, #12]
 800615c:	b13c      	cbz	r4, 800616e <_Bfree+0x3a>
 800615e:	69eb      	ldr	r3, [r5, #28]
 8006160:	6862      	ldr	r2, [r4, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006168:	6021      	str	r1, [r4, #0]
 800616a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800616e:	bd70      	pop	{r4, r5, r6, pc}
 8006170:	080073e1 	.word	0x080073e1
 8006174:	08007461 	.word	0x08007461

08006178 <__multadd>:
 8006178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800617c:	690d      	ldr	r5, [r1, #16]
 800617e:	4607      	mov	r7, r0
 8006180:	460c      	mov	r4, r1
 8006182:	461e      	mov	r6, r3
 8006184:	f101 0c14 	add.w	ip, r1, #20
 8006188:	2000      	movs	r0, #0
 800618a:	f8dc 3000 	ldr.w	r3, [ip]
 800618e:	b299      	uxth	r1, r3
 8006190:	fb02 6101 	mla	r1, r2, r1, r6
 8006194:	0c1e      	lsrs	r6, r3, #16
 8006196:	0c0b      	lsrs	r3, r1, #16
 8006198:	fb02 3306 	mla	r3, r2, r6, r3
 800619c:	b289      	uxth	r1, r1
 800619e:	3001      	adds	r0, #1
 80061a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061a4:	4285      	cmp	r5, r0
 80061a6:	f84c 1b04 	str.w	r1, [ip], #4
 80061aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061ae:	dcec      	bgt.n	800618a <__multadd+0x12>
 80061b0:	b30e      	cbz	r6, 80061f6 <__multadd+0x7e>
 80061b2:	68a3      	ldr	r3, [r4, #8]
 80061b4:	42ab      	cmp	r3, r5
 80061b6:	dc19      	bgt.n	80061ec <__multadd+0x74>
 80061b8:	6861      	ldr	r1, [r4, #4]
 80061ba:	4638      	mov	r0, r7
 80061bc:	3101      	adds	r1, #1
 80061be:	f7ff ff79 	bl	80060b4 <_Balloc>
 80061c2:	4680      	mov	r8, r0
 80061c4:	b928      	cbnz	r0, 80061d2 <__multadd+0x5a>
 80061c6:	4602      	mov	r2, r0
 80061c8:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <__multadd+0x84>)
 80061ca:	480d      	ldr	r0, [pc, #52]	; (8006200 <__multadd+0x88>)
 80061cc:	21ba      	movs	r1, #186	; 0xba
 80061ce:	f000 fd2b 	bl	8006c28 <__assert_func>
 80061d2:	6922      	ldr	r2, [r4, #16]
 80061d4:	3202      	adds	r2, #2
 80061d6:	f104 010c 	add.w	r1, r4, #12
 80061da:	0092      	lsls	r2, r2, #2
 80061dc:	300c      	adds	r0, #12
 80061de:	f000 fd15 	bl	8006c0c <memcpy>
 80061e2:	4621      	mov	r1, r4
 80061e4:	4638      	mov	r0, r7
 80061e6:	f7ff ffa5 	bl	8006134 <_Bfree>
 80061ea:	4644      	mov	r4, r8
 80061ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061f0:	3501      	adds	r5, #1
 80061f2:	615e      	str	r6, [r3, #20]
 80061f4:	6125      	str	r5, [r4, #16]
 80061f6:	4620      	mov	r0, r4
 80061f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061fc:	08007450 	.word	0x08007450
 8006200:	08007461 	.word	0x08007461

08006204 <__hi0bits>:
 8006204:	0c03      	lsrs	r3, r0, #16
 8006206:	041b      	lsls	r3, r3, #16
 8006208:	b9d3      	cbnz	r3, 8006240 <__hi0bits+0x3c>
 800620a:	0400      	lsls	r0, r0, #16
 800620c:	2310      	movs	r3, #16
 800620e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006212:	bf04      	itt	eq
 8006214:	0200      	lsleq	r0, r0, #8
 8006216:	3308      	addeq	r3, #8
 8006218:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800621c:	bf04      	itt	eq
 800621e:	0100      	lsleq	r0, r0, #4
 8006220:	3304      	addeq	r3, #4
 8006222:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006226:	bf04      	itt	eq
 8006228:	0080      	lsleq	r0, r0, #2
 800622a:	3302      	addeq	r3, #2
 800622c:	2800      	cmp	r0, #0
 800622e:	db05      	blt.n	800623c <__hi0bits+0x38>
 8006230:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006234:	f103 0301 	add.w	r3, r3, #1
 8006238:	bf08      	it	eq
 800623a:	2320      	moveq	r3, #32
 800623c:	4618      	mov	r0, r3
 800623e:	4770      	bx	lr
 8006240:	2300      	movs	r3, #0
 8006242:	e7e4      	b.n	800620e <__hi0bits+0xa>

08006244 <__lo0bits>:
 8006244:	6803      	ldr	r3, [r0, #0]
 8006246:	f013 0207 	ands.w	r2, r3, #7
 800624a:	d00c      	beq.n	8006266 <__lo0bits+0x22>
 800624c:	07d9      	lsls	r1, r3, #31
 800624e:	d422      	bmi.n	8006296 <__lo0bits+0x52>
 8006250:	079a      	lsls	r2, r3, #30
 8006252:	bf49      	itett	mi
 8006254:	085b      	lsrmi	r3, r3, #1
 8006256:	089b      	lsrpl	r3, r3, #2
 8006258:	6003      	strmi	r3, [r0, #0]
 800625a:	2201      	movmi	r2, #1
 800625c:	bf5c      	itt	pl
 800625e:	6003      	strpl	r3, [r0, #0]
 8006260:	2202      	movpl	r2, #2
 8006262:	4610      	mov	r0, r2
 8006264:	4770      	bx	lr
 8006266:	b299      	uxth	r1, r3
 8006268:	b909      	cbnz	r1, 800626e <__lo0bits+0x2a>
 800626a:	0c1b      	lsrs	r3, r3, #16
 800626c:	2210      	movs	r2, #16
 800626e:	b2d9      	uxtb	r1, r3
 8006270:	b909      	cbnz	r1, 8006276 <__lo0bits+0x32>
 8006272:	3208      	adds	r2, #8
 8006274:	0a1b      	lsrs	r3, r3, #8
 8006276:	0719      	lsls	r1, r3, #28
 8006278:	bf04      	itt	eq
 800627a:	091b      	lsreq	r3, r3, #4
 800627c:	3204      	addeq	r2, #4
 800627e:	0799      	lsls	r1, r3, #30
 8006280:	bf04      	itt	eq
 8006282:	089b      	lsreq	r3, r3, #2
 8006284:	3202      	addeq	r2, #2
 8006286:	07d9      	lsls	r1, r3, #31
 8006288:	d403      	bmi.n	8006292 <__lo0bits+0x4e>
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	f102 0201 	add.w	r2, r2, #1
 8006290:	d003      	beq.n	800629a <__lo0bits+0x56>
 8006292:	6003      	str	r3, [r0, #0]
 8006294:	e7e5      	b.n	8006262 <__lo0bits+0x1e>
 8006296:	2200      	movs	r2, #0
 8006298:	e7e3      	b.n	8006262 <__lo0bits+0x1e>
 800629a:	2220      	movs	r2, #32
 800629c:	e7e1      	b.n	8006262 <__lo0bits+0x1e>
	...

080062a0 <__i2b>:
 80062a0:	b510      	push	{r4, lr}
 80062a2:	460c      	mov	r4, r1
 80062a4:	2101      	movs	r1, #1
 80062a6:	f7ff ff05 	bl	80060b4 <_Balloc>
 80062aa:	4602      	mov	r2, r0
 80062ac:	b928      	cbnz	r0, 80062ba <__i2b+0x1a>
 80062ae:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <__i2b+0x24>)
 80062b0:	4805      	ldr	r0, [pc, #20]	; (80062c8 <__i2b+0x28>)
 80062b2:	f240 1145 	movw	r1, #325	; 0x145
 80062b6:	f000 fcb7 	bl	8006c28 <__assert_func>
 80062ba:	2301      	movs	r3, #1
 80062bc:	6144      	str	r4, [r0, #20]
 80062be:	6103      	str	r3, [r0, #16]
 80062c0:	bd10      	pop	{r4, pc}
 80062c2:	bf00      	nop
 80062c4:	08007450 	.word	0x08007450
 80062c8:	08007461 	.word	0x08007461

080062cc <__multiply>:
 80062cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d0:	4691      	mov	r9, r2
 80062d2:	690a      	ldr	r2, [r1, #16]
 80062d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80062d8:	429a      	cmp	r2, r3
 80062da:	bfb8      	it	lt
 80062dc:	460b      	movlt	r3, r1
 80062de:	460c      	mov	r4, r1
 80062e0:	bfbc      	itt	lt
 80062e2:	464c      	movlt	r4, r9
 80062e4:	4699      	movlt	r9, r3
 80062e6:	6927      	ldr	r7, [r4, #16]
 80062e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80062ec:	68a3      	ldr	r3, [r4, #8]
 80062ee:	6861      	ldr	r1, [r4, #4]
 80062f0:	eb07 060a 	add.w	r6, r7, sl
 80062f4:	42b3      	cmp	r3, r6
 80062f6:	b085      	sub	sp, #20
 80062f8:	bfb8      	it	lt
 80062fa:	3101      	addlt	r1, #1
 80062fc:	f7ff feda 	bl	80060b4 <_Balloc>
 8006300:	b930      	cbnz	r0, 8006310 <__multiply+0x44>
 8006302:	4602      	mov	r2, r0
 8006304:	4b44      	ldr	r3, [pc, #272]	; (8006418 <__multiply+0x14c>)
 8006306:	4845      	ldr	r0, [pc, #276]	; (800641c <__multiply+0x150>)
 8006308:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800630c:	f000 fc8c 	bl	8006c28 <__assert_func>
 8006310:	f100 0514 	add.w	r5, r0, #20
 8006314:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006318:	462b      	mov	r3, r5
 800631a:	2200      	movs	r2, #0
 800631c:	4543      	cmp	r3, r8
 800631e:	d321      	bcc.n	8006364 <__multiply+0x98>
 8006320:	f104 0314 	add.w	r3, r4, #20
 8006324:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006328:	f109 0314 	add.w	r3, r9, #20
 800632c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006330:	9202      	str	r2, [sp, #8]
 8006332:	1b3a      	subs	r2, r7, r4
 8006334:	3a15      	subs	r2, #21
 8006336:	f022 0203 	bic.w	r2, r2, #3
 800633a:	3204      	adds	r2, #4
 800633c:	f104 0115 	add.w	r1, r4, #21
 8006340:	428f      	cmp	r7, r1
 8006342:	bf38      	it	cc
 8006344:	2204      	movcc	r2, #4
 8006346:	9201      	str	r2, [sp, #4]
 8006348:	9a02      	ldr	r2, [sp, #8]
 800634a:	9303      	str	r3, [sp, #12]
 800634c:	429a      	cmp	r2, r3
 800634e:	d80c      	bhi.n	800636a <__multiply+0x9e>
 8006350:	2e00      	cmp	r6, #0
 8006352:	dd03      	ble.n	800635c <__multiply+0x90>
 8006354:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006358:	2b00      	cmp	r3, #0
 800635a:	d05b      	beq.n	8006414 <__multiply+0x148>
 800635c:	6106      	str	r6, [r0, #16]
 800635e:	b005      	add	sp, #20
 8006360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006364:	f843 2b04 	str.w	r2, [r3], #4
 8006368:	e7d8      	b.n	800631c <__multiply+0x50>
 800636a:	f8b3 a000 	ldrh.w	sl, [r3]
 800636e:	f1ba 0f00 	cmp.w	sl, #0
 8006372:	d024      	beq.n	80063be <__multiply+0xf2>
 8006374:	f104 0e14 	add.w	lr, r4, #20
 8006378:	46a9      	mov	r9, r5
 800637a:	f04f 0c00 	mov.w	ip, #0
 800637e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006382:	f8d9 1000 	ldr.w	r1, [r9]
 8006386:	fa1f fb82 	uxth.w	fp, r2
 800638a:	b289      	uxth	r1, r1
 800638c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006390:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006394:	f8d9 2000 	ldr.w	r2, [r9]
 8006398:	4461      	add	r1, ip
 800639a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800639e:	fb0a c20b 	mla	r2, sl, fp, ip
 80063a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063a6:	b289      	uxth	r1, r1
 80063a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063ac:	4577      	cmp	r7, lr
 80063ae:	f849 1b04 	str.w	r1, [r9], #4
 80063b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063b6:	d8e2      	bhi.n	800637e <__multiply+0xb2>
 80063b8:	9a01      	ldr	r2, [sp, #4]
 80063ba:	f845 c002 	str.w	ip, [r5, r2]
 80063be:	9a03      	ldr	r2, [sp, #12]
 80063c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80063c4:	3304      	adds	r3, #4
 80063c6:	f1b9 0f00 	cmp.w	r9, #0
 80063ca:	d021      	beq.n	8006410 <__multiply+0x144>
 80063cc:	6829      	ldr	r1, [r5, #0]
 80063ce:	f104 0c14 	add.w	ip, r4, #20
 80063d2:	46ae      	mov	lr, r5
 80063d4:	f04f 0a00 	mov.w	sl, #0
 80063d8:	f8bc b000 	ldrh.w	fp, [ip]
 80063dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80063e0:	fb09 220b 	mla	r2, r9, fp, r2
 80063e4:	4452      	add	r2, sl
 80063e6:	b289      	uxth	r1, r1
 80063e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063ec:	f84e 1b04 	str.w	r1, [lr], #4
 80063f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80063f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063f8:	f8be 1000 	ldrh.w	r1, [lr]
 80063fc:	fb09 110a 	mla	r1, r9, sl, r1
 8006400:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006404:	4567      	cmp	r7, ip
 8006406:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800640a:	d8e5      	bhi.n	80063d8 <__multiply+0x10c>
 800640c:	9a01      	ldr	r2, [sp, #4]
 800640e:	50a9      	str	r1, [r5, r2]
 8006410:	3504      	adds	r5, #4
 8006412:	e799      	b.n	8006348 <__multiply+0x7c>
 8006414:	3e01      	subs	r6, #1
 8006416:	e79b      	b.n	8006350 <__multiply+0x84>
 8006418:	08007450 	.word	0x08007450
 800641c:	08007461 	.word	0x08007461

08006420 <__pow5mult>:
 8006420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006424:	4615      	mov	r5, r2
 8006426:	f012 0203 	ands.w	r2, r2, #3
 800642a:	4606      	mov	r6, r0
 800642c:	460f      	mov	r7, r1
 800642e:	d007      	beq.n	8006440 <__pow5mult+0x20>
 8006430:	4c25      	ldr	r4, [pc, #148]	; (80064c8 <__pow5mult+0xa8>)
 8006432:	3a01      	subs	r2, #1
 8006434:	2300      	movs	r3, #0
 8006436:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800643a:	f7ff fe9d 	bl	8006178 <__multadd>
 800643e:	4607      	mov	r7, r0
 8006440:	10ad      	asrs	r5, r5, #2
 8006442:	d03d      	beq.n	80064c0 <__pow5mult+0xa0>
 8006444:	69f4      	ldr	r4, [r6, #28]
 8006446:	b97c      	cbnz	r4, 8006468 <__pow5mult+0x48>
 8006448:	2010      	movs	r0, #16
 800644a:	f7ff fd7f 	bl	8005f4c <malloc>
 800644e:	4602      	mov	r2, r0
 8006450:	61f0      	str	r0, [r6, #28]
 8006452:	b928      	cbnz	r0, 8006460 <__pow5mult+0x40>
 8006454:	4b1d      	ldr	r3, [pc, #116]	; (80064cc <__pow5mult+0xac>)
 8006456:	481e      	ldr	r0, [pc, #120]	; (80064d0 <__pow5mult+0xb0>)
 8006458:	f240 11b3 	movw	r1, #435	; 0x1b3
 800645c:	f000 fbe4 	bl	8006c28 <__assert_func>
 8006460:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006464:	6004      	str	r4, [r0, #0]
 8006466:	60c4      	str	r4, [r0, #12]
 8006468:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800646c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006470:	b94c      	cbnz	r4, 8006486 <__pow5mult+0x66>
 8006472:	f240 2171 	movw	r1, #625	; 0x271
 8006476:	4630      	mov	r0, r6
 8006478:	f7ff ff12 	bl	80062a0 <__i2b>
 800647c:	2300      	movs	r3, #0
 800647e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006482:	4604      	mov	r4, r0
 8006484:	6003      	str	r3, [r0, #0]
 8006486:	f04f 0900 	mov.w	r9, #0
 800648a:	07eb      	lsls	r3, r5, #31
 800648c:	d50a      	bpl.n	80064a4 <__pow5mult+0x84>
 800648e:	4639      	mov	r1, r7
 8006490:	4622      	mov	r2, r4
 8006492:	4630      	mov	r0, r6
 8006494:	f7ff ff1a 	bl	80062cc <__multiply>
 8006498:	4639      	mov	r1, r7
 800649a:	4680      	mov	r8, r0
 800649c:	4630      	mov	r0, r6
 800649e:	f7ff fe49 	bl	8006134 <_Bfree>
 80064a2:	4647      	mov	r7, r8
 80064a4:	106d      	asrs	r5, r5, #1
 80064a6:	d00b      	beq.n	80064c0 <__pow5mult+0xa0>
 80064a8:	6820      	ldr	r0, [r4, #0]
 80064aa:	b938      	cbnz	r0, 80064bc <__pow5mult+0x9c>
 80064ac:	4622      	mov	r2, r4
 80064ae:	4621      	mov	r1, r4
 80064b0:	4630      	mov	r0, r6
 80064b2:	f7ff ff0b 	bl	80062cc <__multiply>
 80064b6:	6020      	str	r0, [r4, #0]
 80064b8:	f8c0 9000 	str.w	r9, [r0]
 80064bc:	4604      	mov	r4, r0
 80064be:	e7e4      	b.n	800648a <__pow5mult+0x6a>
 80064c0:	4638      	mov	r0, r7
 80064c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064c6:	bf00      	nop
 80064c8:	080075b0 	.word	0x080075b0
 80064cc:	080073e1 	.word	0x080073e1
 80064d0:	08007461 	.word	0x08007461

080064d4 <__lshift>:
 80064d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d8:	460c      	mov	r4, r1
 80064da:	6849      	ldr	r1, [r1, #4]
 80064dc:	6923      	ldr	r3, [r4, #16]
 80064de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064e2:	68a3      	ldr	r3, [r4, #8]
 80064e4:	4607      	mov	r7, r0
 80064e6:	4691      	mov	r9, r2
 80064e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064ec:	f108 0601 	add.w	r6, r8, #1
 80064f0:	42b3      	cmp	r3, r6
 80064f2:	db0b      	blt.n	800650c <__lshift+0x38>
 80064f4:	4638      	mov	r0, r7
 80064f6:	f7ff fddd 	bl	80060b4 <_Balloc>
 80064fa:	4605      	mov	r5, r0
 80064fc:	b948      	cbnz	r0, 8006512 <__lshift+0x3e>
 80064fe:	4602      	mov	r2, r0
 8006500:	4b28      	ldr	r3, [pc, #160]	; (80065a4 <__lshift+0xd0>)
 8006502:	4829      	ldr	r0, [pc, #164]	; (80065a8 <__lshift+0xd4>)
 8006504:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006508:	f000 fb8e 	bl	8006c28 <__assert_func>
 800650c:	3101      	adds	r1, #1
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	e7ee      	b.n	80064f0 <__lshift+0x1c>
 8006512:	2300      	movs	r3, #0
 8006514:	f100 0114 	add.w	r1, r0, #20
 8006518:	f100 0210 	add.w	r2, r0, #16
 800651c:	4618      	mov	r0, r3
 800651e:	4553      	cmp	r3, sl
 8006520:	db33      	blt.n	800658a <__lshift+0xb6>
 8006522:	6920      	ldr	r0, [r4, #16]
 8006524:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006528:	f104 0314 	add.w	r3, r4, #20
 800652c:	f019 091f 	ands.w	r9, r9, #31
 8006530:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006534:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006538:	d02b      	beq.n	8006592 <__lshift+0xbe>
 800653a:	f1c9 0e20 	rsb	lr, r9, #32
 800653e:	468a      	mov	sl, r1
 8006540:	2200      	movs	r2, #0
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	fa00 f009 	lsl.w	r0, r0, r9
 8006548:	4310      	orrs	r0, r2
 800654a:	f84a 0b04 	str.w	r0, [sl], #4
 800654e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006552:	459c      	cmp	ip, r3
 8006554:	fa22 f20e 	lsr.w	r2, r2, lr
 8006558:	d8f3      	bhi.n	8006542 <__lshift+0x6e>
 800655a:	ebac 0304 	sub.w	r3, ip, r4
 800655e:	3b15      	subs	r3, #21
 8006560:	f023 0303 	bic.w	r3, r3, #3
 8006564:	3304      	adds	r3, #4
 8006566:	f104 0015 	add.w	r0, r4, #21
 800656a:	4584      	cmp	ip, r0
 800656c:	bf38      	it	cc
 800656e:	2304      	movcc	r3, #4
 8006570:	50ca      	str	r2, [r1, r3]
 8006572:	b10a      	cbz	r2, 8006578 <__lshift+0xa4>
 8006574:	f108 0602 	add.w	r6, r8, #2
 8006578:	3e01      	subs	r6, #1
 800657a:	4638      	mov	r0, r7
 800657c:	612e      	str	r6, [r5, #16]
 800657e:	4621      	mov	r1, r4
 8006580:	f7ff fdd8 	bl	8006134 <_Bfree>
 8006584:	4628      	mov	r0, r5
 8006586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658a:	f842 0f04 	str.w	r0, [r2, #4]!
 800658e:	3301      	adds	r3, #1
 8006590:	e7c5      	b.n	800651e <__lshift+0x4a>
 8006592:	3904      	subs	r1, #4
 8006594:	f853 2b04 	ldr.w	r2, [r3], #4
 8006598:	f841 2f04 	str.w	r2, [r1, #4]!
 800659c:	459c      	cmp	ip, r3
 800659e:	d8f9      	bhi.n	8006594 <__lshift+0xc0>
 80065a0:	e7ea      	b.n	8006578 <__lshift+0xa4>
 80065a2:	bf00      	nop
 80065a4:	08007450 	.word	0x08007450
 80065a8:	08007461 	.word	0x08007461

080065ac <__mcmp>:
 80065ac:	b530      	push	{r4, r5, lr}
 80065ae:	6902      	ldr	r2, [r0, #16]
 80065b0:	690c      	ldr	r4, [r1, #16]
 80065b2:	1b12      	subs	r2, r2, r4
 80065b4:	d10e      	bne.n	80065d4 <__mcmp+0x28>
 80065b6:	f100 0314 	add.w	r3, r0, #20
 80065ba:	3114      	adds	r1, #20
 80065bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80065c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80065c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80065c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80065cc:	42a5      	cmp	r5, r4
 80065ce:	d003      	beq.n	80065d8 <__mcmp+0x2c>
 80065d0:	d305      	bcc.n	80065de <__mcmp+0x32>
 80065d2:	2201      	movs	r2, #1
 80065d4:	4610      	mov	r0, r2
 80065d6:	bd30      	pop	{r4, r5, pc}
 80065d8:	4283      	cmp	r3, r0
 80065da:	d3f3      	bcc.n	80065c4 <__mcmp+0x18>
 80065dc:	e7fa      	b.n	80065d4 <__mcmp+0x28>
 80065de:	f04f 32ff 	mov.w	r2, #4294967295
 80065e2:	e7f7      	b.n	80065d4 <__mcmp+0x28>

080065e4 <__mdiff>:
 80065e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e8:	460c      	mov	r4, r1
 80065ea:	4606      	mov	r6, r0
 80065ec:	4611      	mov	r1, r2
 80065ee:	4620      	mov	r0, r4
 80065f0:	4690      	mov	r8, r2
 80065f2:	f7ff ffdb 	bl	80065ac <__mcmp>
 80065f6:	1e05      	subs	r5, r0, #0
 80065f8:	d110      	bne.n	800661c <__mdiff+0x38>
 80065fa:	4629      	mov	r1, r5
 80065fc:	4630      	mov	r0, r6
 80065fe:	f7ff fd59 	bl	80060b4 <_Balloc>
 8006602:	b930      	cbnz	r0, 8006612 <__mdiff+0x2e>
 8006604:	4b3a      	ldr	r3, [pc, #232]	; (80066f0 <__mdiff+0x10c>)
 8006606:	4602      	mov	r2, r0
 8006608:	f240 2137 	movw	r1, #567	; 0x237
 800660c:	4839      	ldr	r0, [pc, #228]	; (80066f4 <__mdiff+0x110>)
 800660e:	f000 fb0b 	bl	8006c28 <__assert_func>
 8006612:	2301      	movs	r3, #1
 8006614:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661c:	bfa4      	itt	ge
 800661e:	4643      	movge	r3, r8
 8006620:	46a0      	movge	r8, r4
 8006622:	4630      	mov	r0, r6
 8006624:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006628:	bfa6      	itte	ge
 800662a:	461c      	movge	r4, r3
 800662c:	2500      	movge	r5, #0
 800662e:	2501      	movlt	r5, #1
 8006630:	f7ff fd40 	bl	80060b4 <_Balloc>
 8006634:	b920      	cbnz	r0, 8006640 <__mdiff+0x5c>
 8006636:	4b2e      	ldr	r3, [pc, #184]	; (80066f0 <__mdiff+0x10c>)
 8006638:	4602      	mov	r2, r0
 800663a:	f240 2145 	movw	r1, #581	; 0x245
 800663e:	e7e5      	b.n	800660c <__mdiff+0x28>
 8006640:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006644:	6926      	ldr	r6, [r4, #16]
 8006646:	60c5      	str	r5, [r0, #12]
 8006648:	f104 0914 	add.w	r9, r4, #20
 800664c:	f108 0514 	add.w	r5, r8, #20
 8006650:	f100 0e14 	add.w	lr, r0, #20
 8006654:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006658:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800665c:	f108 0210 	add.w	r2, r8, #16
 8006660:	46f2      	mov	sl, lr
 8006662:	2100      	movs	r1, #0
 8006664:	f859 3b04 	ldr.w	r3, [r9], #4
 8006668:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800666c:	fa11 f88b 	uxtah	r8, r1, fp
 8006670:	b299      	uxth	r1, r3
 8006672:	0c1b      	lsrs	r3, r3, #16
 8006674:	eba8 0801 	sub.w	r8, r8, r1
 8006678:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800667c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006680:	fa1f f888 	uxth.w	r8, r8
 8006684:	1419      	asrs	r1, r3, #16
 8006686:	454e      	cmp	r6, r9
 8006688:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800668c:	f84a 3b04 	str.w	r3, [sl], #4
 8006690:	d8e8      	bhi.n	8006664 <__mdiff+0x80>
 8006692:	1b33      	subs	r3, r6, r4
 8006694:	3b15      	subs	r3, #21
 8006696:	f023 0303 	bic.w	r3, r3, #3
 800669a:	3304      	adds	r3, #4
 800669c:	3415      	adds	r4, #21
 800669e:	42a6      	cmp	r6, r4
 80066a0:	bf38      	it	cc
 80066a2:	2304      	movcc	r3, #4
 80066a4:	441d      	add	r5, r3
 80066a6:	4473      	add	r3, lr
 80066a8:	469e      	mov	lr, r3
 80066aa:	462e      	mov	r6, r5
 80066ac:	4566      	cmp	r6, ip
 80066ae:	d30e      	bcc.n	80066ce <__mdiff+0xea>
 80066b0:	f10c 0203 	add.w	r2, ip, #3
 80066b4:	1b52      	subs	r2, r2, r5
 80066b6:	f022 0203 	bic.w	r2, r2, #3
 80066ba:	3d03      	subs	r5, #3
 80066bc:	45ac      	cmp	ip, r5
 80066be:	bf38      	it	cc
 80066c0:	2200      	movcc	r2, #0
 80066c2:	4413      	add	r3, r2
 80066c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80066c8:	b17a      	cbz	r2, 80066ea <__mdiff+0x106>
 80066ca:	6107      	str	r7, [r0, #16]
 80066cc:	e7a4      	b.n	8006618 <__mdiff+0x34>
 80066ce:	f856 8b04 	ldr.w	r8, [r6], #4
 80066d2:	fa11 f288 	uxtah	r2, r1, r8
 80066d6:	1414      	asrs	r4, r2, #16
 80066d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80066dc:	b292      	uxth	r2, r2
 80066de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80066e2:	f84e 2b04 	str.w	r2, [lr], #4
 80066e6:	1421      	asrs	r1, r4, #16
 80066e8:	e7e0      	b.n	80066ac <__mdiff+0xc8>
 80066ea:	3f01      	subs	r7, #1
 80066ec:	e7ea      	b.n	80066c4 <__mdiff+0xe0>
 80066ee:	bf00      	nop
 80066f0:	08007450 	.word	0x08007450
 80066f4:	08007461 	.word	0x08007461

080066f8 <__d2b>:
 80066f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066fc:	460f      	mov	r7, r1
 80066fe:	2101      	movs	r1, #1
 8006700:	ec59 8b10 	vmov	r8, r9, d0
 8006704:	4616      	mov	r6, r2
 8006706:	f7ff fcd5 	bl	80060b4 <_Balloc>
 800670a:	4604      	mov	r4, r0
 800670c:	b930      	cbnz	r0, 800671c <__d2b+0x24>
 800670e:	4602      	mov	r2, r0
 8006710:	4b24      	ldr	r3, [pc, #144]	; (80067a4 <__d2b+0xac>)
 8006712:	4825      	ldr	r0, [pc, #148]	; (80067a8 <__d2b+0xb0>)
 8006714:	f240 310f 	movw	r1, #783	; 0x30f
 8006718:	f000 fa86 	bl	8006c28 <__assert_func>
 800671c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006720:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006724:	bb2d      	cbnz	r5, 8006772 <__d2b+0x7a>
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	f1b8 0300 	subs.w	r3, r8, #0
 800672c:	d026      	beq.n	800677c <__d2b+0x84>
 800672e:	4668      	mov	r0, sp
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	f7ff fd87 	bl	8006244 <__lo0bits>
 8006736:	e9dd 1200 	ldrd	r1, r2, [sp]
 800673a:	b1e8      	cbz	r0, 8006778 <__d2b+0x80>
 800673c:	f1c0 0320 	rsb	r3, r0, #32
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	430b      	orrs	r3, r1
 8006746:	40c2      	lsrs	r2, r0
 8006748:	6163      	str	r3, [r4, #20]
 800674a:	9201      	str	r2, [sp, #4]
 800674c:	9b01      	ldr	r3, [sp, #4]
 800674e:	61a3      	str	r3, [r4, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	bf14      	ite	ne
 8006754:	2202      	movne	r2, #2
 8006756:	2201      	moveq	r2, #1
 8006758:	6122      	str	r2, [r4, #16]
 800675a:	b1bd      	cbz	r5, 800678c <__d2b+0x94>
 800675c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006760:	4405      	add	r5, r0
 8006762:	603d      	str	r5, [r7, #0]
 8006764:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006768:	6030      	str	r0, [r6, #0]
 800676a:	4620      	mov	r0, r4
 800676c:	b003      	add	sp, #12
 800676e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006776:	e7d6      	b.n	8006726 <__d2b+0x2e>
 8006778:	6161      	str	r1, [r4, #20]
 800677a:	e7e7      	b.n	800674c <__d2b+0x54>
 800677c:	a801      	add	r0, sp, #4
 800677e:	f7ff fd61 	bl	8006244 <__lo0bits>
 8006782:	9b01      	ldr	r3, [sp, #4]
 8006784:	6163      	str	r3, [r4, #20]
 8006786:	3020      	adds	r0, #32
 8006788:	2201      	movs	r2, #1
 800678a:	e7e5      	b.n	8006758 <__d2b+0x60>
 800678c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006790:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006794:	6038      	str	r0, [r7, #0]
 8006796:	6918      	ldr	r0, [r3, #16]
 8006798:	f7ff fd34 	bl	8006204 <__hi0bits>
 800679c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067a0:	e7e2      	b.n	8006768 <__d2b+0x70>
 80067a2:	bf00      	nop
 80067a4:	08007450 	.word	0x08007450
 80067a8:	08007461 	.word	0x08007461

080067ac <__ssputs_r>:
 80067ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b0:	688e      	ldr	r6, [r1, #8]
 80067b2:	461f      	mov	r7, r3
 80067b4:	42be      	cmp	r6, r7
 80067b6:	680b      	ldr	r3, [r1, #0]
 80067b8:	4682      	mov	sl, r0
 80067ba:	460c      	mov	r4, r1
 80067bc:	4690      	mov	r8, r2
 80067be:	d82c      	bhi.n	800681a <__ssputs_r+0x6e>
 80067c0:	898a      	ldrh	r2, [r1, #12]
 80067c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067c6:	d026      	beq.n	8006816 <__ssputs_r+0x6a>
 80067c8:	6965      	ldr	r5, [r4, #20]
 80067ca:	6909      	ldr	r1, [r1, #16]
 80067cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067d0:	eba3 0901 	sub.w	r9, r3, r1
 80067d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067d8:	1c7b      	adds	r3, r7, #1
 80067da:	444b      	add	r3, r9
 80067dc:	106d      	asrs	r5, r5, #1
 80067de:	429d      	cmp	r5, r3
 80067e0:	bf38      	it	cc
 80067e2:	461d      	movcc	r5, r3
 80067e4:	0553      	lsls	r3, r2, #21
 80067e6:	d527      	bpl.n	8006838 <__ssputs_r+0x8c>
 80067e8:	4629      	mov	r1, r5
 80067ea:	f7ff fbd7 	bl	8005f9c <_malloc_r>
 80067ee:	4606      	mov	r6, r0
 80067f0:	b360      	cbz	r0, 800684c <__ssputs_r+0xa0>
 80067f2:	6921      	ldr	r1, [r4, #16]
 80067f4:	464a      	mov	r2, r9
 80067f6:	f000 fa09 	bl	8006c0c <memcpy>
 80067fa:	89a3      	ldrh	r3, [r4, #12]
 80067fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006804:	81a3      	strh	r3, [r4, #12]
 8006806:	6126      	str	r6, [r4, #16]
 8006808:	6165      	str	r5, [r4, #20]
 800680a:	444e      	add	r6, r9
 800680c:	eba5 0509 	sub.w	r5, r5, r9
 8006810:	6026      	str	r6, [r4, #0]
 8006812:	60a5      	str	r5, [r4, #8]
 8006814:	463e      	mov	r6, r7
 8006816:	42be      	cmp	r6, r7
 8006818:	d900      	bls.n	800681c <__ssputs_r+0x70>
 800681a:	463e      	mov	r6, r7
 800681c:	6820      	ldr	r0, [r4, #0]
 800681e:	4632      	mov	r2, r6
 8006820:	4641      	mov	r1, r8
 8006822:	f000 f9c9 	bl	8006bb8 <memmove>
 8006826:	68a3      	ldr	r3, [r4, #8]
 8006828:	1b9b      	subs	r3, r3, r6
 800682a:	60a3      	str	r3, [r4, #8]
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	4433      	add	r3, r6
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	2000      	movs	r0, #0
 8006834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006838:	462a      	mov	r2, r5
 800683a:	f000 fa3b 	bl	8006cb4 <_realloc_r>
 800683e:	4606      	mov	r6, r0
 8006840:	2800      	cmp	r0, #0
 8006842:	d1e0      	bne.n	8006806 <__ssputs_r+0x5a>
 8006844:	6921      	ldr	r1, [r4, #16]
 8006846:	4650      	mov	r0, sl
 8006848:	f7ff fb34 	bl	8005eb4 <_free_r>
 800684c:	230c      	movs	r3, #12
 800684e:	f8ca 3000 	str.w	r3, [sl]
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006858:	81a3      	strh	r3, [r4, #12]
 800685a:	f04f 30ff 	mov.w	r0, #4294967295
 800685e:	e7e9      	b.n	8006834 <__ssputs_r+0x88>

08006860 <_svfiprintf_r>:
 8006860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006864:	4698      	mov	r8, r3
 8006866:	898b      	ldrh	r3, [r1, #12]
 8006868:	061b      	lsls	r3, r3, #24
 800686a:	b09d      	sub	sp, #116	; 0x74
 800686c:	4607      	mov	r7, r0
 800686e:	460d      	mov	r5, r1
 8006870:	4614      	mov	r4, r2
 8006872:	d50e      	bpl.n	8006892 <_svfiprintf_r+0x32>
 8006874:	690b      	ldr	r3, [r1, #16]
 8006876:	b963      	cbnz	r3, 8006892 <_svfiprintf_r+0x32>
 8006878:	2140      	movs	r1, #64	; 0x40
 800687a:	f7ff fb8f 	bl	8005f9c <_malloc_r>
 800687e:	6028      	str	r0, [r5, #0]
 8006880:	6128      	str	r0, [r5, #16]
 8006882:	b920      	cbnz	r0, 800688e <_svfiprintf_r+0x2e>
 8006884:	230c      	movs	r3, #12
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	f04f 30ff 	mov.w	r0, #4294967295
 800688c:	e0d0      	b.n	8006a30 <_svfiprintf_r+0x1d0>
 800688e:	2340      	movs	r3, #64	; 0x40
 8006890:	616b      	str	r3, [r5, #20]
 8006892:	2300      	movs	r3, #0
 8006894:	9309      	str	r3, [sp, #36]	; 0x24
 8006896:	2320      	movs	r3, #32
 8006898:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800689c:	f8cd 800c 	str.w	r8, [sp, #12]
 80068a0:	2330      	movs	r3, #48	; 0x30
 80068a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a48 <_svfiprintf_r+0x1e8>
 80068a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068aa:	f04f 0901 	mov.w	r9, #1
 80068ae:	4623      	mov	r3, r4
 80068b0:	469a      	mov	sl, r3
 80068b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068b6:	b10a      	cbz	r2, 80068bc <_svfiprintf_r+0x5c>
 80068b8:	2a25      	cmp	r2, #37	; 0x25
 80068ba:	d1f9      	bne.n	80068b0 <_svfiprintf_r+0x50>
 80068bc:	ebba 0b04 	subs.w	fp, sl, r4
 80068c0:	d00b      	beq.n	80068da <_svfiprintf_r+0x7a>
 80068c2:	465b      	mov	r3, fp
 80068c4:	4622      	mov	r2, r4
 80068c6:	4629      	mov	r1, r5
 80068c8:	4638      	mov	r0, r7
 80068ca:	f7ff ff6f 	bl	80067ac <__ssputs_r>
 80068ce:	3001      	adds	r0, #1
 80068d0:	f000 80a9 	beq.w	8006a26 <_svfiprintf_r+0x1c6>
 80068d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068d6:	445a      	add	r2, fp
 80068d8:	9209      	str	r2, [sp, #36]	; 0x24
 80068da:	f89a 3000 	ldrb.w	r3, [sl]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 80a1 	beq.w	8006a26 <_svfiprintf_r+0x1c6>
 80068e4:	2300      	movs	r3, #0
 80068e6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068ee:	f10a 0a01 	add.w	sl, sl, #1
 80068f2:	9304      	str	r3, [sp, #16]
 80068f4:	9307      	str	r3, [sp, #28]
 80068f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068fa:	931a      	str	r3, [sp, #104]	; 0x68
 80068fc:	4654      	mov	r4, sl
 80068fe:	2205      	movs	r2, #5
 8006900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006904:	4850      	ldr	r0, [pc, #320]	; (8006a48 <_svfiprintf_r+0x1e8>)
 8006906:	f7f9 fc6b 	bl	80001e0 <memchr>
 800690a:	9a04      	ldr	r2, [sp, #16]
 800690c:	b9d8      	cbnz	r0, 8006946 <_svfiprintf_r+0xe6>
 800690e:	06d0      	lsls	r0, r2, #27
 8006910:	bf44      	itt	mi
 8006912:	2320      	movmi	r3, #32
 8006914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006918:	0711      	lsls	r1, r2, #28
 800691a:	bf44      	itt	mi
 800691c:	232b      	movmi	r3, #43	; 0x2b
 800691e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006922:	f89a 3000 	ldrb.w	r3, [sl]
 8006926:	2b2a      	cmp	r3, #42	; 0x2a
 8006928:	d015      	beq.n	8006956 <_svfiprintf_r+0xf6>
 800692a:	9a07      	ldr	r2, [sp, #28]
 800692c:	4654      	mov	r4, sl
 800692e:	2000      	movs	r0, #0
 8006930:	f04f 0c0a 	mov.w	ip, #10
 8006934:	4621      	mov	r1, r4
 8006936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800693a:	3b30      	subs	r3, #48	; 0x30
 800693c:	2b09      	cmp	r3, #9
 800693e:	d94d      	bls.n	80069dc <_svfiprintf_r+0x17c>
 8006940:	b1b0      	cbz	r0, 8006970 <_svfiprintf_r+0x110>
 8006942:	9207      	str	r2, [sp, #28]
 8006944:	e014      	b.n	8006970 <_svfiprintf_r+0x110>
 8006946:	eba0 0308 	sub.w	r3, r0, r8
 800694a:	fa09 f303 	lsl.w	r3, r9, r3
 800694e:	4313      	orrs	r3, r2
 8006950:	9304      	str	r3, [sp, #16]
 8006952:	46a2      	mov	sl, r4
 8006954:	e7d2      	b.n	80068fc <_svfiprintf_r+0x9c>
 8006956:	9b03      	ldr	r3, [sp, #12]
 8006958:	1d19      	adds	r1, r3, #4
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	9103      	str	r1, [sp, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	bfbb      	ittet	lt
 8006962:	425b      	neglt	r3, r3
 8006964:	f042 0202 	orrlt.w	r2, r2, #2
 8006968:	9307      	strge	r3, [sp, #28]
 800696a:	9307      	strlt	r3, [sp, #28]
 800696c:	bfb8      	it	lt
 800696e:	9204      	strlt	r2, [sp, #16]
 8006970:	7823      	ldrb	r3, [r4, #0]
 8006972:	2b2e      	cmp	r3, #46	; 0x2e
 8006974:	d10c      	bne.n	8006990 <_svfiprintf_r+0x130>
 8006976:	7863      	ldrb	r3, [r4, #1]
 8006978:	2b2a      	cmp	r3, #42	; 0x2a
 800697a:	d134      	bne.n	80069e6 <_svfiprintf_r+0x186>
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	1d1a      	adds	r2, r3, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	9203      	str	r2, [sp, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	bfb8      	it	lt
 8006988:	f04f 33ff 	movlt.w	r3, #4294967295
 800698c:	3402      	adds	r4, #2
 800698e:	9305      	str	r3, [sp, #20]
 8006990:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006a58 <_svfiprintf_r+0x1f8>
 8006994:	7821      	ldrb	r1, [r4, #0]
 8006996:	2203      	movs	r2, #3
 8006998:	4650      	mov	r0, sl
 800699a:	f7f9 fc21 	bl	80001e0 <memchr>
 800699e:	b138      	cbz	r0, 80069b0 <_svfiprintf_r+0x150>
 80069a0:	9b04      	ldr	r3, [sp, #16]
 80069a2:	eba0 000a 	sub.w	r0, r0, sl
 80069a6:	2240      	movs	r2, #64	; 0x40
 80069a8:	4082      	lsls	r2, r0
 80069aa:	4313      	orrs	r3, r2
 80069ac:	3401      	adds	r4, #1
 80069ae:	9304      	str	r3, [sp, #16]
 80069b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069b4:	4825      	ldr	r0, [pc, #148]	; (8006a4c <_svfiprintf_r+0x1ec>)
 80069b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069ba:	2206      	movs	r2, #6
 80069bc:	f7f9 fc10 	bl	80001e0 <memchr>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d038      	beq.n	8006a36 <_svfiprintf_r+0x1d6>
 80069c4:	4b22      	ldr	r3, [pc, #136]	; (8006a50 <_svfiprintf_r+0x1f0>)
 80069c6:	bb1b      	cbnz	r3, 8006a10 <_svfiprintf_r+0x1b0>
 80069c8:	9b03      	ldr	r3, [sp, #12]
 80069ca:	3307      	adds	r3, #7
 80069cc:	f023 0307 	bic.w	r3, r3, #7
 80069d0:	3308      	adds	r3, #8
 80069d2:	9303      	str	r3, [sp, #12]
 80069d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d6:	4433      	add	r3, r6
 80069d8:	9309      	str	r3, [sp, #36]	; 0x24
 80069da:	e768      	b.n	80068ae <_svfiprintf_r+0x4e>
 80069dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80069e0:	460c      	mov	r4, r1
 80069e2:	2001      	movs	r0, #1
 80069e4:	e7a6      	b.n	8006934 <_svfiprintf_r+0xd4>
 80069e6:	2300      	movs	r3, #0
 80069e8:	3401      	adds	r4, #1
 80069ea:	9305      	str	r3, [sp, #20]
 80069ec:	4619      	mov	r1, r3
 80069ee:	f04f 0c0a 	mov.w	ip, #10
 80069f2:	4620      	mov	r0, r4
 80069f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069f8:	3a30      	subs	r2, #48	; 0x30
 80069fa:	2a09      	cmp	r2, #9
 80069fc:	d903      	bls.n	8006a06 <_svfiprintf_r+0x1a6>
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0c6      	beq.n	8006990 <_svfiprintf_r+0x130>
 8006a02:	9105      	str	r1, [sp, #20]
 8006a04:	e7c4      	b.n	8006990 <_svfiprintf_r+0x130>
 8006a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e7f0      	b.n	80069f2 <_svfiprintf_r+0x192>
 8006a10:	ab03      	add	r3, sp, #12
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	462a      	mov	r2, r5
 8006a16:	4b0f      	ldr	r3, [pc, #60]	; (8006a54 <_svfiprintf_r+0x1f4>)
 8006a18:	a904      	add	r1, sp, #16
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	f7fd fe62 	bl	80046e4 <_printf_float>
 8006a20:	1c42      	adds	r2, r0, #1
 8006a22:	4606      	mov	r6, r0
 8006a24:	d1d6      	bne.n	80069d4 <_svfiprintf_r+0x174>
 8006a26:	89ab      	ldrh	r3, [r5, #12]
 8006a28:	065b      	lsls	r3, r3, #25
 8006a2a:	f53f af2d 	bmi.w	8006888 <_svfiprintf_r+0x28>
 8006a2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a30:	b01d      	add	sp, #116	; 0x74
 8006a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a36:	ab03      	add	r3, sp, #12
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	462a      	mov	r2, r5
 8006a3c:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <_svfiprintf_r+0x1f4>)
 8006a3e:	a904      	add	r1, sp, #16
 8006a40:	4638      	mov	r0, r7
 8006a42:	f7fe f8f3 	bl	8004c2c <_printf_i>
 8006a46:	e7eb      	b.n	8006a20 <_svfiprintf_r+0x1c0>
 8006a48:	080075bc 	.word	0x080075bc
 8006a4c:	080075c6 	.word	0x080075c6
 8006a50:	080046e5 	.word	0x080046e5
 8006a54:	080067ad 	.word	0x080067ad
 8006a58:	080075c2 	.word	0x080075c2

08006a5c <__sflush_r>:
 8006a5c:	898a      	ldrh	r2, [r1, #12]
 8006a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a62:	4605      	mov	r5, r0
 8006a64:	0710      	lsls	r0, r2, #28
 8006a66:	460c      	mov	r4, r1
 8006a68:	d458      	bmi.n	8006b1c <__sflush_r+0xc0>
 8006a6a:	684b      	ldr	r3, [r1, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	dc05      	bgt.n	8006a7c <__sflush_r+0x20>
 8006a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	dc02      	bgt.n	8006a7c <__sflush_r+0x20>
 8006a76:	2000      	movs	r0, #0
 8006a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a7e:	2e00      	cmp	r6, #0
 8006a80:	d0f9      	beq.n	8006a76 <__sflush_r+0x1a>
 8006a82:	2300      	movs	r3, #0
 8006a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a88:	682f      	ldr	r7, [r5, #0]
 8006a8a:	6a21      	ldr	r1, [r4, #32]
 8006a8c:	602b      	str	r3, [r5, #0]
 8006a8e:	d032      	beq.n	8006af6 <__sflush_r+0x9a>
 8006a90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a92:	89a3      	ldrh	r3, [r4, #12]
 8006a94:	075a      	lsls	r2, r3, #29
 8006a96:	d505      	bpl.n	8006aa4 <__sflush_r+0x48>
 8006a98:	6863      	ldr	r3, [r4, #4]
 8006a9a:	1ac0      	subs	r0, r0, r3
 8006a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a9e:	b10b      	cbz	r3, 8006aa4 <__sflush_r+0x48>
 8006aa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aa2:	1ac0      	subs	r0, r0, r3
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aaa:	6a21      	ldr	r1, [r4, #32]
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b0      	blx	r6
 8006ab0:	1c43      	adds	r3, r0, #1
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	d106      	bne.n	8006ac4 <__sflush_r+0x68>
 8006ab6:	6829      	ldr	r1, [r5, #0]
 8006ab8:	291d      	cmp	r1, #29
 8006aba:	d82b      	bhi.n	8006b14 <__sflush_r+0xb8>
 8006abc:	4a29      	ldr	r2, [pc, #164]	; (8006b64 <__sflush_r+0x108>)
 8006abe:	410a      	asrs	r2, r1
 8006ac0:	07d6      	lsls	r6, r2, #31
 8006ac2:	d427      	bmi.n	8006b14 <__sflush_r+0xb8>
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	6062      	str	r2, [r4, #4]
 8006ac8:	04d9      	lsls	r1, r3, #19
 8006aca:	6922      	ldr	r2, [r4, #16]
 8006acc:	6022      	str	r2, [r4, #0]
 8006ace:	d504      	bpl.n	8006ada <__sflush_r+0x7e>
 8006ad0:	1c42      	adds	r2, r0, #1
 8006ad2:	d101      	bne.n	8006ad8 <__sflush_r+0x7c>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	b903      	cbnz	r3, 8006ada <__sflush_r+0x7e>
 8006ad8:	6560      	str	r0, [r4, #84]	; 0x54
 8006ada:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006adc:	602f      	str	r7, [r5, #0]
 8006ade:	2900      	cmp	r1, #0
 8006ae0:	d0c9      	beq.n	8006a76 <__sflush_r+0x1a>
 8006ae2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ae6:	4299      	cmp	r1, r3
 8006ae8:	d002      	beq.n	8006af0 <__sflush_r+0x94>
 8006aea:	4628      	mov	r0, r5
 8006aec:	f7ff f9e2 	bl	8005eb4 <_free_r>
 8006af0:	2000      	movs	r0, #0
 8006af2:	6360      	str	r0, [r4, #52]	; 0x34
 8006af4:	e7c0      	b.n	8006a78 <__sflush_r+0x1c>
 8006af6:	2301      	movs	r3, #1
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b0      	blx	r6
 8006afc:	1c41      	adds	r1, r0, #1
 8006afe:	d1c8      	bne.n	8006a92 <__sflush_r+0x36>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0c5      	beq.n	8006a92 <__sflush_r+0x36>
 8006b06:	2b1d      	cmp	r3, #29
 8006b08:	d001      	beq.n	8006b0e <__sflush_r+0xb2>
 8006b0a:	2b16      	cmp	r3, #22
 8006b0c:	d101      	bne.n	8006b12 <__sflush_r+0xb6>
 8006b0e:	602f      	str	r7, [r5, #0]
 8006b10:	e7b1      	b.n	8006a76 <__sflush_r+0x1a>
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b18:	81a3      	strh	r3, [r4, #12]
 8006b1a:	e7ad      	b.n	8006a78 <__sflush_r+0x1c>
 8006b1c:	690f      	ldr	r7, [r1, #16]
 8006b1e:	2f00      	cmp	r7, #0
 8006b20:	d0a9      	beq.n	8006a76 <__sflush_r+0x1a>
 8006b22:	0793      	lsls	r3, r2, #30
 8006b24:	680e      	ldr	r6, [r1, #0]
 8006b26:	bf08      	it	eq
 8006b28:	694b      	ldreq	r3, [r1, #20]
 8006b2a:	600f      	str	r7, [r1, #0]
 8006b2c:	bf18      	it	ne
 8006b2e:	2300      	movne	r3, #0
 8006b30:	eba6 0807 	sub.w	r8, r6, r7
 8006b34:	608b      	str	r3, [r1, #8]
 8006b36:	f1b8 0f00 	cmp.w	r8, #0
 8006b3a:	dd9c      	ble.n	8006a76 <__sflush_r+0x1a>
 8006b3c:	6a21      	ldr	r1, [r4, #32]
 8006b3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b40:	4643      	mov	r3, r8
 8006b42:	463a      	mov	r2, r7
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b0      	blx	r6
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	dc06      	bgt.n	8006b5a <__sflush_r+0xfe>
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b52:	81a3      	strh	r3, [r4, #12]
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295
 8006b58:	e78e      	b.n	8006a78 <__sflush_r+0x1c>
 8006b5a:	4407      	add	r7, r0
 8006b5c:	eba8 0800 	sub.w	r8, r8, r0
 8006b60:	e7e9      	b.n	8006b36 <__sflush_r+0xda>
 8006b62:	bf00      	nop
 8006b64:	dfbffffe 	.word	0xdfbffffe

08006b68 <_fflush_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	690b      	ldr	r3, [r1, #16]
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	460c      	mov	r4, r1
 8006b70:	b913      	cbnz	r3, 8006b78 <_fflush_r+0x10>
 8006b72:	2500      	movs	r5, #0
 8006b74:	4628      	mov	r0, r5
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	b118      	cbz	r0, 8006b82 <_fflush_r+0x1a>
 8006b7a:	6a03      	ldr	r3, [r0, #32]
 8006b7c:	b90b      	cbnz	r3, 8006b82 <_fflush_r+0x1a>
 8006b7e:	f7fe fa03 	bl	8004f88 <__sinit>
 8006b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0f3      	beq.n	8006b72 <_fflush_r+0xa>
 8006b8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b8c:	07d0      	lsls	r0, r2, #31
 8006b8e:	d404      	bmi.n	8006b9a <_fflush_r+0x32>
 8006b90:	0599      	lsls	r1, r3, #22
 8006b92:	d402      	bmi.n	8006b9a <_fflush_r+0x32>
 8006b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b96:	f7fe fb0e 	bl	80051b6 <__retarget_lock_acquire_recursive>
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	f7ff ff5d 	bl	8006a5c <__sflush_r>
 8006ba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ba4:	07da      	lsls	r2, r3, #31
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	d4e4      	bmi.n	8006b74 <_fflush_r+0xc>
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	059b      	lsls	r3, r3, #22
 8006bae:	d4e1      	bmi.n	8006b74 <_fflush_r+0xc>
 8006bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bb2:	f7fe fb01 	bl	80051b8 <__retarget_lock_release_recursive>
 8006bb6:	e7dd      	b.n	8006b74 <_fflush_r+0xc>

08006bb8 <memmove>:
 8006bb8:	4288      	cmp	r0, r1
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	eb01 0402 	add.w	r4, r1, r2
 8006bc0:	d902      	bls.n	8006bc8 <memmove+0x10>
 8006bc2:	4284      	cmp	r4, r0
 8006bc4:	4623      	mov	r3, r4
 8006bc6:	d807      	bhi.n	8006bd8 <memmove+0x20>
 8006bc8:	1e43      	subs	r3, r0, #1
 8006bca:	42a1      	cmp	r1, r4
 8006bcc:	d008      	beq.n	8006be0 <memmove+0x28>
 8006bce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bd6:	e7f8      	b.n	8006bca <memmove+0x12>
 8006bd8:	4402      	add	r2, r0
 8006bda:	4601      	mov	r1, r0
 8006bdc:	428a      	cmp	r2, r1
 8006bde:	d100      	bne.n	8006be2 <memmove+0x2a>
 8006be0:	bd10      	pop	{r4, pc}
 8006be2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006be6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bea:	e7f7      	b.n	8006bdc <memmove+0x24>

08006bec <_sbrk_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4d06      	ldr	r5, [pc, #24]	; (8006c08 <_sbrk_r+0x1c>)
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	602b      	str	r3, [r5, #0]
 8006bf8:	f7fa fd14 	bl	8001624 <_sbrk>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d102      	bne.n	8006c06 <_sbrk_r+0x1a>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	b103      	cbz	r3, 8006c06 <_sbrk_r+0x1a>
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	20000448 	.word	0x20000448

08006c0c <memcpy>:
 8006c0c:	440a      	add	r2, r1
 8006c0e:	4291      	cmp	r1, r2
 8006c10:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c14:	d100      	bne.n	8006c18 <memcpy+0xc>
 8006c16:	4770      	bx	lr
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c22:	4291      	cmp	r1, r2
 8006c24:	d1f9      	bne.n	8006c1a <memcpy+0xe>
 8006c26:	bd10      	pop	{r4, pc}

08006c28 <__assert_func>:
 8006c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c2a:	4614      	mov	r4, r2
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <__assert_func+0x2c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4605      	mov	r5, r0
 8006c34:	68d8      	ldr	r0, [r3, #12]
 8006c36:	b14c      	cbz	r4, 8006c4c <__assert_func+0x24>
 8006c38:	4b07      	ldr	r3, [pc, #28]	; (8006c58 <__assert_func+0x30>)
 8006c3a:	9100      	str	r1, [sp, #0]
 8006c3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c40:	4906      	ldr	r1, [pc, #24]	; (8006c5c <__assert_func+0x34>)
 8006c42:	462b      	mov	r3, r5
 8006c44:	f000 f872 	bl	8006d2c <fiprintf>
 8006c48:	f000 f882 	bl	8006d50 <abort>
 8006c4c:	4b04      	ldr	r3, [pc, #16]	; (8006c60 <__assert_func+0x38>)
 8006c4e:	461c      	mov	r4, r3
 8006c50:	e7f3      	b.n	8006c3a <__assert_func+0x12>
 8006c52:	bf00      	nop
 8006c54:	2000006c 	.word	0x2000006c
 8006c58:	080075d7 	.word	0x080075d7
 8006c5c:	080075e4 	.word	0x080075e4
 8006c60:	08007612 	.word	0x08007612

08006c64 <_calloc_r>:
 8006c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c66:	fba1 2402 	umull	r2, r4, r1, r2
 8006c6a:	b94c      	cbnz	r4, 8006c80 <_calloc_r+0x1c>
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	9201      	str	r2, [sp, #4]
 8006c70:	f7ff f994 	bl	8005f9c <_malloc_r>
 8006c74:	9a01      	ldr	r2, [sp, #4]
 8006c76:	4605      	mov	r5, r0
 8006c78:	b930      	cbnz	r0, 8006c88 <_calloc_r+0x24>
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	b003      	add	sp, #12
 8006c7e:	bd30      	pop	{r4, r5, pc}
 8006c80:	220c      	movs	r2, #12
 8006c82:	6002      	str	r2, [r0, #0]
 8006c84:	2500      	movs	r5, #0
 8006c86:	e7f8      	b.n	8006c7a <_calloc_r+0x16>
 8006c88:	4621      	mov	r1, r4
 8006c8a:	f7fe fa16 	bl	80050ba <memset>
 8006c8e:	e7f4      	b.n	8006c7a <_calloc_r+0x16>

08006c90 <__ascii_mbtowc>:
 8006c90:	b082      	sub	sp, #8
 8006c92:	b901      	cbnz	r1, 8006c96 <__ascii_mbtowc+0x6>
 8006c94:	a901      	add	r1, sp, #4
 8006c96:	b142      	cbz	r2, 8006caa <__ascii_mbtowc+0x1a>
 8006c98:	b14b      	cbz	r3, 8006cae <__ascii_mbtowc+0x1e>
 8006c9a:	7813      	ldrb	r3, [r2, #0]
 8006c9c:	600b      	str	r3, [r1, #0]
 8006c9e:	7812      	ldrb	r2, [r2, #0]
 8006ca0:	1e10      	subs	r0, r2, #0
 8006ca2:	bf18      	it	ne
 8006ca4:	2001      	movne	r0, #1
 8006ca6:	b002      	add	sp, #8
 8006ca8:	4770      	bx	lr
 8006caa:	4610      	mov	r0, r2
 8006cac:	e7fb      	b.n	8006ca6 <__ascii_mbtowc+0x16>
 8006cae:	f06f 0001 	mvn.w	r0, #1
 8006cb2:	e7f8      	b.n	8006ca6 <__ascii_mbtowc+0x16>

08006cb4 <_realloc_r>:
 8006cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb8:	4680      	mov	r8, r0
 8006cba:	4614      	mov	r4, r2
 8006cbc:	460e      	mov	r6, r1
 8006cbe:	b921      	cbnz	r1, 8006cca <_realloc_r+0x16>
 8006cc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	f7ff b969 	b.w	8005f9c <_malloc_r>
 8006cca:	b92a      	cbnz	r2, 8006cd8 <_realloc_r+0x24>
 8006ccc:	f7ff f8f2 	bl	8005eb4 <_free_r>
 8006cd0:	4625      	mov	r5, r4
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd8:	f000 f841 	bl	8006d5e <_malloc_usable_size_r>
 8006cdc:	4284      	cmp	r4, r0
 8006cde:	4607      	mov	r7, r0
 8006ce0:	d802      	bhi.n	8006ce8 <_realloc_r+0x34>
 8006ce2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ce6:	d812      	bhi.n	8006d0e <_realloc_r+0x5a>
 8006ce8:	4621      	mov	r1, r4
 8006cea:	4640      	mov	r0, r8
 8006cec:	f7ff f956 	bl	8005f9c <_malloc_r>
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d0ed      	beq.n	8006cd2 <_realloc_r+0x1e>
 8006cf6:	42bc      	cmp	r4, r7
 8006cf8:	4622      	mov	r2, r4
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	bf28      	it	cs
 8006cfe:	463a      	movcs	r2, r7
 8006d00:	f7ff ff84 	bl	8006c0c <memcpy>
 8006d04:	4631      	mov	r1, r6
 8006d06:	4640      	mov	r0, r8
 8006d08:	f7ff f8d4 	bl	8005eb4 <_free_r>
 8006d0c:	e7e1      	b.n	8006cd2 <_realloc_r+0x1e>
 8006d0e:	4635      	mov	r5, r6
 8006d10:	e7df      	b.n	8006cd2 <_realloc_r+0x1e>

08006d12 <__ascii_wctomb>:
 8006d12:	b149      	cbz	r1, 8006d28 <__ascii_wctomb+0x16>
 8006d14:	2aff      	cmp	r2, #255	; 0xff
 8006d16:	bf85      	ittet	hi
 8006d18:	238a      	movhi	r3, #138	; 0x8a
 8006d1a:	6003      	strhi	r3, [r0, #0]
 8006d1c:	700a      	strbls	r2, [r1, #0]
 8006d1e:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d22:	bf98      	it	ls
 8006d24:	2001      	movls	r0, #1
 8006d26:	4770      	bx	lr
 8006d28:	4608      	mov	r0, r1
 8006d2a:	4770      	bx	lr

08006d2c <fiprintf>:
 8006d2c:	b40e      	push	{r1, r2, r3}
 8006d2e:	b503      	push	{r0, r1, lr}
 8006d30:	4601      	mov	r1, r0
 8006d32:	ab03      	add	r3, sp, #12
 8006d34:	4805      	ldr	r0, [pc, #20]	; (8006d4c <fiprintf+0x20>)
 8006d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d3a:	6800      	ldr	r0, [r0, #0]
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	f000 f83f 	bl	8006dc0 <_vfiprintf_r>
 8006d42:	b002      	add	sp, #8
 8006d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d48:	b003      	add	sp, #12
 8006d4a:	4770      	bx	lr
 8006d4c:	2000006c 	.word	0x2000006c

08006d50 <abort>:
 8006d50:	b508      	push	{r3, lr}
 8006d52:	2006      	movs	r0, #6
 8006d54:	f000 fa0c 	bl	8007170 <raise>
 8006d58:	2001      	movs	r0, #1
 8006d5a:	f7fa fbeb 	bl	8001534 <_exit>

08006d5e <_malloc_usable_size_r>:
 8006d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d62:	1f18      	subs	r0, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bfbc      	itt	lt
 8006d68:	580b      	ldrlt	r3, [r1, r0]
 8006d6a:	18c0      	addlt	r0, r0, r3
 8006d6c:	4770      	bx	lr

08006d6e <__sfputc_r>:
 8006d6e:	6893      	ldr	r3, [r2, #8]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	b410      	push	{r4}
 8006d76:	6093      	str	r3, [r2, #8]
 8006d78:	da08      	bge.n	8006d8c <__sfputc_r+0x1e>
 8006d7a:	6994      	ldr	r4, [r2, #24]
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	db01      	blt.n	8006d84 <__sfputc_r+0x16>
 8006d80:	290a      	cmp	r1, #10
 8006d82:	d103      	bne.n	8006d8c <__sfputc_r+0x1e>
 8006d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d88:	f000 b934 	b.w	8006ff4 <__swbuf_r>
 8006d8c:	6813      	ldr	r3, [r2, #0]
 8006d8e:	1c58      	adds	r0, r3, #1
 8006d90:	6010      	str	r0, [r2, #0]
 8006d92:	7019      	strb	r1, [r3, #0]
 8006d94:	4608      	mov	r0, r1
 8006d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <__sfputs_r>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	4606      	mov	r6, r0
 8006da0:	460f      	mov	r7, r1
 8006da2:	4614      	mov	r4, r2
 8006da4:	18d5      	adds	r5, r2, r3
 8006da6:	42ac      	cmp	r4, r5
 8006da8:	d101      	bne.n	8006dae <__sfputs_r+0x12>
 8006daa:	2000      	movs	r0, #0
 8006dac:	e007      	b.n	8006dbe <__sfputs_r+0x22>
 8006dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db2:	463a      	mov	r2, r7
 8006db4:	4630      	mov	r0, r6
 8006db6:	f7ff ffda 	bl	8006d6e <__sfputc_r>
 8006dba:	1c43      	adds	r3, r0, #1
 8006dbc:	d1f3      	bne.n	8006da6 <__sfputs_r+0xa>
 8006dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006dc0 <_vfiprintf_r>:
 8006dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc4:	460d      	mov	r5, r1
 8006dc6:	b09d      	sub	sp, #116	; 0x74
 8006dc8:	4614      	mov	r4, r2
 8006dca:	4698      	mov	r8, r3
 8006dcc:	4606      	mov	r6, r0
 8006dce:	b118      	cbz	r0, 8006dd8 <_vfiprintf_r+0x18>
 8006dd0:	6a03      	ldr	r3, [r0, #32]
 8006dd2:	b90b      	cbnz	r3, 8006dd8 <_vfiprintf_r+0x18>
 8006dd4:	f7fe f8d8 	bl	8004f88 <__sinit>
 8006dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dda:	07d9      	lsls	r1, r3, #31
 8006ddc:	d405      	bmi.n	8006dea <_vfiprintf_r+0x2a>
 8006dde:	89ab      	ldrh	r3, [r5, #12]
 8006de0:	059a      	lsls	r2, r3, #22
 8006de2:	d402      	bmi.n	8006dea <_vfiprintf_r+0x2a>
 8006de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006de6:	f7fe f9e6 	bl	80051b6 <__retarget_lock_acquire_recursive>
 8006dea:	89ab      	ldrh	r3, [r5, #12]
 8006dec:	071b      	lsls	r3, r3, #28
 8006dee:	d501      	bpl.n	8006df4 <_vfiprintf_r+0x34>
 8006df0:	692b      	ldr	r3, [r5, #16]
 8006df2:	b99b      	cbnz	r3, 8006e1c <_vfiprintf_r+0x5c>
 8006df4:	4629      	mov	r1, r5
 8006df6:	4630      	mov	r0, r6
 8006df8:	f000 f93a 	bl	8007070 <__swsetup_r>
 8006dfc:	b170      	cbz	r0, 8006e1c <_vfiprintf_r+0x5c>
 8006dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e00:	07dc      	lsls	r4, r3, #31
 8006e02:	d504      	bpl.n	8006e0e <_vfiprintf_r+0x4e>
 8006e04:	f04f 30ff 	mov.w	r0, #4294967295
 8006e08:	b01d      	add	sp, #116	; 0x74
 8006e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0e:	89ab      	ldrh	r3, [r5, #12]
 8006e10:	0598      	lsls	r0, r3, #22
 8006e12:	d4f7      	bmi.n	8006e04 <_vfiprintf_r+0x44>
 8006e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e16:	f7fe f9cf 	bl	80051b8 <__retarget_lock_release_recursive>
 8006e1a:	e7f3      	b.n	8006e04 <_vfiprintf_r+0x44>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e20:	2320      	movs	r3, #32
 8006e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e26:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e2a:	2330      	movs	r3, #48	; 0x30
 8006e2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006fe0 <_vfiprintf_r+0x220>
 8006e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e34:	f04f 0901 	mov.w	r9, #1
 8006e38:	4623      	mov	r3, r4
 8006e3a:	469a      	mov	sl, r3
 8006e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e40:	b10a      	cbz	r2, 8006e46 <_vfiprintf_r+0x86>
 8006e42:	2a25      	cmp	r2, #37	; 0x25
 8006e44:	d1f9      	bne.n	8006e3a <_vfiprintf_r+0x7a>
 8006e46:	ebba 0b04 	subs.w	fp, sl, r4
 8006e4a:	d00b      	beq.n	8006e64 <_vfiprintf_r+0xa4>
 8006e4c:	465b      	mov	r3, fp
 8006e4e:	4622      	mov	r2, r4
 8006e50:	4629      	mov	r1, r5
 8006e52:	4630      	mov	r0, r6
 8006e54:	f7ff ffa2 	bl	8006d9c <__sfputs_r>
 8006e58:	3001      	adds	r0, #1
 8006e5a:	f000 80a9 	beq.w	8006fb0 <_vfiprintf_r+0x1f0>
 8006e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e60:	445a      	add	r2, fp
 8006e62:	9209      	str	r2, [sp, #36]	; 0x24
 8006e64:	f89a 3000 	ldrb.w	r3, [sl]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80a1 	beq.w	8006fb0 <_vfiprintf_r+0x1f0>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f04f 32ff 	mov.w	r2, #4294967295
 8006e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e78:	f10a 0a01 	add.w	sl, sl, #1
 8006e7c:	9304      	str	r3, [sp, #16]
 8006e7e:	9307      	str	r3, [sp, #28]
 8006e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e84:	931a      	str	r3, [sp, #104]	; 0x68
 8006e86:	4654      	mov	r4, sl
 8006e88:	2205      	movs	r2, #5
 8006e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e8e:	4854      	ldr	r0, [pc, #336]	; (8006fe0 <_vfiprintf_r+0x220>)
 8006e90:	f7f9 f9a6 	bl	80001e0 <memchr>
 8006e94:	9a04      	ldr	r2, [sp, #16]
 8006e96:	b9d8      	cbnz	r0, 8006ed0 <_vfiprintf_r+0x110>
 8006e98:	06d1      	lsls	r1, r2, #27
 8006e9a:	bf44      	itt	mi
 8006e9c:	2320      	movmi	r3, #32
 8006e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ea2:	0713      	lsls	r3, r2, #28
 8006ea4:	bf44      	itt	mi
 8006ea6:	232b      	movmi	r3, #43	; 0x2b
 8006ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eac:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb2:	d015      	beq.n	8006ee0 <_vfiprintf_r+0x120>
 8006eb4:	9a07      	ldr	r2, [sp, #28]
 8006eb6:	4654      	mov	r4, sl
 8006eb8:	2000      	movs	r0, #0
 8006eba:	f04f 0c0a 	mov.w	ip, #10
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ec4:	3b30      	subs	r3, #48	; 0x30
 8006ec6:	2b09      	cmp	r3, #9
 8006ec8:	d94d      	bls.n	8006f66 <_vfiprintf_r+0x1a6>
 8006eca:	b1b0      	cbz	r0, 8006efa <_vfiprintf_r+0x13a>
 8006ecc:	9207      	str	r2, [sp, #28]
 8006ece:	e014      	b.n	8006efa <_vfiprintf_r+0x13a>
 8006ed0:	eba0 0308 	sub.w	r3, r0, r8
 8006ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	9304      	str	r3, [sp, #16]
 8006edc:	46a2      	mov	sl, r4
 8006ede:	e7d2      	b.n	8006e86 <_vfiprintf_r+0xc6>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	1d19      	adds	r1, r3, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	9103      	str	r1, [sp, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	bfbb      	ittet	lt
 8006eec:	425b      	neglt	r3, r3
 8006eee:	f042 0202 	orrlt.w	r2, r2, #2
 8006ef2:	9307      	strge	r3, [sp, #28]
 8006ef4:	9307      	strlt	r3, [sp, #28]
 8006ef6:	bfb8      	it	lt
 8006ef8:	9204      	strlt	r2, [sp, #16]
 8006efa:	7823      	ldrb	r3, [r4, #0]
 8006efc:	2b2e      	cmp	r3, #46	; 0x2e
 8006efe:	d10c      	bne.n	8006f1a <_vfiprintf_r+0x15a>
 8006f00:	7863      	ldrb	r3, [r4, #1]
 8006f02:	2b2a      	cmp	r3, #42	; 0x2a
 8006f04:	d134      	bne.n	8006f70 <_vfiprintf_r+0x1b0>
 8006f06:	9b03      	ldr	r3, [sp, #12]
 8006f08:	1d1a      	adds	r2, r3, #4
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	9203      	str	r2, [sp, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	bfb8      	it	lt
 8006f12:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f16:	3402      	adds	r4, #2
 8006f18:	9305      	str	r3, [sp, #20]
 8006f1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006ff0 <_vfiprintf_r+0x230>
 8006f1e:	7821      	ldrb	r1, [r4, #0]
 8006f20:	2203      	movs	r2, #3
 8006f22:	4650      	mov	r0, sl
 8006f24:	f7f9 f95c 	bl	80001e0 <memchr>
 8006f28:	b138      	cbz	r0, 8006f3a <_vfiprintf_r+0x17a>
 8006f2a:	9b04      	ldr	r3, [sp, #16]
 8006f2c:	eba0 000a 	sub.w	r0, r0, sl
 8006f30:	2240      	movs	r2, #64	; 0x40
 8006f32:	4082      	lsls	r2, r0
 8006f34:	4313      	orrs	r3, r2
 8006f36:	3401      	adds	r4, #1
 8006f38:	9304      	str	r3, [sp, #16]
 8006f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f3e:	4829      	ldr	r0, [pc, #164]	; (8006fe4 <_vfiprintf_r+0x224>)
 8006f40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f44:	2206      	movs	r2, #6
 8006f46:	f7f9 f94b 	bl	80001e0 <memchr>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d03f      	beq.n	8006fce <_vfiprintf_r+0x20e>
 8006f4e:	4b26      	ldr	r3, [pc, #152]	; (8006fe8 <_vfiprintf_r+0x228>)
 8006f50:	bb1b      	cbnz	r3, 8006f9a <_vfiprintf_r+0x1da>
 8006f52:	9b03      	ldr	r3, [sp, #12]
 8006f54:	3307      	adds	r3, #7
 8006f56:	f023 0307 	bic.w	r3, r3, #7
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	9303      	str	r3, [sp, #12]
 8006f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f60:	443b      	add	r3, r7
 8006f62:	9309      	str	r3, [sp, #36]	; 0x24
 8006f64:	e768      	b.n	8006e38 <_vfiprintf_r+0x78>
 8006f66:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	2001      	movs	r0, #1
 8006f6e:	e7a6      	b.n	8006ebe <_vfiprintf_r+0xfe>
 8006f70:	2300      	movs	r3, #0
 8006f72:	3401      	adds	r4, #1
 8006f74:	9305      	str	r3, [sp, #20]
 8006f76:	4619      	mov	r1, r3
 8006f78:	f04f 0c0a 	mov.w	ip, #10
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f82:	3a30      	subs	r2, #48	; 0x30
 8006f84:	2a09      	cmp	r2, #9
 8006f86:	d903      	bls.n	8006f90 <_vfiprintf_r+0x1d0>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d0c6      	beq.n	8006f1a <_vfiprintf_r+0x15a>
 8006f8c:	9105      	str	r1, [sp, #20]
 8006f8e:	e7c4      	b.n	8006f1a <_vfiprintf_r+0x15a>
 8006f90:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f94:	4604      	mov	r4, r0
 8006f96:	2301      	movs	r3, #1
 8006f98:	e7f0      	b.n	8006f7c <_vfiprintf_r+0x1bc>
 8006f9a:	ab03      	add	r3, sp, #12
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	462a      	mov	r2, r5
 8006fa0:	4b12      	ldr	r3, [pc, #72]	; (8006fec <_vfiprintf_r+0x22c>)
 8006fa2:	a904      	add	r1, sp, #16
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	f7fd fb9d 	bl	80046e4 <_printf_float>
 8006faa:	4607      	mov	r7, r0
 8006fac:	1c78      	adds	r0, r7, #1
 8006fae:	d1d6      	bne.n	8006f5e <_vfiprintf_r+0x19e>
 8006fb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fb2:	07d9      	lsls	r1, r3, #31
 8006fb4:	d405      	bmi.n	8006fc2 <_vfiprintf_r+0x202>
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	059a      	lsls	r2, r3, #22
 8006fba:	d402      	bmi.n	8006fc2 <_vfiprintf_r+0x202>
 8006fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fbe:	f7fe f8fb 	bl	80051b8 <__retarget_lock_release_recursive>
 8006fc2:	89ab      	ldrh	r3, [r5, #12]
 8006fc4:	065b      	lsls	r3, r3, #25
 8006fc6:	f53f af1d 	bmi.w	8006e04 <_vfiprintf_r+0x44>
 8006fca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fcc:	e71c      	b.n	8006e08 <_vfiprintf_r+0x48>
 8006fce:	ab03      	add	r3, sp, #12
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	462a      	mov	r2, r5
 8006fd4:	4b05      	ldr	r3, [pc, #20]	; (8006fec <_vfiprintf_r+0x22c>)
 8006fd6:	a904      	add	r1, sp, #16
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f7fd fe27 	bl	8004c2c <_printf_i>
 8006fde:	e7e4      	b.n	8006faa <_vfiprintf_r+0x1ea>
 8006fe0:	080075bc 	.word	0x080075bc
 8006fe4:	080075c6 	.word	0x080075c6
 8006fe8:	080046e5 	.word	0x080046e5
 8006fec:	08006d9d 	.word	0x08006d9d
 8006ff0:	080075c2 	.word	0x080075c2

08006ff4 <__swbuf_r>:
 8006ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff6:	460e      	mov	r6, r1
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	b118      	cbz	r0, 8007006 <__swbuf_r+0x12>
 8006ffe:	6a03      	ldr	r3, [r0, #32]
 8007000:	b90b      	cbnz	r3, 8007006 <__swbuf_r+0x12>
 8007002:	f7fd ffc1 	bl	8004f88 <__sinit>
 8007006:	69a3      	ldr	r3, [r4, #24]
 8007008:	60a3      	str	r3, [r4, #8]
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	071a      	lsls	r2, r3, #28
 800700e:	d525      	bpl.n	800705c <__swbuf_r+0x68>
 8007010:	6923      	ldr	r3, [r4, #16]
 8007012:	b31b      	cbz	r3, 800705c <__swbuf_r+0x68>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	6922      	ldr	r2, [r4, #16]
 8007018:	1a98      	subs	r0, r3, r2
 800701a:	6963      	ldr	r3, [r4, #20]
 800701c:	b2f6      	uxtb	r6, r6
 800701e:	4283      	cmp	r3, r0
 8007020:	4637      	mov	r7, r6
 8007022:	dc04      	bgt.n	800702e <__swbuf_r+0x3a>
 8007024:	4621      	mov	r1, r4
 8007026:	4628      	mov	r0, r5
 8007028:	f7ff fd9e 	bl	8006b68 <_fflush_r>
 800702c:	b9e0      	cbnz	r0, 8007068 <__swbuf_r+0x74>
 800702e:	68a3      	ldr	r3, [r4, #8]
 8007030:	3b01      	subs	r3, #1
 8007032:	60a3      	str	r3, [r4, #8]
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	6022      	str	r2, [r4, #0]
 800703a:	701e      	strb	r6, [r3, #0]
 800703c:	6962      	ldr	r2, [r4, #20]
 800703e:	1c43      	adds	r3, r0, #1
 8007040:	429a      	cmp	r2, r3
 8007042:	d004      	beq.n	800704e <__swbuf_r+0x5a>
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	07db      	lsls	r3, r3, #31
 8007048:	d506      	bpl.n	8007058 <__swbuf_r+0x64>
 800704a:	2e0a      	cmp	r6, #10
 800704c:	d104      	bne.n	8007058 <__swbuf_r+0x64>
 800704e:	4621      	mov	r1, r4
 8007050:	4628      	mov	r0, r5
 8007052:	f7ff fd89 	bl	8006b68 <_fflush_r>
 8007056:	b938      	cbnz	r0, 8007068 <__swbuf_r+0x74>
 8007058:	4638      	mov	r0, r7
 800705a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800705c:	4621      	mov	r1, r4
 800705e:	4628      	mov	r0, r5
 8007060:	f000 f806 	bl	8007070 <__swsetup_r>
 8007064:	2800      	cmp	r0, #0
 8007066:	d0d5      	beq.n	8007014 <__swbuf_r+0x20>
 8007068:	f04f 37ff 	mov.w	r7, #4294967295
 800706c:	e7f4      	b.n	8007058 <__swbuf_r+0x64>
	...

08007070 <__swsetup_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4b2a      	ldr	r3, [pc, #168]	; (800711c <__swsetup_r+0xac>)
 8007074:	4605      	mov	r5, r0
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	460c      	mov	r4, r1
 800707a:	b118      	cbz	r0, 8007084 <__swsetup_r+0x14>
 800707c:	6a03      	ldr	r3, [r0, #32]
 800707e:	b90b      	cbnz	r3, 8007084 <__swsetup_r+0x14>
 8007080:	f7fd ff82 	bl	8004f88 <__sinit>
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800708a:	0718      	lsls	r0, r3, #28
 800708c:	d422      	bmi.n	80070d4 <__swsetup_r+0x64>
 800708e:	06d9      	lsls	r1, r3, #27
 8007090:	d407      	bmi.n	80070a2 <__swsetup_r+0x32>
 8007092:	2309      	movs	r3, #9
 8007094:	602b      	str	r3, [r5, #0]
 8007096:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	f04f 30ff 	mov.w	r0, #4294967295
 80070a0:	e034      	b.n	800710c <__swsetup_r+0x9c>
 80070a2:	0758      	lsls	r0, r3, #29
 80070a4:	d512      	bpl.n	80070cc <__swsetup_r+0x5c>
 80070a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070a8:	b141      	cbz	r1, 80070bc <__swsetup_r+0x4c>
 80070aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070ae:	4299      	cmp	r1, r3
 80070b0:	d002      	beq.n	80070b8 <__swsetup_r+0x48>
 80070b2:	4628      	mov	r0, r5
 80070b4:	f7fe fefe 	bl	8005eb4 <_free_r>
 80070b8:	2300      	movs	r3, #0
 80070ba:	6363      	str	r3, [r4, #52]	; 0x34
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070c2:	81a3      	strh	r3, [r4, #12]
 80070c4:	2300      	movs	r3, #0
 80070c6:	6063      	str	r3, [r4, #4]
 80070c8:	6923      	ldr	r3, [r4, #16]
 80070ca:	6023      	str	r3, [r4, #0]
 80070cc:	89a3      	ldrh	r3, [r4, #12]
 80070ce:	f043 0308 	orr.w	r3, r3, #8
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	6923      	ldr	r3, [r4, #16]
 80070d6:	b94b      	cbnz	r3, 80070ec <__swsetup_r+0x7c>
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070e2:	d003      	beq.n	80070ec <__swsetup_r+0x7c>
 80070e4:	4621      	mov	r1, r4
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 f884 	bl	80071f4 <__smakebuf_r>
 80070ec:	89a0      	ldrh	r0, [r4, #12]
 80070ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070f2:	f010 0301 	ands.w	r3, r0, #1
 80070f6:	d00a      	beq.n	800710e <__swsetup_r+0x9e>
 80070f8:	2300      	movs	r3, #0
 80070fa:	60a3      	str	r3, [r4, #8]
 80070fc:	6963      	ldr	r3, [r4, #20]
 80070fe:	425b      	negs	r3, r3
 8007100:	61a3      	str	r3, [r4, #24]
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	b943      	cbnz	r3, 8007118 <__swsetup_r+0xa8>
 8007106:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800710a:	d1c4      	bne.n	8007096 <__swsetup_r+0x26>
 800710c:	bd38      	pop	{r3, r4, r5, pc}
 800710e:	0781      	lsls	r1, r0, #30
 8007110:	bf58      	it	pl
 8007112:	6963      	ldrpl	r3, [r4, #20]
 8007114:	60a3      	str	r3, [r4, #8]
 8007116:	e7f4      	b.n	8007102 <__swsetup_r+0x92>
 8007118:	2000      	movs	r0, #0
 800711a:	e7f7      	b.n	800710c <__swsetup_r+0x9c>
 800711c:	2000006c 	.word	0x2000006c

08007120 <_raise_r>:
 8007120:	291f      	cmp	r1, #31
 8007122:	b538      	push	{r3, r4, r5, lr}
 8007124:	4604      	mov	r4, r0
 8007126:	460d      	mov	r5, r1
 8007128:	d904      	bls.n	8007134 <_raise_r+0x14>
 800712a:	2316      	movs	r3, #22
 800712c:	6003      	str	r3, [r0, #0]
 800712e:	f04f 30ff 	mov.w	r0, #4294967295
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007136:	b112      	cbz	r2, 800713e <_raise_r+0x1e>
 8007138:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800713c:	b94b      	cbnz	r3, 8007152 <_raise_r+0x32>
 800713e:	4620      	mov	r0, r4
 8007140:	f000 f830 	bl	80071a4 <_getpid_r>
 8007144:	462a      	mov	r2, r5
 8007146:	4601      	mov	r1, r0
 8007148:	4620      	mov	r0, r4
 800714a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800714e:	f000 b817 	b.w	8007180 <_kill_r>
 8007152:	2b01      	cmp	r3, #1
 8007154:	d00a      	beq.n	800716c <_raise_r+0x4c>
 8007156:	1c59      	adds	r1, r3, #1
 8007158:	d103      	bne.n	8007162 <_raise_r+0x42>
 800715a:	2316      	movs	r3, #22
 800715c:	6003      	str	r3, [r0, #0]
 800715e:	2001      	movs	r0, #1
 8007160:	e7e7      	b.n	8007132 <_raise_r+0x12>
 8007162:	2400      	movs	r4, #0
 8007164:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007168:	4628      	mov	r0, r5
 800716a:	4798      	blx	r3
 800716c:	2000      	movs	r0, #0
 800716e:	e7e0      	b.n	8007132 <_raise_r+0x12>

08007170 <raise>:
 8007170:	4b02      	ldr	r3, [pc, #8]	; (800717c <raise+0xc>)
 8007172:	4601      	mov	r1, r0
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	f7ff bfd3 	b.w	8007120 <_raise_r>
 800717a:	bf00      	nop
 800717c:	2000006c 	.word	0x2000006c

08007180 <_kill_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4d07      	ldr	r5, [pc, #28]	; (80071a0 <_kill_r+0x20>)
 8007184:	2300      	movs	r3, #0
 8007186:	4604      	mov	r4, r0
 8007188:	4608      	mov	r0, r1
 800718a:	4611      	mov	r1, r2
 800718c:	602b      	str	r3, [r5, #0]
 800718e:	f7fa f9c1 	bl	8001514 <_kill>
 8007192:	1c43      	adds	r3, r0, #1
 8007194:	d102      	bne.n	800719c <_kill_r+0x1c>
 8007196:	682b      	ldr	r3, [r5, #0]
 8007198:	b103      	cbz	r3, 800719c <_kill_r+0x1c>
 800719a:	6023      	str	r3, [r4, #0]
 800719c:	bd38      	pop	{r3, r4, r5, pc}
 800719e:	bf00      	nop
 80071a0:	20000448 	.word	0x20000448

080071a4 <_getpid_r>:
 80071a4:	f7fa b9ae 	b.w	8001504 <_getpid>

080071a8 <__swhatbuf_r>:
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	460c      	mov	r4, r1
 80071ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b0:	2900      	cmp	r1, #0
 80071b2:	b096      	sub	sp, #88	; 0x58
 80071b4:	4615      	mov	r5, r2
 80071b6:	461e      	mov	r6, r3
 80071b8:	da0d      	bge.n	80071d6 <__swhatbuf_r+0x2e>
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80071c0:	f04f 0100 	mov.w	r1, #0
 80071c4:	bf0c      	ite	eq
 80071c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80071ca:	2340      	movne	r3, #64	; 0x40
 80071cc:	2000      	movs	r0, #0
 80071ce:	6031      	str	r1, [r6, #0]
 80071d0:	602b      	str	r3, [r5, #0]
 80071d2:	b016      	add	sp, #88	; 0x58
 80071d4:	bd70      	pop	{r4, r5, r6, pc}
 80071d6:	466a      	mov	r2, sp
 80071d8:	f000 f848 	bl	800726c <_fstat_r>
 80071dc:	2800      	cmp	r0, #0
 80071de:	dbec      	blt.n	80071ba <__swhatbuf_r+0x12>
 80071e0:	9901      	ldr	r1, [sp, #4]
 80071e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80071e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80071ea:	4259      	negs	r1, r3
 80071ec:	4159      	adcs	r1, r3
 80071ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071f2:	e7eb      	b.n	80071cc <__swhatbuf_r+0x24>

080071f4 <__smakebuf_r>:
 80071f4:	898b      	ldrh	r3, [r1, #12]
 80071f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071f8:	079d      	lsls	r5, r3, #30
 80071fa:	4606      	mov	r6, r0
 80071fc:	460c      	mov	r4, r1
 80071fe:	d507      	bpl.n	8007210 <__smakebuf_r+0x1c>
 8007200:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	6123      	str	r3, [r4, #16]
 8007208:	2301      	movs	r3, #1
 800720a:	6163      	str	r3, [r4, #20]
 800720c:	b002      	add	sp, #8
 800720e:	bd70      	pop	{r4, r5, r6, pc}
 8007210:	ab01      	add	r3, sp, #4
 8007212:	466a      	mov	r2, sp
 8007214:	f7ff ffc8 	bl	80071a8 <__swhatbuf_r>
 8007218:	9900      	ldr	r1, [sp, #0]
 800721a:	4605      	mov	r5, r0
 800721c:	4630      	mov	r0, r6
 800721e:	f7fe febd 	bl	8005f9c <_malloc_r>
 8007222:	b948      	cbnz	r0, 8007238 <__smakebuf_r+0x44>
 8007224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007228:	059a      	lsls	r2, r3, #22
 800722a:	d4ef      	bmi.n	800720c <__smakebuf_r+0x18>
 800722c:	f023 0303 	bic.w	r3, r3, #3
 8007230:	f043 0302 	orr.w	r3, r3, #2
 8007234:	81a3      	strh	r3, [r4, #12]
 8007236:	e7e3      	b.n	8007200 <__smakebuf_r+0xc>
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	6020      	str	r0, [r4, #0]
 800723c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007240:	81a3      	strh	r3, [r4, #12]
 8007242:	9b00      	ldr	r3, [sp, #0]
 8007244:	6163      	str	r3, [r4, #20]
 8007246:	9b01      	ldr	r3, [sp, #4]
 8007248:	6120      	str	r0, [r4, #16]
 800724a:	b15b      	cbz	r3, 8007264 <__smakebuf_r+0x70>
 800724c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007250:	4630      	mov	r0, r6
 8007252:	f000 f81d 	bl	8007290 <_isatty_r>
 8007256:	b128      	cbz	r0, 8007264 <__smakebuf_r+0x70>
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	f023 0303 	bic.w	r3, r3, #3
 800725e:	f043 0301 	orr.w	r3, r3, #1
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	89a3      	ldrh	r3, [r4, #12]
 8007266:	431d      	orrs	r5, r3
 8007268:	81a5      	strh	r5, [r4, #12]
 800726a:	e7cf      	b.n	800720c <__smakebuf_r+0x18>

0800726c <_fstat_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	4d07      	ldr	r5, [pc, #28]	; (800728c <_fstat_r+0x20>)
 8007270:	2300      	movs	r3, #0
 8007272:	4604      	mov	r4, r0
 8007274:	4608      	mov	r0, r1
 8007276:	4611      	mov	r1, r2
 8007278:	602b      	str	r3, [r5, #0]
 800727a:	f7fa f9aa 	bl	80015d2 <_fstat>
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	d102      	bne.n	8007288 <_fstat_r+0x1c>
 8007282:	682b      	ldr	r3, [r5, #0]
 8007284:	b103      	cbz	r3, 8007288 <_fstat_r+0x1c>
 8007286:	6023      	str	r3, [r4, #0]
 8007288:	bd38      	pop	{r3, r4, r5, pc}
 800728a:	bf00      	nop
 800728c:	20000448 	.word	0x20000448

08007290 <_isatty_r>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	4d06      	ldr	r5, [pc, #24]	; (80072ac <_isatty_r+0x1c>)
 8007294:	2300      	movs	r3, #0
 8007296:	4604      	mov	r4, r0
 8007298:	4608      	mov	r0, r1
 800729a:	602b      	str	r3, [r5, #0]
 800729c:	f7fa f9a9 	bl	80015f2 <_isatty>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d102      	bne.n	80072aa <_isatty_r+0x1a>
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	b103      	cbz	r3, 80072aa <_isatty_r+0x1a>
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	20000448 	.word	0x20000448

080072b0 <_init>:
 80072b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b2:	bf00      	nop
 80072b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b6:	bc08      	pop	{r3}
 80072b8:	469e      	mov	lr, r3
 80072ba:	4770      	bx	lr

080072bc <_fini>:
 80072bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072be:	bf00      	nop
 80072c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c2:	bc08      	pop	{r3}
 80072c4:	469e      	mov	lr, r3
 80072c6:	4770      	bx	lr
