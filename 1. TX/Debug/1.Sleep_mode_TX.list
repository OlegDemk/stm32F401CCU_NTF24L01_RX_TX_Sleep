
1.Sleep_mode_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800b368  0800b368  0001b368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b77c  0800b77c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b77c  0800b77c  0001b77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b784  0800b784  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b784  0800b784  0001b784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b788  0800b788  0001b788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800b78c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001d8  0800b964  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800b964  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000142b2  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e53  00000000  00000000  000344fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  00037350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e51  00000000  00000000  000385b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005823  00000000  00000000  00039409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016445  00000000  00000000  0003ec2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ef9a  00000000  00000000  00055071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f40  00000000  00000000  000f400c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000f9f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b34c 	.word	0x0800b34c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800b34c 	.word	0x0800b34c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000f5c:	2305      	movs	r3, #5
 8000f5e:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f001 f9f3 	bl	8002350 <null_ptr_check>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d133      	bne.n	8000fde <bme280_init+0x8a>
		while (try_count) {
 8000f76:	e028      	b.n	8000fca <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f78:	f107 010d 	add.w	r1, r7, #13
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	20d0      	movs	r0, #208	; 0xd0
 8000f82:	f000 f832 	bl	8000fea <bme280_get_regs>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d114      	bne.n	8000fbc <bme280_init+0x68>
 8000f92:	7b7b      	ldrb	r3, [r7, #13]
 8000f94:	2b60      	cmp	r3, #96	; 0x60
 8000f96:	d111      	bne.n	8000fbc <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000f98:	7b7a      	ldrb	r2, [r7, #13]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f976 	bl	8001290 <bme280_soft_reset>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d110      	bne.n	8000fd2 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f001 f841 	bl	8002038 <get_calib_data>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000fba:	e00a      	b.n	8000fd2 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	4798      	blx	r3
			--try_count;
 8000fc4:	7bbb      	ldrb	r3, [r7, #14]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1d3      	bne.n	8000f78 <bme280_init+0x24>
 8000fd0:	e000      	b.n	8000fd4 <bme280_init+0x80>
				break;
 8000fd2:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000fda:	23fe      	movs	r3, #254	; 0xfe
 8000fdc:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000fea:	b590      	push	{r4, r7, lr}
 8000fec:	b087      	sub	sp, #28
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f001 f9a7 	bl	8002350 <null_ptr_check>
 8001002:	4603      	mov	r3, r0
 8001004:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d117      	bne.n	800103e <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	789b      	ldrb	r3, [r3, #2]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d003      	beq.n	800101e <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800101c:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685c      	ldr	r4, [r3, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7858      	ldrb	r0, [r3, #1]
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	7bf9      	ldrb	r1, [r7, #15]
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	47a0      	blx	r4
 800102e:	4603      	mov	r3, r0
 8001030:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8001032:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 800103a:	23fc      	movs	r3, #252	; 0xfc
 800103c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800103e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001042:	4618      	mov	r0, r3
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}

0800104a <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 800104a:	b590      	push	{r4, r7, lr}
 800104c:	b08d      	sub	sp, #52	; 0x34
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	4613      	mov	r3, r2
 8001058:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b0a      	cmp	r3, #10
 800105e:	d901      	bls.n	8001064 <bme280_set_regs+0x1a>
		len = 10;
 8001060:	230a      	movs	r3, #10
 8001062:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001064:	6838      	ldr	r0, [r7, #0]
 8001066:	f001 f973 	bl	8002350 <null_ptr_check>
 800106a:	4603      	mov	r3, r0
 800106c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8001070:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001074:	2b00      	cmp	r3, #0
 8001076:	d154      	bne.n	8001122 <bme280_set_regs+0xd8>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d051      	beq.n	8001122 <bme280_set_regs+0xd8>
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d04e      	beq.n	8001122 <bme280_set_regs+0xd8>
		if (len != 0) {
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d047      	beq.n	800111a <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	789b      	ldrb	r3, [r3, #2]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d01a      	beq.n	80010ce <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001098:	2300      	movs	r3, #0
 800109a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800109e:	e011      	b.n	80010c4 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80010a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	781a      	ldrb	r2, [r3, #0]
 80010aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010ae:	68f9      	ldr	r1, [r7, #12]
 80010b0:	440b      	add	r3, r1
 80010b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010be:	3301      	adds	r3, #1
 80010c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010c4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d3e8      	bcc.n	80010a0 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d90b      	bls.n	80010ec <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f107 0114 	add.w	r1, r7, #20
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 fff0 	bl	80020c2 <interleave_reg_addr>
				temp_len = len * 2;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010ea:	e001      	b.n	80010f0 <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689c      	ldr	r4, [r3, #8]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	7858      	ldrb	r0, [r3, #1]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	7819      	ldrb	r1, [r3, #0]
 80010fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010fe:	f107 0214 	add.w	r2, r7, #20
 8001102:	47a0      	blx	r4
 8001104:	4603      	mov	r3, r0
 8001106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800110a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00b      	beq.n	800112a <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 8001112:	23fc      	movs	r3, #252	; 0xfc
 8001114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001118:	e007      	b.n	800112a <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 800111a:	23fd      	movs	r3, #253	; 0xfd
 800111c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001120:	e003      	b.n	800112a <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001122:	23ff      	movs	r3, #255	; 0xff
 8001124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001128:	e000      	b.n	800112c <bme280_set_regs+0xe2>
		if (len != 0) {
 800112a:	bf00      	nop
	}


	return rslt;
 800112c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001130:	4618      	mov	r0, r3
 8001132:	3734      	adds	r7, #52	; 0x34
 8001134:	46bd      	mov	sp, r7
 8001136:	bd90      	pop	{r4, r7, pc}

08001138 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f001 f903 	bl	8002350 <null_ptr_check>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d13f      	bne.n	80011d6 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001156:	f107 030e 	add.w	r3, r7, #14
 800115a:	6839      	ldr	r1, [r7, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f874 	bl	800124a <bme280_get_sensor_mode>
 8001162:	4603      	mov	r3, r0
 8001164:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d107      	bne.n	800117e <bme280_set_sensor_settings+0x46>
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d004      	beq.n	800117e <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001174:	6838      	ldr	r0, [r7, #0]
 8001176:	f000 fb4e 	bl	8001816 <put_device_to_sleep>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d127      	bne.n	80011d6 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4619      	mov	r1, r3
 800118a:	2007      	movs	r0, #7
 800118c:	f001 f8c4 	bl	8002318 <are_settings_changed>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d009      	beq.n	80011aa <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f98a 	bl	80014ba <set_osr_settings>
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d111      	bne.n	80011d6 <bme280_set_sensor_settings+0x9e>
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4619      	mov	r1, r3
 80011b6:	2018      	movs	r0, #24
 80011b8:	f001 f8ae 	bl	8002318 <are_settings_changed>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fa11 	bl	80015f4 <set_filter_standby_settings>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	6039      	str	r1, [r7, #0]
 80011ec:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f001 f8ae 	bl	8002350 <null_ptr_check>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80011f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d11e      	bne.n	800123e <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001200:	f107 030e 	add.w	r3, r7, #14
 8001204:	6839      	ldr	r1, [r7, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f81f 	bl	800124a <bme280_get_sensor_mode>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d107      	bne.n	8001228 <bme280_set_sensor_mode+0x46>
 8001218:	7bbb      	ldrb	r3, [r7, #14]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 800121e:	6838      	ldr	r0, [r7, #0]
 8001220:	f000 faf9 	bl	8001816 <put_device_to_sleep>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8001228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	6839      	ldr	r1, [r7, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fabb 	bl	80017b0 <write_power_mode>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001254:	6838      	ldr	r0, [r7, #0]
 8001256:	f001 f87b 	bl	8002350 <null_ptr_check>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10e      	bne.n	8001284 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2201      	movs	r2, #1
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	20f4      	movs	r0, #244	; 0xf4
 800126e:	f7ff febc 	bl	8000fea <bme280_get_regs>
 8001272:	4603      	mov	r3, r0
 8001274:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	b2da      	uxtb	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001284:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001298:	23e0      	movs	r3, #224	; 0xe0
 800129a:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 800129c:	23b6      	movs	r3, #182	; 0xb6
 800129e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f001 f855 	bl	8002350 <null_ptr_check>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10d      	bne.n	80012ce <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80012b2:	f107 010d 	add.w	r1, r7, #13
 80012b6:	f107 000e 	add.w	r0, r7, #14
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	f7ff fec4 	bl	800104a <bme280_set_regs>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2002      	movs	r0, #2
 80012cc:	4798      	blx	r3
	}

	return rslt;
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b08a      	sub	sp, #40	; 0x28
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f001 f827 	bl	8002350 <null_ptr_check>
 8001302:	4603      	mov	r3, r0
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8001308:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800130c:	2b00      	cmp	r3, #0
 800130e:	d124      	bne.n	800135a <bme280_get_sensor_data+0x80>
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d021      	beq.n	800135a <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001316:	f107 011c 	add.w	r1, r7, #28
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2208      	movs	r2, #8
 800131e:	20f7      	movs	r0, #247	; 0xf7
 8001320:	f7ff fe63 	bl	8000fea <bme280_get_regs>
 8001324:	4603      	mov	r3, r0
 8001326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 800132a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800132e:	2b00      	cmp	r3, #0
 8001330:	d116      	bne.n	8001360 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001332:	f107 0210 	add.w	r2, r7, #16
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f000 f815 	bl	800136c <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3310      	adds	r3, #16
 8001346:	f107 0110 	add.w	r1, r7, #16
 800134a:	7bf8      	ldrb	r0, [r7, #15]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	f000 f853 	bl	80013f8 <bme280_compensate_data>
 8001352:	4603      	mov	r3, r0
 8001354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8001358:	e002      	b.n	8001360 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800135a:	23ff      	movs	r3, #255	; 0xff
 800135c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8001360:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001364:	4618      	mov	r0, r3
 8001366:	3728      	adds	r7, #40	; 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	031b      	lsls	r3, r3, #12
 800137c:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3301      	adds	r3, #1
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3302      	adds	r3, #2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	b2db      	uxtb	r3, r3
 8001392:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	431a      	orrs	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	431a      	orrs	r2, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3303      	adds	r3, #3
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	031b      	lsls	r3, r3, #12
 80013aa:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3304      	adds	r3, #4
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3305      	adds	r3, #5
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3306      	adds	r3, #6
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3307      	adds	r3, #7
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	609a      	str	r2, [r3, #8]
}
 80013ec:	bf00      	nop
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	4603      	mov	r3, r0
 8001406:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d04b      	beq.n	80014aa <bme280_compensate_data+0xb2>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d048      	beq.n	80014aa <bme280_compensate_data+0xb2>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d045      	beq.n	80014aa <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00a      	beq.n	8001468 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001452:	6839      	ldr	r1, [r7, #0]
 8001454:	68b8      	ldr	r0, [r7, #8]
 8001456:	f000 fa2b 	bl	80018b0 <compensate_temperature>
 800145a:	eeb0 7a40 	vmov.f32	s14, s0
 800145e:	eef0 7a60 	vmov.f32	s15, s1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00a      	beq.n	8001488 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001472:	6839      	ldr	r1, [r7, #0]
 8001474:	68b8      	ldr	r0, [r7, #8]
 8001476:	f000 faef 	bl	8001a58 <compensate_pressure>
 800147a:	eeb0 7a40 	vmov.f32	s14, s0
 800147e:	eef0 7a60 	vmov.f32	s15, s1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00d      	beq.n	80014ae <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001492:	6839      	ldr	r1, [r7, #0]
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f000 fcaf 	bl	8001df8 <compensate_humidity>
 800149a:	eeb0 7a40 	vmov.f32	s14, s0
 800149e:	eef0 7a60 	vmov.f32	s15, s1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 80014a8:	e001      	b.n	80014ae <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80014aa:	23ff      	movs	r3, #255	; 0xff
 80014ac:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80014ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80014c8:	2301      	movs	r3, #1
 80014ca:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	68b8      	ldr	r0, [r7, #8]
 80014da:	f000 f815 	bl	8001508 <set_osr_humidity_settings>
 80014de:	4603      	mov	r3, r0
 80014e0:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d007      	beq.n	80014fc <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f842 	bl	800157c <set_osr_press_temp_settings>
 80014f8:	4603      	mov	r3, r0
 80014fa:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80014fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001512:	23f2      	movs	r3, #242	; 0xf2
 8001514:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	789b      	ldrb	r3, [r3, #2]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	b2db      	uxtb	r3, r3
 8001520:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001522:	f107 010e 	add.w	r1, r7, #14
 8001526:	f107 000c 	add.w	r0, r7, #12
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2201      	movs	r2, #1
 800152e:	f7ff fd8c 	bl	800104a <bme280_set_regs>
 8001532:	4603      	mov	r3, r0
 8001534:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d118      	bne.n	8001570 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800153e:	23f4      	movs	r3, #244	; 0xf4
 8001540:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001542:	7b38      	ldrb	r0, [r7, #12]
 8001544:	f107 010d 	add.w	r1, r7, #13
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2201      	movs	r2, #1
 800154c:	f7ff fd4d 	bl	8000fea <bme280_get_regs>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d109      	bne.n	8001570 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800155c:	f107 010d 	add.w	r1, r7, #13
 8001560:	f107 000c 	add.w	r0, r7, #12
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2201      	movs	r2, #1
 8001568:	f7ff fd6f 	bl	800104a <bme280_set_regs>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001570:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800158a:	23f4      	movs	r3, #244	; 0xf4
 800158c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800158e:	7db8      	ldrb	r0, [r7, #22]
 8001590:	f107 0115 	add.w	r1, r7, #21
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f7ff fd27 	bl	8000fea <bme280_get_regs>
 800159c:	4603      	mov	r3, r0
 800159e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80015a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d11f      	bne.n	80015e8 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80015b2:	f107 0315 	add.w	r3, r7, #21
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f88e 	bl	80016da <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80015c8:	f107 0315 	add.w	r3, r7, #21
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f8a0 	bl	8001714 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80015d4:	f107 0115 	add.w	r1, r7, #21
 80015d8:	f107 0016 	add.w	r0, r7, #22
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f7ff fd33 	bl	800104a <bme280_set_regs>
 80015e4:	4603      	mov	r3, r0
 80015e6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001602:	23f5      	movs	r3, #245	; 0xf5
 8001604:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001606:	7db8      	ldrb	r0, [r7, #22]
 8001608:	f107 0115 	add.w	r1, r7, #21
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f7ff fceb 	bl	8000fea <bme280_get_regs>
 8001614:	4603      	mov	r3, r0
 8001616:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d11f      	bne.n	8001660 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800162a:	f107 0315 	add.w	r3, r7, #21
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f81b 	bl	800166c <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8001640:	f107 0315 	add.w	r3, r7, #21
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f82d 	bl	80016a6 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800164c:	f107 0115 	add.w	r1, r7, #21
 8001650:	f107 0016 	add.w	r0, r7, #22
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f7ff fcf7 	bl	800104a <bme280_set_regs>
 800165c:	4603      	mov	r3, r0
 800165e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001660:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b25b      	sxtb	r3, r3
 800167c:	f023 031c 	bic.w	r3, r3, #28
 8001680:	b25a      	sxtb	r2, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	78db      	ldrb	r3, [r3, #3]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	b25b      	sxtb	r3, r3
 800168a:	f003 031c 	and.w	r3, r3, #28
 800168e:	b25b      	sxtb	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b25b      	sxtb	r3, r3
 8001694:	b2da      	uxtb	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	701a      	strb	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	b25a      	sxtb	r2, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	791b      	ldrb	r3, [r3, #4]
 80016c0:	015b      	lsls	r3, r3, #5
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	701a      	strb	r2, [r3, #0]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	f023 031c 	bic.w	r3, r3, #28
 80016ee:	b25a      	sxtb	r2, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	f003 031c 	and.w	r3, r3, #28
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b25b      	sxtb	r3, r3
 8001702:	b2da      	uxtb	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	701a      	strb	r2, [r3, #0]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b25b      	sxtb	r3, r3
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	b25a      	sxtb	r2, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	785b      	ldrb	r3, [r3, #1]
 800172e:	015b      	lsls	r3, r3, #5
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2da      	uxtb	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	701a      	strb	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	b2da      	uxtb	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3302      	adds	r3, #2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	109b      	asrs	r3, r3, #2
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	b2da      	uxtb	r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3302      	adds	r3, #2
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	b2da      	uxtb	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	109b      	asrs	r3, r3, #2
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	b2da      	uxtb	r2, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3303      	adds	r3, #3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	711a      	strb	r2, [r3, #4]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80017bc:	23f4      	movs	r3, #244	; 0xf4
 80017be:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80017c0:	7bb8      	ldrb	r0, [r7, #14]
 80017c2:	f107 010d 	add.w	r1, r7, #13
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f7ff fc0e 	bl	8000fea <bme280_get_regs>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d117      	bne.n	800180a <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80017da:	7b7b      	ldrb	r3, [r7, #13]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	f023 0303 	bic.w	r3, r3, #3
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80017f6:	f107 010d 	add.w	r1, r7, #13
 80017fa:	f107 000e 	add.w	r0, r7, #14
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2201      	movs	r2, #1
 8001802:	f7ff fc22 	bl	800104a <bme280_set_regs>
 8001806:	4603      	mov	r3, r0
 8001808:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800181e:	f107 0110 	add.w	r1, r7, #16
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2204      	movs	r2, #4
 8001826:	20f2      	movs	r0, #242	; 0xf2
 8001828:	f7ff fbdf 	bl	8000fea <bme280_get_regs>
 800182c:	4603      	mov	r3, r0
 800182e:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001830:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d118      	bne.n	800186a <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8001838:	f107 0208 	add.w	r2, r7, #8
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff80 	bl	8001748 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fd21 	bl	8001290 <bme280_soft_reset>
 800184e:	4603      	mov	r3, r0
 8001850:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8001852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d107      	bne.n	800186a <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	f000 f808 	bl	8001876 <reload_device_settings>
 8001866:	4603      	mov	r3, r0
 8001868:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800186a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	201f      	movs	r0, #31
 8001886:	f7ff fe18 	bl	80014ba <set_osr_settings>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	201f      	movs	r0, #31
 800189c:	f7ff feaa 	bl	80015f4 <set_filter_standby_settings>
 80018a0:	4603      	mov	r3, r0
 80018a2:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80018a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b08c      	sub	sp, #48	; 0x30
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	4b5f      	ldr	r3, [pc, #380]	; (8001a3c <compensate_temperature+0x18c>)
 80018c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <compensate_temperature+0x190>)
 80018ca:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe1e 	bl	8000514 <__aeabi_ui2d>
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <compensate_temperature+0x194>)
 80018de:	f7fe ffbd 	bl	800085c <__aeabi_ddiv>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4614      	mov	r4, r2
 80018e8:	461d      	mov	r5, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe10 	bl	8000514 <__aeabi_ui2d>
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <compensate_temperature+0x198>)
 80018fa:	f7fe ffaf 	bl	800085c <__aeabi_ddiv>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4620      	mov	r0, r4
 8001904:	4629      	mov	r1, r5
 8001906:	f7fe fcc7 	bl	8000298 <__aeabi_dsub>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fe0b 	bl	8000534 <__aeabi_i2d>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001926:	f7fe fe6f 	bl	8000608 <__aeabi_dmul>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fdec 	bl	8000514 <__aeabi_ui2d>
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001944:	f7fe ff8a 	bl	800085c <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4614      	mov	r4, r2
 800194e:	461d      	mov	r5, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fddd 	bl	8000514 <__aeabi_ui2d>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <compensate_temperature+0x19c>)
 8001960:	f7fe ff7c 	bl	800085c <__aeabi_ddiv>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4620      	mov	r0, r4
 800196a:	4629      	mov	r1, r5
 800196c:	f7fe fc94 	bl	8000298 <__aeabi_dsub>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8001978:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800197c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001980:	f7fe fe42 	bl	8000608 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	461d      	mov	r5, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdce 	bl	8000534 <__aeabi_i2d>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4620      	mov	r0, r4
 800199e:	4629      	mov	r1, r5
 80019a0:	f7fe fe32 	bl	8000608 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 80019ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019b4:	f7fe fc72 	bl	800029c <__adddf3>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff f8d2 	bl	8000b68 <__aeabi_d2iz>
 80019c4:	4602      	mov	r2, r0
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80019ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019d2:	f7fe fc63 	bl	800029c <__adddf3>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <compensate_temperature+0x1a0>)
 80019e4:	f7fe ff3a 	bl	800085c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80019f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019f8:	f7ff f878 	bl	8000aec <__aeabi_dcmplt>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d004      	beq.n	8001a0c <compensate_temperature+0x15c>
		temperature = temperature_min;
 8001a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a0a:	e00c      	b.n	8001a26 <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 8001a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a14:	f7ff f888 	bl	8000b28 <__aeabi_dcmpgt>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <compensate_temperature+0x176>
		temperature = temperature_max;
 8001a1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a22:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8001a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a2a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a32:	eef0 0a67 	vmov.f32	s1, s15
 8001a36:	3730      	adds	r7, #48	; 0x30
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3c:	c0440000 	.word	0xc0440000
 8001a40:	40554000 	.word	0x40554000
 8001a44:	40d00000 	.word	0x40d00000
 8001a48:	40900000 	.word	0x40900000
 8001a4c:	40c00000 	.word	0x40c00000
 8001a50:	40b40000 	.word	0x40b40000
 8001a54:	00000000 	.word	0x00000000

08001a58 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b08e      	sub	sp, #56	; 0x38
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8001a62:	a3d9      	add	r3, pc, #868	; (adr r3, 8001dc8 <compensate_pressure+0x370>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8001a6c:	a3d8      	add	r3, pc, #864	; (adr r3, 8001dd0 <compensate_pressure+0x378>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd5a 	bl	8000534 <__aeabi_i2d>
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a88:	f7fe fee8 	bl	800085c <__aeabi_ddiv>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4bc1      	ldr	r3, [pc, #772]	; (8001da0 <compensate_pressure+0x348>)
 8001a9a:	f7fe fbfd 	bl	8000298 <__aeabi_dsub>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8001aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aaa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aae:	f7fe fdab 	bl	8000608 <__aeabi_dmul>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4614      	mov	r4, r2
 8001ab8:	461d      	mov	r5, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd37 	bl	8000534 <__aeabi_i2d>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4620      	mov	r0, r4
 8001acc:	4629      	mov	r1, r5
 8001ace:	f7fe fd9b 	bl	8000608 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4bb1      	ldr	r3, [pc, #708]	; (8001da4 <compensate_pressure+0x34c>)
 8001ae0:	f7fe febc 	bl	800085c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fd1e 	bl	8000534 <__aeabi_i2d>
 8001af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001afc:	f7fe fd84 	bl	8000608 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	f7fe fbc6 	bl	800029c <__adddf3>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b18:	f7fe fbc0 	bl	800029c <__adddf3>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b9f      	ldr	r3, [pc, #636]	; (8001da8 <compensate_pressure+0x350>)
 8001b2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b2e:	f7fe fe95 	bl	800085c <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4614      	mov	r4, r2
 8001b38:	461d      	mov	r5, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fcf7 	bl	8000534 <__aeabi_i2d>
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	4b98      	ldr	r3, [pc, #608]	; (8001dac <compensate_pressure+0x354>)
 8001b4c:	f7fe fd5c 	bl	8000608 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4620      	mov	r0, r4
 8001b56:	4629      	mov	r1, r5
 8001b58:	f7fe fba0 	bl	800029c <__adddf3>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fce2 	bl	8000534 <__aeabi_i2d>
 8001b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b74:	f7fe fd48 	bl	8000608 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b84:	f7fe fd40 	bl	8000608 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	4b86      	ldr	r3, [pc, #536]	; (8001db0 <compensate_pressure+0x358>)
 8001b96:	f7fe fe61 	bl	800085c <__aeabi_ddiv>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fcc3 	bl	8000534 <__aeabi_i2d>
 8001bae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb2:	f7fe fd29 	bl	8000608 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bc2:	f7fe fb6b 	bl	800029c <__adddf3>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	4b77      	ldr	r3, [pc, #476]	; (8001db0 <compensate_pressure+0x358>)
 8001bd4:	f7fe fe42 	bl	800085c <__aeabi_ddiv>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	4b6f      	ldr	r3, [pc, #444]	; (8001da4 <compensate_pressure+0x34c>)
 8001be6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bea:	f7fe fe37 	bl	800085c <__aeabi_ddiv>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	4b6e      	ldr	r3, [pc, #440]	; (8001db4 <compensate_pressure+0x35c>)
 8001bfc:	f7fe fb4e 	bl	800029c <__adddf3>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4614      	mov	r4, r2
 8001c06:	461d      	mov	r5, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	88db      	ldrh	r3, [r3, #6]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fc81 	bl	8000514 <__aeabi_ui2d>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4620      	mov	r0, r4
 8001c18:	4629      	mov	r1, r5
 8001c1a:	f7fe fcf5 	bl	8000608 <__aeabi_dmul>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c32:	f7fe ff51 	bl	8000ad8 <__aeabi_dcmpeq>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 80cd 	bne.w	8001dd8 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc66 	bl	8000514 <__aeabi_ui2d>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	f04f 0000 	mov.w	r0, #0
 8001c50:	4959      	ldr	r1, [pc, #356]	; (8001db8 <compensate_pressure+0x360>)
 8001c52:	f7fe fb21 	bl	8000298 <__aeabi_dsub>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	4b56      	ldr	r3, [pc, #344]	; (8001dbc <compensate_pressure+0x364>)
 8001c64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c68:	f7fe fdf8 	bl	800085c <__aeabi_ddiv>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c74:	f7fe fb10 	bl	8000298 <__aeabi_dsub>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	a345      	add	r3, pc, #276	; (adr r3, 8001d98 <compensate_pressure+0x340>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe fcbf 	bl	8000608 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c96:	f7fe fde1 	bl	800085c <__aeabi_ddiv>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc43 	bl	8000534 <__aeabi_i2d>
 8001cae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cb2:	f7fe fca9 	bl	8000608 <__aeabi_dmul>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cc2:	f7fe fca1 	bl	8000608 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <compensate_pressure+0x368>)
 8001cd4:	f7fe fdc2 	bl	800085c <__aeabi_ddiv>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fc24 	bl	8000534 <__aeabi_i2d>
 8001cec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cf0:	f7fe fc8a 	bl	8000608 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <compensate_pressure+0x34c>)
 8001d02:	f7fe fdab 	bl	800085c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8001d0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d16:	f7fe fac1 	bl	800029c <__adddf3>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4614      	mov	r4, r2
 8001d20:	461d      	mov	r5, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc03 	bl	8000534 <__aeabi_i2d>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4620      	mov	r0, r4
 8001d34:	4629      	mov	r1, r5
 8001d36:	f7fe fab1 	bl	800029c <__adddf3>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <compensate_pressure+0x36c>)
 8001d48:	f7fe fd88 	bl	800085c <__aeabi_ddiv>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d54:	f7fe faa2 	bl	800029c <__adddf3>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8001d60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d64:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d68:	f7fe fec0 	bl	8000aec <__aeabi_dcmplt>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <compensate_pressure+0x324>
			pressure = pressure_min;
 8001d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d76:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d7a:	e031      	b.n	8001de0 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8001d7c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d80:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d84:	f7fe fed0 	bl	8000b28 <__aeabi_dcmpgt>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d028      	beq.n	8001de0 <compensate_pressure+0x388>
			pressure = pressure_max;
 8001d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d92:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d96:	e023      	b.n	8001de0 <compensate_pressure+0x388>
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	40b86a00 	.word	0x40b86a00
 8001da0:	40ef4000 	.word	0x40ef4000
 8001da4:	40e00000 	.word	0x40e00000
 8001da8:	40100000 	.word	0x40100000
 8001dac:	40f00000 	.word	0x40f00000
 8001db0:	41200000 	.word	0x41200000
 8001db4:	3ff00000 	.word	0x3ff00000
 8001db8:	41300000 	.word	0x41300000
 8001dbc:	40b00000 	.word	0x40b00000
 8001dc0:	41e00000 	.word	0x41e00000
 8001dc4:	40300000 	.word	0x40300000
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	40dd4c00 	.word	0x40dd4c00
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 8001dd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ddc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8001de0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001de4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001de8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dec:	eef0 0a67 	vmov.f32	s1, s15
 8001df0:	3738      	adds	r7, #56	; 0x38
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bdb0      	pop	{r4, r5, r7, pc}
 8001df6:	bf00      	nop

08001df8 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	b094      	sub	sp, #80	; 0x50
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4b81      	ldr	r3, [pc, #516]	; (8002018 <compensate_humidity+0x220>)
 8001e14:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fb89 	bl	8000534 <__aeabi_i2d>
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	4b7d      	ldr	r3, [pc, #500]	; (800201c <compensate_humidity+0x224>)
 8001e28:	f7fe fa36 	bl	8000298 <__aeabi_dsub>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fb7a 	bl	8000534 <__aeabi_i2d>
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	4b76      	ldr	r3, [pc, #472]	; (8002020 <compensate_humidity+0x228>)
 8001e46:	f7fe fbdf 	bl	8000608 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4614      	mov	r4, r2
 8001e50:	461d      	mov	r5, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb6b 	bl	8000534 <__aeabi_i2d>
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	4b70      	ldr	r3, [pc, #448]	; (8002024 <compensate_humidity+0x22c>)
 8001e64:	f7fe fcfa 	bl	800085c <__aeabi_ddiv>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e74:	f7fe fbc8 	bl	8000608 <__aeabi_dmul>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	f7fe fa0c 	bl	800029c <__adddf3>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fb3f 	bl	8000514 <__aeabi_ui2d>
 8001e96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e9a:	f7fe f9fd 	bl	8000298 <__aeabi_dsub>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fb41 	bl	8000534 <__aeabi_i2d>
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	4b5c      	ldr	r3, [pc, #368]	; (8002028 <compensate_humidity+0x230>)
 8001eb8:	f7fe fcd0 	bl	800085c <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	7f1b      	ldrb	r3, [r3, #28]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fb23 	bl	8000514 <__aeabi_ui2d>
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	4b56      	ldr	r3, [pc, #344]	; (800202c <compensate_humidity+0x234>)
 8001ed4:	f7fe fcc2 	bl	800085c <__aeabi_ddiv>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ee4:	f7fe fb90 	bl	8000608 <__aeabi_dmul>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	4b4e      	ldr	r3, [pc, #312]	; (8002030 <compensate_humidity+0x238>)
 8001ef6:	f7fe f9d1 	bl	800029c <__adddf3>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fb13 	bl	8000534 <__aeabi_i2d>
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	4b46      	ldr	r3, [pc, #280]	; (800202c <compensate_humidity+0x234>)
 8001f14:	f7fe fca2 	bl	800085c <__aeabi_ddiv>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f24:	f7fe fb70 	bl	8000608 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f34:	f7fe fb68 	bl	8000608 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <compensate_humidity+0x238>)
 8001f46:	f7fe f9a9 	bl	800029c <__adddf3>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8001f52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f5a:	f7fe fb55 	bl	8000608 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4614      	mov	r4, r2
 8001f64:	461d      	mov	r5, r3
 8001f66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f6e:	f7fe fb4b 	bl	8000608 <__aeabi_dmul>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4620      	mov	r0, r4
 8001f78:	4629      	mov	r1, r5
 8001f7a:	f7fe fb45 	bl	8000608 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	7e1b      	ldrb	r3, [r3, #24]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fac2 	bl	8000514 <__aeabi_ui2d>
 8001f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f94:	f7fe fb38 	bl	8000608 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <compensate_humidity+0x23c>)
 8001fa6:	f7fe fc59 	bl	800085c <__aeabi_ddiv>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	f04f 0000 	mov.w	r0, #0
 8001fb2:	491f      	ldr	r1, [pc, #124]	; (8002030 <compensate_humidity+0x238>)
 8001fb4:	f7fe f970 	bl	8000298 <__aeabi_dsub>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fc0:	f7fe fb22 	bl	8000608 <__aeabi_dmul>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8001fcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fd0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fd4:	f7fe fda8 	bl	8000b28 <__aeabi_dcmpgt>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d004      	beq.n	8001fe8 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8001fde:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fe2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fe6:	e00c      	b.n	8002002 <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8001fe8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001ff0:	f7fe fd7c 	bl	8000aec <__aeabi_dcmplt>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <compensate_humidity+0x20a>
		humidity = humidity_min;
 8001ffa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ffe:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8002002:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002006:	ec43 2b17 	vmov	d7, r2, r3
}
 800200a:	eeb0 0a47 	vmov.f32	s0, s14
 800200e:	eef0 0a67 	vmov.f32	s1, s15
 8002012:	3750      	adds	r7, #80	; 0x50
 8002014:	46bd      	mov	sp, r7
 8002016:	bdb0      	pop	{r4, r5, r7, pc}
 8002018:	40590000 	.word	0x40590000
 800201c:	40f2c000 	.word	0x40f2c000
 8002020:	40500000 	.word	0x40500000
 8002024:	40d00000 	.word	0x40d00000
 8002028:	40f00000 	.word	0x40f00000
 800202c:	41900000 	.word	0x41900000
 8002030:	3ff00000 	.word	0x3ff00000
 8002034:	41200000 	.word	0x41200000

08002038 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002040:	2388      	movs	r3, #136	; 0x88
 8002042:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	f107 0310 	add.w	r3, r7, #16
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800205c:	f107 010c 	add.w	r1, r7, #12
 8002060:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	221a      	movs	r2, #26
 8002068:	f7fe ffbf 	bl	8000fea <bme280_get_regs>
 800206c:	4603      	mov	r3, r0
 800206e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8002072:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002076:	2b00      	cmp	r3, #0
 8002078:	d11d      	bne.n	80020b6 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4618      	mov	r0, r3
 8002082:	f000 f84a 	bl	800211a <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002086:	23e1      	movs	r3, #225	; 0xe1
 8002088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800208c:	f107 010c 	add.w	r1, r7, #12
 8002090:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2207      	movs	r2, #7
 8002098:	f7fe ffa7 	bl	8000fea <bme280_get_regs>
 800209c:	4603      	mov	r3, r0
 800209e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80020a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80020aa:	f107 030c 	add.w	r3, r7, #12
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 f8e2 	bl	800227a <parse_humidity_calib_data>
		}
	}

	return rslt;
 80020b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3728      	adds	r7, #40	; 0x28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b087      	sub	sp, #28
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80020d0:	2301      	movs	r3, #1
 80020d2:	75fb      	strb	r3, [r7, #23]
 80020d4:	e016      	b.n	8002104 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80020d6:	7dfb      	ldrb	r3, [r7, #23]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	441a      	add	r2, r3
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	3b01      	subs	r3, #1
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	440b      	add	r3, r1
 80020e6:	7812      	ldrb	r2, [r2, #0]
 80020e8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	441a      	add	r2, r3
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4619      	mov	r1, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	440b      	add	r3, r1
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
 8002100:	3301      	adds	r3, #1
 8002102:	75fb      	strb	r3, [r7, #23]
 8002104:	7dfa      	ldrb	r2, [r7, #23]
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	429a      	cmp	r2, r3
 800210a:	d3e4      	bcc.n	80020d6 <interleave_reg_addr+0x14>
	}
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	371c      	adds	r7, #28
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	3310      	adds	r3, #16
 8002128:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3301      	adds	r3, #1
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	b21a      	sxth	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b21b      	sxth	r3, r3
 800213a:	4313      	orrs	r3, r2
 800213c:	b21b      	sxth	r3, r3
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3303      	adds	r3, #3
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	b21a      	sxth	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3302      	adds	r3, #2
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b21b      	sxth	r3, r3
 8002156:	4313      	orrs	r3, r2
 8002158:	b21a      	sxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3305      	adds	r3, #5
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	b21a      	sxth	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3304      	adds	r3, #4
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	b21b      	sxth	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b21a      	sxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3307      	adds	r3, #7
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	b21a      	sxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3306      	adds	r3, #6
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b21b      	sxth	r3, r3
 800218a:	4313      	orrs	r3, r2
 800218c:	b21b      	sxth	r3, r3
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3309      	adds	r3, #9
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b21a      	sxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3308      	adds	r3, #8
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	4313      	orrs	r3, r2
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	330b      	adds	r3, #11
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	330a      	adds	r3, #10
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b21b      	sxth	r3, r3
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	330d      	adds	r3, #13
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	330c      	adds	r3, #12
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	b21a      	sxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	330f      	adds	r3, #15
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	330e      	adds	r3, #14
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b21a      	sxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3311      	adds	r3, #17
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	b21a      	sxth	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3310      	adds	r3, #16
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b21b      	sxth	r3, r3
 800220e:	4313      	orrs	r3, r2
 8002210:	b21a      	sxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3313      	adds	r3, #19
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	b21a      	sxth	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3312      	adds	r3, #18
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b21a      	sxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3315      	adds	r3, #21
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	b21a      	sxth	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3314      	adds	r3, #20
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b21b      	sxth	r3, r3
 8002242:	4313      	orrs	r3, r2
 8002244:	b21a      	sxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3317      	adds	r3, #23
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	b21a      	sxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3316      	adds	r3, #22
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b21b      	sxth	r3, r3
 800225c:	4313      	orrs	r3, r2
 800225e:	b21a      	sxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3319      	adds	r3, #25
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	761a      	strb	r2, [r3, #24]

}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800227a:	b480      	push	{r7}
 800227c:	b087      	sub	sp, #28
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	3310      	adds	r3, #16
 8002288:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3301      	adds	r3, #1
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	b21a      	sxth	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b21b      	sxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b21a      	sxth	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3302      	adds	r3, #2
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3303      	adds	r3, #3
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3304      	adds	r3, #4
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b21b      	sxth	r3, r3
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80022ca:	8a7a      	ldrh	r2, [r7, #18]
 80022cc:	8a3b      	ldrh	r3, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3305      	adds	r3, #5
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	b25b      	sxtb	r3, r3
 80022de:	b29b      	uxth	r3, r3
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80022f2:	89fa      	ldrh	r2, [r7, #14]
 80022f4:	89bb      	ldrh	r3, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b21a      	sxth	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3306      	adds	r3, #6
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b25a      	sxtb	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800230c:	bf00      	nop
 800230e:	371c      	adds	r7, #28
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	460a      	mov	r2, r1
 8002322:	71fb      	strb	r3, [r7, #7]
 8002324:	4613      	mov	r3, r2
 8002326:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 800232c:	79fa      	ldrb	r2, [r7, #7]
 800232e:	79bb      	ldrb	r3, [r7, #6]
 8002330:	4013      	ands	r3, r2
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e001      	b.n	8002342 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <null_ptr_check+0x26>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d007      	beq.n	8002376 <null_ptr_check+0x26>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <null_ptr_check+0x26>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8002376:	23ff      	movs	r3, #255	; 0xff
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	e001      	b.n	8002380 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af02      	add	r7, sp, #8
 8002396:	603a      	str	r2, [r7, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	460b      	mov	r3, r1
 80023a0:	71bb      	strb	r3, [r7, #6]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80bb      	strh	r3, [r7, #4]
	if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	b299      	uxth	r1, r3
 80023ae:	1dba      	adds	r2, r7, #6
 80023b0:	230a      	movs	r3, #10
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2301      	movs	r3, #1
 80023b6:	4811      	ldr	r0, [pc, #68]	; (80023fc <user_i2c_read+0x6c>)
 80023b8:	f002 fd70 	bl	8004e9c <HAL_I2C_Master_Transmit>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <user_i2c_read+0x38>
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	e014      	b.n	80023f2 <user_i2c_read+0x62>
	if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	b299      	uxth	r1, r3
 80023d6:	88bb      	ldrh	r3, [r7, #4]
 80023d8:	220a      	movs	r2, #10
 80023da:	9200      	str	r2, [sp, #0]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	4807      	ldr	r0, [pc, #28]	; (80023fc <user_i2c_read+0x6c>)
 80023e0:	f002 fe5a 	bl	8005098 <HAL_I2C_Master_Receive>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <user_i2c_read+0x60>
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
 80023ee:	e000      	b.n	80023f2 <user_i2c_read+0x62>

	return 0;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2000023c 	.word	0x2000023c

08002400 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f001 fbbf 	bl	8003b8c <HAL_Delay>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af02      	add	r7, sp, #8
 800241e:	603a      	str	r2, [r7, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
 8002426:	460b      	mov	r3, r1
 8002428:	71bb      	strb	r3, [r7, #6]
 800242a:	4613      	mov	r3, r2
 800242c:	80bb      	strh	r3, [r7, #4]
	int8_t *buf;
	buf = malloc(len +1);
 800242e:	88bb      	ldrh	r3, [r7, #4]
 8002430:	3301      	adds	r3, #1
 8002432:	4618      	mov	r0, r3
 8002434:	f006 f8f0 	bl	8008618 <malloc>
 8002438:	4603      	mov	r3, r0
 800243a:	60fb      	str	r3, [r7, #12]
	buf[0] = reg_addr;
 800243c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	701a      	strb	r2, [r3, #0]
	memcpy(buf +1, data, len);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3301      	adds	r3, #1
 8002448:	88ba      	ldrh	r2, [r7, #4]
 800244a:	6839      	ldr	r1, [r7, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f006 ffc8 	bl	80093e2 <memcpy>

	if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	b29b      	uxth	r3, r3
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	b299      	uxth	r1, r3
 800245a:	88bb      	ldrh	r3, [r7, #4]
 800245c:	3301      	adds	r3, #1
 800245e:	b29b      	uxth	r3, r3
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	9200      	str	r2, [sp, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4808      	ldr	r0, [pc, #32]	; (800248c <user_i2c_write+0x74>)
 800246a:	f002 fd17 	bl	8004e9c <HAL_I2C_Master_Transmit>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <user_i2c_write+0x62>
 8002474:	f04f 33ff 	mov.w	r3, #4294967295
 8002478:	e003      	b.n	8002482 <user_i2c_write+0x6a>

	free(buf);
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f006 f8d4 	bl	8008628 <free>
	return 0;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2000023c 	.word	0x2000023c

08002490 <init_bme280_>:
//----------------------------------------------------------------------------------------
void init_bme280_(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af04      	add	r7, sp, #16
	uint16_t STATUS=0;
 8002496:	2300      	movs	r3, #0
 8002498:	81fb      	strh	r3, [r7, #14]
	uint16_t addres_device = 0x76;  		 		// BME280
 800249a:	2376      	movs	r3, #118	; 0x76
 800249c:	81bb      	strh	r3, [r7, #12]
	uint16_t id_addr = 0xD0;
 800249e:	23d0      	movs	r3, #208	; 0xd0
 80024a0:	817b      	strh	r3, [r7, #10]
	uint8_t id = 96;								// in hex form
 80024a2:	2360      	movs	r3, #96	; 0x60
 80024a4:	727b      	strb	r3, [r7, #9]
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 80024a6:	2300      	movs	r3, #0
 80024a8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;

	// For debug
	STATUS = HAL_I2C_Mem_Read(&hi2c1, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80024aa:	89bb      	ldrh	r3, [r7, #12]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	b299      	uxth	r1, r3
 80024b0:	897a      	ldrh	r2, [r7, #10]
 80024b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b6:	9302      	str	r3, [sp, #8]
 80024b8:	2301      	movs	r3, #1
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	1dfb      	adds	r3, r7, #7
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2301      	movs	r3, #1
 80024c2:	4823      	ldr	r0, [pc, #140]	; (8002550 <init_bme280_+0xc0>)
 80024c4:	f003 f80e 	bl	80054e4 <HAL_I2C_Mem_Read>
 80024c8:	4603      	mov	r3, r0
 80024ca:	81fb      	strh	r3, [r7, #14]
	if(!((buff == id) && (STATUS == 0)))
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	7a7a      	ldrb	r2, [r7, #9]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d102      	bne.n	80024da <init_bme280_+0x4a>
 80024d4:	89fb      	ldrh	r3, [r7, #14]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <init_bme280_+0x4e>
	{
		error_blink_red_led();
 80024da:	f000 f965 	bl	80027a8 <error_blink_red_led>
	}

	// Init BME280
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <init_bme280_+0xc4>)
 80024e0:	2276      	movs	r2, #118	; 0x76
 80024e2:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <init_bme280_+0xc4>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <init_bme280_+0xc4>)
 80024ec:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <init_bme280_+0xc8>)
 80024ee:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 80024f0:	4b18      	ldr	r3, [pc, #96]	; (8002554 <init_bme280_+0xc4>)
 80024f2:	4a1a      	ldr	r2, [pc, #104]	; (800255c <init_bme280_+0xcc>)
 80024f4:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 80024f6:	4b17      	ldr	r3, [pc, #92]	; (8002554 <init_bme280_+0xc4>)
 80024f8:	4a19      	ldr	r2, [pc, #100]	; (8002560 <init_bme280_+0xd0>)
 80024fa:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 80024fc:	4815      	ldr	r0, [pc, #84]	; (8002554 <init_bme280_+0xc4>)
 80024fe:	f7fe fd29 	bl	8000f54 <bme280_init>
 8002502:	4603      	mov	r3, r0
 8002504:	723b      	strb	r3, [r7, #8]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <init_bme280_+0xc4>)
 8002508:	2201      	movs	r2, #1
 800250a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <init_bme280_+0xc4>)
 8002510:	2205      	movs	r2, #5
 8002512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <init_bme280_+0xc4>)
 8002518:	2202      	movs	r2, #2
 800251a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 800251e:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <init_bme280_+0xc4>)
 8002520:	2204      	movs	r2, #4
 8002522:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8002526:	490b      	ldr	r1, [pc, #44]	; (8002554 <init_bme280_+0xc4>)
 8002528:	200f      	movs	r0, #15
 800252a:	f7fe fe05 	bl	8001138 <bme280_set_sensor_settings>
 800252e:	4603      	mov	r3, r0
 8002530:	723b      	strb	r3, [r7, #8]
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8002532:	4908      	ldr	r1, [pc, #32]	; (8002554 <init_bme280_+0xc4>)
 8002534:	2003      	movs	r0, #3
 8002536:	f7fe fe54 	bl	80011e2 <bme280_set_sensor_mode>
 800253a:	4603      	mov	r3, r0
 800253c:	723b      	strb	r3, [r7, #8]

	dev.delay_ms(40);
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <init_bme280_+0xc4>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2028      	movs	r0, #40	; 0x28
 8002544:	4798      	blx	r3
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000023c 	.word	0x2000023c
 8002554:	2000034c 	.word	0x2000034c
 8002558:	08002391 	.word	0x08002391
 800255c:	08002419 	.word	0x08002419
 8002560:	08002401 	.word	0x08002401

08002564 <get_THP_bme280>:
//----------------------------------------------------------------------------------------
void get_THP_bme280(char * buff)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	init_bme280_();
 800256c:	f7ff ff90 	bl	8002490 <init_bme280_>

	float BME280_temperature = 0;
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
	float BME280_humidity = 0;
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
	float BME280_preasure = 0;
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	617b      	str	r3, [r7, #20]

	if(bme280_get_sensor_data(BME280_ALL, &comp_data, &dev) == BME280_OK)
 8002582:	4a33      	ldr	r2, [pc, #204]	; (8002650 <get_THP_bme280+0xec>)
 8002584:	4933      	ldr	r1, [pc, #204]	; (8002654 <get_THP_bme280+0xf0>)
 8002586:	2007      	movs	r0, #7
 8002588:	f7fe fea7 	bl	80012da <bme280_get_sensor_data>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d11b      	bne.n	80025ca <get_THP_bme280+0x66>
	{
		// Save data variables
		BME280_temperature = (float)comp_data.temperature;
 8002592:	4b30      	ldr	r3, [pc, #192]	; (8002654 <get_THP_bme280+0xf0>)
 8002594:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	f7fe fb0c 	bl	8000bb8 <__aeabi_d2f>
 80025a0:	4603      	mov	r3, r0
 80025a2:	61fb      	str	r3, [r7, #28]
		BME280_humidity = (float)comp_data.humidity;
 80025a4:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <get_THP_bme280+0xf0>)
 80025a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f7fe fb03 	bl	8000bb8 <__aeabi_d2f>
 80025b2:	4603      	mov	r3, r0
 80025b4:	61bb      	str	r3, [r7, #24]
		BME280_preasure = (float)comp_data.pressure;
 80025b6:	4b27      	ldr	r3, [pc, #156]	; (8002654 <get_THP_bme280+0xf0>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	f7fe fafa 	bl	8000bb8 <__aeabi_d2f>
 80025c4:	4603      	mov	r3, r0
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	e001      	b.n	80025ce <get_THP_bme280+0x6a>
	}
	else
	{
		error_blink_red_led();
 80025ca:	f000 f8ed 	bl	80027a8 <error_blink_red_led>
	}

	if(put_device_to_sleep(&dev) != 0)
 80025ce:	4820      	ldr	r0, [pc, #128]	; (8002650 <get_THP_bme280+0xec>)
 80025d0:	f7ff f921 	bl	8001816 <put_device_to_sleep>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <get_THP_bme280+0x7a>
	{
		error_blink_red_led();
 80025da:	f000 f8e5 	bl	80027a8 <error_blink_red_led>
	}


	char buffer[10] = {0,};
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	f107 030c 	add.w	r3, r7, #12
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	809a      	strh	r2, [r3, #4]

	memset(buffer, 0, sizeof(buffer));
 80025ec:	f107 0308 	add.w	r3, r7, #8
 80025f0:	220a      	movs	r2, #10
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f006 fe56 	bl	80092a6 <memset>
	sprintf(buffer, "T%.1f", BME280_temperature);
 80025fa:	69f8      	ldr	r0, [r7, #28]
 80025fc:	f7fd ffac 	bl	8000558 <__aeabi_f2d>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	f107 0008 	add.w	r0, r7, #8
 8002608:	4913      	ldr	r1, [pc, #76]	; (8002658 <get_THP_bme280+0xf4>)
 800260a:	f006 fde9 	bl	80091e0 <siprintf>
	strcat(buff, buffer);
 800260e:	f107 0308 	add.w	r3, r7, #8
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f006 fe4e 	bl	80092b6 <strcat>

	memset(buffer, 0, sizeof(buffer));
 800261a:	f107 0308 	add.w	r3, r7, #8
 800261e:	220a      	movs	r2, #10
 8002620:	2100      	movs	r1, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f006 fe3f 	bl	80092a6 <memset>
	sprintf(buffer, "H%.1f", BME280_humidity);
 8002628:	69b8      	ldr	r0, [r7, #24]
 800262a:	f7fd ff95 	bl	8000558 <__aeabi_f2d>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	f107 0008 	add.w	r0, r7, #8
 8002636:	4909      	ldr	r1, [pc, #36]	; (800265c <get_THP_bme280+0xf8>)
 8002638:	f006 fdd2 	bl	80091e0 <siprintf>
	strcat(buff, buffer);
 800263c:	f107 0308 	add.w	r3, r7, #8
 8002640:	4619      	mov	r1, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f006 fe37 	bl	80092b6 <strcat>

}
 8002648:	bf00      	nop
 800264a:	3720      	adds	r7, #32
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	2000034c 	.word	0x2000034c
 8002654:	20000390 	.word	0x20000390
 8002658:	0800b368 	.word	0x0800b368
 800265c:	0800b370 	.word	0x0800b370

08002660 <meassure_battery_voltage>:
// End BME280 part/////////////////////////////////////////////////////////////////////////////////////
// --------------------------------------------------------------------------------
void meassure_battery_voltage(char * buff)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b092      	sub	sp, #72	; 0x48
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	char str[35]={0};
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	f107 031c 	add.w	r3, r7, #28
 8002676:	221f      	movs	r2, #31
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f006 fe13 	bl	80092a6 <memset>

	HAL_ADC_Start(&hadc1);
 8002680:	4829      	ldr	r0, [pc, #164]	; (8002728 <meassure_battery_voltage+0xc8>)
 8002682:	f001 faeb 	bl	8003c5c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8002686:	2164      	movs	r1, #100	; 0x64
 8002688:	4827      	ldr	r0, [pc, #156]	; (8002728 <meassure_battery_voltage+0xc8>)
 800268a:	f001 fbce 	bl	8003e2a <HAL_ADC_PollForConversion>
//		i = (uint32_t)HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
 800268e:	4826      	ldr	r0, [pc, #152]	; (8002728 <meassure_battery_voltage+0xc8>)
 8002690:	f001 fb98 	bl	8003dc4 <HAL_ADC_Stop>

	float V_bat = (float)HAL_ADC_GetValue(&hadc1)*3.3/4096;
 8002694:	4824      	ldr	r0, [pc, #144]	; (8002728 <meassure_battery_voltage+0xc8>)
 8002696:	f001 fd63 	bl	8004160 <HAL_ADC_GetValue>
 800269a:	ee07 0a90 	vmov	s15, r0
 800269e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a2:	ee17 0a90 	vmov	r0, s15
 80026a6:	f7fd ff57 	bl	8000558 <__aeabi_f2d>
 80026aa:	a31d      	add	r3, pc, #116	; (adr r3, 8002720 <meassure_battery_voltage+0xc0>)
 80026ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b0:	f7fd ffaa 	bl	8000608 <__aeabi_dmul>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <meassure_battery_voltage+0xcc>)
 80026c2:	f7fe f8cb 	bl	800085c <__aeabi_ddiv>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	f7fe fa73 	bl	8000bb8 <__aeabi_d2f>
 80026d2:	4603      	mov	r3, r0
 80026d4:	643b      	str	r3, [r7, #64]	; 0x40

	char buffer[10] = {0,};
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	f107 0310 	add.w	r3, r7, #16
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	809a      	strh	r2, [r3, #4]
	float battery_voltage = 0;
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	63fb      	str	r3, [r7, #60]	; 0x3c

	memset(buffer, 0, sizeof(buffer));
 80026ea:	f107 030c 	add.w	r3, r7, #12
 80026ee:	220a      	movs	r2, #10
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f006 fdd7 	bl	80092a6 <memset>
	sprintf(buffer, "V%.1f ", V_bat);
 80026f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80026fa:	f7fd ff2d 	bl	8000558 <__aeabi_f2d>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	f107 000c 	add.w	r0, r7, #12
 8002706:	490a      	ldr	r1, [pc, #40]	; (8002730 <meassure_battery_voltage+0xd0>)
 8002708:	f006 fd6a 	bl	80091e0 <siprintf>
	strcat(buff, buffer);
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	4619      	mov	r1, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f006 fdcf 	bl	80092b6 <strcat>
}
 8002718:	bf00      	nop
 800271a:	3748      	adds	r7, #72	; 0x48
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	66666666 	.word	0x66666666
 8002724:	400a6666 	.word	0x400a6666
 8002728:	200001f4 	.word	0x200001f4
 800272c:	40b00000 	.word	0x40b00000
 8002730:	0800b378 	.word	0x0800b378

08002734 <led_test_blink>:
// --------------------------------------------------------------------------------
void led_test_blink(uint16_t times, uint16_t delay)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	460a      	mov	r2, r1
 800273e:	80fb      	strh	r3, [r7, #6]
 8002740:	4613      	mov	r3, r2
 8002742:	80bb      	strh	r3, [r7, #4]
	for(int i = 0; i <= times; i++)
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	e022      	b.n	8002790 <led_test_blink+0x5c>
	{
		RED_LED_ON;
 800274a:	2201      	movs	r2, #1
 800274c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002750:	4814      	ldr	r0, [pc, #80]	; (80027a4 <led_test_blink+0x70>)
 8002752:	f002 fa07 	bl	8004b64 <HAL_GPIO_WritePin>
		GREEN_LED_ON;
 8002756:	2201      	movs	r2, #1
 8002758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800275c:	4811      	ldr	r0, [pc, #68]	; (80027a4 <led_test_blink+0x70>)
 800275e:	f002 fa01 	bl	8004b64 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8002762:	88bb      	ldrh	r3, [r7, #4]
 8002764:	4618      	mov	r0, r3
 8002766:	f001 fa11 	bl	8003b8c <HAL_Delay>
		RED_LED_OFF;
 800276a:	2200      	movs	r2, #0
 800276c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002770:	480c      	ldr	r0, [pc, #48]	; (80027a4 <led_test_blink+0x70>)
 8002772:	f002 f9f7 	bl	8004b64 <HAL_GPIO_WritePin>
		GREEN_LED_OFF;
 8002776:	2200      	movs	r2, #0
 8002778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800277c:	4809      	ldr	r0, [pc, #36]	; (80027a4 <led_test_blink+0x70>)
 800277e:	f002 f9f1 	bl	8004b64 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8002782:	88bb      	ldrh	r3, [r7, #4]
 8002784:	4618      	mov	r0, r3
 8002786:	f001 fa01 	bl	8003b8c <HAL_Delay>
	for(int i = 0; i <= times; i++)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3301      	adds	r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	ddd8      	ble.n	800274a <led_test_blink+0x16>
	}
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40020400 	.word	0x40020400

080027a8 <error_blink_red_led>:
// --------------------------------------------------------------------------------------
void error_blink_red_led(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	while(1)
	{
		RED_LED_TOGLE;
 80027ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027b0:	4803      	ldr	r0, [pc, #12]	; (80027c0 <error_blink_red_led+0x18>)
 80027b2:	f002 f9f0 	bl	8004b96 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80027b6:	2064      	movs	r0, #100	; 0x64
 80027b8:	f001 f9e8 	bl	8003b8c <HAL_Delay>
		RED_LED_TOGLE;
 80027bc:	e7f6      	b.n	80027ac <error_blink_red_led+0x4>
 80027be:	bf00      	nop
 80027c0:	40020400 	.word	0x40020400

080027c4 <read_time_internal_RTC>:
	}
	strcat(buff, " ");
}
// --------------------------------------------------------------------------------------
void read_time_internal_RTC(char *buff)
{
 80027c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c6:	b09f      	sub	sp, #124	; 0x7c
 80027c8:	af04      	add	r7, sp, #16
 80027ca:	6078      	str	r0, [r7, #4]
	 RTC_TimeTypeDef sTime;
	 RTC_DateTypeDef sDate;

	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80027cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027d0:	2200      	movs	r2, #0
 80027d2:	4619      	mov	r1, r3
 80027d4:	481f      	ldr	r0, [pc, #124]	; (8002854 <read_time_internal_RTC+0x90>)
 80027d6:	f004 fb55 	bl	8006e84 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80027da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027de:	2200      	movs	r2, #0
 80027e0:	4619      	mov	r1, r3
 80027e2:	481c      	ldr	r0, [pc, #112]	; (8002854 <read_time_internal_RTC+0x90>)
 80027e4:	f004 fc30 	bl	8007048 <HAL_RTC_GetDate>


	 char buf_uart_tx[70] = {0,};
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	2242      	movs	r2, #66	; 0x42
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f006 fd56 	bl	80092a6 <memset>
	 sprintf(buf_uart_tx, "%d:%d:%d %d.%d.%d ", sTime.Hours, sTime.Minutes, sTime.Seconds, sDate.Date, sDate.Month, sDate.Year);
 80027fa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80027fe:	461d      	mov	r5, r3
 8002800:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002804:	461e      	mov	r6, r3
 8002806:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800280a:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 800280e:	f897 1051 	ldrb.w	r1, [r7, #81]	; 0x51
 8002812:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 8002816:	4604      	mov	r4, r0
 8002818:	f107 0008 	add.w	r0, r7, #8
 800281c:	9403      	str	r4, [sp, #12]
 800281e:	9102      	str	r1, [sp, #8]
 8002820:	9201      	str	r2, [sp, #4]
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	4633      	mov	r3, r6
 8002826:	462a      	mov	r2, r5
 8002828:	490b      	ldr	r1, [pc, #44]	; (8002858 <read_time_internal_RTC+0x94>)
 800282a:	f006 fcd9 	bl	80091e0 <siprintf>
	 strcat(buff, buf_uart_tx);
 800282e:	f107 0308 	add.w	r3, r7, #8
 8002832:	4619      	mov	r1, r3
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f006 fd3e 	bl	80092b6 <strcat>

#if UART_LOG == ON
	 HAL_UART_Transmit(&huart1, buf_uart_tx, sizeof(buf_uart_tx), 1000);
 800283a:	f107 0108 	add.w	r1, r7, #8
 800283e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002842:	2246      	movs	r2, #70	; 0x46
 8002844:	4805      	ldr	r0, [pc, #20]	; (800285c <read_time_internal_RTC+0x98>)
 8002846:	f005 fb72 	bl	8007f2e <HAL_UART_Transmit>
#endif
}
 800284a:	bf00      	nop
 800284c:	376c      	adds	r7, #108	; 0x6c
 800284e:	46bd      	mov	sp, r7
 8002850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002852:	bf00      	nop
 8002854:	20000290 	.word	0x20000290
 8002858:	0800b38c 	.word	0x0800b38c
 800285c:	20000308 	.word	0x20000308

08002860 <settings_mode>:
		Error_Handler();
	}
}
// --------------------------------------------------------------------------------------
void settings_mode(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0


}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <WriteBackupRegister>:
#define COUNTER_RETRANSMITED_PACKET 2
#define COUNTER_LOST_PACKET 3
#define COUNTER_SECOND 4

void WriteBackupRegister(uint32_t data, uint8_t type)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	70fb      	strb	r3, [r7, #3]
	if(type == COUNTER_PACKET)
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d104      	bne.n	800288c <WriteBackupRegister+0x1c>
	{
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, data);
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	2101      	movs	r1, #1
 8002886:	4807      	ldr	r0, [pc, #28]	; (80028a4 <WriteBackupRegister+0x34>)
 8002888:	f004 fea0 	bl	80075cc <HAL_RTCEx_BKUPWrite>
	}
	if(type == COUNTER_SECOND)
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	2b04      	cmp	r3, #4
 8002890:	d104      	bne.n	800289c <WriteBackupRegister+0x2c>
	{
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, data);
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	2104      	movs	r1, #4
 8002896:	4803      	ldr	r0, [pc, #12]	; (80028a4 <WriteBackupRegister+0x34>)
 8002898:	f004 fe98 	bl	80075cc <HAL_RTCEx_BKUPWrite>
	}
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000290 	.word	0x20000290

080028a8 <ReadBackupRegister>:
// --------------------------------------------------------------------------------
uint32_t ReadBackupRegister(uint8_t type)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
	if(type == COUNTER_PACKET)
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <ReadBackupRegister+0x1c>
	{
		return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 80028b8:	2101      	movs	r1, #1
 80028ba:	4809      	ldr	r0, [pc, #36]	; (80028e0 <ReadBackupRegister+0x38>)
 80028bc:	f004 fea0 	bl	8007600 <HAL_RTCEx_BKUPRead>
 80028c0:	4603      	mov	r3, r0
 80028c2:	e008      	b.n	80028d6 <ReadBackupRegister+0x2e>
	}
	if(type == COUNTER_SECOND)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d105      	bne.n	80028d6 <ReadBackupRegister+0x2e>
	{
		return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 80028ca:	2104      	movs	r1, #4
 80028cc:	4804      	ldr	r0, [pc, #16]	; (80028e0 <ReadBackupRegister+0x38>)
 80028ce:	f004 fe97 	bl	8007600 <HAL_RTCEx_BKUPRead>
 80028d2:	4603      	mov	r3, r0
 80028d4:	e7ff      	b.n	80028d6 <ReadBackupRegister+0x2e>
	}

}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000290 	.word	0x20000290

080028e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b0b4      	sub	sp, #208	; 0xd0
 80028e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ea:	f001 f8dd 	bl	8003aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028ee:	f000 f963 	bl	8002bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028f2:	f000 fb19 	bl	8002f28 <MX_GPIO_Init>
  MX_RTC_Init();
 80028f6:	f000 fa4b 	bl	8002d90 <MX_RTC_Init>
  MX_I2C1_Init();
 80028fa:	f000 fa1b 	bl	8002d34 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80028fe:	f000 fae9 	bl	8002ed4 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8002902:	f000 fab1 	bl	8002e68 <MX_SPI2_Init>
  MX_ADC1_Init();
 8002906:	f000 f9c3 	bl	8002c90 <MX_ADC1_Init>
 */


#if SLEEP_MODE == ON

if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)			// Is device woke up from standby mode ?
 800290a:	4ba2      	ldr	r3, [pc, #648]	; (8002b94 <main+0x2b0>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	f040 811b 	bne.w	8002b4e <main+0x26a>
{
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  				// clear the flag
 8002918:	4b9e      	ldr	r3, [pc, #632]	; (8002b94 <main+0x2b0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a9d      	ldr	r2, [pc, #628]	; (8002b94 <main+0x2b0>)
 800291e:	f043 0308 	orr.w	r3, r3, #8
 8002922:	6013      	str	r3, [r2, #0]

	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  		// disable PA0
 8002924:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002928:	f003 fc2a 	bl	8006180 <HAL_PWR_DisableWakeUpPin>
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);			// Deactivate the RTC wakeup
 800292c:	489a      	ldr	r0, [pc, #616]	; (8002b98 <main+0x2b4>)
 800292e:	f004 fdf5 	bl	800751c <HAL_RTCEx_DeactivateWakeUpTimer>

	// If button was presset more than 5 sec, go to settings mode
	if(HAL_GPIO_ReadPin(GPIOA, ACTION_Pin) == 1)
 8002932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002936:	4899      	ldr	r0, [pc, #612]	; (8002b9c <main+0x2b8>)
 8002938:	f002 f8fc 	bl	8004b34 <HAL_GPIO_ReadPin>
 800293c:	4603      	mov	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	d11d      	bne.n	800297e <main+0x9a>
	{
#if UART_LOG == ON
		char buf_uart_tx[50] = {0,};
 8002942:	2300      	movs	r3, #0
 8002944:	66bb      	str	r3, [r7, #104]	; 0x68
 8002946:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800294a:	222e      	movs	r2, #46	; 0x2e
 800294c:	2100      	movs	r1, #0
 800294e:	4618      	mov	r0, r3
 8002950:	f006 fca9 	bl	80092a6 <memset>
		sprintf(buf_uart_tx, "Settings mode\n\r");
 8002954:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002958:	4991      	ldr	r1, [pc, #580]	; (8002ba0 <main+0x2bc>)
 800295a:	4618      	mov	r0, r3
 800295c:	f006 fc40 	bl	80091e0 <siprintf>
		HAL_UART_Transmit(&huart1, buf_uart_tx, sizeof(buf_uart_tx), 1000);
 8002960:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002968:	2232      	movs	r2, #50	; 0x32
 800296a:	488e      	ldr	r0, [pc, #568]	; (8002ba4 <main+0x2c0>)
 800296c:	f005 fadf 	bl	8007f2e <HAL_UART_Transmit>
#endif

		led_test_blink(10, 800);
 8002970:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002974:	200a      	movs	r0, #10
 8002976:	f7ff fedd 	bl	8002734 <led_test_blink>

		settings_mode();
 800297a:	f7ff ff71 	bl	8002860 <settings_mode>
	}

	  uint32_t period = ReadBackupRegister(COUNTER_SECOND);
 800297e:	2004      	movs	r0, #4
 8002980:	f7ff ff92 	bl	80028a8 <ReadBackupRegister>
 8002984:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

	  if(period >= SLEEP_TIME_10_SEC)
 8002988:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80d0 	beq.w	8002b32 <main+0x24e>
	  {
		  char tramsmeet_data_buffer[50] = {0,};
 8002992:	2300      	movs	r3, #0
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	222e      	movs	r2, #46	; 0x2e
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f006 fc82 	bl	80092a6 <memset>
		  char buf_uart_tx[50] = {0,};
 80029a2:	2300      	movs	r3, #0
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
 80029a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029aa:	222e      	movs	r2, #46	; 0x2e
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f006 fc79 	bl	80092a6 <memset>

#if LED == ON
	  GREEN_LED_ON;
#endif
	  	  get_THP_bme280(tramsmeet_data_buffer); 				// Meassure T, H and P
 80029b4:	463b      	mov	r3, r7
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fdd4 	bl	8002564 <get_THP_bme280>
	  	  meassure_battery_voltage(tramsmeet_data_buffer);  	// Meassure voltage on battery
 80029bc:	463b      	mov	r3, r7
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fe4e 	bl	8002660 <meassure_battery_voltage>
	  	  read_time_internal_RTC(tramsmeet_data_buffer);
 80029c4:	463b      	mov	r3, r7
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fefc 	bl	80027c4 <read_time_internal_RTC>

#if UART_LOG == ON
 	  memset(buf_uart_tx, 0, sizeof(buf_uart_tx));
 80029cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029d0:	2232      	movs	r2, #50	; 0x32
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f006 fc66 	bl	80092a6 <memset>
 	  sprintf(buf_uart_tx, "TX data: %s \n\r", tramsmeet_data_buffer);
 80029da:	463a      	mov	r2, r7
 80029dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029e0:	4971      	ldr	r1, [pc, #452]	; (8002ba8 <main+0x2c4>)
 80029e2:	4618      	mov	r0, r3
 80029e4:	f006 fbfc 	bl	80091e0 <siprintf>
 	  HAL_UART_Transmit(&huart1, buf_uart_tx, sizeof(buf_uart_tx), 1000);
 80029e8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80029ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f0:	2232      	movs	r2, #50	; 0x32
 80029f2:	486c      	ldr	r0, [pc, #432]	; (8002ba4 <main+0x2c0>)
 80029f4:	f005 fa9b 	bl	8007f2e <HAL_UART_Transmit>
#endif

 	  	  char buf1[10] = {0,};
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029fe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	809a      	strh	r2, [r3, #4]
		  char buf2[54] = {0,};
 8002a08:	2300      	movs	r3, #0
 8002a0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a0c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a10:	2232      	movs	r2, #50	; 0x32
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f006 fc46 	bl	80092a6 <memset>

		  uint8_t retr_packages = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
		  uint8_t dt = 0 ;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
		  uint16_t lost_packages = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

		  char buf_1[10] = {0,};
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	809a      	strh	r2, [r3, #4]
		  uint32_t RTC_DATA = ReadBackupRegister(COUNTER_PACKET);
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	f7ff ff33 	bl	80028a8 <ReadBackupRegister>
 8002a42:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
		  memset(buf_1, 0, sizeof(buf_1));
 8002a46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a4a:	220a      	movs	r2, #10
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f006 fc29 	bl	80092a6 <memset>
		  sprintf(buf_1, "C%d", RTC_DATA);
 8002a54:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a5c:	4953      	ldr	r1, [pc, #332]	; (8002bac <main+0x2c8>)
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f006 fbbe 	bl	80091e0 <siprintf>
		  strcat(tramsmeet_data_buffer, buf_1);
 8002a64:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002a68:	463b      	mov	r3, r7
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f006 fc22 	bl	80092b6 <strcat>

		  NRF24_init_TX(0, 10, 0, 15, 0, 0);
 8002a72:	2300      	movs	r3, #0
 8002a74:	9301      	str	r3, [sp, #4]
 8002a76:	2300      	movs	r3, #0
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	230f      	movs	r3, #15
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	210a      	movs	r1, #10
 8002a80:	2000      	movs	r0, #0
 8002a82:	f000 fd95 	bl	80035b0 <NRF24_init_TX>
		  dt = NRF24L01_Transmit(1, tramsmeet_data_buffer);
 8002a86:	463b      	mov	r3, r7
 8002a88:	4619      	mov	r1, r3
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f000 ffd0 	bl	8003a30 <NRF24L01_Transmit>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2

		  retr_packages  = dt & 0xF;			// Select retransmit packets
 8002a96:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
		  lost_packages = dt & 0xF0;			// Select lost packets
 8002aa2:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aac:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0


#if UART_LOG == ON
 	  sprintf(buf2, "TX retr: %d, TX lost: %d, COUNTER_PACKET: %d\n\r", retr_packages, lost_packages, RTC_DATA);
 8002ab0:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 8002ab4:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8002ab8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8002abc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	493a      	ldr	r1, [pc, #232]	; (8002bb0 <main+0x2cc>)
 8002ac6:	f006 fb8b 	bl	80091e0 <siprintf>
 	  HAL_UART_Transmit(&huart1, buf2, sizeof(buf2), 1000);
 8002aca:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad2:	2236      	movs	r2, #54	; 0x36
 8002ad4:	4833      	ldr	r0, [pc, #204]	; (8002ba4 <main+0x2c0>)
 8002ad6:	f005 fa2a 	bl	8007f2e <HAL_UART_Transmit>
#endif

		  WriteBackupRegister(RTC_DATA+1, COUNTER_PACKET);
 8002ada:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ade:	3301      	adds	r3, #1
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fec4 	bl	8002870 <WriteBackupRegister>

		  if(lost_packages > 0)		// If lost packages was detected
 8002ae8:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00f      	beq.n	8002b10 <main+0x22c>
		  {
			  RED_LED_ON;
 8002af0:	2201      	movs	r2, #1
 8002af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002af6:	482f      	ldr	r0, [pc, #188]	; (8002bb4 <main+0x2d0>)
 8002af8:	f002 f834 	bl	8004b64 <HAL_GPIO_WritePin>
			  HAL_Delay(10);
 8002afc:	200a      	movs	r0, #10
 8002afe:	f001 f845 	bl	8003b8c <HAL_Delay>
			  RED_LED_OFF;
 8002b02:	2200      	movs	r2, #0
 8002b04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b08:	482a      	ldr	r0, [pc, #168]	; (8002bb4 <main+0x2d0>)
 8002b0a:	f002 f82b 	bl	8004b64 <HAL_GPIO_WritePin>
 8002b0e:	e005      	b.n	8002b1c <main+0x238>
		  }
		  else
		  {
			  RED_LED_OFF;
 8002b10:	2200      	movs	r2, #0
 8002b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b16:	4827      	ldr	r0, [pc, #156]	; (8002bb4 <main+0x2d0>)
 8002b18:	f002 f824 	bl	8004b64 <HAL_GPIO_WritePin>
		  }

#if LED == ON
 	  GREEN_LED_OFF;
#endif
 	  	  NRF24_Sleep_mode();
 8002b1c:	f000 fd32 	bl	8003584 <NRF24_Sleep_mode>
 	  	  uint32_t ffff = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 		  WriteBackupRegister(ffff, COUNTER_SECOND);
 8002b26:	2104      	movs	r1, #4
 8002b28:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002b2c:	f7ff fea0 	bl	8002870 <WriteBackupRegister>
 8002b30:	e006      	b.n	8002b40 <main+0x25c>
	  }
	  else
	  {
		  WriteBackupRegister(period+1, COUNTER_SECOND);		// Update counter of seconds
 8002b32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b36:	3301      	adds	r3, #1
 8002b38:	2104      	movs	r1, #4
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fe98 	bl	8002870 <WriteBackupRegister>
	  }
 	  /** Disable the WWAKEUP PIN **/
 	  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8002b40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b44:	f003 fb1c 	bl	8006180 <HAL_PWR_DisableWakeUpPin>
 	  /** Deactivate the RTC wakeup  **/
 	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002b48:	4813      	ldr	r0, [pc, #76]	; (8002b98 <main+0x2b4>)
 8002b4a:	f004 fce7 	bl	800751c <HAL_RTCEx_DeactivateWakeUpTimer>
   }


  /** Now enter the standby mode **/
    /* Clear the WU FLAG */
   __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <main+0x2b0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a10      	ldr	r2, [pc, #64]	; (8002b94 <main+0x2b0>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6013      	str	r3, [r2, #0]

    /* clear the RTC Wake UP (WU) flag */
   __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <main+0x2b4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <main+0x2b4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002b6a:	60da      	str	r2, [r3, #12]


    /* Enable the WAKEUP PIN */
   HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002b6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b70:	f003 faf4 	bl	800615c <HAL_PWR_EnableWakeUpPin>

   if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WakeUpCounter_5_sec, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002b74:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b78:	2200      	movs	r2, #0
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4806      	ldr	r0, [pc, #24]	; (8002b98 <main+0x2b4>)
 8002b7e:	f004 fc0d 	bl	800739c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <main+0x2a8>
   {
     Error_Handler();
 8002b88:	f000 fa4a 	bl	8003020 <Error_Handler>
   }

   /* Finally enter the standby mode */
   HAL_PWR_EnterSTANDBYMode();
 8002b8c:	f003 fb0c 	bl	80061a8 <HAL_PWR_EnterSTANDBYMode>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b90:	e7fe      	b.n	8002b90 <main+0x2ac>
 8002b92:	bf00      	nop
 8002b94:	40007000 	.word	0x40007000
 8002b98:	20000290 	.word	0x20000290
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	0800b3a0 	.word	0x0800b3a0
 8002ba4:	20000308 	.word	0x20000308
 8002ba8:	0800b3b0 	.word	0x0800b3b0
 8002bac:	0800b3c0 	.word	0x0800b3c0
 8002bb0:	0800b3c4 	.word	0x0800b3c4
 8002bb4:	40020400 	.word	0x40020400

08002bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b094      	sub	sp, #80	; 0x50
 8002bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bbe:	f107 0320 	add.w	r3, r7, #32
 8002bc2:	2230      	movs	r2, #48	; 0x30
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f006 fb6d 	bl	80092a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bcc:	f107 030c 	add.w	r3, r7, #12
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	4b29      	ldr	r3, [pc, #164]	; (8002c88 <SystemClock_Config+0xd0>)
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	4a28      	ldr	r2, [pc, #160]	; (8002c88 <SystemClock_Config+0xd0>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	6413      	str	r3, [r2, #64]	; 0x40
 8002bec:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <SystemClock_Config+0xd0>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	607b      	str	r3, [r7, #4]
 8002bfc:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <SystemClock_Config+0xd4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c04:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <SystemClock_Config+0xd4>)
 8002c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <SystemClock_Config+0xd4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002c18:	230a      	movs	r3, #10
 8002c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c20:	2310      	movs	r3, #16
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002c24:	2301      	movs	r3, #1
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c30:	2308      	movs	r3, #8
 8002c32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8002c34:	2340      	movs	r3, #64	; 0x40
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c40:	f107 0320 	add.w	r3, r7, #32
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 fac7 	bl	80061d8 <HAL_RCC_OscConfig>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002c50:	f000 f9e6 	bl	8003020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c54:	230f      	movs	r3, #15
 8002c56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8002c5c:	23a0      	movs	r3, #160	; 0xa0
 8002c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c6a:	f107 030c 	add.w	r3, r7, #12
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 fd29 	bl	80066c8 <HAL_RCC_ClockConfig>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002c7c:	f000 f9d0 	bl	8003020 <Error_Handler>
  }
}
 8002c80:	bf00      	nop
 8002c82:	3750      	adds	r7, #80	; 0x50
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40007000 	.word	0x40007000

08002c90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c96:	463b      	mov	r3, r7
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <MX_ADC1_Init+0x98>)
 8002ca4:	4a21      	ldr	r2, [pc, #132]	; (8002d2c <MX_ADC1_Init+0x9c>)
 8002ca6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <MX_ADC1_Init+0x98>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cae:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <MX_ADC1_Init+0x98>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002cb4:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <MX_ADC1_Init+0x98>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <MX_ADC1_Init+0x98>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <MX_ADC1_Init+0x98>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cc8:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <MX_ADC1_Init+0x98>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cce:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <MX_ADC1_Init+0x98>)
 8002cd0:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <MX_ADC1_Init+0xa0>)
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cd4:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <MX_ADC1_Init+0x98>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <MX_ADC1_Init+0x98>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <MX_ADC1_Init+0x98>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <MX_ADC1_Init+0x98>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cee:	480e      	ldr	r0, [pc, #56]	; (8002d28 <MX_ADC1_Init+0x98>)
 8002cf0:	f000 ff70 	bl	8003bd4 <HAL_ADC_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002cfa:	f000 f991 	bl	8003020 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002cfe:	2309      	movs	r3, #9
 8002d00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d02:	2301      	movs	r3, #1
 8002d04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d0a:	463b      	mov	r3, r7
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4806      	ldr	r0, [pc, #24]	; (8002d28 <MX_ADC1_Init+0x98>)
 8002d10:	f001 fa52 	bl	80041b8 <HAL_ADC_ConfigChannel>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002d1a:	f000 f981 	bl	8003020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200001f4 	.word	0x200001f4
 8002d2c:	40012000 	.word	0x40012000
 8002d30:	0f000001 	.word	0x0f000001

08002d34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <MX_I2C1_Init+0x50>)
 8002d3a:	4a13      	ldr	r2, [pc, #76]	; (8002d88 <MX_I2C1_Init+0x54>)
 8002d3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <MX_I2C1_Init+0x50>)
 8002d40:	4a12      	ldr	r2, [pc, #72]	; (8002d8c <MX_I2C1_Init+0x58>)
 8002d42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <MX_I2C1_Init+0x50>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <MX_I2C1_Init+0x50>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <MX_I2C1_Init+0x50>)
 8002d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <MX_I2C1_Init+0x50>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <MX_I2C1_Init+0x50>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <MX_I2C1_Init+0x50>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <MX_I2C1_Init+0x50>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d70:	4804      	ldr	r0, [pc, #16]	; (8002d84 <MX_I2C1_Init+0x50>)
 8002d72:	f001 ff4f 	bl	8004c14 <HAL_I2C_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d7c:	f000 f950 	bl	8003020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d80:	bf00      	nop
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	2000023c 	.word	0x2000023c
 8002d88:	40005400 	.word	0x40005400
 8002d8c:	000186a0 	.word	0x000186a0

08002d90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002da4:	2300      	movs	r3, #0
 8002da6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002da8:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <MX_RTC_Init+0xcc>)
 8002daa:	4a2d      	ldr	r2, [pc, #180]	; (8002e60 <MX_RTC_Init+0xd0>)
 8002dac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002dae:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <MX_RTC_Init+0xcc>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002db4:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <MX_RTC_Init+0xcc>)
 8002db6:	227f      	movs	r2, #127	; 0x7f
 8002db8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002dba:	4b28      	ldr	r3, [pc, #160]	; (8002e5c <MX_RTC_Init+0xcc>)
 8002dbc:	22ff      	movs	r2, #255	; 0xff
 8002dbe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002dc0:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <MX_RTC_Init+0xcc>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002dc6:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <MX_RTC_Init+0xcc>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002dcc:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <MX_RTC_Init+0xcc>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002dd2:	4822      	ldr	r0, [pc, #136]	; (8002e5c <MX_RTC_Init+0xcc>)
 8002dd4:	f003 ff46 	bl	8006c64 <HAL_RTC_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002dde:	f000 f91f 	bl	8003020 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if(__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == RESET)		// If RTC doesn't set
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <MX_RTC_Init+0xd4>)
 8002de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d131      	bne.n	8002e52 <MX_RTC_Init+0xc2>
  {
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x01;
 8002dee:	2301      	movs	r3, #1
 8002df0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x02;
 8002df2:	2302      	movs	r3, #2
 8002df4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x03;
 8002df6:	2303      	movs	r3, #3
 8002df8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	2201      	movs	r2, #1
 8002e06:	4619      	mov	r1, r3
 8002e08:	4814      	ldr	r0, [pc, #80]	; (8002e5c <MX_RTC_Init+0xcc>)
 8002e0a:	f003 ffa1 	bl	8006d50 <HAL_RTC_SetTime>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_RTC_Init+0x88>
  {
    Error_Handler();
 8002e14:	f000 f904 	bl	8003020 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x17;
 8002e20:	2317      	movs	r3, #23
 8002e22:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8002e24:	2324      	movs	r3, #36	; 0x24
 8002e26:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002e28:	463b      	mov	r3, r7
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	480b      	ldr	r0, [pc, #44]	; (8002e5c <MX_RTC_Init+0xcc>)
 8002e30:	f004 f886 	bl	8006f40 <HAL_RTC_SetDate>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002e3a:	f000 f8f1 	bl	8003020 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2100      	movs	r1, #0
 8002e42:	4806      	ldr	r0, [pc, #24]	; (8002e5c <MX_RTC_Init+0xcc>)
 8002e44:	f004 fa0c 	bl	8007260 <HAL_RTCEx_SetWakeUpTimer>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002e4e:	f000 f8e7 	bl	8003020 <Error_Handler>
  {

  }
  /* USER CODE END RTC_Init 2 */

}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000290 	.word	0x20000290
 8002e60:	40002800 	.word	0x40002800
 8002e64:	40023800 	.word	0x40023800

08002e68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e6c:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <MX_SPI2_Init+0x64>)
 8002e6e:	4a18      	ldr	r2, [pc, #96]	; (8002ed0 <MX_SPI2_Init+0x68>)
 8002e70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e72:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <MX_SPI2_Init+0x64>)
 8002e74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <MX_SPI2_Init+0x64>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e80:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <MX_SPI2_Init+0x64>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <MX_SPI2_Init+0x64>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <MX_SPI2_Init+0x64>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e92:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <MX_SPI2_Init+0x64>)
 8002e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <MX_SPI2_Init+0x64>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <MX_SPI2_Init+0x64>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <MX_SPI2_Init+0x64>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eac:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <MX_SPI2_Init+0x64>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <MX_SPI2_Init+0x64>)
 8002eb4:	220a      	movs	r2, #10
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002eb8:	4804      	ldr	r0, [pc, #16]	; (8002ecc <MX_SPI2_Init+0x64>)
 8002eba:	f004 fbb9 	bl	8007630 <HAL_SPI_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ec4:	f000 f8ac 	bl	8003020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	200002b0 	.word	0x200002b0
 8002ed0:	40003800 	.word	0x40003800

08002ed4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <MX_USART1_UART_Init+0x4c>)
 8002eda:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <MX_USART1_UART_Init+0x50>)
 8002edc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <MX_USART1_UART_Init+0x4c>)
 8002ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ee4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <MX_USART1_UART_Init+0x4c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <MX_USART1_UART_Init+0x4c>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <MX_USART1_UART_Init+0x4c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <MX_USART1_UART_Init+0x4c>)
 8002efa:	220c      	movs	r2, #12
 8002efc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <MX_USART1_UART_Init+0x4c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <MX_USART1_UART_Init+0x4c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f0a:	4805      	ldr	r0, [pc, #20]	; (8002f20 <MX_USART1_UART_Init+0x4c>)
 8002f0c:	f004 ffc2 	bl	8007e94 <HAL_UART_Init>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f16:	f000 f883 	bl	8003020 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000308 	.word	0x20000308
 8002f24:	40011000 	.word	0x40011000

08002f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2e:	f107 030c 	add.w	r3, r7, #12
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	60da      	str	r2, [r3, #12]
 8002f3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	4b34      	ldr	r3, [pc, #208]	; (8003014 <MX_GPIO_Init+0xec>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a33      	ldr	r2, [pc, #204]	; (8003014 <MX_GPIO_Init+0xec>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b31      	ldr	r3, [pc, #196]	; (8003014 <MX_GPIO_Init+0xec>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	4b2d      	ldr	r3, [pc, #180]	; (8003014 <MX_GPIO_Init+0xec>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a2c      	ldr	r2, [pc, #176]	; (8003014 <MX_GPIO_Init+0xec>)
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b2a      	ldr	r3, [pc, #168]	; (8003014 <MX_GPIO_Init+0xec>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nrf_CE_Pin|nrf_CS_Pin, GPIO_PIN_RESET);
 8002f76:	2200      	movs	r2, #0
 8002f78:	2118      	movs	r1, #24
 8002f7a:	4827      	ldr	r0, [pc, #156]	; (8003018 <MX_GPIO_Init+0xf0>)
 8002f7c:	f001 fdf2 	bl	8004b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Red_Pin|LED_Green_Pin, GPIO_PIN_RESET);
 8002f80:	2200      	movs	r2, #0
 8002f82:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002f86:	4825      	ldr	r0, [pc, #148]	; (800301c <MX_GPIO_Init+0xf4>)
 8002f88:	f001 fdec 	bl	8004b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : nrf_IRQ_Pin */
  GPIO_InitStruct.Pin = nrf_IRQ_Pin;
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f90:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(nrf_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002f9a:	f107 030c 	add.w	r3, r7, #12
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	481d      	ldr	r0, [pc, #116]	; (8003018 <MX_GPIO_Init+0xf0>)
 8002fa2:	f001 fc43 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf_CE_Pin nrf_CS_Pin */
  GPIO_InitStruct.Pin = nrf_CE_Pin|nrf_CS_Pin;
 8002fa6:	2318      	movs	r3, #24
 8002fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002faa:	2301      	movs	r3, #1
 8002fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4816      	ldr	r0, [pc, #88]	; (8003018 <MX_GPIO_Init+0xf0>)
 8002fbe:	f001 fc35 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACTION_Pin */
  GPIO_InitStruct.Pin = ACTION_Pin;
 8002fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACTION_GPIO_Port, &GPIO_InitStruct);
 8002fd0:	f107 030c 	add.w	r3, r7, #12
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4810      	ldr	r0, [pc, #64]	; (8003018 <MX_GPIO_Init+0xf0>)
 8002fd8:	f001 fc28 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Red_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin;
 8002fdc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fee:	f107 030c 	add.w	r3, r7, #12
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4809      	ldr	r0, [pc, #36]	; (800301c <MX_GPIO_Init+0xf4>)
 8002ff6:	f001 fc19 	bl	800482c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	2008      	movs	r0, #8
 8003000:	f001 fbdd 	bl	80047be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003004:	2008      	movs	r0, #8
 8003006:	f001 fbf6 	bl	80047f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800300a:	bf00      	nop
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	40020000 	.word	0x40020000
 800301c:	40020400 	.word	0x40020400

08003020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003024:	b672      	cpsid	i
}
 8003026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003028:	e7fe      	b.n	8003028 <Error_Handler+0x8>
	...

0800302c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_MspInit+0x4c>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	4a0f      	ldr	r2, [pc, #60]	; (8003078 <HAL_MspInit+0x4c>)
 800303c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003040:	6453      	str	r3, [r2, #68]	; 0x44
 8003042:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <HAL_MspInit+0x4c>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_MspInit+0x4c>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	4a08      	ldr	r2, [pc, #32]	; (8003078 <HAL_MspInit+0x4c>)
 8003058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305c:	6413      	str	r3, [r2, #64]	; 0x40
 800305e:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_MspInit+0x4c>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800

0800307c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08a      	sub	sp, #40	; 0x28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003084:	f107 0314 	add.w	r3, r7, #20
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1b      	ldr	r2, [pc, #108]	; (8003108 <HAL_ADC_MspInit+0x8c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d12f      	bne.n	80030fe <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	4b1a      	ldr	r3, [pc, #104]	; (800310c <HAL_ADC_MspInit+0x90>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	4a19      	ldr	r2, [pc, #100]	; (800310c <HAL_ADC_MspInit+0x90>)
 80030a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ac:	6453      	str	r3, [r2, #68]	; 0x44
 80030ae:	4b17      	ldr	r3, [pc, #92]	; (800310c <HAL_ADC_MspInit+0x90>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	4b13      	ldr	r3, [pc, #76]	; (800310c <HAL_ADC_MspInit+0x90>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	4a12      	ldr	r2, [pc, #72]	; (800310c <HAL_ADC_MspInit+0x90>)
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <HAL_ADC_MspInit+0x90>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80030d6:	2302      	movs	r3, #2
 80030d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030da:	2303      	movs	r3, #3
 80030dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e2:	f107 0314 	add.w	r3, r7, #20
 80030e6:	4619      	mov	r1, r3
 80030e8:	4809      	ldr	r0, [pc, #36]	; (8003110 <HAL_ADC_MspInit+0x94>)
 80030ea:	f001 fb9f 	bl	800482c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80030ee:	2200      	movs	r2, #0
 80030f0:	2100      	movs	r1, #0
 80030f2:	2012      	movs	r0, #18
 80030f4:	f001 fb63 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80030f8:	2012      	movs	r0, #18
 80030fa:	f001 fb7c 	bl	80047f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030fe:	bf00      	nop
 8003100:	3728      	adds	r7, #40	; 0x28
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40012000 	.word	0x40012000
 800310c:	40023800 	.word	0x40023800
 8003110:	40020400 	.word	0x40020400

08003114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	; 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a19      	ldr	r2, [pc, #100]	; (8003198 <HAL_I2C_MspInit+0x84>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d12b      	bne.n	800318e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	4b18      	ldr	r3, [pc, #96]	; (800319c <HAL_I2C_MspInit+0x88>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a17      	ldr	r2, [pc, #92]	; (800319c <HAL_I2C_MspInit+0x88>)
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <HAL_I2C_MspInit+0x88>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003152:	23c0      	movs	r3, #192	; 0xc0
 8003154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003156:	2312      	movs	r3, #18
 8003158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315e:	2303      	movs	r3, #3
 8003160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003162:	2304      	movs	r3, #4
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003166:	f107 0314 	add.w	r3, r7, #20
 800316a:	4619      	mov	r1, r3
 800316c:	480c      	ldr	r0, [pc, #48]	; (80031a0 <HAL_I2C_MspInit+0x8c>)
 800316e:	f001 fb5d 	bl	800482c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_I2C_MspInit+0x88>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	4a08      	ldr	r2, [pc, #32]	; (800319c <HAL_I2C_MspInit+0x88>)
 800317c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003180:	6413      	str	r3, [r2, #64]	; 0x40
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_I2C_MspInit+0x88>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800318e:	bf00      	nop
 8003190:	3728      	adds	r7, #40	; 0x28
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40005400 	.word	0x40005400
 800319c:	40023800 	.word	0x40023800
 80031a0:	40020400 	.word	0x40020400

080031a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031ac:	f107 030c 	add.w	r3, r7, #12
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0c      	ldr	r2, [pc, #48]	; (80031f4 <HAL_RTC_MspInit+0x50>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d111      	bne.n	80031ea <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80031c6:	2302      	movs	r3, #2
 80031c8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80031ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ce:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031d0:	f107 030c 	add.w	r3, r7, #12
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 fc57 	bl	8006a88 <HAL_RCCEx_PeriphCLKConfig>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80031e0:	f7ff ff1e 	bl	8003020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <HAL_RTC_MspInit+0x54>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80031ea:	bf00      	nop
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40002800 	.word	0x40002800
 80031f8:	42470e3c 	.word	0x42470e3c

080031fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a19      	ldr	r2, [pc, #100]	; (8003280 <HAL_SPI_MspInit+0x84>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d12c      	bne.n	8003278 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_SPI_MspInit+0x88>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	4a17      	ldr	r2, [pc, #92]	; (8003284 <HAL_SPI_MspInit+0x88>)
 8003228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800322c:	6413      	str	r3, [r2, #64]	; 0x40
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_SPI_MspInit+0x88>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_SPI_MspInit+0x88>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a10      	ldr	r2, [pc, #64]	; (8003284 <HAL_SPI_MspInit+0x88>)
 8003244:	f043 0302 	orr.w	r3, r3, #2
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <HAL_SPI_MspInit+0x88>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003256:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800325a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	2302      	movs	r3, #2
 800325e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003264:	2303      	movs	r3, #3
 8003266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003268:	2305      	movs	r3, #5
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	4619      	mov	r1, r3
 8003272:	4805      	ldr	r0, [pc, #20]	; (8003288 <HAL_SPI_MspInit+0x8c>)
 8003274:	f001 fada 	bl	800482c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003278:	bf00      	nop
 800327a:	3728      	adds	r7, #40	; 0x28
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40003800 	.word	0x40003800
 8003284:	40023800 	.word	0x40023800
 8003288:	40020400 	.word	0x40020400

0800328c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <HAL_UART_MspInit+0x84>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d12c      	bne.n	8003308 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	4b18      	ldr	r3, [pc, #96]	; (8003314 <HAL_UART_MspInit+0x88>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_UART_MspInit+0x88>)
 80032b8:	f043 0310 	orr.w	r3, r3, #16
 80032bc:	6453      	str	r3, [r2, #68]	; 0x44
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_UART_MspInit+0x88>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <HAL_UART_MspInit+0x88>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a10      	ldr	r2, [pc, #64]	; (8003314 <HAL_UART_MspInit+0x88>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <HAL_UART_MspInit+0x88>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f4:	2303      	movs	r3, #3
 80032f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032f8:	2307      	movs	r3, #7
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	4619      	mov	r1, r3
 8003302:	4805      	ldr	r0, [pc, #20]	; (8003318 <HAL_UART_MspInit+0x8c>)
 8003304:	f001 fa92 	bl	800482c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003308:	bf00      	nop
 800330a:	3728      	adds	r7, #40	; 0x28
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40011000 	.word	0x40011000
 8003314:	40023800 	.word	0x40023800
 8003318:	40020000 	.word	0x40020000

0800331c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003320:	e7fe      	b.n	8003320 <NMI_Handler+0x4>

08003322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003326:	e7fe      	b.n	8003326 <HardFault_Handler+0x4>

08003328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800332c:	e7fe      	b.n	800332c <MemManage_Handler+0x4>

0800332e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003332:	e7fe      	b.n	8003332 <BusFault_Handler+0x4>

08003334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003338:	e7fe      	b.n	8003338 <UsageFault_Handler+0x4>

0800333a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003368:	f000 fbf0 	bl	8003b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}

08003370 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nrf_IRQ_Pin);
 8003374:	2004      	movs	r0, #4
 8003376:	f001 fc29 	bl	8004bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003384:	4802      	ldr	r0, [pc, #8]	; (8003390 <ADC_IRQHandler+0x10>)
 8003386:	f000 fddb 	bl	8003f40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200001f4 	.word	0x200001f4

08003394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return 1;
 8003398:	2301      	movs	r3, #1
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <_kill>:

int _kill(int pid, int sig)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033ae:	f005 ffeb 	bl	8009388 <__errno>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2216      	movs	r2, #22
 80033b6:	601a      	str	r2, [r3, #0]
  return -1;
 80033b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_exit>:

void _exit (int status)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033cc:	f04f 31ff 	mov.w	r1, #4294967295
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ffe7 	bl	80033a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033d6:	e7fe      	b.n	80033d6 <_exit+0x12>

080033d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	e00a      	b.n	8003400 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033ea:	f3af 8000 	nop.w
 80033ee:	4601      	mov	r1, r0
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	60ba      	str	r2, [r7, #8]
 80033f6:	b2ca      	uxtb	r2, r1
 80033f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	3301      	adds	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	429a      	cmp	r2, r3
 8003406:	dbf0      	blt.n	80033ea <_read+0x12>
  }

  return len;
 8003408:	687b      	ldr	r3, [r7, #4]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b086      	sub	sp, #24
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	e009      	b.n	8003438 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	60ba      	str	r2, [r7, #8]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	3301      	adds	r3, #1
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	429a      	cmp	r2, r3
 800343e:	dbf1      	blt.n	8003424 <_write+0x12>
  }
  return len;
 8003440:	687b      	ldr	r3, [r7, #4]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <_close>:

int _close(int file)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003472:	605a      	str	r2, [r3, #4]
  return 0;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <_isatty>:

int _isatty(int file)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800348a:	2301      	movs	r3, #1
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034bc:	4a14      	ldr	r2, [pc, #80]	; (8003510 <_sbrk+0x5c>)
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <_sbrk+0x60>)
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034c8:	4b13      	ldr	r3, [pc, #76]	; (8003518 <_sbrk+0x64>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d102      	bne.n	80034d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <_sbrk+0x64>)
 80034d2:	4a12      	ldr	r2, [pc, #72]	; (800351c <_sbrk+0x68>)
 80034d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <_sbrk+0x64>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4413      	add	r3, r2
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d207      	bcs.n	80034f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034e4:	f005 ff50 	bl	8009388 <__errno>
 80034e8:	4603      	mov	r3, r0
 80034ea:	220c      	movs	r2, #12
 80034ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295
 80034f2:	e009      	b.n	8003508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <_sbrk+0x64>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034fa:	4b07      	ldr	r3, [pc, #28]	; (8003518 <_sbrk+0x64>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	4a05      	ldr	r2, [pc, #20]	; (8003518 <_sbrk+0x64>)
 8003504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003506:	68fb      	ldr	r3, [r7, #12]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	20010000 	.word	0x20010000
 8003514:	00000400 	.word	0x00000400
 8003518:	200003a8 	.word	0x200003a8
 800351c:	20000500 	.word	0x20000500

08003520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <SystemInit+0x20>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	4a05      	ldr	r2, [pc, #20]	; (8003540 <SystemInit+0x20>)
 800352c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <DelayMicro>:
void print_Data_Ower_uart(uint8_t *RX_BUF, uint8_t *pipe);


// -------------------------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 7;   // 9
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <DelayMicro+0x38>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	4a0b      	ldr	r2, [pc, #44]	; (8003580 <DelayMicro+0x3c>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	0a9b      	lsrs	r3, r3, #10
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--) ;
 8003562:	bf00      	nop
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	1e5a      	subs	r2, r3, #1
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1fa      	bne.n	8003564 <DelayMicro+0x20>
}
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	20000000 	.word	0x20000000
 8003580:	02659117 	.word	0x02659117

08003584 <NRF24_Sleep_mode>:
// -------------------------------------------------------------------------------------
void NRF24_Sleep_mode(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
	CE_RESET;
 8003588:	2200      	movs	r2, #0
 800358a:	2108      	movs	r1, #8
 800358c:	4807      	ldr	r0, [pc, #28]	; (80035ac <NRF24_Sleep_mode+0x28>)
 800358e:	f001 fae9 	bl	8004b64 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8003592:	2005      	movs	r0, #5
 8003594:	f000 fafa 	bl	8003b8c <HAL_Delay>
	NRF24_WriteReg(CONFIG, 0x00);
 8003598:	2100      	movs	r1, #0
 800359a:	2000      	movs	r0, #0
 800359c:	f000 f8a6 	bl	80036ec <NRF24_WriteReg>
	HAL_Delay(5);
 80035a0:	2005      	movs	r0, #5
 80035a2:	f000 faf3 	bl	8003b8c <HAL_Delay>


}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40020000 	.word	0x40020000

080035b0 <NRF24_init_TX>:
	 NRF24L01_RX_Mode();
	 //LED_OFF;
}
// -------------------------------------------------------------------------------------
void NRF24_init_TX(uint8_t pipe, uint8_t chanel, uint8_t retrans_delay, uint8_t retransmit_attempt, uint8_t data_rate, uint8_t output_tx_power)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4604      	mov	r4, r0
 80035b8:	4608      	mov	r0, r1
 80035ba:	4611      	mov	r1, r2
 80035bc:	461a      	mov	r2, r3
 80035be:	4623      	mov	r3, r4
 80035c0:	71fb      	strb	r3, [r7, #7]
 80035c2:	4603      	mov	r3, r0
 80035c4:	71bb      	strb	r3, [r7, #6]
 80035c6:	460b      	mov	r3, r1
 80035c8:	717b      	strb	r3, [r7, #5]
 80035ca:	4613      	mov	r3, r2
 80035cc:	713b      	strb	r3, [r7, #4]
	if(chanel < 0 || chanel > 127)
 80035ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	da01      	bge.n	80035da <NRF24_init_TX+0x2a>
	{
		chanel = 10;
 80035d6:	230a      	movs	r3, #10
 80035d8:	71bb      	strb	r3, [r7, #6]
	}

	CE_RESET;
 80035da:	2200      	movs	r2, #0
 80035dc:	2108      	movs	r1, #8
 80035de:	4827      	ldr	r0, [pc, #156]	; (800367c <NRF24_init_TX+0xcc>)
 80035e0:	f001 fac0 	bl	8004b64 <HAL_GPIO_WritePin>
	// DelayMicro(5000);
//	osDelay(5);
	 HAL_Delay(5);
 80035e4:	2005      	movs	r0, #5
 80035e6:	f000 fad1 	bl	8003b8c <HAL_Delay>
	NRF24_WriteReg(CONFIG, 0x0A); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 80035ea:	210a      	movs	r1, #10
 80035ec:	2000      	movs	r0, #0
 80035ee:	f000 f87d 	bl	80036ec <NRF24_WriteReg>
	// DelayMicro(5000);
	 HAL_Delay(5);
 80035f2:	2005      	movs	r0, #5
 80035f4:	f000 faca 	bl	8003b8c <HAL_Delay>
//	osDelay(5);

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable pipe 0
 80035f8:	2101      	movs	r1, #1
 80035fa:	2001      	movs	r0, #1
 80035fc:	f000 f876 	bl	80036ec <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe 0				// включає канал
 8003600:	2101      	movs	r1, #1
 8003602:	2002      	movs	r0, #2
 8003604:	f000 f872 	bl	80036ec <NRF24_WriteReg>

	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8003608:	2101      	movs	r1, #1
 800360a:	2003      	movs	r0, #3
 800360c:	f000 f86e 	bl	80036ec <NRF24_WriteReg>

//	uint8_t SETUP_RETR_data = (retrans_delay << 4) | (retransmit_attempt);
//	NRF24_WriteReg(SETUP_RETR, SETUP_RETR_data);		// 1500us, 15 retrans           0x7F
#if NUM_OF_TX == 1
	NRF24_WriteReg(SETUP_RETR, 0xFF);			// 1750 us, 15 retrans
 8003610:	21ff      	movs	r1, #255	; 0xff
 8003612:	2004      	movs	r0, #4
 8003614:	f000 f86a 	bl	80036ec <NRF24_WriteReg>

#if NUM_OF_TX == 2
	NRF24_WriteReg(SETUP_RETR, 0x6F);			// 1750 us, 15 retrans
#endif

	NRF24_ToggleFeatures();
 8003618:	f000 f896 	bl	8003748 <NRF24_ToggleFeatures>

	NRF24_WriteReg(FEATURE, 0);
 800361c:	2100      	movs	r1, #0
 800361e:	201d      	movs	r0, #29
 8003620:	f000 f864 	bl	80036ec <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 8003624:	2100      	movs	r1, #0
 8003626:	201c      	movs	r0, #28
 8003628:	f000 f860 	bl	80036ec <NRF24_WriteReg>
	NRF24_WriteReg(STATUSS, 0x70);			// Reset flags for IRQ
 800362c:	2170      	movs	r1, #112	; 0x70
 800362e:	2007      	movs	r0, #7
 8003630:	f000 f85c 	bl	80036ec <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76);
 8003634:	214c      	movs	r1, #76	; 0x4c
 8003636:	2005      	movs	r0, #5
 8003638:	f000 f858 	bl	80036ec <NRF24_WriteReg>
//	NRF24_WriteReg(RF_CH, chanel); 			//  2400 + chanel MHz


	NRF24_WriteReg(RF_SETUP, data_rate|output_tx_power);  		// TX_PWR:0dBm, Datarate: 250kbp	- New version
 800363c:	7e3a      	ldrb	r2, [r7, #24]
 800363e:	7f3b      	ldrb	r3, [r7, #28]
 8003640:	4313      	orrs	r3, r2
 8003642:	b2db      	uxtb	r3, r3
 8003644:	4619      	mov	r1, r3
 8003646:	2006      	movs	r0, #6
 8003648:	f000 f850 	bl	80036ec <NRF24_WriteReg>

	if(pipe == 0)
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10d      	bne.n	800366e <NRF24_init_TX+0xbe>
	{
		NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);											// Write TX address
 8003652:	2203      	movs	r2, #3
 8003654:	490a      	ldr	r1, [pc, #40]	; (8003680 <NRF24_init_TX+0xd0>)
 8003656:	2010      	movs	r0, #16
 8003658:	f000 f8a0 	bl	800379c <NRF24_Write_Buf>
		NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);											// Write RX address Pipe 0
 800365c:	2203      	movs	r2, #3
 800365e:	4908      	ldr	r1, [pc, #32]	; (8003680 <NRF24_init_TX+0xd0>)
 8003660:	200a      	movs	r0, #10
 8003662:	f000 f89b 	bl	800379c <NRF24_Write_Buf>
		NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 													// Number of bytes in RX payload in data pipe 0
 8003666:	2120      	movs	r1, #32
 8003668:	2011      	movs	r0, #17
 800366a:	f000 f83f 	bl	80036ec <NRF24_WriteReg>
//		NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_5, TX_ADR_WIDTH);											// Write RX address Pipe 0
//		NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 													// Number of bytes in RX payload in data pipe 0
//	}


	 NRF24L01_RX_Mode();
 800366e:	f000 f90b 	bl	8003888 <NRF24L01_RX_Mode>
	 //LED_OFF;
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	bd90      	pop	{r4, r7, pc}
 800367a:	bf00      	nop
 800367c:	40020000 	.word	0x40020000
 8003680:	20000004 	.word	0x20000004

08003684 <NRF24_ReadReg>:
// -------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af02      	add	r7, sp, #8
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
	uint8_t dt=0, cmd;
 800368e:	2300      	movs	r3, #0
 8003690:	73fb      	strb	r3, [r7, #15]
	CS_ON;
 8003692:	2200      	movs	r2, #0
 8003694:	2110      	movs	r1, #16
 8003696:	4813      	ldr	r0, [pc, #76]	; (80036e4 <NRF24_ReadReg+0x60>)
 8003698:	f001 fa64 	bl	8004b64 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi2, &addr, &dt, 1, 1000);
 800369c:	f107 020f 	add.w	r2, r7, #15
 80036a0:	1df9      	adds	r1, r7, #7
 80036a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2301      	movs	r3, #1
 80036aa:	480f      	ldr	r0, [pc, #60]	; (80036e8 <NRF24_ReadReg+0x64>)
 80036ac:	f004 f985 	bl	80079ba <HAL_SPI_TransmitReceive>

	if (addr != STATUSS)		//если адрес равен адрес регистра статус то и возварщаем его состояние
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	2b07      	cmp	r3, #7
 80036b4:	d00c      	beq.n	80036d0 <NRF24_ReadReg+0x4c>
	{
		cmd = 0xFF;
 80036b6:	23ff      	movs	r3, #255	; 0xff
 80036b8:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_TransmitReceive(&hspi2, &cmd, &dt, 1, 1000);
 80036ba:	f107 020f 	add.w	r2, r7, #15
 80036be:	f107 010e 	add.w	r1, r7, #14
 80036c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	2301      	movs	r3, #1
 80036ca:	4807      	ldr	r0, [pc, #28]	; (80036e8 <NRF24_ReadReg+0x64>)
 80036cc:	f004 f975 	bl	80079ba <HAL_SPI_TransmitReceive>
	}

	CS_OFF;
 80036d0:	2201      	movs	r2, #1
 80036d2:	2110      	movs	r1, #16
 80036d4:	4803      	ldr	r0, [pc, #12]	; (80036e4 <NRF24_ReadReg+0x60>)
 80036d6:	f001 fa45 	bl	8004b64 <HAL_GPIO_WritePin>

	return dt;
 80036da:	7bfb      	ldrb	r3, [r7, #15]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40020000 	.word	0x40020000
 80036e8:	200002b0 	.word	0x200002b0

080036ec <NRF24_WriteReg>:
// -------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	460a      	mov	r2, r1
 80036f6:	71fb      	strb	r3, [r7, #7]
 80036f8:	4613      	mov	r3, r2
 80036fa:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;//включим бит записи в адрес
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	f043 0320 	orr.w	r3, r3, #32
 8003702:	b2db      	uxtb	r3, r3
 8003704:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 8003706:	2200      	movs	r2, #0
 8003708:	2110      	movs	r1, #16
 800370a:	480d      	ldr	r0, [pc, #52]	; (8003740 <NRF24_WriteReg+0x54>)
 800370c:	f001 fa2a 	bl	8004b64 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);	//отправим адрес в шину
 8003710:	1df9      	adds	r1, r7, #7
 8003712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003716:	2201      	movs	r2, #1
 8003718:	480a      	ldr	r0, [pc, #40]	; (8003744 <NRF24_WriteReg+0x58>)
 800371a:	f004 f812 	bl	8007742 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&dt,1,1000);	//отправим данные в шину
 800371e:	1db9      	adds	r1, r7, #6
 8003720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003724:	2201      	movs	r2, #1
 8003726:	4807      	ldr	r0, [pc, #28]	; (8003744 <NRF24_WriteReg+0x58>)
 8003728:	f004 f80b 	bl	8007742 <HAL_SPI_Transmit>

	CS_OFF;
 800372c:	2201      	movs	r2, #1
 800372e:	2110      	movs	r1, #16
 8003730:	4803      	ldr	r0, [pc, #12]	; (8003740 <NRF24_WriteReg+0x54>)
 8003732:	f001 fa17 	bl	8004b64 <HAL_GPIO_WritePin>
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40020000 	.word	0x40020000
 8003744:	200002b0 	.word	0x200002b0

08003748 <NRF24_ToggleFeatures>:
// -------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {ACTIVATE};
 800374e:	2350      	movs	r3, #80	; 0x50
 8003750:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8003752:	2200      	movs	r2, #0
 8003754:	2110      	movs	r1, #16
 8003756:	480f      	ldr	r0, [pc, #60]	; (8003794 <NRF24_ToggleFeatures+0x4c>)
 8003758:	f001 fa04 	bl	8004b64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 800375c:	1d39      	adds	r1, r7, #4
 800375e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003762:	2201      	movs	r2, #1
 8003764:	480c      	ldr	r0, [pc, #48]	; (8003798 <NRF24_ToggleFeatures+0x50>)
 8003766:	f003 ffec 	bl	8007742 <HAL_SPI_Transmit>

	DelayMicro(1);
 800376a:	2001      	movs	r0, #1
 800376c:	f7ff feea 	bl	8003544 <DelayMicro>

	dt[0] = 0x73;
 8003770:	2373      	movs	r3, #115	; 0x73
 8003772:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8003774:	1d39      	adds	r1, r7, #4
 8003776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800377a:	2201      	movs	r2, #1
 800377c:	4806      	ldr	r0, [pc, #24]	; (8003798 <NRF24_ToggleFeatures+0x50>)
 800377e:	f003 ffe0 	bl	8007742 <HAL_SPI_Transmit>
	CS_OFF;
 8003782:	2201      	movs	r2, #1
 8003784:	2110      	movs	r1, #16
 8003786:	4803      	ldr	r0, [pc, #12]	; (8003794 <NRF24_ToggleFeatures+0x4c>)
 8003788:	f001 f9ec 	bl	8004b64 <HAL_GPIO_WritePin>
}
 800378c:	bf00      	nop
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40020000 	.word	0x40020000
 8003798:	200002b0 	.word	0x200002b0

0800379c <NRF24_Write_Buf>:

	CS_OFF;
}
// -------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	6039      	str	r1, [r7, #0]
 80037a6:	71fb      	strb	r3, [r7, #7]
 80037a8:	4613      	mov	r3, r2
 80037aa:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;									//включим бит записи в адрес
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	f043 0320 	orr.w	r3, r3, #32
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 80037b6:	2200      	movs	r2, #0
 80037b8:	2110      	movs	r1, #16
 80037ba:	480f      	ldr	r0, [pc, #60]	; (80037f8 <NRF24_Write_Buf+0x5c>)
 80037bc:	f001 f9d2 	bl	8004b64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 80037c0:	1df9      	adds	r1, r7, #7
 80037c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037c6:	2201      	movs	r2, #1
 80037c8:	480c      	ldr	r0, [pc, #48]	; (80037fc <NRF24_Write_Buf+0x60>)
 80037ca:	f003 ffba 	bl	8007742 <HAL_SPI_Transmit>

	DelayMicro(1);
 80037ce:	2001      	movs	r0, #1
 80037d0:	f7ff feb8 	bl	8003544 <DelayMicro>

	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 80037d4:	79bb      	ldrb	r3, [r7, #6]
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037dc:	6839      	ldr	r1, [r7, #0]
 80037de:	4807      	ldr	r0, [pc, #28]	; (80037fc <NRF24_Write_Buf+0x60>)
 80037e0:	f003 ffaf 	bl	8007742 <HAL_SPI_Transmit>

	CS_OFF;
 80037e4:	2201      	movs	r2, #1
 80037e6:	2110      	movs	r1, #16
 80037e8:	4803      	ldr	r0, [pc, #12]	; (80037f8 <NRF24_Write_Buf+0x5c>)
 80037ea:	f001 f9bb 	bl	8004b64 <HAL_GPIO_WritePin>
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40020000 	.word	0x40020000
 80037fc:	200002b0 	.word	0x200002b0

08003800 <NRF24_FlushRX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushRX(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_RX};
 8003806:	23e2      	movs	r3, #226	; 0xe2
 8003808:	713b      	strb	r3, [r7, #4]

	CS_ON;
 800380a:	2200      	movs	r2, #0
 800380c:	2110      	movs	r1, #16
 800380e:	480b      	ldr	r0, [pc, #44]	; (800383c <NRF24_FlushRX+0x3c>)
 8003810:	f001 f9a8 	bl	8004b64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8003814:	1d39      	adds	r1, r7, #4
 8003816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800381a:	2201      	movs	r2, #1
 800381c:	4808      	ldr	r0, [pc, #32]	; (8003840 <NRF24_FlushRX+0x40>)
 800381e:	f003 ff90 	bl	8007742 <HAL_SPI_Transmit>
	DelayMicro(1);
 8003822:	2001      	movs	r0, #1
 8003824:	f7ff fe8e 	bl	8003544 <DelayMicro>
	CS_OFF;
 8003828:	2201      	movs	r2, #1
 800382a:	2110      	movs	r1, #16
 800382c:	4803      	ldr	r0, [pc, #12]	; (800383c <NRF24_FlushRX+0x3c>)
 800382e:	f001 f999 	bl	8004b64 <HAL_GPIO_WritePin>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40020000 	.word	0x40020000
 8003840:	200002b0 	.word	0x200002b0

08003844 <NRF24_FlushTX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushTX(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_TX};
 800384a:	23e1      	movs	r3, #225	; 0xe1
 800384c:	713b      	strb	r3, [r7, #4]

	CS_ON;
 800384e:	2200      	movs	r2, #0
 8003850:	2110      	movs	r1, #16
 8003852:	480b      	ldr	r0, [pc, #44]	; (8003880 <NRF24_FlushTX+0x3c>)
 8003854:	f001 f986 	bl	8004b64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8003858:	1d39      	adds	r1, r7, #4
 800385a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800385e:	2201      	movs	r2, #1
 8003860:	4808      	ldr	r0, [pc, #32]	; (8003884 <NRF24_FlushTX+0x40>)
 8003862:	f003 ff6e 	bl	8007742 <HAL_SPI_Transmit>
	DelayMicro(1);
 8003866:	2001      	movs	r0, #1
 8003868:	f7ff fe6c 	bl	8003544 <DelayMicro>
	CS_OFF;
 800386c:	2201      	movs	r2, #1
 800386e:	2110      	movs	r1, #16
 8003870:	4803      	ldr	r0, [pc, #12]	; (8003880 <NRF24_FlushTX+0x3c>)
 8003872:	f001 f977 	bl	8004b64 <HAL_GPIO_WritePin>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40020000 	.word	0x40020000
 8003884:	200002b0 	.word	0x200002b0

08003888 <NRF24L01_RX_Mode>:
// -------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
	uint8_t regval=0x00;
 800388e:	2300      	movs	r3, #0
 8003890:	71fb      	strb	r3, [r7, #7]
	regval = NRF24_ReadReg(CONFIG);
 8003892:	2000      	movs	r0, #0
 8003894:	f7ff fef6 	bl	8003684 <NRF24_ReadReg>
 8003898:	4603      	mov	r3, r0
 800389a:	71fb      	strb	r3, [r7, #7]

	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	f043 0303 	orr.w	r3, r3, #3
 80038a2:	71fb      	strb	r3, [r7, #7]

	NRF24_WriteReg(CONFIG, regval);
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	4619      	mov	r1, r3
 80038a8:	2000      	movs	r0, #0
 80038aa:	f7ff ff1f 	bl	80036ec <NRF24_WriteReg>
	CE_SET;
 80038ae:	2201      	movs	r2, #1
 80038b0:	2108      	movs	r1, #8
 80038b2:	4807      	ldr	r0, [pc, #28]	; (80038d0 <NRF24L01_RX_Mode+0x48>)
 80038b4:	f001 f956 	bl	8004b64 <HAL_GPIO_WritePin>

	DelayMicro(150);
 80038b8:	2096      	movs	r0, #150	; 0x96
 80038ba:	f7ff fe43 	bl	8003544 <DelayMicro>

	// Flush buffers
	NRF24_FlushRX();
 80038be:	f7ff ff9f 	bl	8003800 <NRF24_FlushRX>
	NRF24_FlushTX();
 80038c2:	f7ff ffbf 	bl	8003844 <NRF24_FlushTX>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40020000 	.word	0x40020000

080038d4 <NRF24L01_TX_Mode>:
	//HAL_GPIO_TogglePin(GPIOC, LED_Pin);
	DelayMicro(1000);
}
// -------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 80038d8:	2203      	movs	r2, #3
 80038da:	4907      	ldr	r1, [pc, #28]	; (80038f8 <NRF24L01_TX_Mode+0x24>)
 80038dc:	2010      	movs	r0, #16
 80038de:	f7ff ff5d 	bl	800379c <NRF24_Write_Buf>
	CE_RESET;
 80038e2:	2200      	movs	r2, #0
 80038e4:	2108      	movs	r1, #8
 80038e6:	4805      	ldr	r0, [pc, #20]	; (80038fc <NRF24L01_TX_Mode+0x28>)
 80038e8:	f001 f93c 	bl	8004b64 <HAL_GPIO_WritePin>

	// Flush buffers
	NRF24_FlushRX();
 80038ec:	f7ff ff88 	bl	8003800 <NRF24_FlushRX>
	NRF24_FlushTX();
 80038f0:	f7ff ffa8 	bl	8003844 <NRF24_FlushTX>
}
 80038f4:	bf00      	nop
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000004 	.word	0x20000004
 80038fc:	40020000 	.word	0x40020000

08003900 <NRF24_Transmit>:
// -------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	6039      	str	r1, [r7, #0]
 800390a:	71fb      	strb	r3, [r7, #7]
 800390c:	4613      	mov	r3, r2
 800390e:	71bb      	strb	r3, [r7, #6]
	CE_RESET;
 8003910:	2200      	movs	r2, #0
 8003912:	2108      	movs	r1, #8
 8003914:	4813      	ldr	r0, [pc, #76]	; (8003964 <NRF24_Transmit+0x64>)
 8003916:	f001 f925 	bl	8004b64 <HAL_GPIO_WritePin>
	CS_ON;
 800391a:	2200      	movs	r2, #0
 800391c:	2110      	movs	r1, #16
 800391e:	4811      	ldr	r0, [pc, #68]	; (8003964 <NRF24_Transmit+0x64>)
 8003920:	f001 f920 	bl	8004b64 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);			// Send address in buss
 8003924:	1df9      	adds	r1, r7, #7
 8003926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800392a:	2201      	movs	r2, #1
 800392c:	480e      	ldr	r0, [pc, #56]	; (8003968 <NRF24_Transmit+0x68>)
 800392e:	f003 ff08 	bl	8007742 <HAL_SPI_Transmit>
	DelayMicro(1);
 8003932:	2001      	movs	r0, #1
 8003934:	f7ff fe06 	bl	8003544 <DelayMicro>
	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);		// Send data in buss
 8003938:	79bb      	ldrb	r3, [r7, #6]
 800393a:	b29a      	uxth	r2, r3
 800393c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003940:	6839      	ldr	r1, [r7, #0]
 8003942:	4809      	ldr	r0, [pc, #36]	; (8003968 <NRF24_Transmit+0x68>)
 8003944:	f003 fefd 	bl	8007742 <HAL_SPI_Transmit>

	CS_OFF;
 8003948:	2201      	movs	r2, #1
 800394a:	2110      	movs	r1, #16
 800394c:	4805      	ldr	r0, [pc, #20]	; (8003964 <NRF24_Transmit+0x64>)
 800394e:	f001 f909 	bl	8004b64 <HAL_GPIO_WritePin>
	CE_SET;
 8003952:	2201      	movs	r2, #1
 8003954:	2108      	movs	r1, #8
 8003956:	4803      	ldr	r0, [pc, #12]	; (8003964 <NRF24_Transmit+0x64>)
 8003958:	f001 f904 	bl	8004b64 <HAL_GPIO_WritePin>
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40020000 	.word	0x40020000
 8003968:	200002b0 	.word	0x200002b0

0800396c <NRF24L01_Send>:
// -------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	uint8_t status=0x00, regval=0x00;
 8003974:	2300      	movs	r3, #0
 8003976:	73fb      	strb	r3, [r7, #15]
 8003978:	2300      	movs	r3, #0
 800397a:	73bb      	strb	r3, [r7, #14]

	NRF24L01_TX_Mode();
 800397c:	f7ff ffaa 	bl	80038d4 <NRF24L01_TX_Mode>
	regval = NRF24_ReadReg(CONFIG);
 8003980:	2000      	movs	r0, #0
 8003982:	f7ff fe7f 	bl	8003684 <NRF24_ReadReg>
 8003986:	4603      	mov	r3, r0
 8003988:	73bb      	strb	r3, [r7, #14]
	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);
 800398a:	7bbb      	ldrb	r3, [r7, #14]
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	73bb      	strb	r3, [r7, #14]
	regval &= ~(1<<PRIM_RX);
 8003992:	7bbb      	ldrb	r3, [r7, #14]
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	73bb      	strb	r3, [r7, #14]
	NRF24_WriteReg(CONFIG,regval);
 800399a:	7bbb      	ldrb	r3, [r7, #14]
 800399c:	4619      	mov	r1, r3
 800399e:	2000      	movs	r0, #0
 80039a0:	f7ff fea4 	bl	80036ec <NRF24_WriteReg>
	DelayMicro(150); //Задержка минимум 130 мкс
 80039a4:	2096      	movs	r0, #150	; 0x96
 80039a6:	f7ff fdcd 	bl	8003544 <DelayMicro>

	//Отправим данные в воздух
	NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);
 80039aa:	2220      	movs	r2, #32
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	20a0      	movs	r0, #160	; 0xa0
 80039b0:	f7ff ffa6 	bl	8003900 <NRF24_Transmit>
	CE_SET;
 80039b4:	2201      	movs	r2, #1
 80039b6:	2108      	movs	r1, #8
 80039b8:	481c      	ldr	r0, [pc, #112]	; (8003a2c <NRF24L01_Send+0xc0>)
 80039ba:	f001 f8d3 	bl	8004b64 <HAL_GPIO_WritePin>
	DelayMicro(15); //minimum 10us high pulse (Page 21)
 80039be:	200f      	movs	r0, #15
 80039c0:	f7ff fdc0 	bl	8003544 <DelayMicro>
	CE_RESET;
 80039c4:	2200      	movs	r2, #0
 80039c6:	2108      	movs	r1, #8
 80039c8:	4818      	ldr	r0, [pc, #96]	; (8003a2c <NRF24L01_Send+0xc0>)
 80039ca:	f001 f8cb 	bl	8004b64 <HAL_GPIO_WritePin>

	while((GPIO_PinState)IRQ == GPIO_PIN_SET) {}
 80039ce:	bf00      	nop
 80039d0:	2104      	movs	r1, #4
 80039d2:	4816      	ldr	r0, [pc, #88]	; (8003a2c <NRF24L01_Send+0xc0>)
 80039d4:	f001 f8ae 	bl	8004b34 <HAL_GPIO_ReadPin>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d0f8      	beq.n	80039d0 <NRF24L01_Send+0x64>
	status = NRF24_ReadReg(STATUSS);
 80039de:	2007      	movs	r0, #7
 80039e0:	f7ff fe50 	bl	8003684 <NRF24_ReadReg>
 80039e4:	4603      	mov	r3, r0
 80039e6:	73fb      	strb	r3, [r7, #15]
	if(status&TX_DS) // If was intterupt (if send data was received )
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <NRF24L01_Send+0x90>
	{
	    NRF24_WriteReg(STATUSS, 0x20);		// Clear interrupt byte
 80039f2:	2120      	movs	r1, #32
 80039f4:	2007      	movs	r0, #7
 80039f6:	f7ff fe79 	bl	80036ec <NRF24_WriteReg>
 80039fa:	e00a      	b.n	8003a12 <NRF24L01_Send+0xa6>
	}
	else if(status&MAX_RT)					// If
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <NRF24L01_Send+0xa6>
	{
		NRF24_WriteReg(STATUSS, 0x10);
 8003a06:	2110      	movs	r1, #16
 8003a08:	2007      	movs	r0, #7
 8003a0a:	f7ff fe6f 	bl	80036ec <NRF24_WriteReg>
		NRF24_FlushTX();
 8003a0e:	f7ff ff19 	bl	8003844 <NRF24_FlushTX>
	}

	regval = NRF24_ReadReg(OBSERVE_TX);
 8003a12:	2008      	movs	r0, #8
 8003a14:	f7ff fe36 	bl	8003684 <NRF24_ReadReg>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	73bb      	strb	r3, [r7, #14]

	//Уходим в режим приёмника
	NRF24L01_RX_Mode();
 8003a1c:	f7ff ff34 	bl	8003888 <NRF24L01_RX_Mode>

	return regval;
 8003a20:	7bbb      	ldrb	r3, [r7, #14]


}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40020000 	.word	0x40020000

08003a30 <NRF24L01_Transmit>:
// -------------------------------------------------------------------------------------
uint8_t NRF24L01_Transmit(uint8_t *pipe_address, char *data[])
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
	uint8_t regval = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
	regval = NRF24L01_Send(data);
 8003a3e:	6838      	ldr	r0, [r7, #0]
 8003a40:	f7ff ff94 	bl	800396c <NRF24L01_Send>
 8003a44:	4603      	mov	r3, r0
 8003a46:	73fb      	strb	r3, [r7, #15]

	return regval;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a58:	480d      	ldr	r0, [pc, #52]	; (8003a90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a5a:	490e      	ldr	r1, [pc, #56]	; (8003a94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a5c:	4a0e      	ldr	r2, [pc, #56]	; (8003a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a60:	e002      	b.n	8003a68 <LoopCopyDataInit>

08003a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a66:	3304      	adds	r3, #4

08003a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a6c:	d3f9      	bcc.n	8003a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a6e:	4a0b      	ldr	r2, [pc, #44]	; (8003a9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a70:	4c0b      	ldr	r4, [pc, #44]	; (8003aa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a74:	e001      	b.n	8003a7a <LoopFillZerobss>

08003a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a78:	3204      	adds	r2, #4

08003a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a7c:	d3fb      	bcc.n	8003a76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a7e:	f7ff fd4f 	bl	8003520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a82:	f005 fc87 	bl	8009394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a86:	f7fe ff2d 	bl	80028e4 <main>
  bx  lr    
 8003a8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a94:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003a98:	0800b78c 	.word	0x0800b78c
  ldr r2, =_sbss
 8003a9c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003aa0:	200004fc 	.word	0x200004fc

08003aa4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aa4:	e7fe      	b.n	8003aa4 <DMA1_Stream0_IRQHandler>
	...

08003aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003aac:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <HAL_Init+0x40>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a0d      	ldr	r2, [pc, #52]	; (8003ae8 <HAL_Init+0x40>)
 8003ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_Init+0x40>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <HAL_Init+0x40>)
 8003abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ac4:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <HAL_Init+0x40>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a07      	ldr	r2, [pc, #28]	; (8003ae8 <HAL_Init+0x40>)
 8003aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ad0:	2003      	movs	r0, #3
 8003ad2:	f000 fe69 	bl	80047a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ad6:	200f      	movs	r0, #15
 8003ad8:	f000 f808 	bl	8003aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003adc:	f7ff faa6 	bl	800302c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023c00 	.word	0x40023c00

08003aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003af4:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <HAL_InitTick+0x54>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_InitTick+0x58>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	4619      	mov	r1, r3
 8003afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fe81 	bl	8004812 <HAL_SYSTICK_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e00e      	b.n	8003b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b0f      	cmp	r3, #15
 8003b1e:	d80a      	bhi.n	8003b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b20:	2200      	movs	r2, #0
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	f04f 30ff 	mov.w	r0, #4294967295
 8003b28:	f000 fe49 	bl	80047be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b2c:	4a06      	ldr	r2, [pc, #24]	; (8003b48 <HAL_InitTick+0x5c>)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e000      	b.n	8003b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000000 	.word	0x20000000
 8003b44:	2000000c 	.word	0x2000000c
 8003b48:	20000008 	.word	0x20000008

08003b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <HAL_IncTick+0x20>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_IncTick+0x24>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <HAL_IncTick+0x24>)
 8003b5e:	6013      	str	r3, [r2, #0]
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	2000000c 	.word	0x2000000c
 8003b70:	200003ac 	.word	0x200003ac

08003b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return uwTick;
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <HAL_GetTick+0x14>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	200003ac 	.word	0x200003ac

08003b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b94:	f7ff ffee 	bl	8003b74 <HAL_GetTick>
 8003b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d005      	beq.n	8003bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <HAL_Delay+0x44>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bb2:	bf00      	nop
 8003bb4:	f7ff ffde 	bl	8003b74 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d8f7      	bhi.n	8003bb4 <HAL_Delay+0x28>
  {
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	2000000c 	.word	0x2000000c

08003bd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e033      	b.n	8003c52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fa42 	bl	800307c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d118      	bne.n	8003c44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c1a:	f023 0302 	bic.w	r3, r3, #2
 8003c1e:	f043 0202 	orr.w	r2, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fbe8 	bl	80043fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f023 0303 	bic.w	r3, r3, #3
 8003c3a:	f043 0201 	orr.w	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40
 8003c42:	e001      	b.n	8003c48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_Start+0x1a>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e097      	b.n	8003da6 <HAL_ADC_Start+0x14a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d018      	beq.n	8003cbe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c9c:	4b45      	ldr	r3, [pc, #276]	; (8003db4 <HAL_ADC_Start+0x158>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a45      	ldr	r2, [pc, #276]	; (8003db8 <HAL_ADC_Start+0x15c>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	0c9a      	lsrs	r2, r3, #18
 8003ca8:	4613      	mov	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4413      	add	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003cb0:	e002      	b.n	8003cb8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f9      	bne.n	8003cb2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d15f      	bne.n	8003d8c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cf6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0a:	d106      	bne.n	8003d1a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d10:	f023 0206 	bic.w	r2, r3, #6
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	645a      	str	r2, [r3, #68]	; 0x44
 8003d18:	e002      	b.n	8003d20 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d28:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <HAL_ADC_Start+0x160>)
 8003d2a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d34:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10f      	bne.n	8003d62 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d129      	bne.n	8003da4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	e020      	b.n	8003da4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a16      	ldr	r2, [pc, #88]	; (8003dc0 <HAL_ADC_Start+0x164>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d11b      	bne.n	8003da4 <HAL_ADC_Start+0x148>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d114      	bne.n	8003da4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	e00b      	b.n	8003da4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	f043 0210 	orr.w	r2, r3, #16
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9c:	f043 0201 	orr.w	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000000 	.word	0x20000000
 8003db8:	431bde83 	.word	0x431bde83
 8003dbc:	40012300 	.word	0x40012300
 8003dc0:	40012000 	.word	0x40012000

08003dc4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_ADC_Stop+0x16>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e021      	b.n	8003e1e <HAL_ADC_Stop+0x5a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d109      	bne.n	8003e14 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	f043 0201 	orr.w	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e46:	d113      	bne.n	8003e70 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e56:	d10b      	bne.n	8003e70 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e063      	b.n	8003f38 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003e70:	f7ff fe80 	bl	8003b74 <HAL_GetTick>
 8003e74:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003e76:	e021      	b.n	8003ebc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7e:	d01d      	beq.n	8003ebc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <HAL_ADC_PollForConversion+0x6c>
 8003e86:	f7ff fe75 	bl	8003b74 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d212      	bcs.n	8003ebc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d00b      	beq.n	8003ebc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	f043 0204 	orr.w	r2, r3, #4
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e03d      	b.n	8003f38 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d1d6      	bne.n	8003e78 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f06f 0212 	mvn.w	r2, #18
 8003ed2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d123      	bne.n	8003f36 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d11f      	bne.n	8003f36 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d006      	beq.n	8003f12 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d111      	bne.n	8003f36 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f043 0201 	orr.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d049      	beq.n	800400a <HAL_ADC_IRQHandler+0xca>
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d046      	beq.n	800400a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d105      	bne.n	8003f94 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d12b      	bne.n	8003ffa <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d127      	bne.n	8003ffa <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d006      	beq.n	8003fc6 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d119      	bne.n	8003ffa <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0220 	bic.w	r2, r2, #32
 8003fd4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d105      	bne.n	8003ffa <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f043 0201 	orr.w	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f8bd 	bl	800417a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0212 	mvn.w	r2, #18
 8004008:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004018:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d057      	beq.n	80040d0 <HAL_ADC_IRQHandler+0x190>
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d054      	beq.n	80040d0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	2b00      	cmp	r3, #0
 8004030:	d105      	bne.n	800403e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d139      	bne.n	80040c0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004056:	2b00      	cmp	r3, #0
 8004058:	d006      	beq.n	8004068 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004064:	2b00      	cmp	r3, #0
 8004066:	d12b      	bne.n	80040c0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004072:	2b00      	cmp	r3, #0
 8004074:	d124      	bne.n	80040c0 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004080:	2b00      	cmp	r3, #0
 8004082:	d11d      	bne.n	80040c0 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004088:	2b00      	cmp	r3, #0
 800408a:	d119      	bne.n	80040c0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800409a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	f043 0201 	orr.w	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fa97 	bl	80045f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f06f 020c 	mvn.w	r2, #12
 80040ce:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d017      	beq.n	8004116 <HAL_ADC_IRQHandler+0x1d6>
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d014      	beq.n	8004116 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d10d      	bne.n	8004116 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f841 	bl	800418e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0201 	mvn.w	r2, #1
 8004114:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004124:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d015      	beq.n	8004158 <HAL_ADC_IRQHandler+0x218>
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d012      	beq.n	8004158 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	f043 0202 	orr.w	r2, r3, #2
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f06f 0220 	mvn.w	r2, #32
 8004146:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f82a 	bl	80041a2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f06f 0220 	mvn.w	r2, #32
 8004156:	601a      	str	r2, [r3, #0]
  }
}
 8004158:	bf00      	nop
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x1c>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e105      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x228>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b09      	cmp	r3, #9
 80041e2:	d925      	bls.n	8004230 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68d9      	ldr	r1, [r3, #12]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	4613      	mov	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	3b1e      	subs	r3, #30
 80041fa:	2207      	movs	r2, #7
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	43da      	mvns	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	400a      	ands	r2, r1
 8004208:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68d9      	ldr	r1, [r3, #12]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	4618      	mov	r0, r3
 800421c:	4603      	mov	r3, r0
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	4403      	add	r3, r0
 8004222:	3b1e      	subs	r3, #30
 8004224:	409a      	lsls	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	e022      	b.n	8004276 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6919      	ldr	r1, [r3, #16]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	b29b      	uxth	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	4613      	mov	r3, r2
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	4413      	add	r3, r2
 8004244:	2207      	movs	r2, #7
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43da      	mvns	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	400a      	ands	r2, r1
 8004252:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6919      	ldr	r1, [r3, #16]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	b29b      	uxth	r3, r3
 8004264:	4618      	mov	r0, r3
 8004266:	4603      	mov	r3, r0
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4403      	add	r3, r0
 800426c:	409a      	lsls	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b06      	cmp	r3, #6
 800427c:	d824      	bhi.n	80042c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	3b05      	subs	r3, #5
 8004290:	221f      	movs	r2, #31
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43da      	mvns	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	400a      	ands	r2, r1
 800429e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	4618      	mov	r0, r3
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	3b05      	subs	r3, #5
 80042ba:	fa00 f203 	lsl.w	r2, r0, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	635a      	str	r2, [r3, #52]	; 0x34
 80042c6:	e04c      	b.n	8004362 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b0c      	cmp	r3, #12
 80042ce:	d824      	bhi.n	800431a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	3b23      	subs	r3, #35	; 0x23
 80042e2:	221f      	movs	r2, #31
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	43da      	mvns	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	400a      	ands	r2, r1
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	4618      	mov	r0, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	3b23      	subs	r3, #35	; 0x23
 800430c:	fa00 f203 	lsl.w	r2, r0, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
 8004318:	e023      	b.n	8004362 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	3b41      	subs	r3, #65	; 0x41
 800432c:	221f      	movs	r2, #31
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	43da      	mvns	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	400a      	ands	r2, r1
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	4618      	mov	r0, r3
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	3b41      	subs	r3, #65	; 0x41
 8004356:	fa00 f203 	lsl.w	r2, r0, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004362:	4b22      	ldr	r3, [pc, #136]	; (80043ec <HAL_ADC_ConfigChannel+0x234>)
 8004364:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a21      	ldr	r2, [pc, #132]	; (80043f0 <HAL_ADC_ConfigChannel+0x238>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d109      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x1cc>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b12      	cmp	r3, #18
 8004376:	d105      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <HAL_ADC_ConfigChannel+0x238>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d123      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x21e>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b10      	cmp	r3, #16
 8004394:	d003      	beq.n	800439e <HAL_ADC_ConfigChannel+0x1e6>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b11      	cmp	r3, #17
 800439c:	d11b      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b10      	cmp	r3, #16
 80043b0:	d111      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <HAL_ADC_ConfigChannel+0x23c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a10      	ldr	r2, [pc, #64]	; (80043f8 <HAL_ADC_ConfigChannel+0x240>)
 80043b8:	fba2 2303 	umull	r2, r3, r2, r3
 80043bc:	0c9a      	lsrs	r2, r3, #18
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043c8:	e002      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f9      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40012300 	.word	0x40012300
 80043f0:	40012000 	.word	0x40012000
 80043f4:	20000000 	.word	0x20000000
 80043f8:	431bde83 	.word	0x431bde83

080043fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004404:	4b79      	ldr	r3, [pc, #484]	; (80045ec <ADC_Init+0x1f0>)
 8004406:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	431a      	orrs	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6859      	ldr	r1, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	021a      	lsls	r2, r3, #8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004454:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004476:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6899      	ldr	r1, [r3, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	4a58      	ldr	r2, [pc, #352]	; (80045f0 <ADC_Init+0x1f4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d022      	beq.n	80044da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6899      	ldr	r1, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6899      	ldr	r1, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	609a      	str	r2, [r3, #8]
 80044d8:	e00f      	b.n	80044fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0202 	bic.w	r2, r2, #2
 8004508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6899      	ldr	r1, [r3, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	7e1b      	ldrb	r3, [r3, #24]
 8004514:	005a      	lsls	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01b      	beq.n	8004560 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004536:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004546:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6859      	ldr	r1, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	3b01      	subs	r3, #1
 8004554:	035a      	lsls	r2, r3, #13
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]
 800455e:	e007      	b.n	8004570 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800456e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800457e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	3b01      	subs	r3, #1
 800458c:	051a      	lsls	r2, r3, #20
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6899      	ldr	r1, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045b2:	025a      	lsls	r2, r3, #9
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6899      	ldr	r1, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	029a      	lsls	r2, r3, #10
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	609a      	str	r2, [r3, #8]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	40012300 	.word	0x40012300
 80045f0:	0f000001 	.word	0x0f000001

080045f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <__NVIC_SetPriorityGrouping+0x44>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004624:	4013      	ands	r3, r2
 8004626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800463a:	4a04      	ldr	r2, [pc, #16]	; (800464c <__NVIC_SetPriorityGrouping+0x44>)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	60d3      	str	r3, [r2, #12]
}
 8004640:	bf00      	nop
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	e000ed00 	.word	0xe000ed00

08004650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <__NVIC_GetPriorityGrouping+0x18>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	0a1b      	lsrs	r3, r3, #8
 800465a:	f003 0307 	and.w	r3, r3, #7
}
 800465e:	4618      	mov	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467a:	2b00      	cmp	r3, #0
 800467c:	db0b      	blt.n	8004696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	f003 021f 	and.w	r2, r3, #31
 8004684:	4907      	ldr	r1, [pc, #28]	; (80046a4 <__NVIC_EnableIRQ+0x38>)
 8004686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2001      	movs	r0, #1
 800468e:	fa00 f202 	lsl.w	r2, r0, r2
 8004692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	e000e100 	.word	0xe000e100

080046a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	6039      	str	r1, [r7, #0]
 80046b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	db0a      	blt.n	80046d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	490c      	ldr	r1, [pc, #48]	; (80046f4 <__NVIC_SetPriority+0x4c>)
 80046c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c6:	0112      	lsls	r2, r2, #4
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	440b      	add	r3, r1
 80046cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046d0:	e00a      	b.n	80046e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	4908      	ldr	r1, [pc, #32]	; (80046f8 <__NVIC_SetPriority+0x50>)
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	3b04      	subs	r3, #4
 80046e0:	0112      	lsls	r2, r2, #4
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	440b      	add	r3, r1
 80046e6:	761a      	strb	r2, [r3, #24]
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	e000e100 	.word	0xe000e100
 80046f8:	e000ed00 	.word	0xe000ed00

080046fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b089      	sub	sp, #36	; 0x24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f1c3 0307 	rsb	r3, r3, #7
 8004716:	2b04      	cmp	r3, #4
 8004718:	bf28      	it	cs
 800471a:	2304      	movcs	r3, #4
 800471c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3304      	adds	r3, #4
 8004722:	2b06      	cmp	r3, #6
 8004724:	d902      	bls.n	800472c <NVIC_EncodePriority+0x30>
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3b03      	subs	r3, #3
 800472a:	e000      	b.n	800472e <NVIC_EncodePriority+0x32>
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004730:	f04f 32ff 	mov.w	r2, #4294967295
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43da      	mvns	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	401a      	ands	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004744:	f04f 31ff 	mov.w	r1, #4294967295
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	fa01 f303 	lsl.w	r3, r1, r3
 800474e:	43d9      	mvns	r1, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004754:	4313      	orrs	r3, r2
         );
}
 8004756:	4618      	mov	r0, r3
 8004758:	3724      	adds	r7, #36	; 0x24
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3b01      	subs	r3, #1
 8004770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004774:	d301      	bcc.n	800477a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004776:	2301      	movs	r3, #1
 8004778:	e00f      	b.n	800479a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800477a:	4a0a      	ldr	r2, [pc, #40]	; (80047a4 <SysTick_Config+0x40>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3b01      	subs	r3, #1
 8004780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004782:	210f      	movs	r1, #15
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	f7ff ff8e 	bl	80046a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <SysTick_Config+0x40>)
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004792:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <SysTick_Config+0x40>)
 8004794:	2207      	movs	r2, #7
 8004796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	e000e010 	.word	0xe000e010

080047a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff29 	bl	8004608 <__NVIC_SetPriorityGrouping>
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047be:	b580      	push	{r7, lr}
 80047c0:	b086      	sub	sp, #24
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	4603      	mov	r3, r0
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047d0:	f7ff ff3e 	bl	8004650 <__NVIC_GetPriorityGrouping>
 80047d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	6978      	ldr	r0, [r7, #20]
 80047dc:	f7ff ff8e 	bl	80046fc <NVIC_EncodePriority>
 80047e0:	4602      	mov	r2, r0
 80047e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e6:	4611      	mov	r1, r2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff ff5d 	bl	80046a8 <__NVIC_SetPriority>
}
 80047ee:	bf00      	nop
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	4603      	mov	r3, r0
 80047fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff ff31 	bl	800466c <__NVIC_EnableIRQ>
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff ffa2 	bl	8004764 <SysTick_Config>
 8004820:	4603      	mov	r3, r0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800482c:	b480      	push	{r7}
 800482e:	b089      	sub	sp, #36	; 0x24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800483a:	2300      	movs	r3, #0
 800483c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800483e:	2300      	movs	r3, #0
 8004840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	e159      	b.n	8004afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004848:	2201      	movs	r2, #1
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4013      	ands	r3, r2
 800485a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	429a      	cmp	r2, r3
 8004862:	f040 8148 	bne.w	8004af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b01      	cmp	r3, #1
 8004870:	d005      	beq.n	800487e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800487a:	2b02      	cmp	r3, #2
 800487c:	d130      	bne.n	80048e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	2203      	movs	r2, #3
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4013      	ands	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048b4:	2201      	movs	r2, #1
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 0201 	and.w	r2, r3, #1
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d017      	beq.n	800491c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	2203      	movs	r2, #3
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d123      	bne.n	8004970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	08da      	lsrs	r2, r3, #3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3208      	adds	r2, #8
 8004930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	220f      	movs	r2, #15
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	08da      	lsrs	r2, r3, #3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3208      	adds	r2, #8
 800496a:	69b9      	ldr	r1, [r7, #24]
 800496c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	2203      	movs	r2, #3
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	43db      	mvns	r3, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4013      	ands	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 0203 	and.w	r2, r3, #3
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4313      	orrs	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80a2 	beq.w	8004af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	4b57      	ldr	r3, [pc, #348]	; (8004b14 <HAL_GPIO_Init+0x2e8>)
 80049b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ba:	4a56      	ldr	r2, [pc, #344]	; (8004b14 <HAL_GPIO_Init+0x2e8>)
 80049bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049c0:	6453      	str	r3, [r2, #68]	; 0x44
 80049c2:	4b54      	ldr	r3, [pc, #336]	; (8004b14 <HAL_GPIO_Init+0x2e8>)
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049ce:	4a52      	ldr	r2, [pc, #328]	; (8004b18 <HAL_GPIO_Init+0x2ec>)
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	3302      	adds	r3, #2
 80049d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	220f      	movs	r2, #15
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43db      	mvns	r3, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4013      	ands	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a49      	ldr	r2, [pc, #292]	; (8004b1c <HAL_GPIO_Init+0x2f0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d019      	beq.n	8004a2e <HAL_GPIO_Init+0x202>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a48      	ldr	r2, [pc, #288]	; (8004b20 <HAL_GPIO_Init+0x2f4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <HAL_GPIO_Init+0x1fe>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a47      	ldr	r2, [pc, #284]	; (8004b24 <HAL_GPIO_Init+0x2f8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00d      	beq.n	8004a26 <HAL_GPIO_Init+0x1fa>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a46      	ldr	r2, [pc, #280]	; (8004b28 <HAL_GPIO_Init+0x2fc>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <HAL_GPIO_Init+0x1f6>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a45      	ldr	r2, [pc, #276]	; (8004b2c <HAL_GPIO_Init+0x300>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d101      	bne.n	8004a1e <HAL_GPIO_Init+0x1f2>
 8004a1a:	2304      	movs	r3, #4
 8004a1c:	e008      	b.n	8004a30 <HAL_GPIO_Init+0x204>
 8004a1e:	2307      	movs	r3, #7
 8004a20:	e006      	b.n	8004a30 <HAL_GPIO_Init+0x204>
 8004a22:	2303      	movs	r3, #3
 8004a24:	e004      	b.n	8004a30 <HAL_GPIO_Init+0x204>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e002      	b.n	8004a30 <HAL_GPIO_Init+0x204>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <HAL_GPIO_Init+0x204>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	f002 0203 	and.w	r2, r2, #3
 8004a36:	0092      	lsls	r2, r2, #2
 8004a38:	4093      	lsls	r3, r2
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a40:	4935      	ldr	r1, [pc, #212]	; (8004b18 <HAL_GPIO_Init+0x2ec>)
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	089b      	lsrs	r3, r3, #2
 8004a46:	3302      	adds	r3, #2
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a4e:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <HAL_GPIO_Init+0x304>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a72:	4a2f      	ldr	r2, [pc, #188]	; (8004b30 <HAL_GPIO_Init+0x304>)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a78:	4b2d      	ldr	r3, [pc, #180]	; (8004b30 <HAL_GPIO_Init+0x304>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a9c:	4a24      	ldr	r2, [pc, #144]	; (8004b30 <HAL_GPIO_Init+0x304>)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004aa2:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <HAL_GPIO_Init+0x304>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ac6:	4a1a      	ldr	r2, [pc, #104]	; (8004b30 <HAL_GPIO_Init+0x304>)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004acc:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <HAL_GPIO_Init+0x304>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004af0:	4a0f      	ldr	r2, [pc, #60]	; (8004b30 <HAL_GPIO_Init+0x304>)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3301      	adds	r3, #1
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	2b0f      	cmp	r3, #15
 8004b00:	f67f aea2 	bls.w	8004848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	3724      	adds	r7, #36	; 0x24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40013800 	.word	0x40013800
 8004b1c:	40020000 	.word	0x40020000
 8004b20:	40020400 	.word	0x40020400
 8004b24:	40020800 	.word	0x40020800
 8004b28:	40020c00 	.word	0x40020c00
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	40013c00 	.word	0x40013c00

08004b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	887b      	ldrh	r3, [r7, #2]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	73fb      	strb	r3, [r7, #15]
 8004b50:	e001      	b.n	8004b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b52:	2300      	movs	r3, #0
 8004b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	807b      	strh	r3, [r7, #2]
 8004b70:	4613      	mov	r3, r2
 8004b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b74:	787b      	ldrb	r3, [r7, #1]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b7a:	887a      	ldrh	r2, [r7, #2]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b80:	e003      	b.n	8004b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b82:	887b      	ldrh	r3, [r7, #2]
 8004b84:	041a      	lsls	r2, r3, #16
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	619a      	str	r2, [r3, #24]
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ba8:	887a      	ldrh	r2, [r7, #2]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4013      	ands	r3, r2
 8004bae:	041a      	lsls	r2, r3, #16
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	43d9      	mvns	r1, r3
 8004bb4:	887b      	ldrh	r3, [r7, #2]
 8004bb6:	400b      	ands	r3, r1
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	619a      	str	r2, [r3, #24]
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d006      	beq.n	8004bf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004be2:	4a05      	ldr	r2, [pc, #20]	; (8004bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004be4:	88fb      	ldrh	r3, [r7, #6]
 8004be6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 f806 	bl	8004bfc <HAL_GPIO_EXTI_Callback>
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40013c00 	.word	0x40013c00

08004bfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
	...

08004c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e12b      	b.n	8004e7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fe fa6a 	bl	8003114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2224      	movs	r2, #36	; 0x24
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0201 	bic.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c78:	f001 fede 	bl	8006a38 <HAL_RCC_GetPCLK1Freq>
 8004c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4a81      	ldr	r2, [pc, #516]	; (8004e88 <HAL_I2C_Init+0x274>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d807      	bhi.n	8004c98 <HAL_I2C_Init+0x84>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a80      	ldr	r2, [pc, #512]	; (8004e8c <HAL_I2C_Init+0x278>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	bf94      	ite	ls
 8004c90:	2301      	movls	r3, #1
 8004c92:	2300      	movhi	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	e006      	b.n	8004ca6 <HAL_I2C_Init+0x92>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4a7d      	ldr	r2, [pc, #500]	; (8004e90 <HAL_I2C_Init+0x27c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	bf94      	ite	ls
 8004ca0:	2301      	movls	r3, #1
 8004ca2:	2300      	movhi	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e0e7      	b.n	8004e7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4a78      	ldr	r2, [pc, #480]	; (8004e94 <HAL_I2C_Init+0x280>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	0c9b      	lsrs	r3, r3, #18
 8004cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4a6a      	ldr	r2, [pc, #424]	; (8004e88 <HAL_I2C_Init+0x274>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d802      	bhi.n	8004ce8 <HAL_I2C_Init+0xd4>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	e009      	b.n	8004cfc <HAL_I2C_Init+0xe8>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cee:	fb02 f303 	mul.w	r3, r2, r3
 8004cf2:	4a69      	ldr	r2, [pc, #420]	; (8004e98 <HAL_I2C_Init+0x284>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	099b      	lsrs	r3, r3, #6
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	430b      	orrs	r3, r1
 8004d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	495c      	ldr	r1, [pc, #368]	; (8004e88 <HAL_I2C_Init+0x274>)
 8004d18:	428b      	cmp	r3, r1
 8004d1a:	d819      	bhi.n	8004d50 <HAL_I2C_Init+0x13c>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	1e59      	subs	r1, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d2a:	1c59      	adds	r1, r3, #1
 8004d2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d30:	400b      	ands	r3, r1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_I2C_Init+0x138>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	1e59      	subs	r1, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d44:	3301      	adds	r3, #1
 8004d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4a:	e051      	b.n	8004df0 <HAL_I2C_Init+0x1dc>
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	e04f      	b.n	8004df0 <HAL_I2C_Init+0x1dc>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d111      	bne.n	8004d7c <HAL_I2C_Init+0x168>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	1e58      	subs	r0, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6859      	ldr	r1, [r3, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	440b      	add	r3, r1
 8004d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	e012      	b.n	8004da2 <HAL_I2C_Init+0x18e>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1e58      	subs	r0, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6859      	ldr	r1, [r3, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	0099      	lsls	r1, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d92:	3301      	adds	r3, #1
 8004d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bf0c      	ite	eq
 8004d9c:	2301      	moveq	r3, #1
 8004d9e:	2300      	movne	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_I2C_Init+0x196>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e022      	b.n	8004df0 <HAL_I2C_Init+0x1dc>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10e      	bne.n	8004dd0 <HAL_I2C_Init+0x1bc>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1e58      	subs	r0, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6859      	ldr	r1, [r3, #4]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	440b      	add	r3, r1
 8004dc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dce:	e00f      	b.n	8004df0 <HAL_I2C_Init+0x1dc>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1e58      	subs	r0, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6859      	ldr	r1, [r3, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	0099      	lsls	r1, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de6:	3301      	adds	r3, #1
 8004de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	6809      	ldr	r1, [r1, #0]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69da      	ldr	r2, [r3, #28]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6911      	ldr	r1, [r2, #16]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68d2      	ldr	r2, [r2, #12]
 8004e2a:	4311      	orrs	r1, r2
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	430b      	orrs	r3, r1
 8004e32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	000186a0 	.word	0x000186a0
 8004e8c:	001e847f 	.word	0x001e847f
 8004e90:	003d08ff 	.word	0x003d08ff
 8004e94:	431bde83 	.word	0x431bde83
 8004e98:	10624dd3 	.word	0x10624dd3

08004e9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	817b      	strh	r3, [r7, #10]
 8004eac:	4613      	mov	r3, r2
 8004eae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eb0:	f7fe fe60 	bl	8003b74 <HAL_GetTick>
 8004eb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	f040 80e0 	bne.w	8005084 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	2319      	movs	r3, #25
 8004eca:	2201      	movs	r2, #1
 8004ecc:	4970      	ldr	r1, [pc, #448]	; (8005090 <HAL_I2C_Master_Transmit+0x1f4>)
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 ff66 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
 8004edc:	e0d3      	b.n	8005086 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_I2C_Master_Transmit+0x50>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e0cc      	b.n	8005086 <HAL_I2C_Master_Transmit+0x1ea>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d007      	beq.n	8004f12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0201 	orr.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2221      	movs	r2, #33	; 0x21
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	893a      	ldrh	r2, [r7, #8]
 8004f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a50      	ldr	r2, [pc, #320]	; (8005094 <HAL_I2C_Master_Transmit+0x1f8>)
 8004f52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f54:	8979      	ldrh	r1, [r7, #10]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	6a3a      	ldr	r2, [r7, #32]
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fce8 	bl	8005930 <I2C_MasterRequestWrite>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e08d      	b.n	8005086 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	613b      	str	r3, [r7, #16]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f80:	e066      	b.n	8005050 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	6a39      	ldr	r1, [r7, #32]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 ffe0 	bl	8005f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00d      	beq.n	8004fae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d107      	bne.n	8004faa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e06b      	b.n	8005086 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	781a      	ldrb	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d11b      	bne.n	8005024 <HAL_I2C_Master_Transmit+0x188>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d017      	beq.n	8005024 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	781a      	ldrb	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	6a39      	ldr	r1, [r7, #32]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 ffd0 	bl	8005fce <I2C_WaitOnBTFFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00d      	beq.n	8005050 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	2b04      	cmp	r3, #4
 800503a:	d107      	bne.n	800504c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800504a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e01a      	b.n	8005086 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	2b00      	cmp	r3, #0
 8005056:	d194      	bne.n	8004f82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	e000      	b.n	8005086 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005084:	2302      	movs	r3, #2
  }
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	00100002 	.word	0x00100002
 8005094:	ffff0000 	.word	0xffff0000

08005098 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08c      	sub	sp, #48	; 0x30
 800509c:	af02      	add	r7, sp, #8
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	607a      	str	r2, [r7, #4]
 80050a2:	461a      	mov	r2, r3
 80050a4:	460b      	mov	r3, r1
 80050a6:	817b      	strh	r3, [r7, #10]
 80050a8:	4613      	mov	r3, r2
 80050aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050ac:	f7fe fd62 	bl	8003b74 <HAL_GetTick>
 80050b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	f040 820b 	bne.w	80054d6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	2319      	movs	r3, #25
 80050c6:	2201      	movs	r2, #1
 80050c8:	497c      	ldr	r1, [pc, #496]	; (80052bc <HAL_I2C_Master_Receive+0x224>)
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 fe68 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80050d6:	2302      	movs	r3, #2
 80050d8:	e1fe      	b.n	80054d8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_I2C_Master_Receive+0x50>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e1f7      	b.n	80054d8 <HAL_I2C_Master_Receive+0x440>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d007      	beq.n	800510e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800511c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2222      	movs	r2, #34	; 0x22
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2210      	movs	r2, #16
 800512a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	893a      	ldrh	r2, [r7, #8]
 800513e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4a5c      	ldr	r2, [pc, #368]	; (80052c0 <HAL_I2C_Master_Receive+0x228>)
 800514e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005150:	8979      	ldrh	r1, [r7, #10]
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fc6c 	bl	8005a34 <I2C_MasterRequestRead>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e1b8      	b.n	80054d8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	2b00      	cmp	r3, #0
 800516c:	d113      	bne.n	8005196 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800516e:	2300      	movs	r3, #0
 8005170:	623b      	str	r3, [r7, #32]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	623b      	str	r3, [r7, #32]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	623b      	str	r3, [r7, #32]
 8005182:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	e18c      	b.n	80054b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519a:	2b01      	cmp	r3, #1
 800519c:	d11b      	bne.n	80051d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	e16c      	b.n	80054b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d11b      	bne.n	8005216 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051fe:	2300      	movs	r3, #0
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	e14c      	b.n	80054b0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005224:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800523c:	e138      	b.n	80054b0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005242:	2b03      	cmp	r3, #3
 8005244:	f200 80f1 	bhi.w	800542a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524c:	2b01      	cmp	r3, #1
 800524e:	d123      	bne.n	8005298 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005252:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fefb 	bl	8006050 <I2C_WaitOnRXNEFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e139      	b.n	80054d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005296:	e10b      	b.n	80054b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529c:	2b02      	cmp	r3, #2
 800529e:	d14e      	bne.n	800533e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a6:	2200      	movs	r2, #0
 80052a8:	4906      	ldr	r1, [pc, #24]	; (80052c4 <HAL_I2C_Master_Receive+0x22c>)
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fd78 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d008      	beq.n	80052c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e10e      	b.n	80054d8 <HAL_I2C_Master_Receive+0x440>
 80052ba:	bf00      	nop
 80052bc:	00100002 	.word	0x00100002
 80052c0:	ffff0000 	.word	0xffff0000
 80052c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800533c:	e0b8      	b.n	80054b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	2200      	movs	r2, #0
 8005346:	4966      	ldr	r1, [pc, #408]	; (80054e0 <HAL_I2C_Master_Receive+0x448>)
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 fd29 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0bf      	b.n	80054d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	2200      	movs	r2, #0
 80053a2:	494f      	ldr	r1, [pc, #316]	; (80054e0 <HAL_I2C_Master_Receive+0x448>)
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fcfb 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e091      	b.n	80054d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005428:	e042      	b.n	80054b0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800542a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 fe0e 	bl	8006050 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e04c      	b.n	80054d8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b04      	cmp	r3, #4
 800547c:	d118      	bne.n	80054b0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549a:	3b01      	subs	r3, #1
 800549c:	b29a      	uxth	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f47f aec2 	bne.w	800523e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e000      	b.n	80054d8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
  }
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3728      	adds	r7, #40	; 0x28
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	00010004 	.word	0x00010004

080054e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08c      	sub	sp, #48	; 0x30
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	4608      	mov	r0, r1
 80054ee:	4611      	mov	r1, r2
 80054f0:	461a      	mov	r2, r3
 80054f2:	4603      	mov	r3, r0
 80054f4:	817b      	strh	r3, [r7, #10]
 80054f6:	460b      	mov	r3, r1
 80054f8:	813b      	strh	r3, [r7, #8]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054fe:	f7fe fb39 	bl	8003b74 <HAL_GetTick>
 8005502:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b20      	cmp	r3, #32
 800550e:	f040 8208 	bne.w	8005922 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	2319      	movs	r3, #25
 8005518:	2201      	movs	r2, #1
 800551a:	497b      	ldr	r1, [pc, #492]	; (8005708 <HAL_I2C_Mem_Read+0x224>)
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 fc3f 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005528:	2302      	movs	r3, #2
 800552a:	e1fb      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_I2C_Mem_Read+0x56>
 8005536:	2302      	movs	r3, #2
 8005538:	e1f4      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d007      	beq.n	8005560 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800556e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2222      	movs	r2, #34	; 0x22
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2240      	movs	r2, #64	; 0x40
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005590:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a5b      	ldr	r2, [pc, #364]	; (800570c <HAL_I2C_Mem_Read+0x228>)
 80055a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055a2:	88f8      	ldrh	r0, [r7, #6]
 80055a4:	893a      	ldrh	r2, [r7, #8]
 80055a6:	8979      	ldrh	r1, [r7, #10]
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	4603      	mov	r3, r0
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 fb0c 	bl	8005bd0 <I2C_RequestMemoryRead>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e1b0      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d113      	bne.n	80055f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ca:	2300      	movs	r3, #0
 80055cc:	623b      	str	r3, [r7, #32]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	623b      	str	r3, [r7, #32]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	623b      	str	r3, [r7, #32]
 80055de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	e184      	b.n	80058fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d11b      	bne.n	8005632 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005608:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800560a:	2300      	movs	r3, #0
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	61fb      	str	r3, [r7, #28]
 800561e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e164      	b.n	80058fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005636:	2b02      	cmp	r3, #2
 8005638:	d11b      	bne.n	8005672 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005648:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005658:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800565a:	2300      	movs	r3, #0
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	e144      	b.n	80058fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005688:	e138      	b.n	80058fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568e:	2b03      	cmp	r3, #3
 8005690:	f200 80f1 	bhi.w	8005876 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005698:	2b01      	cmp	r3, #1
 800569a:	d123      	bne.n	80056e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800569c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fcd5 	bl	8006050 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e139      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056e2:	e10b      	b.n	80058fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d14e      	bne.n	800578a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	2200      	movs	r2, #0
 80056f4:	4906      	ldr	r1, [pc, #24]	; (8005710 <HAL_I2C_Mem_Read+0x22c>)
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 fb52 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d008      	beq.n	8005714 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e10e      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
 8005706:	bf00      	nop
 8005708:	00100002 	.word	0x00100002
 800570c:	ffff0000 	.word	0xffff0000
 8005710:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691a      	ldr	r2, [r3, #16]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005772:	3b01      	subs	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005788:	e0b8      	b.n	80058fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	2200      	movs	r2, #0
 8005792:	4966      	ldr	r1, [pc, #408]	; (800592c <HAL_I2C_Mem_Read+0x448>)
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 fb03 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0bf      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	2200      	movs	r2, #0
 80057ee:	494f      	ldr	r1, [pc, #316]	; (800592c <HAL_I2C_Mem_Read+0x448>)
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 fad5 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e091      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800580e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691a      	ldr	r2, [r3, #16]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005874:	e042      	b.n	80058fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005878:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 fbe8 	bl	8006050 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e04c      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d118      	bne.n	80058fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005900:	2b00      	cmp	r3, #0
 8005902:	f47f aec2 	bne.w	800568a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	e000      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005922:	2302      	movs	r3, #2
  }
}
 8005924:	4618      	mov	r0, r3
 8005926:	3728      	adds	r7, #40	; 0x28
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	00010004 	.word	0x00010004

08005930 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	460b      	mov	r3, r1
 800593e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d006      	beq.n	800595a <I2C_MasterRequestWrite+0x2a>
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d003      	beq.n	800595a <I2C_MasterRequestWrite+0x2a>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005958:	d108      	bne.n	800596c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e00b      	b.n	8005984 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005970:	2b12      	cmp	r3, #18
 8005972:	d107      	bne.n	8005984 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005982:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 fa05 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00d      	beq.n	80059b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059aa:	d103      	bne.n	80059b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e035      	b.n	8005a24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059c0:	d108      	bne.n	80059d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059c2:	897b      	ldrh	r3, [r7, #10]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059d0:	611a      	str	r2, [r3, #16]
 80059d2:	e01b      	b.n	8005a0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059d4:	897b      	ldrh	r3, [r7, #10]
 80059d6:	11db      	asrs	r3, r3, #7
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	f003 0306 	and.w	r3, r3, #6
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f063 030f 	orn	r3, r3, #15
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	490e      	ldr	r1, [pc, #56]	; (8005a2c <I2C_MasterRequestWrite+0xfc>)
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fa2b 	bl	8005e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e010      	b.n	8005a24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a02:	897b      	ldrh	r3, [r7, #10]
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	4907      	ldr	r1, [pc, #28]	; (8005a30 <I2C_MasterRequestWrite+0x100>)
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 fa1b 	bl	8005e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	00010008 	.word	0x00010008
 8005a30:	00010002 	.word	0x00010002

08005a34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	607a      	str	r2, [r7, #4]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	460b      	mov	r3, r1
 8005a42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d006      	beq.n	8005a6e <I2C_MasterRequestRead+0x3a>
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d003      	beq.n	8005a6e <I2C_MasterRequestRead+0x3a>
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a6c:	d108      	bne.n	8005a80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e00b      	b.n	8005a98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	2b11      	cmp	r3, #17
 8005a86:	d107      	bne.n	8005a98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 f97b 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00d      	beq.n	8005acc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005abe:	d103      	bne.n	8005ac8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e079      	b.n	8005bc0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ad4:	d108      	bne.n	8005ae8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ad6:	897b      	ldrh	r3, [r7, #10]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	f043 0301 	orr.w	r3, r3, #1
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	611a      	str	r2, [r3, #16]
 8005ae6:	e05f      	b.n	8005ba8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ae8:	897b      	ldrh	r3, [r7, #10]
 8005aea:	11db      	asrs	r3, r3, #7
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	f003 0306 	and.w	r3, r3, #6
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	f063 030f 	orn	r3, r3, #15
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	4930      	ldr	r1, [pc, #192]	; (8005bc8 <I2C_MasterRequestRead+0x194>)
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f9a1 	bl	8005e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e054      	b.n	8005bc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b16:	897b      	ldrh	r3, [r7, #10]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	4929      	ldr	r1, [pc, #164]	; (8005bcc <I2C_MasterRequestRead+0x198>)
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 f991 	bl	8005e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e044      	b.n	8005bc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b36:	2300      	movs	r3, #0
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 f919 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00d      	beq.n	8005b90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b82:	d103      	bne.n	8005b8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e017      	b.n	8005bc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005b90:	897b      	ldrh	r3, [r7, #10]
 8005b92:	11db      	asrs	r3, r3, #7
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	f003 0306 	and.w	r3, r3, #6
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f063 030e 	orn	r3, r3, #14
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4907      	ldr	r1, [pc, #28]	; (8005bcc <I2C_MasterRequestRead+0x198>)
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f94d 	bl	8005e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	00010008 	.word	0x00010008
 8005bcc:	00010002 	.word	0x00010002

08005bd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af02      	add	r7, sp, #8
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	4608      	mov	r0, r1
 8005bda:	4611      	mov	r1, r2
 8005bdc:	461a      	mov	r2, r3
 8005bde:	4603      	mov	r3, r0
 8005be0:	817b      	strh	r3, [r7, #10]
 8005be2:	460b      	mov	r3, r1
 8005be4:	813b      	strh	r3, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bf8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 f8c2 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00d      	beq.n	8005c3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c30:	d103      	bne.n	8005c3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e0aa      	b.n	8005d94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c3e:	897b      	ldrh	r3, [r7, #10]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	6a3a      	ldr	r2, [r7, #32]
 8005c52:	4952      	ldr	r1, [pc, #328]	; (8005d9c <I2C_RequestMemoryRead+0x1cc>)
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 f8fa 	bl	8005e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e097      	b.n	8005d94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c7c:	6a39      	ldr	r1, [r7, #32]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f964 	bl	8005f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00d      	beq.n	8005ca6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d107      	bne.n	8005ca2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e076      	b.n	8005d94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ca6:	88fb      	ldrh	r3, [r7, #6]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d105      	bne.n	8005cb8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cac:	893b      	ldrh	r3, [r7, #8]
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	611a      	str	r2, [r3, #16]
 8005cb6:	e021      	b.n	8005cfc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005cb8:	893b      	ldrh	r3, [r7, #8]
 8005cba:	0a1b      	lsrs	r3, r3, #8
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc8:	6a39      	ldr	r1, [r7, #32]
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 f93e 	bl	8005f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00d      	beq.n	8005cf2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d107      	bne.n	8005cee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e050      	b.n	8005d94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cf2:	893b      	ldrh	r3, [r7, #8]
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfe:	6a39      	ldr	r1, [r7, #32]
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f923 	bl	8005f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00d      	beq.n	8005d28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d107      	bne.n	8005d24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e035      	b.n	8005d94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f82b 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00d      	beq.n	8005d6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5e:	d103      	bne.n	8005d68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e013      	b.n	8005d94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d6c:	897b      	ldrh	r3, [r7, #10]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f043 0301 	orr.w	r3, r3, #1
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	6a3a      	ldr	r2, [r7, #32]
 8005d80:	4906      	ldr	r1, [pc, #24]	; (8005d9c <I2C_RequestMemoryRead+0x1cc>)
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 f863 	bl	8005e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	00010002 	.word	0x00010002

08005da0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005db0:	e025      	b.n	8005dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d021      	beq.n	8005dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dba:	f7fd fedb 	bl	8003b74 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d302      	bcc.n	8005dd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d116      	bne.n	8005dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e023      	b.n	8005e46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d10d      	bne.n	8005e24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	43da      	mvns	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4013      	ands	r3, r2
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	bf0c      	ite	eq
 8005e1a:	2301      	moveq	r3, #1
 8005e1c:	2300      	movne	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	461a      	mov	r2, r3
 8005e22:	e00c      	b.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	43da      	mvns	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	bf0c      	ite	eq
 8005e36:	2301      	moveq	r3, #1
 8005e38:	2300      	movne	r3, #0
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d0b6      	beq.n	8005db2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e5c:	e051      	b.n	8005f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6c:	d123      	bne.n	8005eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f043 0204 	orr.w	r2, r3, #4
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e046      	b.n	8005f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d021      	beq.n	8005f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebe:	f7fd fe59 	bl	8003b74 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d302      	bcc.n	8005ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d116      	bne.n	8005f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f043 0220 	orr.w	r2, r3, #32
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e020      	b.n	8005f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	0c1b      	lsrs	r3, r3, #16
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d10c      	bne.n	8005f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	43da      	mvns	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4013      	ands	r3, r2
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bf14      	ite	ne
 8005f1e:	2301      	movne	r3, #1
 8005f20:	2300      	moveq	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	e00b      	b.n	8005f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	43da      	mvns	r2, r3
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	4013      	ands	r3, r2
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	bf14      	ite	ne
 8005f38:	2301      	movne	r3, #1
 8005f3a:	2300      	moveq	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d18d      	bne.n	8005e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f58:	e02d      	b.n	8005fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f8ce 	bl	80060fc <I2C_IsAcknowledgeFailed>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e02d      	b.n	8005fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d021      	beq.n	8005fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f72:	f7fd fdff 	bl	8003b74 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d302      	bcc.n	8005f88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d116      	bne.n	8005fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	f043 0220 	orr.w	r2, r3, #32
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e007      	b.n	8005fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc0:	2b80      	cmp	r3, #128	; 0x80
 8005fc2:	d1ca      	bne.n	8005f5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fda:	e02d      	b.n	8006038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f88d 	bl	80060fc <I2C_IsAcknowledgeFailed>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e02d      	b.n	8006048 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d021      	beq.n	8006038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff4:	f7fd fdbe 	bl	8003b74 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	429a      	cmp	r2, r3
 8006002:	d302      	bcc.n	800600a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d116      	bne.n	8006038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	f043 0220 	orr.w	r2, r3, #32
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e007      	b.n	8006048 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b04      	cmp	r3, #4
 8006044:	d1ca      	bne.n	8005fdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800605c:	e042      	b.n	80060e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b10      	cmp	r3, #16
 800606a:	d119      	bne.n	80060a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0210 	mvn.w	r2, #16
 8006074:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e029      	b.n	80060f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a0:	f7fd fd68 	bl	8003b74 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d302      	bcc.n	80060b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d116      	bne.n	80060e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d0:	f043 0220 	orr.w	r2, r3, #32
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e007      	b.n	80060f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ee:	2b40      	cmp	r3, #64	; 0x40
 80060f0:	d1b5      	bne.n	800605e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800610e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006112:	d11b      	bne.n	800614c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800611c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	f043 0204 	orr.w	r2, r3, #4
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e000      	b.n	800614e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
	...

0800615c <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8006164:	4b05      	ldr	r3, [pc, #20]	; (800617c <HAL_PWR_EnableWakeUpPin+0x20>)
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	4904      	ldr	r1, [pc, #16]	; (800617c <HAL_PWR_EnableWakeUpPin+0x20>)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4313      	orrs	r3, r2
 800616e:	604b      	str	r3, [r1, #4]
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	40007000 	.word	0x40007000

08006180 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8006188:	4b06      	ldr	r3, [pc, #24]	; (80061a4 <HAL_PWR_DisableWakeUpPin+0x24>)
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	43db      	mvns	r3, r3
 8006190:	4904      	ldr	r1, [pc, #16]	; (80061a4 <HAL_PWR_DisableWakeUpPin+0x24>)
 8006192:	4013      	ands	r3, r2
 8006194:	604b      	str	r3, [r1, #4]
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40007000 	.word	0x40007000

080061a8 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80061ac:	4b08      	ldr	r3, [pc, #32]	; (80061d0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a07      	ldr	r2, [pc, #28]	; (80061d0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80061b2:	f043 0302 	orr.w	r3, r3, #2
 80061b6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	4a05      	ldr	r2, [pc, #20]	; (80061d4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80061be:	f043 0304 	orr.w	r3, r3, #4
 80061c2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80061c4:	bf30      	wfi
}
 80061c6:	bf00      	nop
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	40007000 	.word	0x40007000
 80061d4:	e000ed00 	.word	0xe000ed00

080061d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e267      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d075      	beq.n	80062e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061f6:	4b88      	ldr	r3, [pc, #544]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d00c      	beq.n	800621c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006202:	4b85      	ldr	r3, [pc, #532]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800620a:	2b08      	cmp	r3, #8
 800620c:	d112      	bne.n	8006234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800620e:	4b82      	ldr	r3, [pc, #520]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800621a:	d10b      	bne.n	8006234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800621c:	4b7e      	ldr	r3, [pc, #504]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d05b      	beq.n	80062e0 <HAL_RCC_OscConfig+0x108>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d157      	bne.n	80062e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e242      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623c:	d106      	bne.n	800624c <HAL_RCC_OscConfig+0x74>
 800623e:	4b76      	ldr	r3, [pc, #472]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a75      	ldr	r2, [pc, #468]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 8006244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e01d      	b.n	8006288 <HAL_RCC_OscConfig+0xb0>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006254:	d10c      	bne.n	8006270 <HAL_RCC_OscConfig+0x98>
 8006256:	4b70      	ldr	r3, [pc, #448]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a6f      	ldr	r2, [pc, #444]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 800625c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	4b6d      	ldr	r3, [pc, #436]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a6c      	ldr	r2, [pc, #432]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 8006268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e00b      	b.n	8006288 <HAL_RCC_OscConfig+0xb0>
 8006270:	4b69      	ldr	r3, [pc, #420]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a68      	ldr	r2, [pc, #416]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 8006276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	4b66      	ldr	r3, [pc, #408]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a65      	ldr	r2, [pc, #404]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 8006282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d013      	beq.n	80062b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006290:	f7fd fc70 	bl	8003b74 <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006298:	f7fd fc6c 	bl	8003b74 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b64      	cmp	r3, #100	; 0x64
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e207      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062aa:	4b5b      	ldr	r3, [pc, #364]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0f0      	beq.n	8006298 <HAL_RCC_OscConfig+0xc0>
 80062b6:	e014      	b.n	80062e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b8:	f7fd fc5c 	bl	8003b74 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062c0:	f7fd fc58 	bl	8003b74 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b64      	cmp	r3, #100	; 0x64
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e1f3      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062d2:	4b51      	ldr	r3, [pc, #324]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <HAL_RCC_OscConfig+0xe8>
 80062de:	e000      	b.n	80062e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d063      	beq.n	80063b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062ee:	4b4a      	ldr	r3, [pc, #296]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 030c 	and.w	r3, r3, #12
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00b      	beq.n	8006312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062fa:	4b47      	ldr	r3, [pc, #284]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006302:	2b08      	cmp	r3, #8
 8006304:	d11c      	bne.n	8006340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006306:	4b44      	ldr	r3, [pc, #272]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d116      	bne.n	8006340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006312:	4b41      	ldr	r3, [pc, #260]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d005      	beq.n	800632a <HAL_RCC_OscConfig+0x152>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d001      	beq.n	800632a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e1c7      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632a:	4b3b      	ldr	r3, [pc, #236]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	4937      	ldr	r1, [pc, #220]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 800633a:	4313      	orrs	r3, r2
 800633c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800633e:	e03a      	b.n	80063b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d020      	beq.n	800638a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006348:	4b34      	ldr	r3, [pc, #208]	; (800641c <HAL_RCC_OscConfig+0x244>)
 800634a:	2201      	movs	r2, #1
 800634c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634e:	f7fd fc11 	bl	8003b74 <HAL_GetTick>
 8006352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006354:	e008      	b.n	8006368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006356:	f7fd fc0d 	bl	8003b74 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e1a8      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006368:	4b2b      	ldr	r3, [pc, #172]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0f0      	beq.n	8006356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006374:	4b28      	ldr	r3, [pc, #160]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	4925      	ldr	r1, [pc, #148]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 8006384:	4313      	orrs	r3, r2
 8006386:	600b      	str	r3, [r1, #0]
 8006388:	e015      	b.n	80063b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800638a:	4b24      	ldr	r3, [pc, #144]	; (800641c <HAL_RCC_OscConfig+0x244>)
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006390:	f7fd fbf0 	bl	8003b74 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006398:	f7fd fbec 	bl	8003b74 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e187      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063aa:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1f0      	bne.n	8006398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d036      	beq.n	8006430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d016      	beq.n	80063f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ca:	4b15      	ldr	r3, [pc, #84]	; (8006420 <HAL_RCC_OscConfig+0x248>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d0:	f7fd fbd0 	bl	8003b74 <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d6:	e008      	b.n	80063ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063d8:	f7fd fbcc 	bl	8003b74 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e167      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ea:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <HAL_RCC_OscConfig+0x240>)
 80063ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0f0      	beq.n	80063d8 <HAL_RCC_OscConfig+0x200>
 80063f6:	e01b      	b.n	8006430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063f8:	4b09      	ldr	r3, [pc, #36]	; (8006420 <HAL_RCC_OscConfig+0x248>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063fe:	f7fd fbb9 	bl	8003b74 <HAL_GetTick>
 8006402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006404:	e00e      	b.n	8006424 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006406:	f7fd fbb5 	bl	8003b74 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d907      	bls.n	8006424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e150      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
 8006418:	40023800 	.word	0x40023800
 800641c:	42470000 	.word	0x42470000
 8006420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006424:	4b88      	ldr	r3, [pc, #544]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 8006426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1ea      	bne.n	8006406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 8097 	beq.w	800656c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800643e:	2300      	movs	r3, #0
 8006440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006442:	4b81      	ldr	r3, [pc, #516]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10f      	bne.n	800646e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	4b7d      	ldr	r3, [pc, #500]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	4a7c      	ldr	r2, [pc, #496]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 8006458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800645c:	6413      	str	r3, [r2, #64]	; 0x40
 800645e:	4b7a      	ldr	r3, [pc, #488]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006466:	60bb      	str	r3, [r7, #8]
 8006468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800646a:	2301      	movs	r3, #1
 800646c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800646e:	4b77      	ldr	r3, [pc, #476]	; (800664c <HAL_RCC_OscConfig+0x474>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006476:	2b00      	cmp	r3, #0
 8006478:	d118      	bne.n	80064ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800647a:	4b74      	ldr	r3, [pc, #464]	; (800664c <HAL_RCC_OscConfig+0x474>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a73      	ldr	r2, [pc, #460]	; (800664c <HAL_RCC_OscConfig+0x474>)
 8006480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006486:	f7fd fb75 	bl	8003b74 <HAL_GetTick>
 800648a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648c:	e008      	b.n	80064a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800648e:	f7fd fb71 	bl	8003b74 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e10c      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064a0:	4b6a      	ldr	r3, [pc, #424]	; (800664c <HAL_RCC_OscConfig+0x474>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0f0      	beq.n	800648e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d106      	bne.n	80064c2 <HAL_RCC_OscConfig+0x2ea>
 80064b4:	4b64      	ldr	r3, [pc, #400]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 80064b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b8:	4a63      	ldr	r2, [pc, #396]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	6713      	str	r3, [r2, #112]	; 0x70
 80064c0:	e01c      	b.n	80064fc <HAL_RCC_OscConfig+0x324>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b05      	cmp	r3, #5
 80064c8:	d10c      	bne.n	80064e4 <HAL_RCC_OscConfig+0x30c>
 80064ca:	4b5f      	ldr	r3, [pc, #380]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 80064cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ce:	4a5e      	ldr	r2, [pc, #376]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 80064d0:	f043 0304 	orr.w	r3, r3, #4
 80064d4:	6713      	str	r3, [r2, #112]	; 0x70
 80064d6:	4b5c      	ldr	r3, [pc, #368]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 80064d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064da:	4a5b      	ldr	r2, [pc, #364]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 80064dc:	f043 0301 	orr.w	r3, r3, #1
 80064e0:	6713      	str	r3, [r2, #112]	; 0x70
 80064e2:	e00b      	b.n	80064fc <HAL_RCC_OscConfig+0x324>
 80064e4:	4b58      	ldr	r3, [pc, #352]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 80064e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e8:	4a57      	ldr	r2, [pc, #348]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 80064ea:	f023 0301 	bic.w	r3, r3, #1
 80064ee:	6713      	str	r3, [r2, #112]	; 0x70
 80064f0:	4b55      	ldr	r3, [pc, #340]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 80064f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f4:	4a54      	ldr	r2, [pc, #336]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 80064f6:	f023 0304 	bic.w	r3, r3, #4
 80064fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d015      	beq.n	8006530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006504:	f7fd fb36 	bl	8003b74 <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650a:	e00a      	b.n	8006522 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800650c:	f7fd fb32 	bl	8003b74 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	f241 3288 	movw	r2, #5000	; 0x1388
 800651a:	4293      	cmp	r3, r2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e0cb      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006522:	4b49      	ldr	r3, [pc, #292]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 8006524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0ee      	beq.n	800650c <HAL_RCC_OscConfig+0x334>
 800652e:	e014      	b.n	800655a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006530:	f7fd fb20 	bl	8003b74 <HAL_GetTick>
 8006534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006536:	e00a      	b.n	800654e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006538:	f7fd fb1c 	bl	8003b74 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	f241 3288 	movw	r2, #5000	; 0x1388
 8006546:	4293      	cmp	r3, r2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e0b5      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800654e:	4b3e      	ldr	r3, [pc, #248]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 8006550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1ee      	bne.n	8006538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d105      	bne.n	800656c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006560:	4b39      	ldr	r3, [pc, #228]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 8006562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006564:	4a38      	ldr	r2, [pc, #224]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 8006566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800656a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 80a1 	beq.w	80066b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006576:	4b34      	ldr	r3, [pc, #208]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 030c 	and.w	r3, r3, #12
 800657e:	2b08      	cmp	r3, #8
 8006580:	d05c      	beq.n	800663c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	2b02      	cmp	r3, #2
 8006588:	d141      	bne.n	800660e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800658a:	4b31      	ldr	r3, [pc, #196]	; (8006650 <HAL_RCC_OscConfig+0x478>)
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006590:	f7fd faf0 	bl	8003b74 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006598:	f7fd faec 	bl	8003b74 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e087      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065aa:	4b27      	ldr	r3, [pc, #156]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f0      	bne.n	8006598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69da      	ldr	r2, [r3, #28]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	019b      	lsls	r3, r3, #6
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	3b01      	subs	r3, #1
 80065d0:	041b      	lsls	r3, r3, #16
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	061b      	lsls	r3, r3, #24
 80065da:	491b      	ldr	r1, [pc, #108]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065e0:	4b1b      	ldr	r3, [pc, #108]	; (8006650 <HAL_RCC_OscConfig+0x478>)
 80065e2:	2201      	movs	r2, #1
 80065e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e6:	f7fd fac5 	bl	8003b74 <HAL_GetTick>
 80065ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ec:	e008      	b.n	8006600 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ee:	f7fd fac1 	bl	8003b74 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d901      	bls.n	8006600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e05c      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006600:	4b11      	ldr	r3, [pc, #68]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0f0      	beq.n	80065ee <HAL_RCC_OscConfig+0x416>
 800660c:	e054      	b.n	80066b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800660e:	4b10      	ldr	r3, [pc, #64]	; (8006650 <HAL_RCC_OscConfig+0x478>)
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006614:	f7fd faae 	bl	8003b74 <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800661c:	f7fd faaa 	bl	8003b74 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e045      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800662e:	4b06      	ldr	r3, [pc, #24]	; (8006648 <HAL_RCC_OscConfig+0x470>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f0      	bne.n	800661c <HAL_RCC_OscConfig+0x444>
 800663a:	e03d      	b.n	80066b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d107      	bne.n	8006654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e038      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
 8006648:	40023800 	.word	0x40023800
 800664c:	40007000 	.word	0x40007000
 8006650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006654:	4b1b      	ldr	r3, [pc, #108]	; (80066c4 <HAL_RCC_OscConfig+0x4ec>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d028      	beq.n	80066b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800666c:	429a      	cmp	r2, r3
 800666e:	d121      	bne.n	80066b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667a:	429a      	cmp	r2, r3
 800667c:	d11a      	bne.n	80066b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006684:	4013      	ands	r3, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800668a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800668c:	4293      	cmp	r3, r2
 800668e:	d111      	bne.n	80066b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669a:	085b      	lsrs	r3, r3, #1
 800669c:	3b01      	subs	r3, #1
 800669e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d107      	bne.n	80066b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d001      	beq.n	80066b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40023800 	.word	0x40023800

080066c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e0cc      	b.n	8006876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066dc:	4b68      	ldr	r3, [pc, #416]	; (8006880 <HAL_RCC_ClockConfig+0x1b8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d90c      	bls.n	8006704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ea:	4b65      	ldr	r3, [pc, #404]	; (8006880 <HAL_RCC_ClockConfig+0x1b8>)
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f2:	4b63      	ldr	r3, [pc, #396]	; (8006880 <HAL_RCC_ClockConfig+0x1b8>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d001      	beq.n	8006704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e0b8      	b.n	8006876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d020      	beq.n	8006752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800671c:	4b59      	ldr	r3, [pc, #356]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	4a58      	ldr	r2, [pc, #352]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0308 	and.w	r3, r3, #8
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006734:	4b53      	ldr	r3, [pc, #332]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	4a52      	ldr	r2, [pc, #328]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800673e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006740:	4b50      	ldr	r3, [pc, #320]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	494d      	ldr	r1, [pc, #308]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 800674e:	4313      	orrs	r3, r2
 8006750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d044      	beq.n	80067e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d107      	bne.n	8006776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006766:	4b47      	ldr	r3, [pc, #284]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d119      	bne.n	80067a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e07f      	b.n	8006876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d003      	beq.n	8006786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006782:	2b03      	cmp	r3, #3
 8006784:	d107      	bne.n	8006796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006786:	4b3f      	ldr	r3, [pc, #252]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d109      	bne.n	80067a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e06f      	b.n	8006876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006796:	4b3b      	ldr	r3, [pc, #236]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e067      	b.n	8006876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067a6:	4b37      	ldr	r3, [pc, #220]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f023 0203 	bic.w	r2, r3, #3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	4934      	ldr	r1, [pc, #208]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067b8:	f7fd f9dc 	bl	8003b74 <HAL_GetTick>
 80067bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067be:	e00a      	b.n	80067d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067c0:	f7fd f9d8 	bl	8003b74 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e04f      	b.n	8006876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d6:	4b2b      	ldr	r3, [pc, #172]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 020c 	and.w	r2, r3, #12
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d1eb      	bne.n	80067c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067e8:	4b25      	ldr	r3, [pc, #148]	; (8006880 <HAL_RCC_ClockConfig+0x1b8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d20c      	bcs.n	8006810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067f6:	4b22      	ldr	r3, [pc, #136]	; (8006880 <HAL_RCC_ClockConfig+0x1b8>)
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fe:	4b20      	ldr	r3, [pc, #128]	; (8006880 <HAL_RCC_ClockConfig+0x1b8>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d001      	beq.n	8006810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e032      	b.n	8006876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d008      	beq.n	800682e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800681c:	4b19      	ldr	r3, [pc, #100]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	4916      	ldr	r1, [pc, #88]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 800682a:	4313      	orrs	r3, r2
 800682c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d009      	beq.n	800684e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800683a:	4b12      	ldr	r3, [pc, #72]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	490e      	ldr	r1, [pc, #56]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 800684a:	4313      	orrs	r3, r2
 800684c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800684e:	f000 f821 	bl	8006894 <HAL_RCC_GetSysClockFreq>
 8006852:	4602      	mov	r2, r0
 8006854:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	091b      	lsrs	r3, r3, #4
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	490a      	ldr	r1, [pc, #40]	; (8006888 <HAL_RCC_ClockConfig+0x1c0>)
 8006860:	5ccb      	ldrb	r3, [r1, r3]
 8006862:	fa22 f303 	lsr.w	r3, r2, r3
 8006866:	4a09      	ldr	r2, [pc, #36]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 8006868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800686a:	4b09      	ldr	r3, [pc, #36]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f7fd f93c 	bl	8003aec <HAL_InitTick>

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40023c00 	.word	0x40023c00
 8006884:	40023800 	.word	0x40023800
 8006888:	0800b3f4 	.word	0x0800b3f4
 800688c:	20000000 	.word	0x20000000
 8006890:	20000008 	.word	0x20000008

08006894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006898:	b090      	sub	sp, #64	; 0x40
 800689a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	637b      	str	r3, [r7, #52]	; 0x34
 80068a0:	2300      	movs	r3, #0
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a4:	2300      	movs	r3, #0
 80068a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068ac:	4b59      	ldr	r3, [pc, #356]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 030c 	and.w	r3, r3, #12
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d00d      	beq.n	80068d4 <HAL_RCC_GetSysClockFreq+0x40>
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	f200 80a1 	bhi.w	8006a00 <HAL_RCC_GetSysClockFreq+0x16c>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <HAL_RCC_GetSysClockFreq+0x34>
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d003      	beq.n	80068ce <HAL_RCC_GetSysClockFreq+0x3a>
 80068c6:	e09b      	b.n	8006a00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068c8:	4b53      	ldr	r3, [pc, #332]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x184>)
 80068ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80068cc:	e09b      	b.n	8006a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ce:	4b53      	ldr	r3, [pc, #332]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x188>)
 80068d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80068d2:	e098      	b.n	8006a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068d4:	4b4f      	ldr	r3, [pc, #316]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068de:	4b4d      	ldr	r3, [pc, #308]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d028      	beq.n	800693c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068ea:	4b4a      	ldr	r3, [pc, #296]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	099b      	lsrs	r3, r3, #6
 80068f0:	2200      	movs	r2, #0
 80068f2:	623b      	str	r3, [r7, #32]
 80068f4:	627a      	str	r2, [r7, #36]	; 0x24
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80068fc:	2100      	movs	r1, #0
 80068fe:	4b47      	ldr	r3, [pc, #284]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x188>)
 8006900:	fb03 f201 	mul.w	r2, r3, r1
 8006904:	2300      	movs	r3, #0
 8006906:	fb00 f303 	mul.w	r3, r0, r3
 800690a:	4413      	add	r3, r2
 800690c:	4a43      	ldr	r2, [pc, #268]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x188>)
 800690e:	fba0 1202 	umull	r1, r2, r0, r2
 8006912:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006914:	460a      	mov	r2, r1
 8006916:	62ba      	str	r2, [r7, #40]	; 0x28
 8006918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800691a:	4413      	add	r3, r2
 800691c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800691e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006920:	2200      	movs	r2, #0
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	61fa      	str	r2, [r7, #28]
 8006926:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800692a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800692e:	f7fa f993 	bl	8000c58 <__aeabi_uldivmod>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4613      	mov	r3, r2
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800693a:	e053      	b.n	80069e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800693c:	4b35      	ldr	r3, [pc, #212]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x180>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	099b      	lsrs	r3, r3, #6
 8006942:	2200      	movs	r2, #0
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	617a      	str	r2, [r7, #20]
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800694e:	f04f 0b00 	mov.w	fp, #0
 8006952:	4652      	mov	r2, sl
 8006954:	465b      	mov	r3, fp
 8006956:	f04f 0000 	mov.w	r0, #0
 800695a:	f04f 0100 	mov.w	r1, #0
 800695e:	0159      	lsls	r1, r3, #5
 8006960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006964:	0150      	lsls	r0, r2, #5
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	ebb2 080a 	subs.w	r8, r2, sl
 800696e:	eb63 090b 	sbc.w	r9, r3, fp
 8006972:	f04f 0200 	mov.w	r2, #0
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800697e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006982:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006986:	ebb2 0408 	subs.w	r4, r2, r8
 800698a:	eb63 0509 	sbc.w	r5, r3, r9
 800698e:	f04f 0200 	mov.w	r2, #0
 8006992:	f04f 0300 	mov.w	r3, #0
 8006996:	00eb      	lsls	r3, r5, #3
 8006998:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800699c:	00e2      	lsls	r2, r4, #3
 800699e:	4614      	mov	r4, r2
 80069a0:	461d      	mov	r5, r3
 80069a2:	eb14 030a 	adds.w	r3, r4, sl
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	eb45 030b 	adc.w	r3, r5, fp
 80069ac:	607b      	str	r3, [r7, #4]
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069ba:	4629      	mov	r1, r5
 80069bc:	028b      	lsls	r3, r1, #10
 80069be:	4621      	mov	r1, r4
 80069c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069c4:	4621      	mov	r1, r4
 80069c6:	028a      	lsls	r2, r1, #10
 80069c8:	4610      	mov	r0, r2
 80069ca:	4619      	mov	r1, r3
 80069cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ce:	2200      	movs	r2, #0
 80069d0:	60bb      	str	r3, [r7, #8]
 80069d2:	60fa      	str	r2, [r7, #12]
 80069d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069d8:	f7fa f93e 	bl	8000c58 <__aeabi_uldivmod>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4613      	mov	r3, r2
 80069e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069e4:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	f003 0303 	and.w	r3, r3, #3
 80069ee:	3301      	adds	r3, #1
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80069f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069fe:	e002      	b.n	8006a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a00:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3740      	adds	r7, #64	; 0x40
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a12:	bf00      	nop
 8006a14:	40023800 	.word	0x40023800
 8006a18:	00f42400 	.word	0x00f42400
 8006a1c:	017d7840 	.word	0x017d7840

08006a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a24:	4b03      	ldr	r3, [pc, #12]	; (8006a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a26:	681b      	ldr	r3, [r3, #0]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	20000000 	.word	0x20000000

08006a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a3c:	f7ff fff0 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8006a40:	4602      	mov	r2, r0
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	0a9b      	lsrs	r3, r3, #10
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	4903      	ldr	r1, [pc, #12]	; (8006a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a4e:	5ccb      	ldrb	r3, [r1, r3]
 8006a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	0800b404 	.word	0x0800b404

08006a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a64:	f7ff ffdc 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	0b5b      	lsrs	r3, r3, #13
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	4903      	ldr	r1, [pc, #12]	; (8006a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a76:	5ccb      	ldrb	r3, [r1, r3]
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40023800 	.word	0x40023800
 8006a84:	0800b404 	.word	0x0800b404

08006a88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d105      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d035      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ab0:	4b67      	ldr	r3, [pc, #412]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ab6:	f7fd f85d 	bl	8003b74 <HAL_GetTick>
 8006aba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006abc:	e008      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006abe:	f7fd f859 	bl	8003b74 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e0ba      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ad0:	4b60      	ldr	r3, [pc, #384]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1f0      	bne.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	019a      	lsls	r2, r3, #6
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	071b      	lsls	r3, r3, #28
 8006ae8:	495a      	ldr	r1, [pc, #360]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006af0:	4b57      	ldr	r3, [pc, #348]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006af2:	2201      	movs	r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006af6:	f7fd f83d 	bl	8003b74 <HAL_GetTick>
 8006afa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006afc:	e008      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006afe:	f7fd f839 	bl	8003b74 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e09a      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b10:	4b50      	ldr	r3, [pc, #320]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0f0      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 8083 	beq.w	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	4b49      	ldr	r3, [pc, #292]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	4a48      	ldr	r2, [pc, #288]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b38:	6413      	str	r3, [r2, #64]	; 0x40
 8006b3a:	4b46      	ldr	r3, [pc, #280]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b46:	4b44      	ldr	r3, [pc, #272]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a43      	ldr	r2, [pc, #268]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b52:	f7fd f80f 	bl	8003b74 <HAL_GetTick>
 8006b56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b58:	e008      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b5a:	f7fd f80b 	bl	8003b74 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e06c      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b6c:	4b3a      	ldr	r3, [pc, #232]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d0f0      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b78:	4b36      	ldr	r3, [pc, #216]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b80:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d02f      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d028      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b96:	4b2f      	ldr	r3, [pc, #188]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ba0:	4b2e      	ldr	r3, [pc, #184]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ba6:	4b2d      	ldr	r3, [pc, #180]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006bac:	4a29      	ldr	r2, [pc, #164]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006bb2:	4b28      	ldr	r3, [pc, #160]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d114      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006bbe:	f7fc ffd9 	bl	8003b74 <HAL_GetTick>
 8006bc2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc4:	e00a      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bc6:	f7fc ffd5 	bl	8003b74 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e034      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bdc:	4b1d      	ldr	r3, [pc, #116]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0ee      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bf4:	d10d      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006bf6:	4b17      	ldr	r3, [pc, #92]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0a:	4912      	ldr	r1, [pc, #72]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	608b      	str	r3, [r1, #8]
 8006c10:	e005      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006c12:	4b10      	ldr	r3, [pc, #64]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	4a0f      	ldr	r2, [pc, #60]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c1c:	6093      	str	r3, [r2, #8]
 8006c1e:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c2a:	490a      	ldr	r1, [pc, #40]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	7c1a      	ldrb	r2, [r3, #16]
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006c42:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	42470068 	.word	0x42470068
 8006c54:	40023800 	.word	0x40023800
 8006c58:	40007000 	.word	0x40007000
 8006c5c:	42470e40 	.word	0x42470e40
 8006c60:	424711e0 	.word	0x424711e0

08006c64 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e066      	b.n	8006d48 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	7f5b      	ldrb	r3, [r3, #29]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d105      	bne.n	8006c90 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fc fa8a 	bl	80031a4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	22ca      	movs	r2, #202	; 0xca
 8006c9c:	625a      	str	r2, [r3, #36]	; 0x24
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2253      	movs	r2, #83	; 0x53
 8006ca4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa45 	bl	8007136 <RTC_EnterInitMode>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d12c      	bne.n	8006d10 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6812      	ldr	r2, [r2, #0]
 8006cc0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6899      	ldr	r1, [r3, #8]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	68d2      	ldr	r2, [r2, #12]
 8006cf0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6919      	ldr	r1, [r3, #16]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	041a      	lsls	r2, r3, #16
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fa4c 	bl	80071a4 <RTC_ExitInitMode>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d113      	bne.n	8006d3e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d24:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	699a      	ldr	r2, [r3, #24]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	22ff      	movs	r2, #255	; 0xff
 8006d44:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006d50:	b590      	push	{r4, r7, lr}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	7f1b      	ldrb	r3, [r3, #28]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_RTC_SetTime+0x1c>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e087      	b.n	8006e7c <HAL_RTC_SetTime+0x12c>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2202      	movs	r2, #2
 8006d76:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d126      	bne.n	8006dcc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fa29 	bl	80071ee <RTC_ByteToBcd2>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	785b      	ldrb	r3, [r3, #1]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fa22 	bl	80071ee <RTC_ByteToBcd2>
 8006daa:	4603      	mov	r3, r0
 8006dac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006dae:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	789b      	ldrb	r3, [r3, #2]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fa1a 	bl	80071ee <RTC_ByteToBcd2>
 8006dba:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006dbc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	78db      	ldrb	r3, [r3, #3]
 8006dc4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	e018      	b.n	8006dfe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	785b      	ldrb	r3, [r3, #1]
 8006dea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006dec:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006df2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	78db      	ldrb	r3, [r3, #3]
 8006df8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	22ca      	movs	r2, #202	; 0xca
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2253      	movs	r2, #83	; 0x53
 8006e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 f991 	bl	8007136 <RTC_EnterInitMode>
 8006e14:	4603      	mov	r3, r0
 8006e16:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006e18:	7cfb      	ldrb	r3, [r7, #19]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d120      	bne.n	8006e60 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006e28:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006e2c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6899      	ldr	r1, [r3, #8]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	68da      	ldr	r2, [r3, #12]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 f9a4 	bl	80071a4 <RTC_ExitInitMode>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006e60:	7cfb      	ldrb	r3, [r7, #19]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d102      	bne.n	8006e6c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	22ff      	movs	r2, #255	; 0xff
 8006e72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	771a      	strb	r2, [r3, #28]

  return status;
 8006e7a:	7cfb      	ldrb	r3, [r7, #19]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	371c      	adds	r7, #28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd90      	pop	{r4, r7, pc}

08006e84 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006eb6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006eba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	0c1b      	lsrs	r3, r3, #16
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	0a1b      	lsrs	r3, r3, #8
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	0d9b      	lsrs	r3, r3, #22
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d11a      	bne.n	8006f36 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 f98f 	bl	8007228 <RTC_Bcd2ToByte>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	785b      	ldrb	r3, [r3, #1]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 f986 	bl	8007228 <RTC_Bcd2ToByte>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	461a      	mov	r2, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	789b      	ldrb	r3, [r3, #2]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 f97d 	bl	8007228 <RTC_Bcd2ToByte>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	461a      	mov	r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006f40:	b590      	push	{r4, r7, lr}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	7f1b      	ldrb	r3, [r3, #28]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d101      	bne.n	8006f5c <HAL_RTC_SetDate+0x1c>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e071      	b.n	8007040 <HAL_RTC_SetDate+0x100>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2202      	movs	r2, #2
 8006f66:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10e      	bne.n	8006f8c <HAL_RTC_SetDate+0x4c>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	785b      	ldrb	r3, [r3, #1]
 8006f72:	f003 0310 	and.w	r3, r3, #16
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d008      	beq.n	8006f8c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	f023 0310 	bic.w	r3, r3, #16
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	330a      	adds	r3, #10
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d11c      	bne.n	8006fcc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	78db      	ldrb	r3, [r3, #3]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f929 	bl	80071ee <RTC_ByteToBcd2>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 f922 	bl	80071ee <RTC_ByteToBcd2>
 8006faa:	4603      	mov	r3, r0
 8006fac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006fae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	789b      	ldrb	r3, [r3, #2]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 f91a 	bl	80071ee <RTC_ByteToBcd2>
 8006fba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006fbc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	e00e      	b.n	8006fea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	78db      	ldrb	r3, [r3, #3]
 8006fd0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	785b      	ldrb	r3, [r3, #1]
 8006fd6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006fd8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006fde:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	22ca      	movs	r2, #202	; 0xca
 8006ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2253      	movs	r2, #83	; 0x53
 8006ff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 f89b 	bl	8007136 <RTC_EnterInitMode>
 8007000:	4603      	mov	r3, r0
 8007002:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007004:	7cfb      	ldrb	r3, [r7, #19]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10c      	bne.n	8007024 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007014:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007018:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 f8c2 	bl	80071a4 <RTC_ExitInitMode>
 8007020:	4603      	mov	r3, r0
 8007022:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007024:	7cfb      	ldrb	r3, [r7, #19]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d102      	bne.n	8007030 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2201      	movs	r2, #1
 800702e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	22ff      	movs	r2, #255	; 0xff
 8007036:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	771a      	strb	r2, [r3, #28]

  return status;
 800703e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007040:	4618      	mov	r0, r3
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	bd90      	pop	{r4, r7, pc}

08007048 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007062:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007066:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	0c1b      	lsrs	r3, r3, #16
 800706c:	b2da      	uxtb	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	0a1b      	lsrs	r3, r3, #8
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f003 031f 	and.w	r3, r3, #31
 800707c:	b2da      	uxtb	r2, r3
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800708a:	b2da      	uxtb	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	0b5b      	lsrs	r3, r3, #13
 8007094:	b2db      	uxtb	r3, r3
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	b2da      	uxtb	r2, r3
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d11a      	bne.n	80070dc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	78db      	ldrb	r3, [r3, #3]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f8bc 	bl	8007228 <RTC_Bcd2ToByte>
 80070b0:	4603      	mov	r3, r0
 80070b2:	461a      	mov	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	785b      	ldrb	r3, [r3, #1]
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 f8b3 	bl	8007228 <RTC_Bcd2ToByte>
 80070c2:	4603      	mov	r3, r0
 80070c4:	461a      	mov	r2, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	789b      	ldrb	r3, [r3, #2]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 f8aa 	bl	8007228 <RTC_Bcd2ToByte>
 80070d4:	4603      	mov	r3, r0
 80070d6:	461a      	mov	r2, r3
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007100:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007102:	f7fc fd37 	bl	8003b74 <HAL_GetTick>
 8007106:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007108:	e009      	b.n	800711e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800710a:	f7fc fd33 	bl	8003b74 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007118:	d901      	bls.n	800711e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e007      	b.n	800712e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 0320 	and.w	r3, r3, #32
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0ee      	beq.n	800710a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007150:	2b00      	cmp	r3, #0
 8007152:	d122      	bne.n	800719a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007162:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007164:	f7fc fd06 	bl	8003b74 <HAL_GetTick>
 8007168:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800716a:	e00c      	b.n	8007186 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800716c:	f7fc fd02 	bl	8003b74 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800717a:	d904      	bls.n	8007186 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2204      	movs	r2, #4
 8007180:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d102      	bne.n	800719a <RTC_EnterInitMode+0x64>
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d1e8      	bne.n	800716c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800719a:	7bfb      	ldrb	r3, [r7, #15]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071be:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff ff89 	bl	80070e6 <HAL_RTC_WaitForSynchro>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d004      	beq.n	80071e4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2204      	movs	r2, #4
 80071de:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b085      	sub	sp, #20
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	4603      	mov	r3, r0
 80071f6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80071fc:	e005      	b.n	800720a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	3301      	adds	r3, #1
 8007202:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	3b0a      	subs	r3, #10
 8007208:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	2b09      	cmp	r3, #9
 800720e:	d8f6      	bhi.n	80071fe <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	b2da      	uxtb	r2, r3
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	4313      	orrs	r3, r2
 800721a:	b2db      	uxtb	r3, r3
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007236:	79fb      	ldrb	r3, [r7, #7]
 8007238:	091b      	lsrs	r3, r3, #4
 800723a:	b2db      	uxtb	r3, r3
 800723c:	461a      	mov	r2, r3
 800723e:	0092      	lsls	r2, r2, #2
 8007240:	4413      	add	r3, r2
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007246:	79fb      	ldrb	r3, [r7, #7]
 8007248:	f003 030f 	and.w	r3, r3, #15
 800724c:	b2da      	uxtb	r2, r3
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	4413      	add	r3, r2
 8007252:	b2db      	uxtb	r3, r3
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	7f1b      	ldrb	r3, [r3, #28]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d101      	bne.n	800727c <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8007278:	2302      	movs	r3, #2
 800727a:	e08a      	b.n	8007392 <HAL_RTCEx_SetWakeUpTimer+0x132>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2201      	movs	r2, #1
 8007280:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2202      	movs	r2, #2
 8007286:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	22ca      	movs	r2, #202	; 0xca
 800728e:	625a      	str	r2, [r3, #36]	; 0x24
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2253      	movs	r2, #83	; 0x53
 8007296:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d01e      	beq.n	80072e4 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 80072a6:	f7fc fc65 	bl	8003b74 <HAL_GetTick>
 80072aa:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80072ac:	e013      	b.n	80072d6 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072ae:	f7fc fc61 	bl	8003b74 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072bc:	d90b      	bls.n	80072d6 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	22ff      	movs	r2, #255	; 0xff
 80072c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2203      	movs	r2, #3
 80072ca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e05d      	b.n	8007392 <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e4      	bne.n	80072ae <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007304:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007306:	f7fc fc35 	bl	8003b74 <HAL_GetTick>
 800730a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800730c:	e013      	b.n	8007336 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800730e:	f7fc fc31 	bl	8003b74 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800731c:	d90b      	bls.n	8007336 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	22ff      	movs	r2, #255	; 0xff
 8007324:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2203      	movs	r2, #3
 800732a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e02d      	b.n	8007392 <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0304 	and.w	r3, r3, #4
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0e4      	beq.n	800730e <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0207 	bic.w	r2, r2, #7
 8007352:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6899      	ldr	r1, [r3, #8]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	430a      	orrs	r2, r1
 8007362:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800737a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	22ff      	movs	r2, #255	; 0xff
 8007382:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2201      	movs	r2, #1
 8007388:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80073a8:	4b59      	ldr	r3, [pc, #356]	; (8007510 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a59      	ldr	r2, [pc, #356]	; (8007514 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80073ae:	fba2 2303 	umull	r2, r3, r2, r3
 80073b2:	0adb      	lsrs	r3, r3, #11
 80073b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073b8:	fb02 f303 	mul.w	r3, r2, r3
 80073bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	7f1b      	ldrb	r3, [r3, #28]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e09b      	b.n	8007502 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2202      	movs	r2, #2
 80073d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	22ca      	movs	r2, #202	; 0xca
 80073dc:	625a      	str	r2, [r3, #36]	; 0x24
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2253      	movs	r2, #83	; 0x53
 80073e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d017      	beq.n	8007424 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	1e5a      	subs	r2, r3, #1
 80073f8:	617a      	str	r2, [r7, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10b      	bne.n	8007416 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	22ff      	movs	r2, #255	; 0xff
 8007404:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2203      	movs	r2, #3
 800740a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e075      	b.n	8007502 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e7      	bne.n	80073f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007432:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	b2da      	uxtb	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007444:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8007446:	4b32      	ldr	r3, [pc, #200]	; (8007510 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a32      	ldr	r2, [pc, #200]	; (8007514 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800744c:	fba2 2303 	umull	r2, r3, r2, r3
 8007450:	0adb      	lsrs	r3, r3, #11
 8007452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007456:	fb02 f303 	mul.w	r3, r2, r3
 800745a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	1e5a      	subs	r2, r3, #1
 8007460:	617a      	str	r2, [r7, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10b      	bne.n	800747e <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	22ff      	movs	r2, #255	; 0xff
 800746c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2203      	movs	r2, #3
 8007472:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e041      	b.n	8007502 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0e7      	beq.n	800745c <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0207 	bic.w	r2, r2, #7
 800749a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6899      	ldr	r1, [r3, #8]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80074b4:	4b18      	ldr	r3, [pc, #96]	; (8007518 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a17      	ldr	r2, [pc, #92]	; (8007518 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80074ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074be:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80074c0:	4b15      	ldr	r3, [pc, #84]	; (8007518 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	4a14      	ldr	r2, [pc, #80]	; (8007518 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80074c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074ca:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074da:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689a      	ldr	r2, [r3, #8]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074ea:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	22ff      	movs	r2, #255	; 0xff
 80074f2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2201      	movs	r2, #1
 80074f8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	371c      	adds	r7, #28
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	20000000 	.word	0x20000000
 8007514:	10624dd3 	.word	0x10624dd3
 8007518:	40013c00 	.word	0x40013c00

0800751c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	7f1b      	ldrb	r3, [r3, #28]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d101      	bne.n	8007534 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8007530:	2302      	movs	r3, #2
 8007532:	e047      	b.n	80075c4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2202      	movs	r2, #2
 800753e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	22ca      	movs	r2, #202	; 0xca
 8007546:	625a      	str	r2, [r3, #36]	; 0x24
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2253      	movs	r2, #83	; 0x53
 800754e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800755e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800756e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007570:	f7fc fb00 	bl	8003b74 <HAL_GetTick>
 8007574:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007576:	e013      	b.n	80075a0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007578:	f7fc fafc 	bl	8003b74 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007586:	d90b      	bls.n	80075a0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	22ff      	movs	r2, #255	; 0xff
 800758e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2203      	movs	r2, #3
 8007594:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e011      	b.n	80075c4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f003 0304 	and.w	r3, r3, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0e4      	beq.n	8007578 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	22ff      	movs	r2, #255	; 0xff
 80075b4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3350      	adds	r3, #80	; 0x50
 80075e2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	4413      	add	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	601a      	str	r2, [r3, #0]
}
 80075f4:	bf00      	nop
 80075f6:	371c      	adds	r7, #28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3350      	adds	r3, #80	; 0x50
 8007614:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4413      	add	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e07b      	b.n	800773a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	2b00      	cmp	r3, #0
 8007648:	d108      	bne.n	800765c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007652:	d009      	beq.n	8007668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	61da      	str	r2, [r3, #28]
 800765a:	e005      	b.n	8007668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fb fdba 	bl	80031fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800769e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80076b0:	431a      	orrs	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	431a      	orrs	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076e2:	431a      	orrs	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ec:	ea42 0103 	orr.w	r1, r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	0c1b      	lsrs	r3, r3, #16
 8007706:	f003 0104 	and.w	r1, r3, #4
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	f003 0210 	and.w	r2, r3, #16
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69da      	ldr	r2, [r3, #28]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007728:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b088      	sub	sp, #32
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	603b      	str	r3, [r7, #0]
 800774e:	4613      	mov	r3, r2
 8007750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_SPI_Transmit+0x22>
 8007760:	2302      	movs	r3, #2
 8007762:	e126      	b.n	80079b2 <HAL_SPI_Transmit+0x270>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800776c:	f7fc fa02 	bl	8003b74 <HAL_GetTick>
 8007770:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007772:	88fb      	ldrh	r3, [r7, #6]
 8007774:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b01      	cmp	r3, #1
 8007780:	d002      	beq.n	8007788 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007782:	2302      	movs	r3, #2
 8007784:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007786:	e10b      	b.n	80079a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <HAL_SPI_Transmit+0x52>
 800778e:	88fb      	ldrh	r3, [r7, #6]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007798:	e102      	b.n	80079a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2203      	movs	r2, #3
 800779e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	88fa      	ldrh	r2, [r7, #6]
 80077b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	88fa      	ldrh	r2, [r7, #6]
 80077b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077e0:	d10f      	bne.n	8007802 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007800:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800780c:	2b40      	cmp	r3, #64	; 0x40
 800780e:	d007      	beq.n	8007820 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800781e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007828:	d14b      	bne.n	80078c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <HAL_SPI_Transmit+0xf6>
 8007832:	8afb      	ldrh	r3, [r7, #22]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d13e      	bne.n	80078b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783c:	881a      	ldrh	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	1c9a      	adds	r2, r3, #2
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007852:	b29b      	uxth	r3, r3
 8007854:	3b01      	subs	r3, #1
 8007856:	b29a      	uxth	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800785c:	e02b      	b.n	80078b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b02      	cmp	r3, #2
 800786a:	d112      	bne.n	8007892 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	881a      	ldrh	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	1c9a      	adds	r2, r3, #2
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007886:	b29b      	uxth	r3, r3
 8007888:	3b01      	subs	r3, #1
 800788a:	b29a      	uxth	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007890:	e011      	b.n	80078b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007892:	f7fc f96f 	bl	8003b74 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d803      	bhi.n	80078aa <HAL_SPI_Transmit+0x168>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a8:	d102      	bne.n	80078b0 <HAL_SPI_Transmit+0x16e>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d102      	bne.n	80078b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078b4:	e074      	b.n	80079a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1ce      	bne.n	800785e <HAL_SPI_Transmit+0x11c>
 80078c0:	e04c      	b.n	800795c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <HAL_SPI_Transmit+0x18e>
 80078ca:	8afb      	ldrh	r3, [r7, #22]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d140      	bne.n	8007952 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	330c      	adds	r3, #12
 80078da:	7812      	ldrb	r2, [r2, #0]
 80078dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80078f6:	e02c      	b.n	8007952 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b02      	cmp	r3, #2
 8007904:	d113      	bne.n	800792e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	330c      	adds	r3, #12
 8007910:	7812      	ldrb	r2, [r2, #0]
 8007912:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007922:	b29b      	uxth	r3, r3
 8007924:	3b01      	subs	r3, #1
 8007926:	b29a      	uxth	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	86da      	strh	r2, [r3, #54]	; 0x36
 800792c:	e011      	b.n	8007952 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800792e:	f7fc f921 	bl	8003b74 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	429a      	cmp	r2, r3
 800793c:	d803      	bhi.n	8007946 <HAL_SPI_Transmit+0x204>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007944:	d102      	bne.n	800794c <HAL_SPI_Transmit+0x20a>
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d102      	bne.n	8007952 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007950:	e026      	b.n	80079a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007956:	b29b      	uxth	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1cd      	bne.n	80078f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fa55 	bl	8007e10 <SPI_EndRxTxTransaction>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2220      	movs	r2, #32
 8007970:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10a      	bne.n	8007990 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800797a:	2300      	movs	r3, #0
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	613b      	str	r3, [r7, #16]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	613b      	str	r3, [r7, #16]
 800798e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	77fb      	strb	r3, [r7, #31]
 800799c:	e000      	b.n	80079a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800799e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3720      	adds	r7, #32
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b08c      	sub	sp, #48	; 0x30
 80079be:	af00      	add	r7, sp, #0
 80079c0:	60f8      	str	r0, [r7, #12]
 80079c2:	60b9      	str	r1, [r7, #8]
 80079c4:	607a      	str	r2, [r7, #4]
 80079c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079c8:	2301      	movs	r3, #1
 80079ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d101      	bne.n	80079e0 <HAL_SPI_TransmitReceive+0x26>
 80079dc:	2302      	movs	r3, #2
 80079de:	e18a      	b.n	8007cf6 <HAL_SPI_TransmitReceive+0x33c>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079e8:	f7fc f8c4 	bl	8003b74 <HAL_GetTick>
 80079ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80079fe:	887b      	ldrh	r3, [r7, #2]
 8007a00:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d00f      	beq.n	8007a2a <HAL_SPI_TransmitReceive+0x70>
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a10:	d107      	bne.n	8007a22 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d103      	bne.n	8007a22 <HAL_SPI_TransmitReceive+0x68>
 8007a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d003      	beq.n	8007a2a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a22:	2302      	movs	r3, #2
 8007a24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a28:	e15b      	b.n	8007ce2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <HAL_SPI_TransmitReceive+0x82>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <HAL_SPI_TransmitReceive+0x82>
 8007a36:	887b      	ldrh	r3, [r7, #2]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d103      	bne.n	8007a44 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a42:	e14e      	b.n	8007ce2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d003      	beq.n	8007a58 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2205      	movs	r2, #5
 8007a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	887a      	ldrh	r2, [r7, #2]
 8007a68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	887a      	ldrh	r2, [r7, #2]
 8007a6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	887a      	ldrh	r2, [r7, #2]
 8007a7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	887a      	ldrh	r2, [r7, #2]
 8007a80:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a98:	2b40      	cmp	r3, #64	; 0x40
 8007a9a:	d007      	beq.n	8007aac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab4:	d178      	bne.n	8007ba8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <HAL_SPI_TransmitReceive+0x10a>
 8007abe:	8b7b      	ldrh	r3, [r7, #26]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d166      	bne.n	8007b92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac8:	881a      	ldrh	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad4:	1c9a      	adds	r2, r3, #2
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ae8:	e053      	b.n	8007b92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d11b      	bne.n	8007b30 <HAL_SPI_TransmitReceive+0x176>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d016      	beq.n	8007b30 <HAL_SPI_TransmitReceive+0x176>
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d113      	bne.n	8007b30 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0c:	881a      	ldrh	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	1c9a      	adds	r2, r3, #2
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d119      	bne.n	8007b72 <HAL_SPI_TransmitReceive+0x1b8>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d014      	beq.n	8007b72 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b52:	b292      	uxth	r2, r2
 8007b54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5a:	1c9a      	adds	r2, r3, #2
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	3b01      	subs	r3, #1
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b72:	f7fb ffff 	bl	8003b74 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d807      	bhi.n	8007b92 <HAL_SPI_TransmitReceive+0x1d8>
 8007b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d003      	beq.n	8007b92 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b90:	e0a7      	b.n	8007ce2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1a6      	bne.n	8007aea <HAL_SPI_TransmitReceive+0x130>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1a1      	bne.n	8007aea <HAL_SPI_TransmitReceive+0x130>
 8007ba6:	e07c      	b.n	8007ca2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <HAL_SPI_TransmitReceive+0x1fc>
 8007bb0:	8b7b      	ldrh	r3, [r7, #26]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d16b      	bne.n	8007c8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	330c      	adds	r3, #12
 8007bc0:	7812      	ldrb	r2, [r2, #0]
 8007bc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc8:	1c5a      	adds	r2, r3, #1
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bdc:	e057      	b.n	8007c8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d11c      	bne.n	8007c26 <HAL_SPI_TransmitReceive+0x26c>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d017      	beq.n	8007c26 <HAL_SPI_TransmitReceive+0x26c>
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d114      	bne.n	8007c26 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	330c      	adds	r3, #12
 8007c06:	7812      	ldrb	r2, [r2, #0]
 8007c08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d119      	bne.n	8007c68 <HAL_SPI_TransmitReceive+0x2ae>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d014      	beq.n	8007c68 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68da      	ldr	r2, [r3, #12]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	b2d2      	uxtb	r2, r2
 8007c4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c64:	2301      	movs	r3, #1
 8007c66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c68:	f7fb ff84 	bl	8003b74 <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d803      	bhi.n	8007c80 <HAL_SPI_TransmitReceive+0x2c6>
 8007c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7e:	d102      	bne.n	8007c86 <HAL_SPI_TransmitReceive+0x2cc>
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d103      	bne.n	8007c8e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c8c:	e029      	b.n	8007ce2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1a2      	bne.n	8007bde <HAL_SPI_TransmitReceive+0x224>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d19d      	bne.n	8007bde <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 f8b2 	bl	8007e10 <SPI_EndRxTxTransaction>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d006      	beq.n	8007cc0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007cbe:	e010      	b.n	8007ce2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10b      	bne.n	8007ce0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	617b      	str	r3, [r7, #20]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	e000      	b.n	8007ce2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007ce0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3730      	adds	r7, #48	; 0x30
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
	...

08007d00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d10:	f7fb ff30 	bl	8003b74 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d18:	1a9b      	subs	r3, r3, r2
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d20:	f7fb ff28 	bl	8003b74 <HAL_GetTick>
 8007d24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d26:	4b39      	ldr	r3, [pc, #228]	; (8007e0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	015b      	lsls	r3, r3, #5
 8007d2c:	0d1b      	lsrs	r3, r3, #20
 8007d2e:	69fa      	ldr	r2, [r7, #28]
 8007d30:	fb02 f303 	mul.w	r3, r2, r3
 8007d34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d36:	e054      	b.n	8007de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3e:	d050      	beq.n	8007de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d40:	f7fb ff18 	bl	8003b74 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	69fa      	ldr	r2, [r7, #28]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d902      	bls.n	8007d56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d13d      	bne.n	8007dd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d6e:	d111      	bne.n	8007d94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d78:	d004      	beq.n	8007d84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d82:	d107      	bne.n	8007d94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d9c:	d10f      	bne.n	8007dbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e017      	b.n	8007e02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	4013      	ands	r3, r2
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	bf0c      	ite	eq
 8007df2:	2301      	moveq	r3, #1
 8007df4:	2300      	movne	r3, #0
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	461a      	mov	r2, r3
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d19b      	bne.n	8007d38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3720      	adds	r7, #32
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20000000 	.word	0x20000000

08007e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b088      	sub	sp, #32
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e1c:	4b1b      	ldr	r3, [pc, #108]	; (8007e8c <SPI_EndRxTxTransaction+0x7c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a1b      	ldr	r2, [pc, #108]	; (8007e90 <SPI_EndRxTxTransaction+0x80>)
 8007e22:	fba2 2303 	umull	r2, r3, r2, r3
 8007e26:	0d5b      	lsrs	r3, r3, #21
 8007e28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e2c:	fb02 f303 	mul.w	r3, r2, r3
 8007e30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e3a:	d112      	bne.n	8007e62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2200      	movs	r2, #0
 8007e44:	2180      	movs	r1, #128	; 0x80
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f7ff ff5a 	bl	8007d00 <SPI_WaitFlagStateUntilTimeout>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d016      	beq.n	8007e80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e56:	f043 0220 	orr.w	r2, r3, #32
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e00f      	b.n	8007e82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00a      	beq.n	8007e7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e78:	2b80      	cmp	r3, #128	; 0x80
 8007e7a:	d0f2      	beq.n	8007e62 <SPI_EndRxTxTransaction+0x52>
 8007e7c:	e000      	b.n	8007e80 <SPI_EndRxTxTransaction+0x70>
        break;
 8007e7e:	bf00      	nop
  }

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000000 	.word	0x20000000
 8007e90:	165e9f81 	.word	0x165e9f81

08007e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e03f      	b.n	8007f26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d106      	bne.n	8007ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7fb f9e6 	bl	800328c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2224      	movs	r2, #36	; 0x24
 8007ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f929 	bl	8008130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	691a      	ldr	r2, [r3, #16]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	695a      	ldr	r2, [r3, #20]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68da      	ldr	r2, [r3, #12]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b08a      	sub	sp, #40	; 0x28
 8007f32:	af02      	add	r7, sp, #8
 8007f34:	60f8      	str	r0, [r7, #12]
 8007f36:	60b9      	str	r1, [r7, #8]
 8007f38:	603b      	str	r3, [r7, #0]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b20      	cmp	r3, #32
 8007f4c:	d17c      	bne.n	8008048 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <HAL_UART_Transmit+0x2c>
 8007f54:	88fb      	ldrh	r3, [r7, #6]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e075      	b.n	800804a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_UART_Transmit+0x3e>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e06e      	b.n	800804a <HAL_UART_Transmit+0x11c>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2221      	movs	r2, #33	; 0x21
 8007f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f82:	f7fb fdf7 	bl	8003b74 <HAL_GetTick>
 8007f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	88fa      	ldrh	r2, [r7, #6]
 8007f8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	88fa      	ldrh	r2, [r7, #6]
 8007f92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f9c:	d108      	bne.n	8007fb0 <HAL_UART_Transmit+0x82>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d104      	bne.n	8007fb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	61bb      	str	r3, [r7, #24]
 8007fae:	e003      	b.n	8007fb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007fc0:	e02a      	b.n	8008018 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2180      	movs	r1, #128	; 0x80
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f840 	bl	8008052 <UART_WaitOnFlagUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e036      	b.n	800804a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10b      	bne.n	8007ffa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ff0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	61bb      	str	r3, [r7, #24]
 8007ff8:	e007      	b.n	800800a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	781a      	ldrb	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	3301      	adds	r3, #1
 8008008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800800e:	b29b      	uxth	r3, r3
 8008010:	3b01      	subs	r3, #1
 8008012:	b29a      	uxth	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800801c:	b29b      	uxth	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1cf      	bne.n	8007fc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2200      	movs	r2, #0
 800802a:	2140      	movs	r1, #64	; 0x40
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 f810 	bl	8008052 <UART_WaitOnFlagUntilTimeout>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e006      	b.n	800804a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2220      	movs	r2, #32
 8008040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	e000      	b.n	800804a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008048:	2302      	movs	r3, #2
  }
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b090      	sub	sp, #64	; 0x40
 8008056:	af00      	add	r7, sp, #0
 8008058:	60f8      	str	r0, [r7, #12]
 800805a:	60b9      	str	r1, [r7, #8]
 800805c:	603b      	str	r3, [r7, #0]
 800805e:	4613      	mov	r3, r2
 8008060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008062:	e050      	b.n	8008106 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806a:	d04c      	beq.n	8008106 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800806c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800806e:	2b00      	cmp	r3, #0
 8008070:	d007      	beq.n	8008082 <UART_WaitOnFlagUntilTimeout+0x30>
 8008072:	f7fb fd7f 	bl	8003b74 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800807e:	429a      	cmp	r2, r3
 8008080:	d241      	bcs.n	8008106 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	330c      	adds	r3, #12
 8008088:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	330c      	adds	r3, #12
 80080a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080a2:	637a      	str	r2, [r7, #52]	; 0x34
 80080a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e5      	bne.n	8008082 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3314      	adds	r3, #20
 80080bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	613b      	str	r3, [r7, #16]
   return(result);
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f023 0301 	bic.w	r3, r3, #1
 80080cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3314      	adds	r3, #20
 80080d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080d6:	623a      	str	r2, [r7, #32]
 80080d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	69f9      	ldr	r1, [r7, #28]
 80080dc:	6a3a      	ldr	r2, [r7, #32]
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e5      	bne.n	80080b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e00f      	b.n	8008126 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	4013      	ands	r3, r2
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	429a      	cmp	r2, r3
 8008114:	bf0c      	ite	eq
 8008116:	2301      	moveq	r3, #1
 8008118:	2300      	movne	r3, #0
 800811a:	b2db      	uxtb	r3, r3
 800811c:	461a      	mov	r2, r3
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	429a      	cmp	r2, r3
 8008122:	d09f      	beq.n	8008064 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3740      	adds	r7, #64	; 0x40
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008134:	b0c0      	sub	sp, #256	; 0x100
 8008136:	af00      	add	r7, sp, #0
 8008138:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800814c:	68d9      	ldr	r1, [r3, #12]
 800814e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	ea40 0301 	orr.w	r3, r0, r1
 8008158:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800815a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815e:	689a      	ldr	r2, [r3, #8]
 8008160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	431a      	orrs	r2, r3
 8008168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	431a      	orrs	r2, r3
 8008170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	4313      	orrs	r3, r2
 8008178:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800817c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008188:	f021 010c 	bic.w	r1, r1, #12
 800818c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008196:	430b      	orrs	r3, r1
 8008198:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800819a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80081a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081aa:	6999      	ldr	r1, [r3, #24]
 80081ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	ea40 0301 	orr.w	r3, r0, r1
 80081b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	4b8f      	ldr	r3, [pc, #572]	; (80083fc <UART_SetConfig+0x2cc>)
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d005      	beq.n	80081d0 <UART_SetConfig+0xa0>
 80081c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	4b8d      	ldr	r3, [pc, #564]	; (8008400 <UART_SetConfig+0x2d0>)
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d104      	bne.n	80081da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081d0:	f7fe fc46 	bl	8006a60 <HAL_RCC_GetPCLK2Freq>
 80081d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80081d8:	e003      	b.n	80081e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081da:	f7fe fc2d 	bl	8006a38 <HAL_RCC_GetPCLK1Freq>
 80081de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ec:	f040 810c 	bne.w	8008408 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80081fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008202:	4622      	mov	r2, r4
 8008204:	462b      	mov	r3, r5
 8008206:	1891      	adds	r1, r2, r2
 8008208:	65b9      	str	r1, [r7, #88]	; 0x58
 800820a:	415b      	adcs	r3, r3
 800820c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800820e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008212:	4621      	mov	r1, r4
 8008214:	eb12 0801 	adds.w	r8, r2, r1
 8008218:	4629      	mov	r1, r5
 800821a:	eb43 0901 	adc.w	r9, r3, r1
 800821e:	f04f 0200 	mov.w	r2, #0
 8008222:	f04f 0300 	mov.w	r3, #0
 8008226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800822a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800822e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008232:	4690      	mov	r8, r2
 8008234:	4699      	mov	r9, r3
 8008236:	4623      	mov	r3, r4
 8008238:	eb18 0303 	adds.w	r3, r8, r3
 800823c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008240:	462b      	mov	r3, r5
 8008242:	eb49 0303 	adc.w	r3, r9, r3
 8008246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800824a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008256:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800825a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800825e:	460b      	mov	r3, r1
 8008260:	18db      	adds	r3, r3, r3
 8008262:	653b      	str	r3, [r7, #80]	; 0x50
 8008264:	4613      	mov	r3, r2
 8008266:	eb42 0303 	adc.w	r3, r2, r3
 800826a:	657b      	str	r3, [r7, #84]	; 0x54
 800826c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008270:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008274:	f7f8 fcf0 	bl	8000c58 <__aeabi_uldivmod>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	4b61      	ldr	r3, [pc, #388]	; (8008404 <UART_SetConfig+0x2d4>)
 800827e:	fba3 2302 	umull	r2, r3, r3, r2
 8008282:	095b      	lsrs	r3, r3, #5
 8008284:	011c      	lsls	r4, r3, #4
 8008286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800828a:	2200      	movs	r2, #0
 800828c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008290:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008294:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008298:	4642      	mov	r2, r8
 800829a:	464b      	mov	r3, r9
 800829c:	1891      	adds	r1, r2, r2
 800829e:	64b9      	str	r1, [r7, #72]	; 0x48
 80082a0:	415b      	adcs	r3, r3
 80082a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80082a8:	4641      	mov	r1, r8
 80082aa:	eb12 0a01 	adds.w	sl, r2, r1
 80082ae:	4649      	mov	r1, r9
 80082b0:	eb43 0b01 	adc.w	fp, r3, r1
 80082b4:	f04f 0200 	mov.w	r2, #0
 80082b8:	f04f 0300 	mov.w	r3, #0
 80082bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082c8:	4692      	mov	sl, r2
 80082ca:	469b      	mov	fp, r3
 80082cc:	4643      	mov	r3, r8
 80082ce:	eb1a 0303 	adds.w	r3, sl, r3
 80082d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082d6:	464b      	mov	r3, r9
 80082d8:	eb4b 0303 	adc.w	r3, fp, r3
 80082dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80082e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80082f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80082f4:	460b      	mov	r3, r1
 80082f6:	18db      	adds	r3, r3, r3
 80082f8:	643b      	str	r3, [r7, #64]	; 0x40
 80082fa:	4613      	mov	r3, r2
 80082fc:	eb42 0303 	adc.w	r3, r2, r3
 8008300:	647b      	str	r3, [r7, #68]	; 0x44
 8008302:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008306:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800830a:	f7f8 fca5 	bl	8000c58 <__aeabi_uldivmod>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	4611      	mov	r1, r2
 8008314:	4b3b      	ldr	r3, [pc, #236]	; (8008404 <UART_SetConfig+0x2d4>)
 8008316:	fba3 2301 	umull	r2, r3, r3, r1
 800831a:	095b      	lsrs	r3, r3, #5
 800831c:	2264      	movs	r2, #100	; 0x64
 800831e:	fb02 f303 	mul.w	r3, r2, r3
 8008322:	1acb      	subs	r3, r1, r3
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800832a:	4b36      	ldr	r3, [pc, #216]	; (8008404 <UART_SetConfig+0x2d4>)
 800832c:	fba3 2302 	umull	r2, r3, r3, r2
 8008330:	095b      	lsrs	r3, r3, #5
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008338:	441c      	add	r4, r3
 800833a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800833e:	2200      	movs	r2, #0
 8008340:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008344:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008348:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800834c:	4642      	mov	r2, r8
 800834e:	464b      	mov	r3, r9
 8008350:	1891      	adds	r1, r2, r2
 8008352:	63b9      	str	r1, [r7, #56]	; 0x38
 8008354:	415b      	adcs	r3, r3
 8008356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008358:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800835c:	4641      	mov	r1, r8
 800835e:	1851      	adds	r1, r2, r1
 8008360:	6339      	str	r1, [r7, #48]	; 0x30
 8008362:	4649      	mov	r1, r9
 8008364:	414b      	adcs	r3, r1
 8008366:	637b      	str	r3, [r7, #52]	; 0x34
 8008368:	f04f 0200 	mov.w	r2, #0
 800836c:	f04f 0300 	mov.w	r3, #0
 8008370:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008374:	4659      	mov	r1, fp
 8008376:	00cb      	lsls	r3, r1, #3
 8008378:	4651      	mov	r1, sl
 800837a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800837e:	4651      	mov	r1, sl
 8008380:	00ca      	lsls	r2, r1, #3
 8008382:	4610      	mov	r0, r2
 8008384:	4619      	mov	r1, r3
 8008386:	4603      	mov	r3, r0
 8008388:	4642      	mov	r2, r8
 800838a:	189b      	adds	r3, r3, r2
 800838c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008390:	464b      	mov	r3, r9
 8008392:	460a      	mov	r2, r1
 8008394:	eb42 0303 	adc.w	r3, r2, r3
 8008398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800839c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80083a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80083ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80083b0:	460b      	mov	r3, r1
 80083b2:	18db      	adds	r3, r3, r3
 80083b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80083b6:	4613      	mov	r3, r2
 80083b8:	eb42 0303 	adc.w	r3, r2, r3
 80083bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80083c6:	f7f8 fc47 	bl	8000c58 <__aeabi_uldivmod>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4b0d      	ldr	r3, [pc, #52]	; (8008404 <UART_SetConfig+0x2d4>)
 80083d0:	fba3 1302 	umull	r1, r3, r3, r2
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	2164      	movs	r1, #100	; 0x64
 80083d8:	fb01 f303 	mul.w	r3, r1, r3
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	00db      	lsls	r3, r3, #3
 80083e0:	3332      	adds	r3, #50	; 0x32
 80083e2:	4a08      	ldr	r2, [pc, #32]	; (8008404 <UART_SetConfig+0x2d4>)
 80083e4:	fba2 2303 	umull	r2, r3, r2, r3
 80083e8:	095b      	lsrs	r3, r3, #5
 80083ea:	f003 0207 	and.w	r2, r3, #7
 80083ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4422      	add	r2, r4
 80083f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083f8:	e106      	b.n	8008608 <UART_SetConfig+0x4d8>
 80083fa:	bf00      	nop
 80083fc:	40011000 	.word	0x40011000
 8008400:	40011400 	.word	0x40011400
 8008404:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800840c:	2200      	movs	r2, #0
 800840e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008412:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008416:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800841a:	4642      	mov	r2, r8
 800841c:	464b      	mov	r3, r9
 800841e:	1891      	adds	r1, r2, r2
 8008420:	6239      	str	r1, [r7, #32]
 8008422:	415b      	adcs	r3, r3
 8008424:	627b      	str	r3, [r7, #36]	; 0x24
 8008426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800842a:	4641      	mov	r1, r8
 800842c:	1854      	adds	r4, r2, r1
 800842e:	4649      	mov	r1, r9
 8008430:	eb43 0501 	adc.w	r5, r3, r1
 8008434:	f04f 0200 	mov.w	r2, #0
 8008438:	f04f 0300 	mov.w	r3, #0
 800843c:	00eb      	lsls	r3, r5, #3
 800843e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008442:	00e2      	lsls	r2, r4, #3
 8008444:	4614      	mov	r4, r2
 8008446:	461d      	mov	r5, r3
 8008448:	4643      	mov	r3, r8
 800844a:	18e3      	adds	r3, r4, r3
 800844c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008450:	464b      	mov	r3, r9
 8008452:	eb45 0303 	adc.w	r3, r5, r3
 8008456:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800845a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008466:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800846a:	f04f 0200 	mov.w	r2, #0
 800846e:	f04f 0300 	mov.w	r3, #0
 8008472:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008476:	4629      	mov	r1, r5
 8008478:	008b      	lsls	r3, r1, #2
 800847a:	4621      	mov	r1, r4
 800847c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008480:	4621      	mov	r1, r4
 8008482:	008a      	lsls	r2, r1, #2
 8008484:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008488:	f7f8 fbe6 	bl	8000c58 <__aeabi_uldivmod>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4b60      	ldr	r3, [pc, #384]	; (8008614 <UART_SetConfig+0x4e4>)
 8008492:	fba3 2302 	umull	r2, r3, r3, r2
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	011c      	lsls	r4, r3, #4
 800849a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80084a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80084ac:	4642      	mov	r2, r8
 80084ae:	464b      	mov	r3, r9
 80084b0:	1891      	adds	r1, r2, r2
 80084b2:	61b9      	str	r1, [r7, #24]
 80084b4:	415b      	adcs	r3, r3
 80084b6:	61fb      	str	r3, [r7, #28]
 80084b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084bc:	4641      	mov	r1, r8
 80084be:	1851      	adds	r1, r2, r1
 80084c0:	6139      	str	r1, [r7, #16]
 80084c2:	4649      	mov	r1, r9
 80084c4:	414b      	adcs	r3, r1
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	f04f 0200 	mov.w	r2, #0
 80084cc:	f04f 0300 	mov.w	r3, #0
 80084d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084d4:	4659      	mov	r1, fp
 80084d6:	00cb      	lsls	r3, r1, #3
 80084d8:	4651      	mov	r1, sl
 80084da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084de:	4651      	mov	r1, sl
 80084e0:	00ca      	lsls	r2, r1, #3
 80084e2:	4610      	mov	r0, r2
 80084e4:	4619      	mov	r1, r3
 80084e6:	4603      	mov	r3, r0
 80084e8:	4642      	mov	r2, r8
 80084ea:	189b      	adds	r3, r3, r2
 80084ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084f0:	464b      	mov	r3, r9
 80084f2:	460a      	mov	r2, r1
 80084f4:	eb42 0303 	adc.w	r3, r2, r3
 80084f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	67bb      	str	r3, [r7, #120]	; 0x78
 8008506:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008508:	f04f 0200 	mov.w	r2, #0
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008514:	4649      	mov	r1, r9
 8008516:	008b      	lsls	r3, r1, #2
 8008518:	4641      	mov	r1, r8
 800851a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800851e:	4641      	mov	r1, r8
 8008520:	008a      	lsls	r2, r1, #2
 8008522:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008526:	f7f8 fb97 	bl	8000c58 <__aeabi_uldivmod>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4611      	mov	r1, r2
 8008530:	4b38      	ldr	r3, [pc, #224]	; (8008614 <UART_SetConfig+0x4e4>)
 8008532:	fba3 2301 	umull	r2, r3, r3, r1
 8008536:	095b      	lsrs	r3, r3, #5
 8008538:	2264      	movs	r2, #100	; 0x64
 800853a:	fb02 f303 	mul.w	r3, r2, r3
 800853e:	1acb      	subs	r3, r1, r3
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	3332      	adds	r3, #50	; 0x32
 8008544:	4a33      	ldr	r2, [pc, #204]	; (8008614 <UART_SetConfig+0x4e4>)
 8008546:	fba2 2303 	umull	r2, r3, r2, r3
 800854a:	095b      	lsrs	r3, r3, #5
 800854c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008550:	441c      	add	r4, r3
 8008552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008556:	2200      	movs	r2, #0
 8008558:	673b      	str	r3, [r7, #112]	; 0x70
 800855a:	677a      	str	r2, [r7, #116]	; 0x74
 800855c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008560:	4642      	mov	r2, r8
 8008562:	464b      	mov	r3, r9
 8008564:	1891      	adds	r1, r2, r2
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	415b      	adcs	r3, r3
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008570:	4641      	mov	r1, r8
 8008572:	1851      	adds	r1, r2, r1
 8008574:	6039      	str	r1, [r7, #0]
 8008576:	4649      	mov	r1, r9
 8008578:	414b      	adcs	r3, r1
 800857a:	607b      	str	r3, [r7, #4]
 800857c:	f04f 0200 	mov.w	r2, #0
 8008580:	f04f 0300 	mov.w	r3, #0
 8008584:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008588:	4659      	mov	r1, fp
 800858a:	00cb      	lsls	r3, r1, #3
 800858c:	4651      	mov	r1, sl
 800858e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008592:	4651      	mov	r1, sl
 8008594:	00ca      	lsls	r2, r1, #3
 8008596:	4610      	mov	r0, r2
 8008598:	4619      	mov	r1, r3
 800859a:	4603      	mov	r3, r0
 800859c:	4642      	mov	r2, r8
 800859e:	189b      	adds	r3, r3, r2
 80085a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80085a2:	464b      	mov	r3, r9
 80085a4:	460a      	mov	r2, r1
 80085a6:	eb42 0303 	adc.w	r3, r2, r3
 80085aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	663b      	str	r3, [r7, #96]	; 0x60
 80085b6:	667a      	str	r2, [r7, #100]	; 0x64
 80085b8:	f04f 0200 	mov.w	r2, #0
 80085bc:	f04f 0300 	mov.w	r3, #0
 80085c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80085c4:	4649      	mov	r1, r9
 80085c6:	008b      	lsls	r3, r1, #2
 80085c8:	4641      	mov	r1, r8
 80085ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085ce:	4641      	mov	r1, r8
 80085d0:	008a      	lsls	r2, r1, #2
 80085d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80085d6:	f7f8 fb3f 	bl	8000c58 <__aeabi_uldivmod>
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	4b0d      	ldr	r3, [pc, #52]	; (8008614 <UART_SetConfig+0x4e4>)
 80085e0:	fba3 1302 	umull	r1, r3, r3, r2
 80085e4:	095b      	lsrs	r3, r3, #5
 80085e6:	2164      	movs	r1, #100	; 0x64
 80085e8:	fb01 f303 	mul.w	r3, r1, r3
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	011b      	lsls	r3, r3, #4
 80085f0:	3332      	adds	r3, #50	; 0x32
 80085f2:	4a08      	ldr	r2, [pc, #32]	; (8008614 <UART_SetConfig+0x4e4>)
 80085f4:	fba2 2303 	umull	r2, r3, r2, r3
 80085f8:	095b      	lsrs	r3, r3, #5
 80085fa:	f003 020f 	and.w	r2, r3, #15
 80085fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4422      	add	r2, r4
 8008606:	609a      	str	r2, [r3, #8]
}
 8008608:	bf00      	nop
 800860a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800860e:	46bd      	mov	sp, r7
 8008610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008614:	51eb851f 	.word	0x51eb851f

08008618 <malloc>:
 8008618:	4b02      	ldr	r3, [pc, #8]	; (8008624 <malloc+0xc>)
 800861a:	4601      	mov	r1, r0
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	f000 b82b 	b.w	8008678 <_malloc_r>
 8008622:	bf00      	nop
 8008624:	20000068 	.word	0x20000068

08008628 <free>:
 8008628:	4b02      	ldr	r3, [pc, #8]	; (8008634 <free+0xc>)
 800862a:	4601      	mov	r1, r0
 800862c:	6818      	ldr	r0, [r3, #0]
 800862e:	f001 bd61 	b.w	800a0f4 <_free_r>
 8008632:	bf00      	nop
 8008634:	20000068 	.word	0x20000068

08008638 <sbrk_aligned>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	4e0e      	ldr	r6, [pc, #56]	; (8008674 <sbrk_aligned+0x3c>)
 800863c:	460c      	mov	r4, r1
 800863e:	6831      	ldr	r1, [r6, #0]
 8008640:	4605      	mov	r5, r0
 8008642:	b911      	cbnz	r1, 800864a <sbrk_aligned+0x12>
 8008644:	f000 fe7e 	bl	8009344 <_sbrk_r>
 8008648:	6030      	str	r0, [r6, #0]
 800864a:	4621      	mov	r1, r4
 800864c:	4628      	mov	r0, r5
 800864e:	f000 fe79 	bl	8009344 <_sbrk_r>
 8008652:	1c43      	adds	r3, r0, #1
 8008654:	d00a      	beq.n	800866c <sbrk_aligned+0x34>
 8008656:	1cc4      	adds	r4, r0, #3
 8008658:	f024 0403 	bic.w	r4, r4, #3
 800865c:	42a0      	cmp	r0, r4
 800865e:	d007      	beq.n	8008670 <sbrk_aligned+0x38>
 8008660:	1a21      	subs	r1, r4, r0
 8008662:	4628      	mov	r0, r5
 8008664:	f000 fe6e 	bl	8009344 <_sbrk_r>
 8008668:	3001      	adds	r0, #1
 800866a:	d101      	bne.n	8008670 <sbrk_aligned+0x38>
 800866c:	f04f 34ff 	mov.w	r4, #4294967295
 8008670:	4620      	mov	r0, r4
 8008672:	bd70      	pop	{r4, r5, r6, pc}
 8008674:	200003b4 	.word	0x200003b4

08008678 <_malloc_r>:
 8008678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800867c:	1ccd      	adds	r5, r1, #3
 800867e:	f025 0503 	bic.w	r5, r5, #3
 8008682:	3508      	adds	r5, #8
 8008684:	2d0c      	cmp	r5, #12
 8008686:	bf38      	it	cc
 8008688:	250c      	movcc	r5, #12
 800868a:	2d00      	cmp	r5, #0
 800868c:	4607      	mov	r7, r0
 800868e:	db01      	blt.n	8008694 <_malloc_r+0x1c>
 8008690:	42a9      	cmp	r1, r5
 8008692:	d905      	bls.n	80086a0 <_malloc_r+0x28>
 8008694:	230c      	movs	r3, #12
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	2600      	movs	r6, #0
 800869a:	4630      	mov	r0, r6
 800869c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008774 <_malloc_r+0xfc>
 80086a4:	f000 f868 	bl	8008778 <__malloc_lock>
 80086a8:	f8d8 3000 	ldr.w	r3, [r8]
 80086ac:	461c      	mov	r4, r3
 80086ae:	bb5c      	cbnz	r4, 8008708 <_malloc_r+0x90>
 80086b0:	4629      	mov	r1, r5
 80086b2:	4638      	mov	r0, r7
 80086b4:	f7ff ffc0 	bl	8008638 <sbrk_aligned>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	4604      	mov	r4, r0
 80086bc:	d155      	bne.n	800876a <_malloc_r+0xf2>
 80086be:	f8d8 4000 	ldr.w	r4, [r8]
 80086c2:	4626      	mov	r6, r4
 80086c4:	2e00      	cmp	r6, #0
 80086c6:	d145      	bne.n	8008754 <_malloc_r+0xdc>
 80086c8:	2c00      	cmp	r4, #0
 80086ca:	d048      	beq.n	800875e <_malloc_r+0xe6>
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	4631      	mov	r1, r6
 80086d0:	4638      	mov	r0, r7
 80086d2:	eb04 0903 	add.w	r9, r4, r3
 80086d6:	f000 fe35 	bl	8009344 <_sbrk_r>
 80086da:	4581      	cmp	r9, r0
 80086dc:	d13f      	bne.n	800875e <_malloc_r+0xe6>
 80086de:	6821      	ldr	r1, [r4, #0]
 80086e0:	1a6d      	subs	r5, r5, r1
 80086e2:	4629      	mov	r1, r5
 80086e4:	4638      	mov	r0, r7
 80086e6:	f7ff ffa7 	bl	8008638 <sbrk_aligned>
 80086ea:	3001      	adds	r0, #1
 80086ec:	d037      	beq.n	800875e <_malloc_r+0xe6>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	442b      	add	r3, r5
 80086f2:	6023      	str	r3, [r4, #0]
 80086f4:	f8d8 3000 	ldr.w	r3, [r8]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d038      	beq.n	800876e <_malloc_r+0xf6>
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	42a2      	cmp	r2, r4
 8008700:	d12b      	bne.n	800875a <_malloc_r+0xe2>
 8008702:	2200      	movs	r2, #0
 8008704:	605a      	str	r2, [r3, #4]
 8008706:	e00f      	b.n	8008728 <_malloc_r+0xb0>
 8008708:	6822      	ldr	r2, [r4, #0]
 800870a:	1b52      	subs	r2, r2, r5
 800870c:	d41f      	bmi.n	800874e <_malloc_r+0xd6>
 800870e:	2a0b      	cmp	r2, #11
 8008710:	d917      	bls.n	8008742 <_malloc_r+0xca>
 8008712:	1961      	adds	r1, r4, r5
 8008714:	42a3      	cmp	r3, r4
 8008716:	6025      	str	r5, [r4, #0]
 8008718:	bf18      	it	ne
 800871a:	6059      	strne	r1, [r3, #4]
 800871c:	6863      	ldr	r3, [r4, #4]
 800871e:	bf08      	it	eq
 8008720:	f8c8 1000 	streq.w	r1, [r8]
 8008724:	5162      	str	r2, [r4, r5]
 8008726:	604b      	str	r3, [r1, #4]
 8008728:	4638      	mov	r0, r7
 800872a:	f104 060b 	add.w	r6, r4, #11
 800872e:	f000 f829 	bl	8008784 <__malloc_unlock>
 8008732:	f026 0607 	bic.w	r6, r6, #7
 8008736:	1d23      	adds	r3, r4, #4
 8008738:	1af2      	subs	r2, r6, r3
 800873a:	d0ae      	beq.n	800869a <_malloc_r+0x22>
 800873c:	1b9b      	subs	r3, r3, r6
 800873e:	50a3      	str	r3, [r4, r2]
 8008740:	e7ab      	b.n	800869a <_malloc_r+0x22>
 8008742:	42a3      	cmp	r3, r4
 8008744:	6862      	ldr	r2, [r4, #4]
 8008746:	d1dd      	bne.n	8008704 <_malloc_r+0x8c>
 8008748:	f8c8 2000 	str.w	r2, [r8]
 800874c:	e7ec      	b.n	8008728 <_malloc_r+0xb0>
 800874e:	4623      	mov	r3, r4
 8008750:	6864      	ldr	r4, [r4, #4]
 8008752:	e7ac      	b.n	80086ae <_malloc_r+0x36>
 8008754:	4634      	mov	r4, r6
 8008756:	6876      	ldr	r6, [r6, #4]
 8008758:	e7b4      	b.n	80086c4 <_malloc_r+0x4c>
 800875a:	4613      	mov	r3, r2
 800875c:	e7cc      	b.n	80086f8 <_malloc_r+0x80>
 800875e:	230c      	movs	r3, #12
 8008760:	603b      	str	r3, [r7, #0]
 8008762:	4638      	mov	r0, r7
 8008764:	f000 f80e 	bl	8008784 <__malloc_unlock>
 8008768:	e797      	b.n	800869a <_malloc_r+0x22>
 800876a:	6025      	str	r5, [r4, #0]
 800876c:	e7dc      	b.n	8008728 <_malloc_r+0xb0>
 800876e:	605b      	str	r3, [r3, #4]
 8008770:	deff      	udf	#255	; 0xff
 8008772:	bf00      	nop
 8008774:	200003b0 	.word	0x200003b0

08008778 <__malloc_lock>:
 8008778:	4801      	ldr	r0, [pc, #4]	; (8008780 <__malloc_lock+0x8>)
 800877a:	f000 be30 	b.w	80093de <__retarget_lock_acquire_recursive>
 800877e:	bf00      	nop
 8008780:	200004f8 	.word	0x200004f8

08008784 <__malloc_unlock>:
 8008784:	4801      	ldr	r0, [pc, #4]	; (800878c <__malloc_unlock+0x8>)
 8008786:	f000 be2b 	b.w	80093e0 <__retarget_lock_release_recursive>
 800878a:	bf00      	nop
 800878c:	200004f8 	.word	0x200004f8

08008790 <__cvt>:
 8008790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008794:	ec55 4b10 	vmov	r4, r5, d0
 8008798:	2d00      	cmp	r5, #0
 800879a:	460e      	mov	r6, r1
 800879c:	4619      	mov	r1, r3
 800879e:	462b      	mov	r3, r5
 80087a0:	bfbb      	ittet	lt
 80087a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80087a6:	461d      	movlt	r5, r3
 80087a8:	2300      	movge	r3, #0
 80087aa:	232d      	movlt	r3, #45	; 0x2d
 80087ac:	700b      	strb	r3, [r1, #0]
 80087ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80087b4:	4691      	mov	r9, r2
 80087b6:	f023 0820 	bic.w	r8, r3, #32
 80087ba:	bfbc      	itt	lt
 80087bc:	4622      	movlt	r2, r4
 80087be:	4614      	movlt	r4, r2
 80087c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087c4:	d005      	beq.n	80087d2 <__cvt+0x42>
 80087c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80087ca:	d100      	bne.n	80087ce <__cvt+0x3e>
 80087cc:	3601      	adds	r6, #1
 80087ce:	2102      	movs	r1, #2
 80087d0:	e000      	b.n	80087d4 <__cvt+0x44>
 80087d2:	2103      	movs	r1, #3
 80087d4:	ab03      	add	r3, sp, #12
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	ab02      	add	r3, sp, #8
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	ec45 4b10 	vmov	d0, r4, r5
 80087e0:	4653      	mov	r3, sl
 80087e2:	4632      	mov	r2, r6
 80087e4:	f000 fe94 	bl	8009510 <_dtoa_r>
 80087e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80087ec:	4607      	mov	r7, r0
 80087ee:	d102      	bne.n	80087f6 <__cvt+0x66>
 80087f0:	f019 0f01 	tst.w	r9, #1
 80087f4:	d022      	beq.n	800883c <__cvt+0xac>
 80087f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087fa:	eb07 0906 	add.w	r9, r7, r6
 80087fe:	d110      	bne.n	8008822 <__cvt+0x92>
 8008800:	783b      	ldrb	r3, [r7, #0]
 8008802:	2b30      	cmp	r3, #48	; 0x30
 8008804:	d10a      	bne.n	800881c <__cvt+0x8c>
 8008806:	2200      	movs	r2, #0
 8008808:	2300      	movs	r3, #0
 800880a:	4620      	mov	r0, r4
 800880c:	4629      	mov	r1, r5
 800880e:	f7f8 f963 	bl	8000ad8 <__aeabi_dcmpeq>
 8008812:	b918      	cbnz	r0, 800881c <__cvt+0x8c>
 8008814:	f1c6 0601 	rsb	r6, r6, #1
 8008818:	f8ca 6000 	str.w	r6, [sl]
 800881c:	f8da 3000 	ldr.w	r3, [sl]
 8008820:	4499      	add	r9, r3
 8008822:	2200      	movs	r2, #0
 8008824:	2300      	movs	r3, #0
 8008826:	4620      	mov	r0, r4
 8008828:	4629      	mov	r1, r5
 800882a:	f7f8 f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800882e:	b108      	cbz	r0, 8008834 <__cvt+0xa4>
 8008830:	f8cd 900c 	str.w	r9, [sp, #12]
 8008834:	2230      	movs	r2, #48	; 0x30
 8008836:	9b03      	ldr	r3, [sp, #12]
 8008838:	454b      	cmp	r3, r9
 800883a:	d307      	bcc.n	800884c <__cvt+0xbc>
 800883c:	9b03      	ldr	r3, [sp, #12]
 800883e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008840:	1bdb      	subs	r3, r3, r7
 8008842:	4638      	mov	r0, r7
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	b004      	add	sp, #16
 8008848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884c:	1c59      	adds	r1, r3, #1
 800884e:	9103      	str	r1, [sp, #12]
 8008850:	701a      	strb	r2, [r3, #0]
 8008852:	e7f0      	b.n	8008836 <__cvt+0xa6>

08008854 <__exponent>:
 8008854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008856:	4603      	mov	r3, r0
 8008858:	2900      	cmp	r1, #0
 800885a:	bfb8      	it	lt
 800885c:	4249      	neglt	r1, r1
 800885e:	f803 2b02 	strb.w	r2, [r3], #2
 8008862:	bfb4      	ite	lt
 8008864:	222d      	movlt	r2, #45	; 0x2d
 8008866:	222b      	movge	r2, #43	; 0x2b
 8008868:	2909      	cmp	r1, #9
 800886a:	7042      	strb	r2, [r0, #1]
 800886c:	dd2a      	ble.n	80088c4 <__exponent+0x70>
 800886e:	f10d 0207 	add.w	r2, sp, #7
 8008872:	4617      	mov	r7, r2
 8008874:	260a      	movs	r6, #10
 8008876:	4694      	mov	ip, r2
 8008878:	fb91 f5f6 	sdiv	r5, r1, r6
 800887c:	fb06 1415 	mls	r4, r6, r5, r1
 8008880:	3430      	adds	r4, #48	; 0x30
 8008882:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008886:	460c      	mov	r4, r1
 8008888:	2c63      	cmp	r4, #99	; 0x63
 800888a:	f102 32ff 	add.w	r2, r2, #4294967295
 800888e:	4629      	mov	r1, r5
 8008890:	dcf1      	bgt.n	8008876 <__exponent+0x22>
 8008892:	3130      	adds	r1, #48	; 0x30
 8008894:	f1ac 0402 	sub.w	r4, ip, #2
 8008898:	f802 1c01 	strb.w	r1, [r2, #-1]
 800889c:	1c41      	adds	r1, r0, #1
 800889e:	4622      	mov	r2, r4
 80088a0:	42ba      	cmp	r2, r7
 80088a2:	d30a      	bcc.n	80088ba <__exponent+0x66>
 80088a4:	f10d 0209 	add.w	r2, sp, #9
 80088a8:	eba2 020c 	sub.w	r2, r2, ip
 80088ac:	42bc      	cmp	r4, r7
 80088ae:	bf88      	it	hi
 80088b0:	2200      	movhi	r2, #0
 80088b2:	4413      	add	r3, r2
 80088b4:	1a18      	subs	r0, r3, r0
 80088b6:	b003      	add	sp, #12
 80088b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80088be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80088c2:	e7ed      	b.n	80088a0 <__exponent+0x4c>
 80088c4:	2330      	movs	r3, #48	; 0x30
 80088c6:	3130      	adds	r1, #48	; 0x30
 80088c8:	7083      	strb	r3, [r0, #2]
 80088ca:	70c1      	strb	r1, [r0, #3]
 80088cc:	1d03      	adds	r3, r0, #4
 80088ce:	e7f1      	b.n	80088b4 <__exponent+0x60>

080088d0 <_printf_float>:
 80088d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d4:	ed2d 8b02 	vpush	{d8}
 80088d8:	b08d      	sub	sp, #52	; 0x34
 80088da:	460c      	mov	r4, r1
 80088dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80088e0:	4616      	mov	r6, r2
 80088e2:	461f      	mov	r7, r3
 80088e4:	4605      	mov	r5, r0
 80088e6:	f000 fcf5 	bl	80092d4 <_localeconv_r>
 80088ea:	f8d0 a000 	ldr.w	sl, [r0]
 80088ee:	4650      	mov	r0, sl
 80088f0:	f7f7 fcc6 	bl	8000280 <strlen>
 80088f4:	2300      	movs	r3, #0
 80088f6:	930a      	str	r3, [sp, #40]	; 0x28
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	9305      	str	r3, [sp, #20]
 80088fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008900:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008904:	3307      	adds	r3, #7
 8008906:	f023 0307 	bic.w	r3, r3, #7
 800890a:	f103 0208 	add.w	r2, r3, #8
 800890e:	f8c8 2000 	str.w	r2, [r8]
 8008912:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008916:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800891a:	9307      	str	r3, [sp, #28]
 800891c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008920:	ee08 0a10 	vmov	s16, r0
 8008924:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008928:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800892c:	4b9e      	ldr	r3, [pc, #632]	; (8008ba8 <_printf_float+0x2d8>)
 800892e:	f04f 32ff 	mov.w	r2, #4294967295
 8008932:	f7f8 f903 	bl	8000b3c <__aeabi_dcmpun>
 8008936:	bb88      	cbnz	r0, 800899c <_printf_float+0xcc>
 8008938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800893c:	4b9a      	ldr	r3, [pc, #616]	; (8008ba8 <_printf_float+0x2d8>)
 800893e:	f04f 32ff 	mov.w	r2, #4294967295
 8008942:	f7f8 f8dd 	bl	8000b00 <__aeabi_dcmple>
 8008946:	bb48      	cbnz	r0, 800899c <_printf_float+0xcc>
 8008948:	2200      	movs	r2, #0
 800894a:	2300      	movs	r3, #0
 800894c:	4640      	mov	r0, r8
 800894e:	4649      	mov	r1, r9
 8008950:	f7f8 f8cc 	bl	8000aec <__aeabi_dcmplt>
 8008954:	b110      	cbz	r0, 800895c <_printf_float+0x8c>
 8008956:	232d      	movs	r3, #45	; 0x2d
 8008958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800895c:	4a93      	ldr	r2, [pc, #588]	; (8008bac <_printf_float+0x2dc>)
 800895e:	4b94      	ldr	r3, [pc, #592]	; (8008bb0 <_printf_float+0x2e0>)
 8008960:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008964:	bf94      	ite	ls
 8008966:	4690      	movls	r8, r2
 8008968:	4698      	movhi	r8, r3
 800896a:	2303      	movs	r3, #3
 800896c:	6123      	str	r3, [r4, #16]
 800896e:	9b05      	ldr	r3, [sp, #20]
 8008970:	f023 0304 	bic.w	r3, r3, #4
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	f04f 0900 	mov.w	r9, #0
 800897a:	9700      	str	r7, [sp, #0]
 800897c:	4633      	mov	r3, r6
 800897e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008980:	4621      	mov	r1, r4
 8008982:	4628      	mov	r0, r5
 8008984:	f000 f9da 	bl	8008d3c <_printf_common>
 8008988:	3001      	adds	r0, #1
 800898a:	f040 8090 	bne.w	8008aae <_printf_float+0x1de>
 800898e:	f04f 30ff 	mov.w	r0, #4294967295
 8008992:	b00d      	add	sp, #52	; 0x34
 8008994:	ecbd 8b02 	vpop	{d8}
 8008998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899c:	4642      	mov	r2, r8
 800899e:	464b      	mov	r3, r9
 80089a0:	4640      	mov	r0, r8
 80089a2:	4649      	mov	r1, r9
 80089a4:	f7f8 f8ca 	bl	8000b3c <__aeabi_dcmpun>
 80089a8:	b140      	cbz	r0, 80089bc <_printf_float+0xec>
 80089aa:	464b      	mov	r3, r9
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	bfbc      	itt	lt
 80089b0:	232d      	movlt	r3, #45	; 0x2d
 80089b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80089b6:	4a7f      	ldr	r2, [pc, #508]	; (8008bb4 <_printf_float+0x2e4>)
 80089b8:	4b7f      	ldr	r3, [pc, #508]	; (8008bb8 <_printf_float+0x2e8>)
 80089ba:	e7d1      	b.n	8008960 <_printf_float+0x90>
 80089bc:	6863      	ldr	r3, [r4, #4]
 80089be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80089c2:	9206      	str	r2, [sp, #24]
 80089c4:	1c5a      	adds	r2, r3, #1
 80089c6:	d13f      	bne.n	8008a48 <_printf_float+0x178>
 80089c8:	2306      	movs	r3, #6
 80089ca:	6063      	str	r3, [r4, #4]
 80089cc:	9b05      	ldr	r3, [sp, #20]
 80089ce:	6861      	ldr	r1, [r4, #4]
 80089d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80089d4:	2300      	movs	r3, #0
 80089d6:	9303      	str	r3, [sp, #12]
 80089d8:	ab0a      	add	r3, sp, #40	; 0x28
 80089da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80089de:	ab09      	add	r3, sp, #36	; 0x24
 80089e0:	ec49 8b10 	vmov	d0, r8, r9
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	6022      	str	r2, [r4, #0]
 80089e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089ec:	4628      	mov	r0, r5
 80089ee:	f7ff fecf 	bl	8008790 <__cvt>
 80089f2:	9b06      	ldr	r3, [sp, #24]
 80089f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089f6:	2b47      	cmp	r3, #71	; 0x47
 80089f8:	4680      	mov	r8, r0
 80089fa:	d108      	bne.n	8008a0e <_printf_float+0x13e>
 80089fc:	1cc8      	adds	r0, r1, #3
 80089fe:	db02      	blt.n	8008a06 <_printf_float+0x136>
 8008a00:	6863      	ldr	r3, [r4, #4]
 8008a02:	4299      	cmp	r1, r3
 8008a04:	dd41      	ble.n	8008a8a <_printf_float+0x1ba>
 8008a06:	f1ab 0302 	sub.w	r3, fp, #2
 8008a0a:	fa5f fb83 	uxtb.w	fp, r3
 8008a0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a12:	d820      	bhi.n	8008a56 <_printf_float+0x186>
 8008a14:	3901      	subs	r1, #1
 8008a16:	465a      	mov	r2, fp
 8008a18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a1c:	9109      	str	r1, [sp, #36]	; 0x24
 8008a1e:	f7ff ff19 	bl	8008854 <__exponent>
 8008a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a24:	1813      	adds	r3, r2, r0
 8008a26:	2a01      	cmp	r2, #1
 8008a28:	4681      	mov	r9, r0
 8008a2a:	6123      	str	r3, [r4, #16]
 8008a2c:	dc02      	bgt.n	8008a34 <_printf_float+0x164>
 8008a2e:	6822      	ldr	r2, [r4, #0]
 8008a30:	07d2      	lsls	r2, r2, #31
 8008a32:	d501      	bpl.n	8008a38 <_printf_float+0x168>
 8008a34:	3301      	adds	r3, #1
 8008a36:	6123      	str	r3, [r4, #16]
 8008a38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d09c      	beq.n	800897a <_printf_float+0xaa>
 8008a40:	232d      	movs	r3, #45	; 0x2d
 8008a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a46:	e798      	b.n	800897a <_printf_float+0xaa>
 8008a48:	9a06      	ldr	r2, [sp, #24]
 8008a4a:	2a47      	cmp	r2, #71	; 0x47
 8008a4c:	d1be      	bne.n	80089cc <_printf_float+0xfc>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1bc      	bne.n	80089cc <_printf_float+0xfc>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e7b9      	b.n	80089ca <_printf_float+0xfa>
 8008a56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a5a:	d118      	bne.n	8008a8e <_printf_float+0x1be>
 8008a5c:	2900      	cmp	r1, #0
 8008a5e:	6863      	ldr	r3, [r4, #4]
 8008a60:	dd0b      	ble.n	8008a7a <_printf_float+0x1aa>
 8008a62:	6121      	str	r1, [r4, #16]
 8008a64:	b913      	cbnz	r3, 8008a6c <_printf_float+0x19c>
 8008a66:	6822      	ldr	r2, [r4, #0]
 8008a68:	07d0      	lsls	r0, r2, #31
 8008a6a:	d502      	bpl.n	8008a72 <_printf_float+0x1a2>
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	440b      	add	r3, r1
 8008a70:	6123      	str	r3, [r4, #16]
 8008a72:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a74:	f04f 0900 	mov.w	r9, #0
 8008a78:	e7de      	b.n	8008a38 <_printf_float+0x168>
 8008a7a:	b913      	cbnz	r3, 8008a82 <_printf_float+0x1b2>
 8008a7c:	6822      	ldr	r2, [r4, #0]
 8008a7e:	07d2      	lsls	r2, r2, #31
 8008a80:	d501      	bpl.n	8008a86 <_printf_float+0x1b6>
 8008a82:	3302      	adds	r3, #2
 8008a84:	e7f4      	b.n	8008a70 <_printf_float+0x1a0>
 8008a86:	2301      	movs	r3, #1
 8008a88:	e7f2      	b.n	8008a70 <_printf_float+0x1a0>
 8008a8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a90:	4299      	cmp	r1, r3
 8008a92:	db05      	blt.n	8008aa0 <_printf_float+0x1d0>
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	6121      	str	r1, [r4, #16]
 8008a98:	07d8      	lsls	r0, r3, #31
 8008a9a:	d5ea      	bpl.n	8008a72 <_printf_float+0x1a2>
 8008a9c:	1c4b      	adds	r3, r1, #1
 8008a9e:	e7e7      	b.n	8008a70 <_printf_float+0x1a0>
 8008aa0:	2900      	cmp	r1, #0
 8008aa2:	bfd4      	ite	le
 8008aa4:	f1c1 0202 	rsble	r2, r1, #2
 8008aa8:	2201      	movgt	r2, #1
 8008aaa:	4413      	add	r3, r2
 8008aac:	e7e0      	b.n	8008a70 <_printf_float+0x1a0>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	055a      	lsls	r2, r3, #21
 8008ab2:	d407      	bmi.n	8008ac4 <_printf_float+0x1f4>
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	4642      	mov	r2, r8
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4628      	mov	r0, r5
 8008abc:	47b8      	blx	r7
 8008abe:	3001      	adds	r0, #1
 8008ac0:	d12c      	bne.n	8008b1c <_printf_float+0x24c>
 8008ac2:	e764      	b.n	800898e <_printf_float+0xbe>
 8008ac4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ac8:	f240 80e0 	bls.w	8008c8c <_printf_float+0x3bc>
 8008acc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f7f8 f800 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d034      	beq.n	8008b46 <_printf_float+0x276>
 8008adc:	4a37      	ldr	r2, [pc, #220]	; (8008bbc <_printf_float+0x2ec>)
 8008ade:	2301      	movs	r3, #1
 8008ae0:	4631      	mov	r1, r6
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	47b8      	blx	r7
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	f43f af51 	beq.w	800898e <_printf_float+0xbe>
 8008aec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008af0:	429a      	cmp	r2, r3
 8008af2:	db02      	blt.n	8008afa <_printf_float+0x22a>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	07d8      	lsls	r0, r3, #31
 8008af8:	d510      	bpl.n	8008b1c <_printf_float+0x24c>
 8008afa:	ee18 3a10 	vmov	r3, s16
 8008afe:	4652      	mov	r2, sl
 8008b00:	4631      	mov	r1, r6
 8008b02:	4628      	mov	r0, r5
 8008b04:	47b8      	blx	r7
 8008b06:	3001      	adds	r0, #1
 8008b08:	f43f af41 	beq.w	800898e <_printf_float+0xbe>
 8008b0c:	f04f 0800 	mov.w	r8, #0
 8008b10:	f104 091a 	add.w	r9, r4, #26
 8008b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b16:	3b01      	subs	r3, #1
 8008b18:	4543      	cmp	r3, r8
 8008b1a:	dc09      	bgt.n	8008b30 <_printf_float+0x260>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	079b      	lsls	r3, r3, #30
 8008b20:	f100 8107 	bmi.w	8008d32 <_printf_float+0x462>
 8008b24:	68e0      	ldr	r0, [r4, #12]
 8008b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b28:	4298      	cmp	r0, r3
 8008b2a:	bfb8      	it	lt
 8008b2c:	4618      	movlt	r0, r3
 8008b2e:	e730      	b.n	8008992 <_printf_float+0xc2>
 8008b30:	2301      	movs	r3, #1
 8008b32:	464a      	mov	r2, r9
 8008b34:	4631      	mov	r1, r6
 8008b36:	4628      	mov	r0, r5
 8008b38:	47b8      	blx	r7
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	f43f af27 	beq.w	800898e <_printf_float+0xbe>
 8008b40:	f108 0801 	add.w	r8, r8, #1
 8008b44:	e7e6      	b.n	8008b14 <_printf_float+0x244>
 8008b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	dc39      	bgt.n	8008bc0 <_printf_float+0x2f0>
 8008b4c:	4a1b      	ldr	r2, [pc, #108]	; (8008bbc <_printf_float+0x2ec>)
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4631      	mov	r1, r6
 8008b52:	4628      	mov	r0, r5
 8008b54:	47b8      	blx	r7
 8008b56:	3001      	adds	r0, #1
 8008b58:	f43f af19 	beq.w	800898e <_printf_float+0xbe>
 8008b5c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b60:	4313      	orrs	r3, r2
 8008b62:	d102      	bne.n	8008b6a <_printf_float+0x29a>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	07d9      	lsls	r1, r3, #31
 8008b68:	d5d8      	bpl.n	8008b1c <_printf_float+0x24c>
 8008b6a:	ee18 3a10 	vmov	r3, s16
 8008b6e:	4652      	mov	r2, sl
 8008b70:	4631      	mov	r1, r6
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	f43f af09 	beq.w	800898e <_printf_float+0xbe>
 8008b7c:	f04f 0900 	mov.w	r9, #0
 8008b80:	f104 0a1a 	add.w	sl, r4, #26
 8008b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b86:	425b      	negs	r3, r3
 8008b88:	454b      	cmp	r3, r9
 8008b8a:	dc01      	bgt.n	8008b90 <_printf_float+0x2c0>
 8008b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b8e:	e792      	b.n	8008ab6 <_printf_float+0x1e6>
 8008b90:	2301      	movs	r3, #1
 8008b92:	4652      	mov	r2, sl
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f aef7 	beq.w	800898e <_printf_float+0xbe>
 8008ba0:	f109 0901 	add.w	r9, r9, #1
 8008ba4:	e7ee      	b.n	8008b84 <_printf_float+0x2b4>
 8008ba6:	bf00      	nop
 8008ba8:	7fefffff 	.word	0x7fefffff
 8008bac:	0800b40c 	.word	0x0800b40c
 8008bb0:	0800b410 	.word	0x0800b410
 8008bb4:	0800b414 	.word	0x0800b414
 8008bb8:	0800b418 	.word	0x0800b418
 8008bbc:	0800b41c 	.word	0x0800b41c
 8008bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	bfa8      	it	ge
 8008bc8:	461a      	movge	r2, r3
 8008bca:	2a00      	cmp	r2, #0
 8008bcc:	4691      	mov	r9, r2
 8008bce:	dc37      	bgt.n	8008c40 <_printf_float+0x370>
 8008bd0:	f04f 0b00 	mov.w	fp, #0
 8008bd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bd8:	f104 021a 	add.w	r2, r4, #26
 8008bdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bde:	9305      	str	r3, [sp, #20]
 8008be0:	eba3 0309 	sub.w	r3, r3, r9
 8008be4:	455b      	cmp	r3, fp
 8008be6:	dc33      	bgt.n	8008c50 <_printf_float+0x380>
 8008be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bec:	429a      	cmp	r2, r3
 8008bee:	db3b      	blt.n	8008c68 <_printf_float+0x398>
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	07da      	lsls	r2, r3, #31
 8008bf4:	d438      	bmi.n	8008c68 <_printf_float+0x398>
 8008bf6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008bfa:	eba2 0903 	sub.w	r9, r2, r3
 8008bfe:	9b05      	ldr	r3, [sp, #20]
 8008c00:	1ad2      	subs	r2, r2, r3
 8008c02:	4591      	cmp	r9, r2
 8008c04:	bfa8      	it	ge
 8008c06:	4691      	movge	r9, r2
 8008c08:	f1b9 0f00 	cmp.w	r9, #0
 8008c0c:	dc35      	bgt.n	8008c7a <_printf_float+0x3aa>
 8008c0e:	f04f 0800 	mov.w	r8, #0
 8008c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c16:	f104 0a1a 	add.w	sl, r4, #26
 8008c1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c1e:	1a9b      	subs	r3, r3, r2
 8008c20:	eba3 0309 	sub.w	r3, r3, r9
 8008c24:	4543      	cmp	r3, r8
 8008c26:	f77f af79 	ble.w	8008b1c <_printf_float+0x24c>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4652      	mov	r2, sl
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b8      	blx	r7
 8008c34:	3001      	adds	r0, #1
 8008c36:	f43f aeaa 	beq.w	800898e <_printf_float+0xbe>
 8008c3a:	f108 0801 	add.w	r8, r8, #1
 8008c3e:	e7ec      	b.n	8008c1a <_printf_float+0x34a>
 8008c40:	4613      	mov	r3, r2
 8008c42:	4631      	mov	r1, r6
 8008c44:	4642      	mov	r2, r8
 8008c46:	4628      	mov	r0, r5
 8008c48:	47b8      	blx	r7
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d1c0      	bne.n	8008bd0 <_printf_float+0x300>
 8008c4e:	e69e      	b.n	800898e <_printf_float+0xbe>
 8008c50:	2301      	movs	r3, #1
 8008c52:	4631      	mov	r1, r6
 8008c54:	4628      	mov	r0, r5
 8008c56:	9205      	str	r2, [sp, #20]
 8008c58:	47b8      	blx	r7
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	f43f ae97 	beq.w	800898e <_printf_float+0xbe>
 8008c60:	9a05      	ldr	r2, [sp, #20]
 8008c62:	f10b 0b01 	add.w	fp, fp, #1
 8008c66:	e7b9      	b.n	8008bdc <_printf_float+0x30c>
 8008c68:	ee18 3a10 	vmov	r3, s16
 8008c6c:	4652      	mov	r2, sl
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b8      	blx	r7
 8008c74:	3001      	adds	r0, #1
 8008c76:	d1be      	bne.n	8008bf6 <_printf_float+0x326>
 8008c78:	e689      	b.n	800898e <_printf_float+0xbe>
 8008c7a:	9a05      	ldr	r2, [sp, #20]
 8008c7c:	464b      	mov	r3, r9
 8008c7e:	4442      	add	r2, r8
 8008c80:	4631      	mov	r1, r6
 8008c82:	4628      	mov	r0, r5
 8008c84:	47b8      	blx	r7
 8008c86:	3001      	adds	r0, #1
 8008c88:	d1c1      	bne.n	8008c0e <_printf_float+0x33e>
 8008c8a:	e680      	b.n	800898e <_printf_float+0xbe>
 8008c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c8e:	2a01      	cmp	r2, #1
 8008c90:	dc01      	bgt.n	8008c96 <_printf_float+0x3c6>
 8008c92:	07db      	lsls	r3, r3, #31
 8008c94:	d53a      	bpl.n	8008d0c <_printf_float+0x43c>
 8008c96:	2301      	movs	r3, #1
 8008c98:	4642      	mov	r2, r8
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	47b8      	blx	r7
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	f43f ae74 	beq.w	800898e <_printf_float+0xbe>
 8008ca6:	ee18 3a10 	vmov	r3, s16
 8008caa:	4652      	mov	r2, sl
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	f43f ae6b 	beq.w	800898e <_printf_float+0xbe>
 8008cb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008cc4:	f7f7 ff08 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cc8:	b9d8      	cbnz	r0, 8008d02 <_printf_float+0x432>
 8008cca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008cce:	f108 0201 	add.w	r2, r8, #1
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b8      	blx	r7
 8008cd8:	3001      	adds	r0, #1
 8008cda:	d10e      	bne.n	8008cfa <_printf_float+0x42a>
 8008cdc:	e657      	b.n	800898e <_printf_float+0xbe>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4652      	mov	r2, sl
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	47b8      	blx	r7
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f43f ae50 	beq.w	800898e <_printf_float+0xbe>
 8008cee:	f108 0801 	add.w	r8, r8, #1
 8008cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	4543      	cmp	r3, r8
 8008cf8:	dcf1      	bgt.n	8008cde <_printf_float+0x40e>
 8008cfa:	464b      	mov	r3, r9
 8008cfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d00:	e6da      	b.n	8008ab8 <_printf_float+0x1e8>
 8008d02:	f04f 0800 	mov.w	r8, #0
 8008d06:	f104 0a1a 	add.w	sl, r4, #26
 8008d0a:	e7f2      	b.n	8008cf2 <_printf_float+0x422>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	4642      	mov	r2, r8
 8008d10:	e7df      	b.n	8008cd2 <_printf_float+0x402>
 8008d12:	2301      	movs	r3, #1
 8008d14:	464a      	mov	r2, r9
 8008d16:	4631      	mov	r1, r6
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b8      	blx	r7
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	f43f ae36 	beq.w	800898e <_printf_float+0xbe>
 8008d22:	f108 0801 	add.w	r8, r8, #1
 8008d26:	68e3      	ldr	r3, [r4, #12]
 8008d28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d2a:	1a5b      	subs	r3, r3, r1
 8008d2c:	4543      	cmp	r3, r8
 8008d2e:	dcf0      	bgt.n	8008d12 <_printf_float+0x442>
 8008d30:	e6f8      	b.n	8008b24 <_printf_float+0x254>
 8008d32:	f04f 0800 	mov.w	r8, #0
 8008d36:	f104 0919 	add.w	r9, r4, #25
 8008d3a:	e7f4      	b.n	8008d26 <_printf_float+0x456>

08008d3c <_printf_common>:
 8008d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d40:	4616      	mov	r6, r2
 8008d42:	4699      	mov	r9, r3
 8008d44:	688a      	ldr	r2, [r1, #8]
 8008d46:	690b      	ldr	r3, [r1, #16]
 8008d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	bfb8      	it	lt
 8008d50:	4613      	movlt	r3, r2
 8008d52:	6033      	str	r3, [r6, #0]
 8008d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d58:	4607      	mov	r7, r0
 8008d5a:	460c      	mov	r4, r1
 8008d5c:	b10a      	cbz	r2, 8008d62 <_printf_common+0x26>
 8008d5e:	3301      	adds	r3, #1
 8008d60:	6033      	str	r3, [r6, #0]
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	0699      	lsls	r1, r3, #26
 8008d66:	bf42      	ittt	mi
 8008d68:	6833      	ldrmi	r3, [r6, #0]
 8008d6a:	3302      	addmi	r3, #2
 8008d6c:	6033      	strmi	r3, [r6, #0]
 8008d6e:	6825      	ldr	r5, [r4, #0]
 8008d70:	f015 0506 	ands.w	r5, r5, #6
 8008d74:	d106      	bne.n	8008d84 <_printf_common+0x48>
 8008d76:	f104 0a19 	add.w	sl, r4, #25
 8008d7a:	68e3      	ldr	r3, [r4, #12]
 8008d7c:	6832      	ldr	r2, [r6, #0]
 8008d7e:	1a9b      	subs	r3, r3, r2
 8008d80:	42ab      	cmp	r3, r5
 8008d82:	dc26      	bgt.n	8008dd2 <_printf_common+0x96>
 8008d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d88:	1e13      	subs	r3, r2, #0
 8008d8a:	6822      	ldr	r2, [r4, #0]
 8008d8c:	bf18      	it	ne
 8008d8e:	2301      	movne	r3, #1
 8008d90:	0692      	lsls	r2, r2, #26
 8008d92:	d42b      	bmi.n	8008dec <_printf_common+0xb0>
 8008d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d98:	4649      	mov	r1, r9
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	47c0      	blx	r8
 8008d9e:	3001      	adds	r0, #1
 8008da0:	d01e      	beq.n	8008de0 <_printf_common+0xa4>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	6922      	ldr	r2, [r4, #16]
 8008da6:	f003 0306 	and.w	r3, r3, #6
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	bf02      	ittt	eq
 8008dae:	68e5      	ldreq	r5, [r4, #12]
 8008db0:	6833      	ldreq	r3, [r6, #0]
 8008db2:	1aed      	subeq	r5, r5, r3
 8008db4:	68a3      	ldr	r3, [r4, #8]
 8008db6:	bf0c      	ite	eq
 8008db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dbc:	2500      	movne	r5, #0
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	bfc4      	itt	gt
 8008dc2:	1a9b      	subgt	r3, r3, r2
 8008dc4:	18ed      	addgt	r5, r5, r3
 8008dc6:	2600      	movs	r6, #0
 8008dc8:	341a      	adds	r4, #26
 8008dca:	42b5      	cmp	r5, r6
 8008dcc:	d11a      	bne.n	8008e04 <_printf_common+0xc8>
 8008dce:	2000      	movs	r0, #0
 8008dd0:	e008      	b.n	8008de4 <_printf_common+0xa8>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	4652      	mov	r2, sl
 8008dd6:	4649      	mov	r1, r9
 8008dd8:	4638      	mov	r0, r7
 8008dda:	47c0      	blx	r8
 8008ddc:	3001      	adds	r0, #1
 8008dde:	d103      	bne.n	8008de8 <_printf_common+0xac>
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295
 8008de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de8:	3501      	adds	r5, #1
 8008dea:	e7c6      	b.n	8008d7a <_printf_common+0x3e>
 8008dec:	18e1      	adds	r1, r4, r3
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	2030      	movs	r0, #48	; 0x30
 8008df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008df6:	4422      	add	r2, r4
 8008df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e00:	3302      	adds	r3, #2
 8008e02:	e7c7      	b.n	8008d94 <_printf_common+0x58>
 8008e04:	2301      	movs	r3, #1
 8008e06:	4622      	mov	r2, r4
 8008e08:	4649      	mov	r1, r9
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	47c0      	blx	r8
 8008e0e:	3001      	adds	r0, #1
 8008e10:	d0e6      	beq.n	8008de0 <_printf_common+0xa4>
 8008e12:	3601      	adds	r6, #1
 8008e14:	e7d9      	b.n	8008dca <_printf_common+0x8e>
	...

08008e18 <_printf_i>:
 8008e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e1c:	7e0f      	ldrb	r7, [r1, #24]
 8008e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e20:	2f78      	cmp	r7, #120	; 0x78
 8008e22:	4691      	mov	r9, r2
 8008e24:	4680      	mov	r8, r0
 8008e26:	460c      	mov	r4, r1
 8008e28:	469a      	mov	sl, r3
 8008e2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e2e:	d807      	bhi.n	8008e40 <_printf_i+0x28>
 8008e30:	2f62      	cmp	r7, #98	; 0x62
 8008e32:	d80a      	bhi.n	8008e4a <_printf_i+0x32>
 8008e34:	2f00      	cmp	r7, #0
 8008e36:	f000 80d4 	beq.w	8008fe2 <_printf_i+0x1ca>
 8008e3a:	2f58      	cmp	r7, #88	; 0x58
 8008e3c:	f000 80c0 	beq.w	8008fc0 <_printf_i+0x1a8>
 8008e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e48:	e03a      	b.n	8008ec0 <_printf_i+0xa8>
 8008e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e4e:	2b15      	cmp	r3, #21
 8008e50:	d8f6      	bhi.n	8008e40 <_printf_i+0x28>
 8008e52:	a101      	add	r1, pc, #4	; (adr r1, 8008e58 <_printf_i+0x40>)
 8008e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e58:	08008eb1 	.word	0x08008eb1
 8008e5c:	08008ec5 	.word	0x08008ec5
 8008e60:	08008e41 	.word	0x08008e41
 8008e64:	08008e41 	.word	0x08008e41
 8008e68:	08008e41 	.word	0x08008e41
 8008e6c:	08008e41 	.word	0x08008e41
 8008e70:	08008ec5 	.word	0x08008ec5
 8008e74:	08008e41 	.word	0x08008e41
 8008e78:	08008e41 	.word	0x08008e41
 8008e7c:	08008e41 	.word	0x08008e41
 8008e80:	08008e41 	.word	0x08008e41
 8008e84:	08008fc9 	.word	0x08008fc9
 8008e88:	08008ef1 	.word	0x08008ef1
 8008e8c:	08008f83 	.word	0x08008f83
 8008e90:	08008e41 	.word	0x08008e41
 8008e94:	08008e41 	.word	0x08008e41
 8008e98:	08008feb 	.word	0x08008feb
 8008e9c:	08008e41 	.word	0x08008e41
 8008ea0:	08008ef1 	.word	0x08008ef1
 8008ea4:	08008e41 	.word	0x08008e41
 8008ea8:	08008e41 	.word	0x08008e41
 8008eac:	08008f8b 	.word	0x08008f8b
 8008eb0:	682b      	ldr	r3, [r5, #0]
 8008eb2:	1d1a      	adds	r2, r3, #4
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	602a      	str	r2, [r5, #0]
 8008eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e09f      	b.n	8009004 <_printf_i+0x1ec>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	682b      	ldr	r3, [r5, #0]
 8008ec8:	0607      	lsls	r7, r0, #24
 8008eca:	f103 0104 	add.w	r1, r3, #4
 8008ece:	6029      	str	r1, [r5, #0]
 8008ed0:	d501      	bpl.n	8008ed6 <_printf_i+0xbe>
 8008ed2:	681e      	ldr	r6, [r3, #0]
 8008ed4:	e003      	b.n	8008ede <_printf_i+0xc6>
 8008ed6:	0646      	lsls	r6, r0, #25
 8008ed8:	d5fb      	bpl.n	8008ed2 <_printf_i+0xba>
 8008eda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008ede:	2e00      	cmp	r6, #0
 8008ee0:	da03      	bge.n	8008eea <_printf_i+0xd2>
 8008ee2:	232d      	movs	r3, #45	; 0x2d
 8008ee4:	4276      	negs	r6, r6
 8008ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eea:	485a      	ldr	r0, [pc, #360]	; (8009054 <_printf_i+0x23c>)
 8008eec:	230a      	movs	r3, #10
 8008eee:	e012      	b.n	8008f16 <_printf_i+0xfe>
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	6820      	ldr	r0, [r4, #0]
 8008ef4:	1d19      	adds	r1, r3, #4
 8008ef6:	6029      	str	r1, [r5, #0]
 8008ef8:	0605      	lsls	r5, r0, #24
 8008efa:	d501      	bpl.n	8008f00 <_printf_i+0xe8>
 8008efc:	681e      	ldr	r6, [r3, #0]
 8008efe:	e002      	b.n	8008f06 <_printf_i+0xee>
 8008f00:	0641      	lsls	r1, r0, #25
 8008f02:	d5fb      	bpl.n	8008efc <_printf_i+0xe4>
 8008f04:	881e      	ldrh	r6, [r3, #0]
 8008f06:	4853      	ldr	r0, [pc, #332]	; (8009054 <_printf_i+0x23c>)
 8008f08:	2f6f      	cmp	r7, #111	; 0x6f
 8008f0a:	bf0c      	ite	eq
 8008f0c:	2308      	moveq	r3, #8
 8008f0e:	230a      	movne	r3, #10
 8008f10:	2100      	movs	r1, #0
 8008f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f16:	6865      	ldr	r5, [r4, #4]
 8008f18:	60a5      	str	r5, [r4, #8]
 8008f1a:	2d00      	cmp	r5, #0
 8008f1c:	bfa2      	ittt	ge
 8008f1e:	6821      	ldrge	r1, [r4, #0]
 8008f20:	f021 0104 	bicge.w	r1, r1, #4
 8008f24:	6021      	strge	r1, [r4, #0]
 8008f26:	b90e      	cbnz	r6, 8008f2c <_printf_i+0x114>
 8008f28:	2d00      	cmp	r5, #0
 8008f2a:	d04b      	beq.n	8008fc4 <_printf_i+0x1ac>
 8008f2c:	4615      	mov	r5, r2
 8008f2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f32:	fb03 6711 	mls	r7, r3, r1, r6
 8008f36:	5dc7      	ldrb	r7, [r0, r7]
 8008f38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f3c:	4637      	mov	r7, r6
 8008f3e:	42bb      	cmp	r3, r7
 8008f40:	460e      	mov	r6, r1
 8008f42:	d9f4      	bls.n	8008f2e <_printf_i+0x116>
 8008f44:	2b08      	cmp	r3, #8
 8008f46:	d10b      	bne.n	8008f60 <_printf_i+0x148>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	07de      	lsls	r6, r3, #31
 8008f4c:	d508      	bpl.n	8008f60 <_printf_i+0x148>
 8008f4e:	6923      	ldr	r3, [r4, #16]
 8008f50:	6861      	ldr	r1, [r4, #4]
 8008f52:	4299      	cmp	r1, r3
 8008f54:	bfde      	ittt	le
 8008f56:	2330      	movle	r3, #48	; 0x30
 8008f58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f60:	1b52      	subs	r2, r2, r5
 8008f62:	6122      	str	r2, [r4, #16]
 8008f64:	f8cd a000 	str.w	sl, [sp]
 8008f68:	464b      	mov	r3, r9
 8008f6a:	aa03      	add	r2, sp, #12
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4640      	mov	r0, r8
 8008f70:	f7ff fee4 	bl	8008d3c <_printf_common>
 8008f74:	3001      	adds	r0, #1
 8008f76:	d14a      	bne.n	800900e <_printf_i+0x1f6>
 8008f78:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7c:	b004      	add	sp, #16
 8008f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	f043 0320 	orr.w	r3, r3, #32
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	4833      	ldr	r0, [pc, #204]	; (8009058 <_printf_i+0x240>)
 8008f8c:	2778      	movs	r7, #120	; 0x78
 8008f8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	6829      	ldr	r1, [r5, #0]
 8008f96:	061f      	lsls	r7, r3, #24
 8008f98:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f9c:	d402      	bmi.n	8008fa4 <_printf_i+0x18c>
 8008f9e:	065f      	lsls	r7, r3, #25
 8008fa0:	bf48      	it	mi
 8008fa2:	b2b6      	uxthmi	r6, r6
 8008fa4:	07df      	lsls	r7, r3, #31
 8008fa6:	bf48      	it	mi
 8008fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8008fac:	6029      	str	r1, [r5, #0]
 8008fae:	bf48      	it	mi
 8008fb0:	6023      	strmi	r3, [r4, #0]
 8008fb2:	b91e      	cbnz	r6, 8008fbc <_printf_i+0x1a4>
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	f023 0320 	bic.w	r3, r3, #32
 8008fba:	6023      	str	r3, [r4, #0]
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	e7a7      	b.n	8008f10 <_printf_i+0xf8>
 8008fc0:	4824      	ldr	r0, [pc, #144]	; (8009054 <_printf_i+0x23c>)
 8008fc2:	e7e4      	b.n	8008f8e <_printf_i+0x176>
 8008fc4:	4615      	mov	r5, r2
 8008fc6:	e7bd      	b.n	8008f44 <_printf_i+0x12c>
 8008fc8:	682b      	ldr	r3, [r5, #0]
 8008fca:	6826      	ldr	r6, [r4, #0]
 8008fcc:	6961      	ldr	r1, [r4, #20]
 8008fce:	1d18      	adds	r0, r3, #4
 8008fd0:	6028      	str	r0, [r5, #0]
 8008fd2:	0635      	lsls	r5, r6, #24
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	d501      	bpl.n	8008fdc <_printf_i+0x1c4>
 8008fd8:	6019      	str	r1, [r3, #0]
 8008fda:	e002      	b.n	8008fe2 <_printf_i+0x1ca>
 8008fdc:	0670      	lsls	r0, r6, #25
 8008fde:	d5fb      	bpl.n	8008fd8 <_printf_i+0x1c0>
 8008fe0:	8019      	strh	r1, [r3, #0]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	6123      	str	r3, [r4, #16]
 8008fe6:	4615      	mov	r5, r2
 8008fe8:	e7bc      	b.n	8008f64 <_printf_i+0x14c>
 8008fea:	682b      	ldr	r3, [r5, #0]
 8008fec:	1d1a      	adds	r2, r3, #4
 8008fee:	602a      	str	r2, [r5, #0]
 8008ff0:	681d      	ldr	r5, [r3, #0]
 8008ff2:	6862      	ldr	r2, [r4, #4]
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f7f7 f8f2 	bl	80001e0 <memchr>
 8008ffc:	b108      	cbz	r0, 8009002 <_printf_i+0x1ea>
 8008ffe:	1b40      	subs	r0, r0, r5
 8009000:	6060      	str	r0, [r4, #4]
 8009002:	6863      	ldr	r3, [r4, #4]
 8009004:	6123      	str	r3, [r4, #16]
 8009006:	2300      	movs	r3, #0
 8009008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800900c:	e7aa      	b.n	8008f64 <_printf_i+0x14c>
 800900e:	6923      	ldr	r3, [r4, #16]
 8009010:	462a      	mov	r2, r5
 8009012:	4649      	mov	r1, r9
 8009014:	4640      	mov	r0, r8
 8009016:	47d0      	blx	sl
 8009018:	3001      	adds	r0, #1
 800901a:	d0ad      	beq.n	8008f78 <_printf_i+0x160>
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	079b      	lsls	r3, r3, #30
 8009020:	d413      	bmi.n	800904a <_printf_i+0x232>
 8009022:	68e0      	ldr	r0, [r4, #12]
 8009024:	9b03      	ldr	r3, [sp, #12]
 8009026:	4298      	cmp	r0, r3
 8009028:	bfb8      	it	lt
 800902a:	4618      	movlt	r0, r3
 800902c:	e7a6      	b.n	8008f7c <_printf_i+0x164>
 800902e:	2301      	movs	r3, #1
 8009030:	4632      	mov	r2, r6
 8009032:	4649      	mov	r1, r9
 8009034:	4640      	mov	r0, r8
 8009036:	47d0      	blx	sl
 8009038:	3001      	adds	r0, #1
 800903a:	d09d      	beq.n	8008f78 <_printf_i+0x160>
 800903c:	3501      	adds	r5, #1
 800903e:	68e3      	ldr	r3, [r4, #12]
 8009040:	9903      	ldr	r1, [sp, #12]
 8009042:	1a5b      	subs	r3, r3, r1
 8009044:	42ab      	cmp	r3, r5
 8009046:	dcf2      	bgt.n	800902e <_printf_i+0x216>
 8009048:	e7eb      	b.n	8009022 <_printf_i+0x20a>
 800904a:	2500      	movs	r5, #0
 800904c:	f104 0619 	add.w	r6, r4, #25
 8009050:	e7f5      	b.n	800903e <_printf_i+0x226>
 8009052:	bf00      	nop
 8009054:	0800b41e 	.word	0x0800b41e
 8009058:	0800b42f 	.word	0x0800b42f

0800905c <std>:
 800905c:	2300      	movs	r3, #0
 800905e:	b510      	push	{r4, lr}
 8009060:	4604      	mov	r4, r0
 8009062:	e9c0 3300 	strd	r3, r3, [r0]
 8009066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800906a:	6083      	str	r3, [r0, #8]
 800906c:	8181      	strh	r1, [r0, #12]
 800906e:	6643      	str	r3, [r0, #100]	; 0x64
 8009070:	81c2      	strh	r2, [r0, #14]
 8009072:	6183      	str	r3, [r0, #24]
 8009074:	4619      	mov	r1, r3
 8009076:	2208      	movs	r2, #8
 8009078:	305c      	adds	r0, #92	; 0x5c
 800907a:	f000 f914 	bl	80092a6 <memset>
 800907e:	4b0d      	ldr	r3, [pc, #52]	; (80090b4 <std+0x58>)
 8009080:	6263      	str	r3, [r4, #36]	; 0x24
 8009082:	4b0d      	ldr	r3, [pc, #52]	; (80090b8 <std+0x5c>)
 8009084:	62a3      	str	r3, [r4, #40]	; 0x28
 8009086:	4b0d      	ldr	r3, [pc, #52]	; (80090bc <std+0x60>)
 8009088:	62e3      	str	r3, [r4, #44]	; 0x2c
 800908a:	4b0d      	ldr	r3, [pc, #52]	; (80090c0 <std+0x64>)
 800908c:	6323      	str	r3, [r4, #48]	; 0x30
 800908e:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <std+0x68>)
 8009090:	6224      	str	r4, [r4, #32]
 8009092:	429c      	cmp	r4, r3
 8009094:	d006      	beq.n	80090a4 <std+0x48>
 8009096:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800909a:	4294      	cmp	r4, r2
 800909c:	d002      	beq.n	80090a4 <std+0x48>
 800909e:	33d0      	adds	r3, #208	; 0xd0
 80090a0:	429c      	cmp	r4, r3
 80090a2:	d105      	bne.n	80090b0 <std+0x54>
 80090a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80090a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090ac:	f000 b996 	b.w	80093dc <__retarget_lock_init_recursive>
 80090b0:	bd10      	pop	{r4, pc}
 80090b2:	bf00      	nop
 80090b4:	08009221 	.word	0x08009221
 80090b8:	08009243 	.word	0x08009243
 80090bc:	0800927b 	.word	0x0800927b
 80090c0:	0800929f 	.word	0x0800929f
 80090c4:	200003b8 	.word	0x200003b8

080090c8 <stdio_exit_handler>:
 80090c8:	4a02      	ldr	r2, [pc, #8]	; (80090d4 <stdio_exit_handler+0xc>)
 80090ca:	4903      	ldr	r1, [pc, #12]	; (80090d8 <stdio_exit_handler+0x10>)
 80090cc:	4803      	ldr	r0, [pc, #12]	; (80090dc <stdio_exit_handler+0x14>)
 80090ce:	f000 b869 	b.w	80091a4 <_fwalk_sglue>
 80090d2:	bf00      	nop
 80090d4:	20000010 	.word	0x20000010
 80090d8:	0800ac41 	.word	0x0800ac41
 80090dc:	2000001c 	.word	0x2000001c

080090e0 <cleanup_stdio>:
 80090e0:	6841      	ldr	r1, [r0, #4]
 80090e2:	4b0c      	ldr	r3, [pc, #48]	; (8009114 <cleanup_stdio+0x34>)
 80090e4:	4299      	cmp	r1, r3
 80090e6:	b510      	push	{r4, lr}
 80090e8:	4604      	mov	r4, r0
 80090ea:	d001      	beq.n	80090f0 <cleanup_stdio+0x10>
 80090ec:	f001 fda8 	bl	800ac40 <_fflush_r>
 80090f0:	68a1      	ldr	r1, [r4, #8]
 80090f2:	4b09      	ldr	r3, [pc, #36]	; (8009118 <cleanup_stdio+0x38>)
 80090f4:	4299      	cmp	r1, r3
 80090f6:	d002      	beq.n	80090fe <cleanup_stdio+0x1e>
 80090f8:	4620      	mov	r0, r4
 80090fa:	f001 fda1 	bl	800ac40 <_fflush_r>
 80090fe:	68e1      	ldr	r1, [r4, #12]
 8009100:	4b06      	ldr	r3, [pc, #24]	; (800911c <cleanup_stdio+0x3c>)
 8009102:	4299      	cmp	r1, r3
 8009104:	d004      	beq.n	8009110 <cleanup_stdio+0x30>
 8009106:	4620      	mov	r0, r4
 8009108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800910c:	f001 bd98 	b.w	800ac40 <_fflush_r>
 8009110:	bd10      	pop	{r4, pc}
 8009112:	bf00      	nop
 8009114:	200003b8 	.word	0x200003b8
 8009118:	20000420 	.word	0x20000420
 800911c:	20000488 	.word	0x20000488

08009120 <global_stdio_init.part.0>:
 8009120:	b510      	push	{r4, lr}
 8009122:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <global_stdio_init.part.0+0x30>)
 8009124:	4c0b      	ldr	r4, [pc, #44]	; (8009154 <global_stdio_init.part.0+0x34>)
 8009126:	4a0c      	ldr	r2, [pc, #48]	; (8009158 <global_stdio_init.part.0+0x38>)
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	4620      	mov	r0, r4
 800912c:	2200      	movs	r2, #0
 800912e:	2104      	movs	r1, #4
 8009130:	f7ff ff94 	bl	800905c <std>
 8009134:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009138:	2201      	movs	r2, #1
 800913a:	2109      	movs	r1, #9
 800913c:	f7ff ff8e 	bl	800905c <std>
 8009140:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009144:	2202      	movs	r2, #2
 8009146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800914a:	2112      	movs	r1, #18
 800914c:	f7ff bf86 	b.w	800905c <std>
 8009150:	200004f0 	.word	0x200004f0
 8009154:	200003b8 	.word	0x200003b8
 8009158:	080090c9 	.word	0x080090c9

0800915c <__sfp_lock_acquire>:
 800915c:	4801      	ldr	r0, [pc, #4]	; (8009164 <__sfp_lock_acquire+0x8>)
 800915e:	f000 b93e 	b.w	80093de <__retarget_lock_acquire_recursive>
 8009162:	bf00      	nop
 8009164:	200004f9 	.word	0x200004f9

08009168 <__sfp_lock_release>:
 8009168:	4801      	ldr	r0, [pc, #4]	; (8009170 <__sfp_lock_release+0x8>)
 800916a:	f000 b939 	b.w	80093e0 <__retarget_lock_release_recursive>
 800916e:	bf00      	nop
 8009170:	200004f9 	.word	0x200004f9

08009174 <__sinit>:
 8009174:	b510      	push	{r4, lr}
 8009176:	4604      	mov	r4, r0
 8009178:	f7ff fff0 	bl	800915c <__sfp_lock_acquire>
 800917c:	6a23      	ldr	r3, [r4, #32]
 800917e:	b11b      	cbz	r3, 8009188 <__sinit+0x14>
 8009180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009184:	f7ff bff0 	b.w	8009168 <__sfp_lock_release>
 8009188:	4b04      	ldr	r3, [pc, #16]	; (800919c <__sinit+0x28>)
 800918a:	6223      	str	r3, [r4, #32]
 800918c:	4b04      	ldr	r3, [pc, #16]	; (80091a0 <__sinit+0x2c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1f5      	bne.n	8009180 <__sinit+0xc>
 8009194:	f7ff ffc4 	bl	8009120 <global_stdio_init.part.0>
 8009198:	e7f2      	b.n	8009180 <__sinit+0xc>
 800919a:	bf00      	nop
 800919c:	080090e1 	.word	0x080090e1
 80091a0:	200004f0 	.word	0x200004f0

080091a4 <_fwalk_sglue>:
 80091a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a8:	4607      	mov	r7, r0
 80091aa:	4688      	mov	r8, r1
 80091ac:	4614      	mov	r4, r2
 80091ae:	2600      	movs	r6, #0
 80091b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091b4:	f1b9 0901 	subs.w	r9, r9, #1
 80091b8:	d505      	bpl.n	80091c6 <_fwalk_sglue+0x22>
 80091ba:	6824      	ldr	r4, [r4, #0]
 80091bc:	2c00      	cmp	r4, #0
 80091be:	d1f7      	bne.n	80091b0 <_fwalk_sglue+0xc>
 80091c0:	4630      	mov	r0, r6
 80091c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091c6:	89ab      	ldrh	r3, [r5, #12]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d907      	bls.n	80091dc <_fwalk_sglue+0x38>
 80091cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091d0:	3301      	adds	r3, #1
 80091d2:	d003      	beq.n	80091dc <_fwalk_sglue+0x38>
 80091d4:	4629      	mov	r1, r5
 80091d6:	4638      	mov	r0, r7
 80091d8:	47c0      	blx	r8
 80091da:	4306      	orrs	r6, r0
 80091dc:	3568      	adds	r5, #104	; 0x68
 80091de:	e7e9      	b.n	80091b4 <_fwalk_sglue+0x10>

080091e0 <siprintf>:
 80091e0:	b40e      	push	{r1, r2, r3}
 80091e2:	b500      	push	{lr}
 80091e4:	b09c      	sub	sp, #112	; 0x70
 80091e6:	ab1d      	add	r3, sp, #116	; 0x74
 80091e8:	9002      	str	r0, [sp, #8]
 80091ea:	9006      	str	r0, [sp, #24]
 80091ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091f0:	4809      	ldr	r0, [pc, #36]	; (8009218 <siprintf+0x38>)
 80091f2:	9107      	str	r1, [sp, #28]
 80091f4:	9104      	str	r1, [sp, #16]
 80091f6:	4909      	ldr	r1, [pc, #36]	; (800921c <siprintf+0x3c>)
 80091f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091fc:	9105      	str	r1, [sp, #20]
 80091fe:	6800      	ldr	r0, [r0, #0]
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	a902      	add	r1, sp, #8
 8009204:	f001 fb98 	bl	800a938 <_svfiprintf_r>
 8009208:	9b02      	ldr	r3, [sp, #8]
 800920a:	2200      	movs	r2, #0
 800920c:	701a      	strb	r2, [r3, #0]
 800920e:	b01c      	add	sp, #112	; 0x70
 8009210:	f85d eb04 	ldr.w	lr, [sp], #4
 8009214:	b003      	add	sp, #12
 8009216:	4770      	bx	lr
 8009218:	20000068 	.word	0x20000068
 800921c:	ffff0208 	.word	0xffff0208

08009220 <__sread>:
 8009220:	b510      	push	{r4, lr}
 8009222:	460c      	mov	r4, r1
 8009224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009228:	f000 f87a 	bl	8009320 <_read_r>
 800922c:	2800      	cmp	r0, #0
 800922e:	bfab      	itete	ge
 8009230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009232:	89a3      	ldrhlt	r3, [r4, #12]
 8009234:	181b      	addge	r3, r3, r0
 8009236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800923a:	bfac      	ite	ge
 800923c:	6563      	strge	r3, [r4, #84]	; 0x54
 800923e:	81a3      	strhlt	r3, [r4, #12]
 8009240:	bd10      	pop	{r4, pc}

08009242 <__swrite>:
 8009242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009246:	461f      	mov	r7, r3
 8009248:	898b      	ldrh	r3, [r1, #12]
 800924a:	05db      	lsls	r3, r3, #23
 800924c:	4605      	mov	r5, r0
 800924e:	460c      	mov	r4, r1
 8009250:	4616      	mov	r6, r2
 8009252:	d505      	bpl.n	8009260 <__swrite+0x1e>
 8009254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009258:	2302      	movs	r3, #2
 800925a:	2200      	movs	r2, #0
 800925c:	f000 f84e 	bl	80092fc <_lseek_r>
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	4632      	mov	r2, r6
 800926e:	463b      	mov	r3, r7
 8009270:	4628      	mov	r0, r5
 8009272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009276:	f000 b875 	b.w	8009364 <_write_r>

0800927a <__sseek>:
 800927a:	b510      	push	{r4, lr}
 800927c:	460c      	mov	r4, r1
 800927e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009282:	f000 f83b 	bl	80092fc <_lseek_r>
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	bf15      	itete	ne
 800928c:	6560      	strne	r0, [r4, #84]	; 0x54
 800928e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009296:	81a3      	strheq	r3, [r4, #12]
 8009298:	bf18      	it	ne
 800929a:	81a3      	strhne	r3, [r4, #12]
 800929c:	bd10      	pop	{r4, pc}

0800929e <__sclose>:
 800929e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a2:	f000 b81b 	b.w	80092dc <_close_r>

080092a6 <memset>:
 80092a6:	4402      	add	r2, r0
 80092a8:	4603      	mov	r3, r0
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d100      	bne.n	80092b0 <memset+0xa>
 80092ae:	4770      	bx	lr
 80092b0:	f803 1b01 	strb.w	r1, [r3], #1
 80092b4:	e7f9      	b.n	80092aa <memset+0x4>

080092b6 <strcat>:
 80092b6:	b510      	push	{r4, lr}
 80092b8:	4602      	mov	r2, r0
 80092ba:	7814      	ldrb	r4, [r2, #0]
 80092bc:	4613      	mov	r3, r2
 80092be:	3201      	adds	r2, #1
 80092c0:	2c00      	cmp	r4, #0
 80092c2:	d1fa      	bne.n	80092ba <strcat+0x4>
 80092c4:	3b01      	subs	r3, #1
 80092c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092ce:	2a00      	cmp	r2, #0
 80092d0:	d1f9      	bne.n	80092c6 <strcat+0x10>
 80092d2:	bd10      	pop	{r4, pc}

080092d4 <_localeconv_r>:
 80092d4:	4800      	ldr	r0, [pc, #0]	; (80092d8 <_localeconv_r+0x4>)
 80092d6:	4770      	bx	lr
 80092d8:	2000015c 	.word	0x2000015c

080092dc <_close_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	4d06      	ldr	r5, [pc, #24]	; (80092f8 <_close_r+0x1c>)
 80092e0:	2300      	movs	r3, #0
 80092e2:	4604      	mov	r4, r0
 80092e4:	4608      	mov	r0, r1
 80092e6:	602b      	str	r3, [r5, #0]
 80092e8:	f7fa f8af 	bl	800344a <_close>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_close_r+0x1a>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_close_r+0x1a>
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	200004f4 	.word	0x200004f4

080092fc <_lseek_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	4d07      	ldr	r5, [pc, #28]	; (800931c <_lseek_r+0x20>)
 8009300:	4604      	mov	r4, r0
 8009302:	4608      	mov	r0, r1
 8009304:	4611      	mov	r1, r2
 8009306:	2200      	movs	r2, #0
 8009308:	602a      	str	r2, [r5, #0]
 800930a:	461a      	mov	r2, r3
 800930c:	f7fa f8c4 	bl	8003498 <_lseek>
 8009310:	1c43      	adds	r3, r0, #1
 8009312:	d102      	bne.n	800931a <_lseek_r+0x1e>
 8009314:	682b      	ldr	r3, [r5, #0]
 8009316:	b103      	cbz	r3, 800931a <_lseek_r+0x1e>
 8009318:	6023      	str	r3, [r4, #0]
 800931a:	bd38      	pop	{r3, r4, r5, pc}
 800931c:	200004f4 	.word	0x200004f4

08009320 <_read_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4d07      	ldr	r5, [pc, #28]	; (8009340 <_read_r+0x20>)
 8009324:	4604      	mov	r4, r0
 8009326:	4608      	mov	r0, r1
 8009328:	4611      	mov	r1, r2
 800932a:	2200      	movs	r2, #0
 800932c:	602a      	str	r2, [r5, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	f7fa f852 	bl	80033d8 <_read>
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d102      	bne.n	800933e <_read_r+0x1e>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	b103      	cbz	r3, 800933e <_read_r+0x1e>
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	bd38      	pop	{r3, r4, r5, pc}
 8009340:	200004f4 	.word	0x200004f4

08009344 <_sbrk_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4d06      	ldr	r5, [pc, #24]	; (8009360 <_sbrk_r+0x1c>)
 8009348:	2300      	movs	r3, #0
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	602b      	str	r3, [r5, #0]
 8009350:	f7fa f8b0 	bl	80034b4 <_sbrk>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_sbrk_r+0x1a>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	b103      	cbz	r3, 800935e <_sbrk_r+0x1a>
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	200004f4 	.word	0x200004f4

08009364 <_write_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4d07      	ldr	r5, [pc, #28]	; (8009384 <_write_r+0x20>)
 8009368:	4604      	mov	r4, r0
 800936a:	4608      	mov	r0, r1
 800936c:	4611      	mov	r1, r2
 800936e:	2200      	movs	r2, #0
 8009370:	602a      	str	r2, [r5, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	f7fa f84d 	bl	8003412 <_write>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_write_r+0x1e>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_write_r+0x1e>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	200004f4 	.word	0x200004f4

08009388 <__errno>:
 8009388:	4b01      	ldr	r3, [pc, #4]	; (8009390 <__errno+0x8>)
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	20000068 	.word	0x20000068

08009394 <__libc_init_array>:
 8009394:	b570      	push	{r4, r5, r6, lr}
 8009396:	4d0d      	ldr	r5, [pc, #52]	; (80093cc <__libc_init_array+0x38>)
 8009398:	4c0d      	ldr	r4, [pc, #52]	; (80093d0 <__libc_init_array+0x3c>)
 800939a:	1b64      	subs	r4, r4, r5
 800939c:	10a4      	asrs	r4, r4, #2
 800939e:	2600      	movs	r6, #0
 80093a0:	42a6      	cmp	r6, r4
 80093a2:	d109      	bne.n	80093b8 <__libc_init_array+0x24>
 80093a4:	4d0b      	ldr	r5, [pc, #44]	; (80093d4 <__libc_init_array+0x40>)
 80093a6:	4c0c      	ldr	r4, [pc, #48]	; (80093d8 <__libc_init_array+0x44>)
 80093a8:	f001 ffd0 	bl	800b34c <_init>
 80093ac:	1b64      	subs	r4, r4, r5
 80093ae:	10a4      	asrs	r4, r4, #2
 80093b0:	2600      	movs	r6, #0
 80093b2:	42a6      	cmp	r6, r4
 80093b4:	d105      	bne.n	80093c2 <__libc_init_array+0x2e>
 80093b6:	bd70      	pop	{r4, r5, r6, pc}
 80093b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80093bc:	4798      	blx	r3
 80093be:	3601      	adds	r6, #1
 80093c0:	e7ee      	b.n	80093a0 <__libc_init_array+0xc>
 80093c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80093c6:	4798      	blx	r3
 80093c8:	3601      	adds	r6, #1
 80093ca:	e7f2      	b.n	80093b2 <__libc_init_array+0x1e>
 80093cc:	0800b784 	.word	0x0800b784
 80093d0:	0800b784 	.word	0x0800b784
 80093d4:	0800b784 	.word	0x0800b784
 80093d8:	0800b788 	.word	0x0800b788

080093dc <__retarget_lock_init_recursive>:
 80093dc:	4770      	bx	lr

080093de <__retarget_lock_acquire_recursive>:
 80093de:	4770      	bx	lr

080093e0 <__retarget_lock_release_recursive>:
 80093e0:	4770      	bx	lr

080093e2 <memcpy>:
 80093e2:	440a      	add	r2, r1
 80093e4:	4291      	cmp	r1, r2
 80093e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80093ea:	d100      	bne.n	80093ee <memcpy+0xc>
 80093ec:	4770      	bx	lr
 80093ee:	b510      	push	{r4, lr}
 80093f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093f8:	4291      	cmp	r1, r2
 80093fa:	d1f9      	bne.n	80093f0 <memcpy+0xe>
 80093fc:	bd10      	pop	{r4, pc}

080093fe <quorem>:
 80093fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009402:	6903      	ldr	r3, [r0, #16]
 8009404:	690c      	ldr	r4, [r1, #16]
 8009406:	42a3      	cmp	r3, r4
 8009408:	4607      	mov	r7, r0
 800940a:	db7e      	blt.n	800950a <quorem+0x10c>
 800940c:	3c01      	subs	r4, #1
 800940e:	f101 0814 	add.w	r8, r1, #20
 8009412:	f100 0514 	add.w	r5, r0, #20
 8009416:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800941a:	9301      	str	r3, [sp, #4]
 800941c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009420:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009424:	3301      	adds	r3, #1
 8009426:	429a      	cmp	r2, r3
 8009428:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800942c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009430:	fbb2 f6f3 	udiv	r6, r2, r3
 8009434:	d331      	bcc.n	800949a <quorem+0x9c>
 8009436:	f04f 0e00 	mov.w	lr, #0
 800943a:	4640      	mov	r0, r8
 800943c:	46ac      	mov	ip, r5
 800943e:	46f2      	mov	sl, lr
 8009440:	f850 2b04 	ldr.w	r2, [r0], #4
 8009444:	b293      	uxth	r3, r2
 8009446:	fb06 e303 	mla	r3, r6, r3, lr
 800944a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800944e:	0c1a      	lsrs	r2, r3, #16
 8009450:	b29b      	uxth	r3, r3
 8009452:	ebaa 0303 	sub.w	r3, sl, r3
 8009456:	f8dc a000 	ldr.w	sl, [ip]
 800945a:	fa13 f38a 	uxtah	r3, r3, sl
 800945e:	fb06 220e 	mla	r2, r6, lr, r2
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	9b00      	ldr	r3, [sp, #0]
 8009466:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800946a:	b292      	uxth	r2, r2
 800946c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009470:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009474:	f8bd 3000 	ldrh.w	r3, [sp]
 8009478:	4581      	cmp	r9, r0
 800947a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800947e:	f84c 3b04 	str.w	r3, [ip], #4
 8009482:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009486:	d2db      	bcs.n	8009440 <quorem+0x42>
 8009488:	f855 300b 	ldr.w	r3, [r5, fp]
 800948c:	b92b      	cbnz	r3, 800949a <quorem+0x9c>
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	3b04      	subs	r3, #4
 8009492:	429d      	cmp	r5, r3
 8009494:	461a      	mov	r2, r3
 8009496:	d32c      	bcc.n	80094f2 <quorem+0xf4>
 8009498:	613c      	str	r4, [r7, #16]
 800949a:	4638      	mov	r0, r7
 800949c:	f001 f8f2 	bl	800a684 <__mcmp>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	db22      	blt.n	80094ea <quorem+0xec>
 80094a4:	3601      	adds	r6, #1
 80094a6:	4629      	mov	r1, r5
 80094a8:	2000      	movs	r0, #0
 80094aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80094ae:	f8d1 c000 	ldr.w	ip, [r1]
 80094b2:	b293      	uxth	r3, r2
 80094b4:	1ac3      	subs	r3, r0, r3
 80094b6:	0c12      	lsrs	r2, r2, #16
 80094b8:	fa13 f38c 	uxtah	r3, r3, ip
 80094bc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80094c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094ca:	45c1      	cmp	r9, r8
 80094cc:	f841 3b04 	str.w	r3, [r1], #4
 80094d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094d4:	d2e9      	bcs.n	80094aa <quorem+0xac>
 80094d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094de:	b922      	cbnz	r2, 80094ea <quorem+0xec>
 80094e0:	3b04      	subs	r3, #4
 80094e2:	429d      	cmp	r5, r3
 80094e4:	461a      	mov	r2, r3
 80094e6:	d30a      	bcc.n	80094fe <quorem+0x100>
 80094e8:	613c      	str	r4, [r7, #16]
 80094ea:	4630      	mov	r0, r6
 80094ec:	b003      	add	sp, #12
 80094ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f2:	6812      	ldr	r2, [r2, #0]
 80094f4:	3b04      	subs	r3, #4
 80094f6:	2a00      	cmp	r2, #0
 80094f8:	d1ce      	bne.n	8009498 <quorem+0x9a>
 80094fa:	3c01      	subs	r4, #1
 80094fc:	e7c9      	b.n	8009492 <quorem+0x94>
 80094fe:	6812      	ldr	r2, [r2, #0]
 8009500:	3b04      	subs	r3, #4
 8009502:	2a00      	cmp	r2, #0
 8009504:	d1f0      	bne.n	80094e8 <quorem+0xea>
 8009506:	3c01      	subs	r4, #1
 8009508:	e7eb      	b.n	80094e2 <quorem+0xe4>
 800950a:	2000      	movs	r0, #0
 800950c:	e7ee      	b.n	80094ec <quorem+0xee>
	...

08009510 <_dtoa_r>:
 8009510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009514:	ed2d 8b04 	vpush	{d8-d9}
 8009518:	69c5      	ldr	r5, [r0, #28]
 800951a:	b093      	sub	sp, #76	; 0x4c
 800951c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009520:	ec57 6b10 	vmov	r6, r7, d0
 8009524:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009528:	9107      	str	r1, [sp, #28]
 800952a:	4604      	mov	r4, r0
 800952c:	920a      	str	r2, [sp, #40]	; 0x28
 800952e:	930d      	str	r3, [sp, #52]	; 0x34
 8009530:	b975      	cbnz	r5, 8009550 <_dtoa_r+0x40>
 8009532:	2010      	movs	r0, #16
 8009534:	f7ff f870 	bl	8008618 <malloc>
 8009538:	4602      	mov	r2, r0
 800953a:	61e0      	str	r0, [r4, #28]
 800953c:	b920      	cbnz	r0, 8009548 <_dtoa_r+0x38>
 800953e:	4bae      	ldr	r3, [pc, #696]	; (80097f8 <_dtoa_r+0x2e8>)
 8009540:	21ef      	movs	r1, #239	; 0xef
 8009542:	48ae      	ldr	r0, [pc, #696]	; (80097fc <_dtoa_r+0x2ec>)
 8009544:	f001 fbbe 	bl	800acc4 <__assert_func>
 8009548:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800954c:	6005      	str	r5, [r0, #0]
 800954e:	60c5      	str	r5, [r0, #12]
 8009550:	69e3      	ldr	r3, [r4, #28]
 8009552:	6819      	ldr	r1, [r3, #0]
 8009554:	b151      	cbz	r1, 800956c <_dtoa_r+0x5c>
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	604a      	str	r2, [r1, #4]
 800955a:	2301      	movs	r3, #1
 800955c:	4093      	lsls	r3, r2
 800955e:	608b      	str	r3, [r1, #8]
 8009560:	4620      	mov	r0, r4
 8009562:	f000 fe53 	bl	800a20c <_Bfree>
 8009566:	69e3      	ldr	r3, [r4, #28]
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]
 800956c:	1e3b      	subs	r3, r7, #0
 800956e:	bfbb      	ittet	lt
 8009570:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009574:	9303      	strlt	r3, [sp, #12]
 8009576:	2300      	movge	r3, #0
 8009578:	2201      	movlt	r2, #1
 800957a:	bfac      	ite	ge
 800957c:	f8c8 3000 	strge.w	r3, [r8]
 8009580:	f8c8 2000 	strlt.w	r2, [r8]
 8009584:	4b9e      	ldr	r3, [pc, #632]	; (8009800 <_dtoa_r+0x2f0>)
 8009586:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800958a:	ea33 0308 	bics.w	r3, r3, r8
 800958e:	d11b      	bne.n	80095c8 <_dtoa_r+0xb8>
 8009590:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009592:	f242 730f 	movw	r3, #9999	; 0x270f
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800959c:	4333      	orrs	r3, r6
 800959e:	f000 8593 	beq.w	800a0c8 <_dtoa_r+0xbb8>
 80095a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095a4:	b963      	cbnz	r3, 80095c0 <_dtoa_r+0xb0>
 80095a6:	4b97      	ldr	r3, [pc, #604]	; (8009804 <_dtoa_r+0x2f4>)
 80095a8:	e027      	b.n	80095fa <_dtoa_r+0xea>
 80095aa:	4b97      	ldr	r3, [pc, #604]	; (8009808 <_dtoa_r+0x2f8>)
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	3308      	adds	r3, #8
 80095b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095b2:	6013      	str	r3, [r2, #0]
 80095b4:	9800      	ldr	r0, [sp, #0]
 80095b6:	b013      	add	sp, #76	; 0x4c
 80095b8:	ecbd 8b04 	vpop	{d8-d9}
 80095bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c0:	4b90      	ldr	r3, [pc, #576]	; (8009804 <_dtoa_r+0x2f4>)
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	3303      	adds	r3, #3
 80095c6:	e7f3      	b.n	80095b0 <_dtoa_r+0xa0>
 80095c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095cc:	2200      	movs	r2, #0
 80095ce:	ec51 0b17 	vmov	r0, r1, d7
 80095d2:	eeb0 8a47 	vmov.f32	s16, s14
 80095d6:	eef0 8a67 	vmov.f32	s17, s15
 80095da:	2300      	movs	r3, #0
 80095dc:	f7f7 fa7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80095e0:	4681      	mov	r9, r0
 80095e2:	b160      	cbz	r0, 80095fe <_dtoa_r+0xee>
 80095e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095e6:	2301      	movs	r3, #1
 80095e8:	6013      	str	r3, [r2, #0]
 80095ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 8568 	beq.w	800a0c2 <_dtoa_r+0xbb2>
 80095f2:	4b86      	ldr	r3, [pc, #536]	; (800980c <_dtoa_r+0x2fc>)
 80095f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095f6:	6013      	str	r3, [r2, #0]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	e7da      	b.n	80095b4 <_dtoa_r+0xa4>
 80095fe:	aa10      	add	r2, sp, #64	; 0x40
 8009600:	a911      	add	r1, sp, #68	; 0x44
 8009602:	4620      	mov	r0, r4
 8009604:	eeb0 0a48 	vmov.f32	s0, s16
 8009608:	eef0 0a68 	vmov.f32	s1, s17
 800960c:	f001 f8e0 	bl	800a7d0 <__d2b>
 8009610:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009614:	4682      	mov	sl, r0
 8009616:	2d00      	cmp	r5, #0
 8009618:	d07f      	beq.n	800971a <_dtoa_r+0x20a>
 800961a:	ee18 3a90 	vmov	r3, s17
 800961e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009622:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009626:	ec51 0b18 	vmov	r0, r1, d8
 800962a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800962e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009632:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009636:	4619      	mov	r1, r3
 8009638:	2200      	movs	r2, #0
 800963a:	4b75      	ldr	r3, [pc, #468]	; (8009810 <_dtoa_r+0x300>)
 800963c:	f7f6 fe2c 	bl	8000298 <__aeabi_dsub>
 8009640:	a367      	add	r3, pc, #412	; (adr r3, 80097e0 <_dtoa_r+0x2d0>)
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7f6 ffdf 	bl	8000608 <__aeabi_dmul>
 800964a:	a367      	add	r3, pc, #412	; (adr r3, 80097e8 <_dtoa_r+0x2d8>)
 800964c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009650:	f7f6 fe24 	bl	800029c <__adddf3>
 8009654:	4606      	mov	r6, r0
 8009656:	4628      	mov	r0, r5
 8009658:	460f      	mov	r7, r1
 800965a:	f7f6 ff6b 	bl	8000534 <__aeabi_i2d>
 800965e:	a364      	add	r3, pc, #400	; (adr r3, 80097f0 <_dtoa_r+0x2e0>)
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	f7f6 ffd0 	bl	8000608 <__aeabi_dmul>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	4630      	mov	r0, r6
 800966e:	4639      	mov	r1, r7
 8009670:	f7f6 fe14 	bl	800029c <__adddf3>
 8009674:	4606      	mov	r6, r0
 8009676:	460f      	mov	r7, r1
 8009678:	f7f7 fa76 	bl	8000b68 <__aeabi_d2iz>
 800967c:	2200      	movs	r2, #0
 800967e:	4683      	mov	fp, r0
 8009680:	2300      	movs	r3, #0
 8009682:	4630      	mov	r0, r6
 8009684:	4639      	mov	r1, r7
 8009686:	f7f7 fa31 	bl	8000aec <__aeabi_dcmplt>
 800968a:	b148      	cbz	r0, 80096a0 <_dtoa_r+0x190>
 800968c:	4658      	mov	r0, fp
 800968e:	f7f6 ff51 	bl	8000534 <__aeabi_i2d>
 8009692:	4632      	mov	r2, r6
 8009694:	463b      	mov	r3, r7
 8009696:	f7f7 fa1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800969a:	b908      	cbnz	r0, 80096a0 <_dtoa_r+0x190>
 800969c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80096a0:	f1bb 0f16 	cmp.w	fp, #22
 80096a4:	d857      	bhi.n	8009756 <_dtoa_r+0x246>
 80096a6:	4b5b      	ldr	r3, [pc, #364]	; (8009814 <_dtoa_r+0x304>)
 80096a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	ec51 0b18 	vmov	r0, r1, d8
 80096b4:	f7f7 fa1a 	bl	8000aec <__aeabi_dcmplt>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d04e      	beq.n	800975a <_dtoa_r+0x24a>
 80096bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80096c0:	2300      	movs	r3, #0
 80096c2:	930c      	str	r3, [sp, #48]	; 0x30
 80096c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096c6:	1b5b      	subs	r3, r3, r5
 80096c8:	1e5a      	subs	r2, r3, #1
 80096ca:	bf45      	ittet	mi
 80096cc:	f1c3 0301 	rsbmi	r3, r3, #1
 80096d0:	9305      	strmi	r3, [sp, #20]
 80096d2:	2300      	movpl	r3, #0
 80096d4:	2300      	movmi	r3, #0
 80096d6:	9206      	str	r2, [sp, #24]
 80096d8:	bf54      	ite	pl
 80096da:	9305      	strpl	r3, [sp, #20]
 80096dc:	9306      	strmi	r3, [sp, #24]
 80096de:	f1bb 0f00 	cmp.w	fp, #0
 80096e2:	db3c      	blt.n	800975e <_dtoa_r+0x24e>
 80096e4:	9b06      	ldr	r3, [sp, #24]
 80096e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80096ea:	445b      	add	r3, fp
 80096ec:	9306      	str	r3, [sp, #24]
 80096ee:	2300      	movs	r3, #0
 80096f0:	9308      	str	r3, [sp, #32]
 80096f2:	9b07      	ldr	r3, [sp, #28]
 80096f4:	2b09      	cmp	r3, #9
 80096f6:	d868      	bhi.n	80097ca <_dtoa_r+0x2ba>
 80096f8:	2b05      	cmp	r3, #5
 80096fa:	bfc4      	itt	gt
 80096fc:	3b04      	subgt	r3, #4
 80096fe:	9307      	strgt	r3, [sp, #28]
 8009700:	9b07      	ldr	r3, [sp, #28]
 8009702:	f1a3 0302 	sub.w	r3, r3, #2
 8009706:	bfcc      	ite	gt
 8009708:	2500      	movgt	r5, #0
 800970a:	2501      	movle	r5, #1
 800970c:	2b03      	cmp	r3, #3
 800970e:	f200 8085 	bhi.w	800981c <_dtoa_r+0x30c>
 8009712:	e8df f003 	tbb	[pc, r3]
 8009716:	3b2e      	.short	0x3b2e
 8009718:	5839      	.short	0x5839
 800971a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800971e:	441d      	add	r5, r3
 8009720:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009724:	2b20      	cmp	r3, #32
 8009726:	bfc1      	itttt	gt
 8009728:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800972c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009730:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009734:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009738:	bfd6      	itet	le
 800973a:	f1c3 0320 	rsble	r3, r3, #32
 800973e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009742:	fa06 f003 	lslle.w	r0, r6, r3
 8009746:	f7f6 fee5 	bl	8000514 <__aeabi_ui2d>
 800974a:	2201      	movs	r2, #1
 800974c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009750:	3d01      	subs	r5, #1
 8009752:	920e      	str	r2, [sp, #56]	; 0x38
 8009754:	e76f      	b.n	8009636 <_dtoa_r+0x126>
 8009756:	2301      	movs	r3, #1
 8009758:	e7b3      	b.n	80096c2 <_dtoa_r+0x1b2>
 800975a:	900c      	str	r0, [sp, #48]	; 0x30
 800975c:	e7b2      	b.n	80096c4 <_dtoa_r+0x1b4>
 800975e:	9b05      	ldr	r3, [sp, #20]
 8009760:	eba3 030b 	sub.w	r3, r3, fp
 8009764:	9305      	str	r3, [sp, #20]
 8009766:	f1cb 0300 	rsb	r3, fp, #0
 800976a:	9308      	str	r3, [sp, #32]
 800976c:	2300      	movs	r3, #0
 800976e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009770:	e7bf      	b.n	80096f2 <_dtoa_r+0x1e2>
 8009772:	2300      	movs	r3, #0
 8009774:	9309      	str	r3, [sp, #36]	; 0x24
 8009776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009778:	2b00      	cmp	r3, #0
 800977a:	dc52      	bgt.n	8009822 <_dtoa_r+0x312>
 800977c:	2301      	movs	r3, #1
 800977e:	9301      	str	r3, [sp, #4]
 8009780:	9304      	str	r3, [sp, #16]
 8009782:	461a      	mov	r2, r3
 8009784:	920a      	str	r2, [sp, #40]	; 0x28
 8009786:	e00b      	b.n	80097a0 <_dtoa_r+0x290>
 8009788:	2301      	movs	r3, #1
 800978a:	e7f3      	b.n	8009774 <_dtoa_r+0x264>
 800978c:	2300      	movs	r3, #0
 800978e:	9309      	str	r3, [sp, #36]	; 0x24
 8009790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009792:	445b      	add	r3, fp
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	3301      	adds	r3, #1
 8009798:	2b01      	cmp	r3, #1
 800979a:	9304      	str	r3, [sp, #16]
 800979c:	bfb8      	it	lt
 800979e:	2301      	movlt	r3, #1
 80097a0:	69e0      	ldr	r0, [r4, #28]
 80097a2:	2100      	movs	r1, #0
 80097a4:	2204      	movs	r2, #4
 80097a6:	f102 0614 	add.w	r6, r2, #20
 80097aa:	429e      	cmp	r6, r3
 80097ac:	d93d      	bls.n	800982a <_dtoa_r+0x31a>
 80097ae:	6041      	str	r1, [r0, #4]
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 fceb 	bl	800a18c <_Balloc>
 80097b6:	9000      	str	r0, [sp, #0]
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d139      	bne.n	8009830 <_dtoa_r+0x320>
 80097bc:	4b16      	ldr	r3, [pc, #88]	; (8009818 <_dtoa_r+0x308>)
 80097be:	4602      	mov	r2, r0
 80097c0:	f240 11af 	movw	r1, #431	; 0x1af
 80097c4:	e6bd      	b.n	8009542 <_dtoa_r+0x32>
 80097c6:	2301      	movs	r3, #1
 80097c8:	e7e1      	b.n	800978e <_dtoa_r+0x27e>
 80097ca:	2501      	movs	r5, #1
 80097cc:	2300      	movs	r3, #0
 80097ce:	9307      	str	r3, [sp, #28]
 80097d0:	9509      	str	r5, [sp, #36]	; 0x24
 80097d2:	f04f 33ff 	mov.w	r3, #4294967295
 80097d6:	9301      	str	r3, [sp, #4]
 80097d8:	9304      	str	r3, [sp, #16]
 80097da:	2200      	movs	r2, #0
 80097dc:	2312      	movs	r3, #18
 80097de:	e7d1      	b.n	8009784 <_dtoa_r+0x274>
 80097e0:	636f4361 	.word	0x636f4361
 80097e4:	3fd287a7 	.word	0x3fd287a7
 80097e8:	8b60c8b3 	.word	0x8b60c8b3
 80097ec:	3fc68a28 	.word	0x3fc68a28
 80097f0:	509f79fb 	.word	0x509f79fb
 80097f4:	3fd34413 	.word	0x3fd34413
 80097f8:	0800b44d 	.word	0x0800b44d
 80097fc:	0800b464 	.word	0x0800b464
 8009800:	7ff00000 	.word	0x7ff00000
 8009804:	0800b449 	.word	0x0800b449
 8009808:	0800b440 	.word	0x0800b440
 800980c:	0800b41d 	.word	0x0800b41d
 8009810:	3ff80000 	.word	0x3ff80000
 8009814:	0800b550 	.word	0x0800b550
 8009818:	0800b4bc 	.word	0x0800b4bc
 800981c:	2301      	movs	r3, #1
 800981e:	9309      	str	r3, [sp, #36]	; 0x24
 8009820:	e7d7      	b.n	80097d2 <_dtoa_r+0x2c2>
 8009822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009824:	9301      	str	r3, [sp, #4]
 8009826:	9304      	str	r3, [sp, #16]
 8009828:	e7ba      	b.n	80097a0 <_dtoa_r+0x290>
 800982a:	3101      	adds	r1, #1
 800982c:	0052      	lsls	r2, r2, #1
 800982e:	e7ba      	b.n	80097a6 <_dtoa_r+0x296>
 8009830:	69e3      	ldr	r3, [r4, #28]
 8009832:	9a00      	ldr	r2, [sp, #0]
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	9b04      	ldr	r3, [sp, #16]
 8009838:	2b0e      	cmp	r3, #14
 800983a:	f200 80a8 	bhi.w	800998e <_dtoa_r+0x47e>
 800983e:	2d00      	cmp	r5, #0
 8009840:	f000 80a5 	beq.w	800998e <_dtoa_r+0x47e>
 8009844:	f1bb 0f00 	cmp.w	fp, #0
 8009848:	dd38      	ble.n	80098bc <_dtoa_r+0x3ac>
 800984a:	4bc0      	ldr	r3, [pc, #768]	; (8009b4c <_dtoa_r+0x63c>)
 800984c:	f00b 020f 	and.w	r2, fp, #15
 8009850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009854:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009858:	e9d3 6700 	ldrd	r6, r7, [r3]
 800985c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009860:	d019      	beq.n	8009896 <_dtoa_r+0x386>
 8009862:	4bbb      	ldr	r3, [pc, #748]	; (8009b50 <_dtoa_r+0x640>)
 8009864:	ec51 0b18 	vmov	r0, r1, d8
 8009868:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800986c:	f7f6 fff6 	bl	800085c <__aeabi_ddiv>
 8009870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009874:	f008 080f 	and.w	r8, r8, #15
 8009878:	2503      	movs	r5, #3
 800987a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009b50 <_dtoa_r+0x640>
 800987e:	f1b8 0f00 	cmp.w	r8, #0
 8009882:	d10a      	bne.n	800989a <_dtoa_r+0x38a>
 8009884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009888:	4632      	mov	r2, r6
 800988a:	463b      	mov	r3, r7
 800988c:	f7f6 ffe6 	bl	800085c <__aeabi_ddiv>
 8009890:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009894:	e02b      	b.n	80098ee <_dtoa_r+0x3de>
 8009896:	2502      	movs	r5, #2
 8009898:	e7ef      	b.n	800987a <_dtoa_r+0x36a>
 800989a:	f018 0f01 	tst.w	r8, #1
 800989e:	d008      	beq.n	80098b2 <_dtoa_r+0x3a2>
 80098a0:	4630      	mov	r0, r6
 80098a2:	4639      	mov	r1, r7
 80098a4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80098a8:	f7f6 feae 	bl	8000608 <__aeabi_dmul>
 80098ac:	3501      	adds	r5, #1
 80098ae:	4606      	mov	r6, r0
 80098b0:	460f      	mov	r7, r1
 80098b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80098b6:	f109 0908 	add.w	r9, r9, #8
 80098ba:	e7e0      	b.n	800987e <_dtoa_r+0x36e>
 80098bc:	f000 809f 	beq.w	80099fe <_dtoa_r+0x4ee>
 80098c0:	f1cb 0600 	rsb	r6, fp, #0
 80098c4:	4ba1      	ldr	r3, [pc, #644]	; (8009b4c <_dtoa_r+0x63c>)
 80098c6:	4fa2      	ldr	r7, [pc, #648]	; (8009b50 <_dtoa_r+0x640>)
 80098c8:	f006 020f 	and.w	r2, r6, #15
 80098cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d4:	ec51 0b18 	vmov	r0, r1, d8
 80098d8:	f7f6 fe96 	bl	8000608 <__aeabi_dmul>
 80098dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098e0:	1136      	asrs	r6, r6, #4
 80098e2:	2300      	movs	r3, #0
 80098e4:	2502      	movs	r5, #2
 80098e6:	2e00      	cmp	r6, #0
 80098e8:	d17e      	bne.n	80099e8 <_dtoa_r+0x4d8>
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1d0      	bne.n	8009890 <_dtoa_r+0x380>
 80098ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 8084 	beq.w	8009a02 <_dtoa_r+0x4f2>
 80098fa:	4b96      	ldr	r3, [pc, #600]	; (8009b54 <_dtoa_r+0x644>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	4640      	mov	r0, r8
 8009900:	4649      	mov	r1, r9
 8009902:	f7f7 f8f3 	bl	8000aec <__aeabi_dcmplt>
 8009906:	2800      	cmp	r0, #0
 8009908:	d07b      	beq.n	8009a02 <_dtoa_r+0x4f2>
 800990a:	9b04      	ldr	r3, [sp, #16]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d078      	beq.n	8009a02 <_dtoa_r+0x4f2>
 8009910:	9b01      	ldr	r3, [sp, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	dd39      	ble.n	800998a <_dtoa_r+0x47a>
 8009916:	4b90      	ldr	r3, [pc, #576]	; (8009b58 <_dtoa_r+0x648>)
 8009918:	2200      	movs	r2, #0
 800991a:	4640      	mov	r0, r8
 800991c:	4649      	mov	r1, r9
 800991e:	f7f6 fe73 	bl	8000608 <__aeabi_dmul>
 8009922:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009926:	9e01      	ldr	r6, [sp, #4]
 8009928:	f10b 37ff 	add.w	r7, fp, #4294967295
 800992c:	3501      	adds	r5, #1
 800992e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009932:	4628      	mov	r0, r5
 8009934:	f7f6 fdfe 	bl	8000534 <__aeabi_i2d>
 8009938:	4642      	mov	r2, r8
 800993a:	464b      	mov	r3, r9
 800993c:	f7f6 fe64 	bl	8000608 <__aeabi_dmul>
 8009940:	4b86      	ldr	r3, [pc, #536]	; (8009b5c <_dtoa_r+0x64c>)
 8009942:	2200      	movs	r2, #0
 8009944:	f7f6 fcaa 	bl	800029c <__adddf3>
 8009948:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800994c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009950:	9303      	str	r3, [sp, #12]
 8009952:	2e00      	cmp	r6, #0
 8009954:	d158      	bne.n	8009a08 <_dtoa_r+0x4f8>
 8009956:	4b82      	ldr	r3, [pc, #520]	; (8009b60 <_dtoa_r+0x650>)
 8009958:	2200      	movs	r2, #0
 800995a:	4640      	mov	r0, r8
 800995c:	4649      	mov	r1, r9
 800995e:	f7f6 fc9b 	bl	8000298 <__aeabi_dsub>
 8009962:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009966:	4680      	mov	r8, r0
 8009968:	4689      	mov	r9, r1
 800996a:	f7f7 f8dd 	bl	8000b28 <__aeabi_dcmpgt>
 800996e:	2800      	cmp	r0, #0
 8009970:	f040 8296 	bne.w	8009ea0 <_dtoa_r+0x990>
 8009974:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009978:	4640      	mov	r0, r8
 800997a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800997e:	4649      	mov	r1, r9
 8009980:	f7f7 f8b4 	bl	8000aec <__aeabi_dcmplt>
 8009984:	2800      	cmp	r0, #0
 8009986:	f040 8289 	bne.w	8009e9c <_dtoa_r+0x98c>
 800998a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800998e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009990:	2b00      	cmp	r3, #0
 8009992:	f2c0 814e 	blt.w	8009c32 <_dtoa_r+0x722>
 8009996:	f1bb 0f0e 	cmp.w	fp, #14
 800999a:	f300 814a 	bgt.w	8009c32 <_dtoa_r+0x722>
 800999e:	4b6b      	ldr	r3, [pc, #428]	; (8009b4c <_dtoa_r+0x63c>)
 80099a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f280 80dc 	bge.w	8009b68 <_dtoa_r+0x658>
 80099b0:	9b04      	ldr	r3, [sp, #16]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f300 80d8 	bgt.w	8009b68 <_dtoa_r+0x658>
 80099b8:	f040 826f 	bne.w	8009e9a <_dtoa_r+0x98a>
 80099bc:	4b68      	ldr	r3, [pc, #416]	; (8009b60 <_dtoa_r+0x650>)
 80099be:	2200      	movs	r2, #0
 80099c0:	4640      	mov	r0, r8
 80099c2:	4649      	mov	r1, r9
 80099c4:	f7f6 fe20 	bl	8000608 <__aeabi_dmul>
 80099c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099cc:	f7f7 f8a2 	bl	8000b14 <__aeabi_dcmpge>
 80099d0:	9e04      	ldr	r6, [sp, #16]
 80099d2:	4637      	mov	r7, r6
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f040 8245 	bne.w	8009e64 <_dtoa_r+0x954>
 80099da:	9d00      	ldr	r5, [sp, #0]
 80099dc:	2331      	movs	r3, #49	; 0x31
 80099de:	f805 3b01 	strb.w	r3, [r5], #1
 80099e2:	f10b 0b01 	add.w	fp, fp, #1
 80099e6:	e241      	b.n	8009e6c <_dtoa_r+0x95c>
 80099e8:	07f2      	lsls	r2, r6, #31
 80099ea:	d505      	bpl.n	80099f8 <_dtoa_r+0x4e8>
 80099ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099f0:	f7f6 fe0a 	bl	8000608 <__aeabi_dmul>
 80099f4:	3501      	adds	r5, #1
 80099f6:	2301      	movs	r3, #1
 80099f8:	1076      	asrs	r6, r6, #1
 80099fa:	3708      	adds	r7, #8
 80099fc:	e773      	b.n	80098e6 <_dtoa_r+0x3d6>
 80099fe:	2502      	movs	r5, #2
 8009a00:	e775      	b.n	80098ee <_dtoa_r+0x3de>
 8009a02:	9e04      	ldr	r6, [sp, #16]
 8009a04:	465f      	mov	r7, fp
 8009a06:	e792      	b.n	800992e <_dtoa_r+0x41e>
 8009a08:	9900      	ldr	r1, [sp, #0]
 8009a0a:	4b50      	ldr	r3, [pc, #320]	; (8009b4c <_dtoa_r+0x63c>)
 8009a0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a10:	4431      	add	r1, r6
 8009a12:	9102      	str	r1, [sp, #8]
 8009a14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a16:	eeb0 9a47 	vmov.f32	s18, s14
 8009a1a:	eef0 9a67 	vmov.f32	s19, s15
 8009a1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a26:	2900      	cmp	r1, #0
 8009a28:	d044      	beq.n	8009ab4 <_dtoa_r+0x5a4>
 8009a2a:	494e      	ldr	r1, [pc, #312]	; (8009b64 <_dtoa_r+0x654>)
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	f7f6 ff15 	bl	800085c <__aeabi_ddiv>
 8009a32:	ec53 2b19 	vmov	r2, r3, d9
 8009a36:	f7f6 fc2f 	bl	8000298 <__aeabi_dsub>
 8009a3a:	9d00      	ldr	r5, [sp, #0]
 8009a3c:	ec41 0b19 	vmov	d9, r0, r1
 8009a40:	4649      	mov	r1, r9
 8009a42:	4640      	mov	r0, r8
 8009a44:	f7f7 f890 	bl	8000b68 <__aeabi_d2iz>
 8009a48:	4606      	mov	r6, r0
 8009a4a:	f7f6 fd73 	bl	8000534 <__aeabi_i2d>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	4640      	mov	r0, r8
 8009a54:	4649      	mov	r1, r9
 8009a56:	f7f6 fc1f 	bl	8000298 <__aeabi_dsub>
 8009a5a:	3630      	adds	r6, #48	; 0x30
 8009a5c:	f805 6b01 	strb.w	r6, [r5], #1
 8009a60:	ec53 2b19 	vmov	r2, r3, d9
 8009a64:	4680      	mov	r8, r0
 8009a66:	4689      	mov	r9, r1
 8009a68:	f7f7 f840 	bl	8000aec <__aeabi_dcmplt>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d164      	bne.n	8009b3a <_dtoa_r+0x62a>
 8009a70:	4642      	mov	r2, r8
 8009a72:	464b      	mov	r3, r9
 8009a74:	4937      	ldr	r1, [pc, #220]	; (8009b54 <_dtoa_r+0x644>)
 8009a76:	2000      	movs	r0, #0
 8009a78:	f7f6 fc0e 	bl	8000298 <__aeabi_dsub>
 8009a7c:	ec53 2b19 	vmov	r2, r3, d9
 8009a80:	f7f7 f834 	bl	8000aec <__aeabi_dcmplt>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	f040 80b6 	bne.w	8009bf6 <_dtoa_r+0x6e6>
 8009a8a:	9b02      	ldr	r3, [sp, #8]
 8009a8c:	429d      	cmp	r5, r3
 8009a8e:	f43f af7c 	beq.w	800998a <_dtoa_r+0x47a>
 8009a92:	4b31      	ldr	r3, [pc, #196]	; (8009b58 <_dtoa_r+0x648>)
 8009a94:	ec51 0b19 	vmov	r0, r1, d9
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f7f6 fdb5 	bl	8000608 <__aeabi_dmul>
 8009a9e:	4b2e      	ldr	r3, [pc, #184]	; (8009b58 <_dtoa_r+0x648>)
 8009aa0:	ec41 0b19 	vmov	d9, r0, r1
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	4640      	mov	r0, r8
 8009aa8:	4649      	mov	r1, r9
 8009aaa:	f7f6 fdad 	bl	8000608 <__aeabi_dmul>
 8009aae:	4680      	mov	r8, r0
 8009ab0:	4689      	mov	r9, r1
 8009ab2:	e7c5      	b.n	8009a40 <_dtoa_r+0x530>
 8009ab4:	ec51 0b17 	vmov	r0, r1, d7
 8009ab8:	f7f6 fda6 	bl	8000608 <__aeabi_dmul>
 8009abc:	9b02      	ldr	r3, [sp, #8]
 8009abe:	9d00      	ldr	r5, [sp, #0]
 8009ac0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ac2:	ec41 0b19 	vmov	d9, r0, r1
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	4640      	mov	r0, r8
 8009aca:	f7f7 f84d 	bl	8000b68 <__aeabi_d2iz>
 8009ace:	4606      	mov	r6, r0
 8009ad0:	f7f6 fd30 	bl	8000534 <__aeabi_i2d>
 8009ad4:	3630      	adds	r6, #48	; 0x30
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4640      	mov	r0, r8
 8009adc:	4649      	mov	r1, r9
 8009ade:	f7f6 fbdb 	bl	8000298 <__aeabi_dsub>
 8009ae2:	f805 6b01 	strb.w	r6, [r5], #1
 8009ae6:	9b02      	ldr	r3, [sp, #8]
 8009ae8:	429d      	cmp	r5, r3
 8009aea:	4680      	mov	r8, r0
 8009aec:	4689      	mov	r9, r1
 8009aee:	f04f 0200 	mov.w	r2, #0
 8009af2:	d124      	bne.n	8009b3e <_dtoa_r+0x62e>
 8009af4:	4b1b      	ldr	r3, [pc, #108]	; (8009b64 <_dtoa_r+0x654>)
 8009af6:	ec51 0b19 	vmov	r0, r1, d9
 8009afa:	f7f6 fbcf 	bl	800029c <__adddf3>
 8009afe:	4602      	mov	r2, r0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4640      	mov	r0, r8
 8009b04:	4649      	mov	r1, r9
 8009b06:	f7f7 f80f 	bl	8000b28 <__aeabi_dcmpgt>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d173      	bne.n	8009bf6 <_dtoa_r+0x6e6>
 8009b0e:	ec53 2b19 	vmov	r2, r3, d9
 8009b12:	4914      	ldr	r1, [pc, #80]	; (8009b64 <_dtoa_r+0x654>)
 8009b14:	2000      	movs	r0, #0
 8009b16:	f7f6 fbbf 	bl	8000298 <__aeabi_dsub>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4640      	mov	r0, r8
 8009b20:	4649      	mov	r1, r9
 8009b22:	f7f6 ffe3 	bl	8000aec <__aeabi_dcmplt>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	f43f af2f 	beq.w	800998a <_dtoa_r+0x47a>
 8009b2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b2e:	1e6b      	subs	r3, r5, #1
 8009b30:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b36:	2b30      	cmp	r3, #48	; 0x30
 8009b38:	d0f8      	beq.n	8009b2c <_dtoa_r+0x61c>
 8009b3a:	46bb      	mov	fp, r7
 8009b3c:	e04a      	b.n	8009bd4 <_dtoa_r+0x6c4>
 8009b3e:	4b06      	ldr	r3, [pc, #24]	; (8009b58 <_dtoa_r+0x648>)
 8009b40:	f7f6 fd62 	bl	8000608 <__aeabi_dmul>
 8009b44:	4680      	mov	r8, r0
 8009b46:	4689      	mov	r9, r1
 8009b48:	e7bd      	b.n	8009ac6 <_dtoa_r+0x5b6>
 8009b4a:	bf00      	nop
 8009b4c:	0800b550 	.word	0x0800b550
 8009b50:	0800b528 	.word	0x0800b528
 8009b54:	3ff00000 	.word	0x3ff00000
 8009b58:	40240000 	.word	0x40240000
 8009b5c:	401c0000 	.word	0x401c0000
 8009b60:	40140000 	.word	0x40140000
 8009b64:	3fe00000 	.word	0x3fe00000
 8009b68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b6c:	9d00      	ldr	r5, [sp, #0]
 8009b6e:	4642      	mov	r2, r8
 8009b70:	464b      	mov	r3, r9
 8009b72:	4630      	mov	r0, r6
 8009b74:	4639      	mov	r1, r7
 8009b76:	f7f6 fe71 	bl	800085c <__aeabi_ddiv>
 8009b7a:	f7f6 fff5 	bl	8000b68 <__aeabi_d2iz>
 8009b7e:	9001      	str	r0, [sp, #4]
 8009b80:	f7f6 fcd8 	bl	8000534 <__aeabi_i2d>
 8009b84:	4642      	mov	r2, r8
 8009b86:	464b      	mov	r3, r9
 8009b88:	f7f6 fd3e 	bl	8000608 <__aeabi_dmul>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4630      	mov	r0, r6
 8009b92:	4639      	mov	r1, r7
 8009b94:	f7f6 fb80 	bl	8000298 <__aeabi_dsub>
 8009b98:	9e01      	ldr	r6, [sp, #4]
 8009b9a:	9f04      	ldr	r7, [sp, #16]
 8009b9c:	3630      	adds	r6, #48	; 0x30
 8009b9e:	f805 6b01 	strb.w	r6, [r5], #1
 8009ba2:	9e00      	ldr	r6, [sp, #0]
 8009ba4:	1bae      	subs	r6, r5, r6
 8009ba6:	42b7      	cmp	r7, r6
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	d134      	bne.n	8009c18 <_dtoa_r+0x708>
 8009bae:	f7f6 fb75 	bl	800029c <__adddf3>
 8009bb2:	4642      	mov	r2, r8
 8009bb4:	464b      	mov	r3, r9
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	460f      	mov	r7, r1
 8009bba:	f7f6 ffb5 	bl	8000b28 <__aeabi_dcmpgt>
 8009bbe:	b9c8      	cbnz	r0, 8009bf4 <_dtoa_r+0x6e4>
 8009bc0:	4642      	mov	r2, r8
 8009bc2:	464b      	mov	r3, r9
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	f7f6 ff86 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bcc:	b110      	cbz	r0, 8009bd4 <_dtoa_r+0x6c4>
 8009bce:	9b01      	ldr	r3, [sp, #4]
 8009bd0:	07db      	lsls	r3, r3, #31
 8009bd2:	d40f      	bmi.n	8009bf4 <_dtoa_r+0x6e4>
 8009bd4:	4651      	mov	r1, sl
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f000 fb18 	bl	800a20c <_Bfree>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009be0:	702b      	strb	r3, [r5, #0]
 8009be2:	f10b 0301 	add.w	r3, fp, #1
 8009be6:	6013      	str	r3, [r2, #0]
 8009be8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f43f ace2 	beq.w	80095b4 <_dtoa_r+0xa4>
 8009bf0:	601d      	str	r5, [r3, #0]
 8009bf2:	e4df      	b.n	80095b4 <_dtoa_r+0xa4>
 8009bf4:	465f      	mov	r7, fp
 8009bf6:	462b      	mov	r3, r5
 8009bf8:	461d      	mov	r5, r3
 8009bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bfe:	2a39      	cmp	r2, #57	; 0x39
 8009c00:	d106      	bne.n	8009c10 <_dtoa_r+0x700>
 8009c02:	9a00      	ldr	r2, [sp, #0]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d1f7      	bne.n	8009bf8 <_dtoa_r+0x6e8>
 8009c08:	9900      	ldr	r1, [sp, #0]
 8009c0a:	2230      	movs	r2, #48	; 0x30
 8009c0c:	3701      	adds	r7, #1
 8009c0e:	700a      	strb	r2, [r1, #0]
 8009c10:	781a      	ldrb	r2, [r3, #0]
 8009c12:	3201      	adds	r2, #1
 8009c14:	701a      	strb	r2, [r3, #0]
 8009c16:	e790      	b.n	8009b3a <_dtoa_r+0x62a>
 8009c18:	4ba3      	ldr	r3, [pc, #652]	; (8009ea8 <_dtoa_r+0x998>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f7f6 fcf4 	bl	8000608 <__aeabi_dmul>
 8009c20:	2200      	movs	r2, #0
 8009c22:	2300      	movs	r3, #0
 8009c24:	4606      	mov	r6, r0
 8009c26:	460f      	mov	r7, r1
 8009c28:	f7f6 ff56 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d09e      	beq.n	8009b6e <_dtoa_r+0x65e>
 8009c30:	e7d0      	b.n	8009bd4 <_dtoa_r+0x6c4>
 8009c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c34:	2a00      	cmp	r2, #0
 8009c36:	f000 80ca 	beq.w	8009dce <_dtoa_r+0x8be>
 8009c3a:	9a07      	ldr	r2, [sp, #28]
 8009c3c:	2a01      	cmp	r2, #1
 8009c3e:	f300 80ad 	bgt.w	8009d9c <_dtoa_r+0x88c>
 8009c42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c44:	2a00      	cmp	r2, #0
 8009c46:	f000 80a5 	beq.w	8009d94 <_dtoa_r+0x884>
 8009c4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c4e:	9e08      	ldr	r6, [sp, #32]
 8009c50:	9d05      	ldr	r5, [sp, #20]
 8009c52:	9a05      	ldr	r2, [sp, #20]
 8009c54:	441a      	add	r2, r3
 8009c56:	9205      	str	r2, [sp, #20]
 8009c58:	9a06      	ldr	r2, [sp, #24]
 8009c5a:	2101      	movs	r1, #1
 8009c5c:	441a      	add	r2, r3
 8009c5e:	4620      	mov	r0, r4
 8009c60:	9206      	str	r2, [sp, #24]
 8009c62:	f000 fb89 	bl	800a378 <__i2b>
 8009c66:	4607      	mov	r7, r0
 8009c68:	b165      	cbz	r5, 8009c84 <_dtoa_r+0x774>
 8009c6a:	9b06      	ldr	r3, [sp, #24]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	dd09      	ble.n	8009c84 <_dtoa_r+0x774>
 8009c70:	42ab      	cmp	r3, r5
 8009c72:	9a05      	ldr	r2, [sp, #20]
 8009c74:	bfa8      	it	ge
 8009c76:	462b      	movge	r3, r5
 8009c78:	1ad2      	subs	r2, r2, r3
 8009c7a:	9205      	str	r2, [sp, #20]
 8009c7c:	9a06      	ldr	r2, [sp, #24]
 8009c7e:	1aed      	subs	r5, r5, r3
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	9306      	str	r3, [sp, #24]
 8009c84:	9b08      	ldr	r3, [sp, #32]
 8009c86:	b1f3      	cbz	r3, 8009cc6 <_dtoa_r+0x7b6>
 8009c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f000 80a3 	beq.w	8009dd6 <_dtoa_r+0x8c6>
 8009c90:	2e00      	cmp	r6, #0
 8009c92:	dd10      	ble.n	8009cb6 <_dtoa_r+0x7a6>
 8009c94:	4639      	mov	r1, r7
 8009c96:	4632      	mov	r2, r6
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f000 fc2d 	bl	800a4f8 <__pow5mult>
 8009c9e:	4652      	mov	r2, sl
 8009ca0:	4601      	mov	r1, r0
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f000 fb7d 	bl	800a3a4 <__multiply>
 8009caa:	4651      	mov	r1, sl
 8009cac:	4680      	mov	r8, r0
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f000 faac 	bl	800a20c <_Bfree>
 8009cb4:	46c2      	mov	sl, r8
 8009cb6:	9b08      	ldr	r3, [sp, #32]
 8009cb8:	1b9a      	subs	r2, r3, r6
 8009cba:	d004      	beq.n	8009cc6 <_dtoa_r+0x7b6>
 8009cbc:	4651      	mov	r1, sl
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f000 fc1a 	bl	800a4f8 <__pow5mult>
 8009cc4:	4682      	mov	sl, r0
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f000 fb55 	bl	800a378 <__i2b>
 8009cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	f340 8081 	ble.w	8009dda <_dtoa_r+0x8ca>
 8009cd8:	461a      	mov	r2, r3
 8009cda:	4601      	mov	r1, r0
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f000 fc0b 	bl	800a4f8 <__pow5mult>
 8009ce2:	9b07      	ldr	r3, [sp, #28]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	dd7a      	ble.n	8009de0 <_dtoa_r+0x8d0>
 8009cea:	f04f 0800 	mov.w	r8, #0
 8009cee:	6933      	ldr	r3, [r6, #16]
 8009cf0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009cf4:	6918      	ldr	r0, [r3, #16]
 8009cf6:	f000 faf1 	bl	800a2dc <__hi0bits>
 8009cfa:	f1c0 0020 	rsb	r0, r0, #32
 8009cfe:	9b06      	ldr	r3, [sp, #24]
 8009d00:	4418      	add	r0, r3
 8009d02:	f010 001f 	ands.w	r0, r0, #31
 8009d06:	f000 8094 	beq.w	8009e32 <_dtoa_r+0x922>
 8009d0a:	f1c0 0320 	rsb	r3, r0, #32
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	f340 8085 	ble.w	8009e1e <_dtoa_r+0x90e>
 8009d14:	9b05      	ldr	r3, [sp, #20]
 8009d16:	f1c0 001c 	rsb	r0, r0, #28
 8009d1a:	4403      	add	r3, r0
 8009d1c:	9305      	str	r3, [sp, #20]
 8009d1e:	9b06      	ldr	r3, [sp, #24]
 8009d20:	4403      	add	r3, r0
 8009d22:	4405      	add	r5, r0
 8009d24:	9306      	str	r3, [sp, #24]
 8009d26:	9b05      	ldr	r3, [sp, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	dd05      	ble.n	8009d38 <_dtoa_r+0x828>
 8009d2c:	4651      	mov	r1, sl
 8009d2e:	461a      	mov	r2, r3
 8009d30:	4620      	mov	r0, r4
 8009d32:	f000 fc3b 	bl	800a5ac <__lshift>
 8009d36:	4682      	mov	sl, r0
 8009d38:	9b06      	ldr	r3, [sp, #24]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	dd05      	ble.n	8009d4a <_dtoa_r+0x83a>
 8009d3e:	4631      	mov	r1, r6
 8009d40:	461a      	mov	r2, r3
 8009d42:	4620      	mov	r0, r4
 8009d44:	f000 fc32 	bl	800a5ac <__lshift>
 8009d48:	4606      	mov	r6, r0
 8009d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d072      	beq.n	8009e36 <_dtoa_r+0x926>
 8009d50:	4631      	mov	r1, r6
 8009d52:	4650      	mov	r0, sl
 8009d54:	f000 fc96 	bl	800a684 <__mcmp>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	da6c      	bge.n	8009e36 <_dtoa_r+0x926>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	4651      	mov	r1, sl
 8009d60:	220a      	movs	r2, #10
 8009d62:	4620      	mov	r0, r4
 8009d64:	f000 fa74 	bl	800a250 <__multadd>
 8009d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d6e:	4682      	mov	sl, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f000 81b0 	beq.w	800a0d6 <_dtoa_r+0xbc6>
 8009d76:	2300      	movs	r3, #0
 8009d78:	4639      	mov	r1, r7
 8009d7a:	220a      	movs	r2, #10
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f000 fa67 	bl	800a250 <__multadd>
 8009d82:	9b01      	ldr	r3, [sp, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	4607      	mov	r7, r0
 8009d88:	f300 8096 	bgt.w	8009eb8 <_dtoa_r+0x9a8>
 8009d8c:	9b07      	ldr	r3, [sp, #28]
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	dc59      	bgt.n	8009e46 <_dtoa_r+0x936>
 8009d92:	e091      	b.n	8009eb8 <_dtoa_r+0x9a8>
 8009d94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d9a:	e758      	b.n	8009c4e <_dtoa_r+0x73e>
 8009d9c:	9b04      	ldr	r3, [sp, #16]
 8009d9e:	1e5e      	subs	r6, r3, #1
 8009da0:	9b08      	ldr	r3, [sp, #32]
 8009da2:	42b3      	cmp	r3, r6
 8009da4:	bfbf      	itttt	lt
 8009da6:	9b08      	ldrlt	r3, [sp, #32]
 8009da8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009daa:	9608      	strlt	r6, [sp, #32]
 8009dac:	1af3      	sublt	r3, r6, r3
 8009dae:	bfb4      	ite	lt
 8009db0:	18d2      	addlt	r2, r2, r3
 8009db2:	1b9e      	subge	r6, r3, r6
 8009db4:	9b04      	ldr	r3, [sp, #16]
 8009db6:	bfbc      	itt	lt
 8009db8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009dba:	2600      	movlt	r6, #0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	bfb7      	itett	lt
 8009dc0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009dc4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009dc8:	1a9d      	sublt	r5, r3, r2
 8009dca:	2300      	movlt	r3, #0
 8009dcc:	e741      	b.n	8009c52 <_dtoa_r+0x742>
 8009dce:	9e08      	ldr	r6, [sp, #32]
 8009dd0:	9d05      	ldr	r5, [sp, #20]
 8009dd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009dd4:	e748      	b.n	8009c68 <_dtoa_r+0x758>
 8009dd6:	9a08      	ldr	r2, [sp, #32]
 8009dd8:	e770      	b.n	8009cbc <_dtoa_r+0x7ac>
 8009dda:	9b07      	ldr	r3, [sp, #28]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	dc19      	bgt.n	8009e14 <_dtoa_r+0x904>
 8009de0:	9b02      	ldr	r3, [sp, #8]
 8009de2:	b9bb      	cbnz	r3, 8009e14 <_dtoa_r+0x904>
 8009de4:	9b03      	ldr	r3, [sp, #12]
 8009de6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dea:	b99b      	cbnz	r3, 8009e14 <_dtoa_r+0x904>
 8009dec:	9b03      	ldr	r3, [sp, #12]
 8009dee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009df2:	0d1b      	lsrs	r3, r3, #20
 8009df4:	051b      	lsls	r3, r3, #20
 8009df6:	b183      	cbz	r3, 8009e1a <_dtoa_r+0x90a>
 8009df8:	9b05      	ldr	r3, [sp, #20]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	9305      	str	r3, [sp, #20]
 8009dfe:	9b06      	ldr	r3, [sp, #24]
 8009e00:	3301      	adds	r3, #1
 8009e02:	9306      	str	r3, [sp, #24]
 8009e04:	f04f 0801 	mov.w	r8, #1
 8009e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f47f af6f 	bne.w	8009cee <_dtoa_r+0x7de>
 8009e10:	2001      	movs	r0, #1
 8009e12:	e774      	b.n	8009cfe <_dtoa_r+0x7ee>
 8009e14:	f04f 0800 	mov.w	r8, #0
 8009e18:	e7f6      	b.n	8009e08 <_dtoa_r+0x8f8>
 8009e1a:	4698      	mov	r8, r3
 8009e1c:	e7f4      	b.n	8009e08 <_dtoa_r+0x8f8>
 8009e1e:	d082      	beq.n	8009d26 <_dtoa_r+0x816>
 8009e20:	9a05      	ldr	r2, [sp, #20]
 8009e22:	331c      	adds	r3, #28
 8009e24:	441a      	add	r2, r3
 8009e26:	9205      	str	r2, [sp, #20]
 8009e28:	9a06      	ldr	r2, [sp, #24]
 8009e2a:	441a      	add	r2, r3
 8009e2c:	441d      	add	r5, r3
 8009e2e:	9206      	str	r2, [sp, #24]
 8009e30:	e779      	b.n	8009d26 <_dtoa_r+0x816>
 8009e32:	4603      	mov	r3, r0
 8009e34:	e7f4      	b.n	8009e20 <_dtoa_r+0x910>
 8009e36:	9b04      	ldr	r3, [sp, #16]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	dc37      	bgt.n	8009eac <_dtoa_r+0x99c>
 8009e3c:	9b07      	ldr	r3, [sp, #28]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	dd34      	ble.n	8009eac <_dtoa_r+0x99c>
 8009e42:	9b04      	ldr	r3, [sp, #16]
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	9b01      	ldr	r3, [sp, #4]
 8009e48:	b963      	cbnz	r3, 8009e64 <_dtoa_r+0x954>
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	2205      	movs	r2, #5
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f000 f9fe 	bl	800a250 <__multadd>
 8009e54:	4601      	mov	r1, r0
 8009e56:	4606      	mov	r6, r0
 8009e58:	4650      	mov	r0, sl
 8009e5a:	f000 fc13 	bl	800a684 <__mcmp>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	f73f adbb 	bgt.w	80099da <_dtoa_r+0x4ca>
 8009e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e66:	9d00      	ldr	r5, [sp, #0]
 8009e68:	ea6f 0b03 	mvn.w	fp, r3
 8009e6c:	f04f 0800 	mov.w	r8, #0
 8009e70:	4631      	mov	r1, r6
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 f9ca 	bl	800a20c <_Bfree>
 8009e78:	2f00      	cmp	r7, #0
 8009e7a:	f43f aeab 	beq.w	8009bd4 <_dtoa_r+0x6c4>
 8009e7e:	f1b8 0f00 	cmp.w	r8, #0
 8009e82:	d005      	beq.n	8009e90 <_dtoa_r+0x980>
 8009e84:	45b8      	cmp	r8, r7
 8009e86:	d003      	beq.n	8009e90 <_dtoa_r+0x980>
 8009e88:	4641      	mov	r1, r8
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f000 f9be 	bl	800a20c <_Bfree>
 8009e90:	4639      	mov	r1, r7
 8009e92:	4620      	mov	r0, r4
 8009e94:	f000 f9ba 	bl	800a20c <_Bfree>
 8009e98:	e69c      	b.n	8009bd4 <_dtoa_r+0x6c4>
 8009e9a:	2600      	movs	r6, #0
 8009e9c:	4637      	mov	r7, r6
 8009e9e:	e7e1      	b.n	8009e64 <_dtoa_r+0x954>
 8009ea0:	46bb      	mov	fp, r7
 8009ea2:	4637      	mov	r7, r6
 8009ea4:	e599      	b.n	80099da <_dtoa_r+0x4ca>
 8009ea6:	bf00      	nop
 8009ea8:	40240000 	.word	0x40240000
 8009eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f000 80c8 	beq.w	800a044 <_dtoa_r+0xb34>
 8009eb4:	9b04      	ldr	r3, [sp, #16]
 8009eb6:	9301      	str	r3, [sp, #4]
 8009eb8:	2d00      	cmp	r5, #0
 8009eba:	dd05      	ble.n	8009ec8 <_dtoa_r+0x9b8>
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	462a      	mov	r2, r5
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 fb73 	bl	800a5ac <__lshift>
 8009ec6:	4607      	mov	r7, r0
 8009ec8:	f1b8 0f00 	cmp.w	r8, #0
 8009ecc:	d05b      	beq.n	8009f86 <_dtoa_r+0xa76>
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f000 f95b 	bl	800a18c <_Balloc>
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	b928      	cbnz	r0, 8009ee6 <_dtoa_r+0x9d6>
 8009eda:	4b83      	ldr	r3, [pc, #524]	; (800a0e8 <_dtoa_r+0xbd8>)
 8009edc:	4602      	mov	r2, r0
 8009ede:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009ee2:	f7ff bb2e 	b.w	8009542 <_dtoa_r+0x32>
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	3202      	adds	r2, #2
 8009eea:	0092      	lsls	r2, r2, #2
 8009eec:	f107 010c 	add.w	r1, r7, #12
 8009ef0:	300c      	adds	r0, #12
 8009ef2:	f7ff fa76 	bl	80093e2 <memcpy>
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	4629      	mov	r1, r5
 8009efa:	4620      	mov	r0, r4
 8009efc:	f000 fb56 	bl	800a5ac <__lshift>
 8009f00:	9b00      	ldr	r3, [sp, #0]
 8009f02:	3301      	adds	r3, #1
 8009f04:	9304      	str	r3, [sp, #16]
 8009f06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	9308      	str	r3, [sp, #32]
 8009f0e:	9b02      	ldr	r3, [sp, #8]
 8009f10:	f003 0301 	and.w	r3, r3, #1
 8009f14:	46b8      	mov	r8, r7
 8009f16:	9306      	str	r3, [sp, #24]
 8009f18:	4607      	mov	r7, r0
 8009f1a:	9b04      	ldr	r3, [sp, #16]
 8009f1c:	4631      	mov	r1, r6
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	4650      	mov	r0, sl
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	f7ff fa6b 	bl	80093fe <quorem>
 8009f28:	4641      	mov	r1, r8
 8009f2a:	9002      	str	r0, [sp, #8]
 8009f2c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f30:	4650      	mov	r0, sl
 8009f32:	f000 fba7 	bl	800a684 <__mcmp>
 8009f36:	463a      	mov	r2, r7
 8009f38:	9005      	str	r0, [sp, #20]
 8009f3a:	4631      	mov	r1, r6
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 fbbd 	bl	800a6bc <__mdiff>
 8009f42:	68c2      	ldr	r2, [r0, #12]
 8009f44:	4605      	mov	r5, r0
 8009f46:	bb02      	cbnz	r2, 8009f8a <_dtoa_r+0xa7a>
 8009f48:	4601      	mov	r1, r0
 8009f4a:	4650      	mov	r0, sl
 8009f4c:	f000 fb9a 	bl	800a684 <__mcmp>
 8009f50:	4602      	mov	r2, r0
 8009f52:	4629      	mov	r1, r5
 8009f54:	4620      	mov	r0, r4
 8009f56:	9209      	str	r2, [sp, #36]	; 0x24
 8009f58:	f000 f958 	bl	800a20c <_Bfree>
 8009f5c:	9b07      	ldr	r3, [sp, #28]
 8009f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f60:	9d04      	ldr	r5, [sp, #16]
 8009f62:	ea43 0102 	orr.w	r1, r3, r2
 8009f66:	9b06      	ldr	r3, [sp, #24]
 8009f68:	4319      	orrs	r1, r3
 8009f6a:	d110      	bne.n	8009f8e <_dtoa_r+0xa7e>
 8009f6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f70:	d029      	beq.n	8009fc6 <_dtoa_r+0xab6>
 8009f72:	9b05      	ldr	r3, [sp, #20]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	dd02      	ble.n	8009f7e <_dtoa_r+0xa6e>
 8009f78:	9b02      	ldr	r3, [sp, #8]
 8009f7a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009f7e:	9b01      	ldr	r3, [sp, #4]
 8009f80:	f883 9000 	strb.w	r9, [r3]
 8009f84:	e774      	b.n	8009e70 <_dtoa_r+0x960>
 8009f86:	4638      	mov	r0, r7
 8009f88:	e7ba      	b.n	8009f00 <_dtoa_r+0x9f0>
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	e7e1      	b.n	8009f52 <_dtoa_r+0xa42>
 8009f8e:	9b05      	ldr	r3, [sp, #20]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	db04      	blt.n	8009f9e <_dtoa_r+0xa8e>
 8009f94:	9907      	ldr	r1, [sp, #28]
 8009f96:	430b      	orrs	r3, r1
 8009f98:	9906      	ldr	r1, [sp, #24]
 8009f9a:	430b      	orrs	r3, r1
 8009f9c:	d120      	bne.n	8009fe0 <_dtoa_r+0xad0>
 8009f9e:	2a00      	cmp	r2, #0
 8009fa0:	dded      	ble.n	8009f7e <_dtoa_r+0xa6e>
 8009fa2:	4651      	mov	r1, sl
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f000 fb00 	bl	800a5ac <__lshift>
 8009fac:	4631      	mov	r1, r6
 8009fae:	4682      	mov	sl, r0
 8009fb0:	f000 fb68 	bl	800a684 <__mcmp>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	dc03      	bgt.n	8009fc0 <_dtoa_r+0xab0>
 8009fb8:	d1e1      	bne.n	8009f7e <_dtoa_r+0xa6e>
 8009fba:	f019 0f01 	tst.w	r9, #1
 8009fbe:	d0de      	beq.n	8009f7e <_dtoa_r+0xa6e>
 8009fc0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009fc4:	d1d8      	bne.n	8009f78 <_dtoa_r+0xa68>
 8009fc6:	9a01      	ldr	r2, [sp, #4]
 8009fc8:	2339      	movs	r3, #57	; 0x39
 8009fca:	7013      	strb	r3, [r2, #0]
 8009fcc:	462b      	mov	r3, r5
 8009fce:	461d      	mov	r5, r3
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009fd6:	2a39      	cmp	r2, #57	; 0x39
 8009fd8:	d06c      	beq.n	800a0b4 <_dtoa_r+0xba4>
 8009fda:	3201      	adds	r2, #1
 8009fdc:	701a      	strb	r2, [r3, #0]
 8009fde:	e747      	b.n	8009e70 <_dtoa_r+0x960>
 8009fe0:	2a00      	cmp	r2, #0
 8009fe2:	dd07      	ble.n	8009ff4 <_dtoa_r+0xae4>
 8009fe4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009fe8:	d0ed      	beq.n	8009fc6 <_dtoa_r+0xab6>
 8009fea:	9a01      	ldr	r2, [sp, #4]
 8009fec:	f109 0301 	add.w	r3, r9, #1
 8009ff0:	7013      	strb	r3, [r2, #0]
 8009ff2:	e73d      	b.n	8009e70 <_dtoa_r+0x960>
 8009ff4:	9b04      	ldr	r3, [sp, #16]
 8009ff6:	9a08      	ldr	r2, [sp, #32]
 8009ff8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d043      	beq.n	800a088 <_dtoa_r+0xb78>
 800a000:	4651      	mov	r1, sl
 800a002:	2300      	movs	r3, #0
 800a004:	220a      	movs	r2, #10
 800a006:	4620      	mov	r0, r4
 800a008:	f000 f922 	bl	800a250 <__multadd>
 800a00c:	45b8      	cmp	r8, r7
 800a00e:	4682      	mov	sl, r0
 800a010:	f04f 0300 	mov.w	r3, #0
 800a014:	f04f 020a 	mov.w	r2, #10
 800a018:	4641      	mov	r1, r8
 800a01a:	4620      	mov	r0, r4
 800a01c:	d107      	bne.n	800a02e <_dtoa_r+0xb1e>
 800a01e:	f000 f917 	bl	800a250 <__multadd>
 800a022:	4680      	mov	r8, r0
 800a024:	4607      	mov	r7, r0
 800a026:	9b04      	ldr	r3, [sp, #16]
 800a028:	3301      	adds	r3, #1
 800a02a:	9304      	str	r3, [sp, #16]
 800a02c:	e775      	b.n	8009f1a <_dtoa_r+0xa0a>
 800a02e:	f000 f90f 	bl	800a250 <__multadd>
 800a032:	4639      	mov	r1, r7
 800a034:	4680      	mov	r8, r0
 800a036:	2300      	movs	r3, #0
 800a038:	220a      	movs	r2, #10
 800a03a:	4620      	mov	r0, r4
 800a03c:	f000 f908 	bl	800a250 <__multadd>
 800a040:	4607      	mov	r7, r0
 800a042:	e7f0      	b.n	800a026 <_dtoa_r+0xb16>
 800a044:	9b04      	ldr	r3, [sp, #16]
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	9d00      	ldr	r5, [sp, #0]
 800a04a:	4631      	mov	r1, r6
 800a04c:	4650      	mov	r0, sl
 800a04e:	f7ff f9d6 	bl	80093fe <quorem>
 800a052:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a056:	9b00      	ldr	r3, [sp, #0]
 800a058:	f805 9b01 	strb.w	r9, [r5], #1
 800a05c:	1aea      	subs	r2, r5, r3
 800a05e:	9b01      	ldr	r3, [sp, #4]
 800a060:	4293      	cmp	r3, r2
 800a062:	dd07      	ble.n	800a074 <_dtoa_r+0xb64>
 800a064:	4651      	mov	r1, sl
 800a066:	2300      	movs	r3, #0
 800a068:	220a      	movs	r2, #10
 800a06a:	4620      	mov	r0, r4
 800a06c:	f000 f8f0 	bl	800a250 <__multadd>
 800a070:	4682      	mov	sl, r0
 800a072:	e7ea      	b.n	800a04a <_dtoa_r+0xb3a>
 800a074:	9b01      	ldr	r3, [sp, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	bfc8      	it	gt
 800a07a:	461d      	movgt	r5, r3
 800a07c:	9b00      	ldr	r3, [sp, #0]
 800a07e:	bfd8      	it	le
 800a080:	2501      	movle	r5, #1
 800a082:	441d      	add	r5, r3
 800a084:	f04f 0800 	mov.w	r8, #0
 800a088:	4651      	mov	r1, sl
 800a08a:	2201      	movs	r2, #1
 800a08c:	4620      	mov	r0, r4
 800a08e:	f000 fa8d 	bl	800a5ac <__lshift>
 800a092:	4631      	mov	r1, r6
 800a094:	4682      	mov	sl, r0
 800a096:	f000 faf5 	bl	800a684 <__mcmp>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	dc96      	bgt.n	8009fcc <_dtoa_r+0xabc>
 800a09e:	d102      	bne.n	800a0a6 <_dtoa_r+0xb96>
 800a0a0:	f019 0f01 	tst.w	r9, #1
 800a0a4:	d192      	bne.n	8009fcc <_dtoa_r+0xabc>
 800a0a6:	462b      	mov	r3, r5
 800a0a8:	461d      	mov	r5, r3
 800a0aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0ae:	2a30      	cmp	r2, #48	; 0x30
 800a0b0:	d0fa      	beq.n	800a0a8 <_dtoa_r+0xb98>
 800a0b2:	e6dd      	b.n	8009e70 <_dtoa_r+0x960>
 800a0b4:	9a00      	ldr	r2, [sp, #0]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d189      	bne.n	8009fce <_dtoa_r+0xabe>
 800a0ba:	f10b 0b01 	add.w	fp, fp, #1
 800a0be:	2331      	movs	r3, #49	; 0x31
 800a0c0:	e796      	b.n	8009ff0 <_dtoa_r+0xae0>
 800a0c2:	4b0a      	ldr	r3, [pc, #40]	; (800a0ec <_dtoa_r+0xbdc>)
 800a0c4:	f7ff ba99 	b.w	80095fa <_dtoa_r+0xea>
 800a0c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f47f aa6d 	bne.w	80095aa <_dtoa_r+0x9a>
 800a0d0:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <_dtoa_r+0xbe0>)
 800a0d2:	f7ff ba92 	b.w	80095fa <_dtoa_r+0xea>
 800a0d6:	9b01      	ldr	r3, [sp, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	dcb5      	bgt.n	800a048 <_dtoa_r+0xb38>
 800a0dc:	9b07      	ldr	r3, [sp, #28]
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	f73f aeb1 	bgt.w	8009e46 <_dtoa_r+0x936>
 800a0e4:	e7b0      	b.n	800a048 <_dtoa_r+0xb38>
 800a0e6:	bf00      	nop
 800a0e8:	0800b4bc 	.word	0x0800b4bc
 800a0ec:	0800b41c 	.word	0x0800b41c
 800a0f0:	0800b440 	.word	0x0800b440

0800a0f4 <_free_r>:
 800a0f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0f6:	2900      	cmp	r1, #0
 800a0f8:	d044      	beq.n	800a184 <_free_r+0x90>
 800a0fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0fe:	9001      	str	r0, [sp, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	f1a1 0404 	sub.w	r4, r1, #4
 800a106:	bfb8      	it	lt
 800a108:	18e4      	addlt	r4, r4, r3
 800a10a:	f7fe fb35 	bl	8008778 <__malloc_lock>
 800a10e:	4a1e      	ldr	r2, [pc, #120]	; (800a188 <_free_r+0x94>)
 800a110:	9801      	ldr	r0, [sp, #4]
 800a112:	6813      	ldr	r3, [r2, #0]
 800a114:	b933      	cbnz	r3, 800a124 <_free_r+0x30>
 800a116:	6063      	str	r3, [r4, #4]
 800a118:	6014      	str	r4, [r2, #0]
 800a11a:	b003      	add	sp, #12
 800a11c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a120:	f7fe bb30 	b.w	8008784 <__malloc_unlock>
 800a124:	42a3      	cmp	r3, r4
 800a126:	d908      	bls.n	800a13a <_free_r+0x46>
 800a128:	6825      	ldr	r5, [r4, #0]
 800a12a:	1961      	adds	r1, r4, r5
 800a12c:	428b      	cmp	r3, r1
 800a12e:	bf01      	itttt	eq
 800a130:	6819      	ldreq	r1, [r3, #0]
 800a132:	685b      	ldreq	r3, [r3, #4]
 800a134:	1949      	addeq	r1, r1, r5
 800a136:	6021      	streq	r1, [r4, #0]
 800a138:	e7ed      	b.n	800a116 <_free_r+0x22>
 800a13a:	461a      	mov	r2, r3
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	b10b      	cbz	r3, 800a144 <_free_r+0x50>
 800a140:	42a3      	cmp	r3, r4
 800a142:	d9fa      	bls.n	800a13a <_free_r+0x46>
 800a144:	6811      	ldr	r1, [r2, #0]
 800a146:	1855      	adds	r5, r2, r1
 800a148:	42a5      	cmp	r5, r4
 800a14a:	d10b      	bne.n	800a164 <_free_r+0x70>
 800a14c:	6824      	ldr	r4, [r4, #0]
 800a14e:	4421      	add	r1, r4
 800a150:	1854      	adds	r4, r2, r1
 800a152:	42a3      	cmp	r3, r4
 800a154:	6011      	str	r1, [r2, #0]
 800a156:	d1e0      	bne.n	800a11a <_free_r+0x26>
 800a158:	681c      	ldr	r4, [r3, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	6053      	str	r3, [r2, #4]
 800a15e:	440c      	add	r4, r1
 800a160:	6014      	str	r4, [r2, #0]
 800a162:	e7da      	b.n	800a11a <_free_r+0x26>
 800a164:	d902      	bls.n	800a16c <_free_r+0x78>
 800a166:	230c      	movs	r3, #12
 800a168:	6003      	str	r3, [r0, #0]
 800a16a:	e7d6      	b.n	800a11a <_free_r+0x26>
 800a16c:	6825      	ldr	r5, [r4, #0]
 800a16e:	1961      	adds	r1, r4, r5
 800a170:	428b      	cmp	r3, r1
 800a172:	bf04      	itt	eq
 800a174:	6819      	ldreq	r1, [r3, #0]
 800a176:	685b      	ldreq	r3, [r3, #4]
 800a178:	6063      	str	r3, [r4, #4]
 800a17a:	bf04      	itt	eq
 800a17c:	1949      	addeq	r1, r1, r5
 800a17e:	6021      	streq	r1, [r4, #0]
 800a180:	6054      	str	r4, [r2, #4]
 800a182:	e7ca      	b.n	800a11a <_free_r+0x26>
 800a184:	b003      	add	sp, #12
 800a186:	bd30      	pop	{r4, r5, pc}
 800a188:	200003b0 	.word	0x200003b0

0800a18c <_Balloc>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	69c6      	ldr	r6, [r0, #28]
 800a190:	4604      	mov	r4, r0
 800a192:	460d      	mov	r5, r1
 800a194:	b976      	cbnz	r6, 800a1b4 <_Balloc+0x28>
 800a196:	2010      	movs	r0, #16
 800a198:	f7fe fa3e 	bl	8008618 <malloc>
 800a19c:	4602      	mov	r2, r0
 800a19e:	61e0      	str	r0, [r4, #28]
 800a1a0:	b920      	cbnz	r0, 800a1ac <_Balloc+0x20>
 800a1a2:	4b18      	ldr	r3, [pc, #96]	; (800a204 <_Balloc+0x78>)
 800a1a4:	4818      	ldr	r0, [pc, #96]	; (800a208 <_Balloc+0x7c>)
 800a1a6:	216b      	movs	r1, #107	; 0x6b
 800a1a8:	f000 fd8c 	bl	800acc4 <__assert_func>
 800a1ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1b0:	6006      	str	r6, [r0, #0]
 800a1b2:	60c6      	str	r6, [r0, #12]
 800a1b4:	69e6      	ldr	r6, [r4, #28]
 800a1b6:	68f3      	ldr	r3, [r6, #12]
 800a1b8:	b183      	cbz	r3, 800a1dc <_Balloc+0x50>
 800a1ba:	69e3      	ldr	r3, [r4, #28]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1c2:	b9b8      	cbnz	r0, 800a1f4 <_Balloc+0x68>
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	fa01 f605 	lsl.w	r6, r1, r5
 800a1ca:	1d72      	adds	r2, r6, #5
 800a1cc:	0092      	lsls	r2, r2, #2
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f000 fd96 	bl	800ad00 <_calloc_r>
 800a1d4:	b160      	cbz	r0, 800a1f0 <_Balloc+0x64>
 800a1d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1da:	e00e      	b.n	800a1fa <_Balloc+0x6e>
 800a1dc:	2221      	movs	r2, #33	; 0x21
 800a1de:	2104      	movs	r1, #4
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 fd8d 	bl	800ad00 <_calloc_r>
 800a1e6:	69e3      	ldr	r3, [r4, #28]
 800a1e8:	60f0      	str	r0, [r6, #12]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1e4      	bne.n	800a1ba <_Balloc+0x2e>
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
 800a1f4:	6802      	ldr	r2, [r0, #0]
 800a1f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a200:	e7f7      	b.n	800a1f2 <_Balloc+0x66>
 800a202:	bf00      	nop
 800a204:	0800b44d 	.word	0x0800b44d
 800a208:	0800b4cd 	.word	0x0800b4cd

0800a20c <_Bfree>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	69c6      	ldr	r6, [r0, #28]
 800a210:	4605      	mov	r5, r0
 800a212:	460c      	mov	r4, r1
 800a214:	b976      	cbnz	r6, 800a234 <_Bfree+0x28>
 800a216:	2010      	movs	r0, #16
 800a218:	f7fe f9fe 	bl	8008618 <malloc>
 800a21c:	4602      	mov	r2, r0
 800a21e:	61e8      	str	r0, [r5, #28]
 800a220:	b920      	cbnz	r0, 800a22c <_Bfree+0x20>
 800a222:	4b09      	ldr	r3, [pc, #36]	; (800a248 <_Bfree+0x3c>)
 800a224:	4809      	ldr	r0, [pc, #36]	; (800a24c <_Bfree+0x40>)
 800a226:	218f      	movs	r1, #143	; 0x8f
 800a228:	f000 fd4c 	bl	800acc4 <__assert_func>
 800a22c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a230:	6006      	str	r6, [r0, #0]
 800a232:	60c6      	str	r6, [r0, #12]
 800a234:	b13c      	cbz	r4, 800a246 <_Bfree+0x3a>
 800a236:	69eb      	ldr	r3, [r5, #28]
 800a238:	6862      	ldr	r2, [r4, #4]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a240:	6021      	str	r1, [r4, #0]
 800a242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a246:	bd70      	pop	{r4, r5, r6, pc}
 800a248:	0800b44d 	.word	0x0800b44d
 800a24c:	0800b4cd 	.word	0x0800b4cd

0800a250 <__multadd>:
 800a250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a254:	690d      	ldr	r5, [r1, #16]
 800a256:	4607      	mov	r7, r0
 800a258:	460c      	mov	r4, r1
 800a25a:	461e      	mov	r6, r3
 800a25c:	f101 0c14 	add.w	ip, r1, #20
 800a260:	2000      	movs	r0, #0
 800a262:	f8dc 3000 	ldr.w	r3, [ip]
 800a266:	b299      	uxth	r1, r3
 800a268:	fb02 6101 	mla	r1, r2, r1, r6
 800a26c:	0c1e      	lsrs	r6, r3, #16
 800a26e:	0c0b      	lsrs	r3, r1, #16
 800a270:	fb02 3306 	mla	r3, r2, r6, r3
 800a274:	b289      	uxth	r1, r1
 800a276:	3001      	adds	r0, #1
 800a278:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a27c:	4285      	cmp	r5, r0
 800a27e:	f84c 1b04 	str.w	r1, [ip], #4
 800a282:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a286:	dcec      	bgt.n	800a262 <__multadd+0x12>
 800a288:	b30e      	cbz	r6, 800a2ce <__multadd+0x7e>
 800a28a:	68a3      	ldr	r3, [r4, #8]
 800a28c:	42ab      	cmp	r3, r5
 800a28e:	dc19      	bgt.n	800a2c4 <__multadd+0x74>
 800a290:	6861      	ldr	r1, [r4, #4]
 800a292:	4638      	mov	r0, r7
 800a294:	3101      	adds	r1, #1
 800a296:	f7ff ff79 	bl	800a18c <_Balloc>
 800a29a:	4680      	mov	r8, r0
 800a29c:	b928      	cbnz	r0, 800a2aa <__multadd+0x5a>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	4b0c      	ldr	r3, [pc, #48]	; (800a2d4 <__multadd+0x84>)
 800a2a2:	480d      	ldr	r0, [pc, #52]	; (800a2d8 <__multadd+0x88>)
 800a2a4:	21ba      	movs	r1, #186	; 0xba
 800a2a6:	f000 fd0d 	bl	800acc4 <__assert_func>
 800a2aa:	6922      	ldr	r2, [r4, #16]
 800a2ac:	3202      	adds	r2, #2
 800a2ae:	f104 010c 	add.w	r1, r4, #12
 800a2b2:	0092      	lsls	r2, r2, #2
 800a2b4:	300c      	adds	r0, #12
 800a2b6:	f7ff f894 	bl	80093e2 <memcpy>
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	4638      	mov	r0, r7
 800a2be:	f7ff ffa5 	bl	800a20c <_Bfree>
 800a2c2:	4644      	mov	r4, r8
 800a2c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2c8:	3501      	adds	r5, #1
 800a2ca:	615e      	str	r6, [r3, #20]
 800a2cc:	6125      	str	r5, [r4, #16]
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d4:	0800b4bc 	.word	0x0800b4bc
 800a2d8:	0800b4cd 	.word	0x0800b4cd

0800a2dc <__hi0bits>:
 800a2dc:	0c03      	lsrs	r3, r0, #16
 800a2de:	041b      	lsls	r3, r3, #16
 800a2e0:	b9d3      	cbnz	r3, 800a318 <__hi0bits+0x3c>
 800a2e2:	0400      	lsls	r0, r0, #16
 800a2e4:	2310      	movs	r3, #16
 800a2e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2ea:	bf04      	itt	eq
 800a2ec:	0200      	lsleq	r0, r0, #8
 800a2ee:	3308      	addeq	r3, #8
 800a2f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a2f4:	bf04      	itt	eq
 800a2f6:	0100      	lsleq	r0, r0, #4
 800a2f8:	3304      	addeq	r3, #4
 800a2fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a2fe:	bf04      	itt	eq
 800a300:	0080      	lsleq	r0, r0, #2
 800a302:	3302      	addeq	r3, #2
 800a304:	2800      	cmp	r0, #0
 800a306:	db05      	blt.n	800a314 <__hi0bits+0x38>
 800a308:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a30c:	f103 0301 	add.w	r3, r3, #1
 800a310:	bf08      	it	eq
 800a312:	2320      	moveq	r3, #32
 800a314:	4618      	mov	r0, r3
 800a316:	4770      	bx	lr
 800a318:	2300      	movs	r3, #0
 800a31a:	e7e4      	b.n	800a2e6 <__hi0bits+0xa>

0800a31c <__lo0bits>:
 800a31c:	6803      	ldr	r3, [r0, #0]
 800a31e:	f013 0207 	ands.w	r2, r3, #7
 800a322:	d00c      	beq.n	800a33e <__lo0bits+0x22>
 800a324:	07d9      	lsls	r1, r3, #31
 800a326:	d422      	bmi.n	800a36e <__lo0bits+0x52>
 800a328:	079a      	lsls	r2, r3, #30
 800a32a:	bf49      	itett	mi
 800a32c:	085b      	lsrmi	r3, r3, #1
 800a32e:	089b      	lsrpl	r3, r3, #2
 800a330:	6003      	strmi	r3, [r0, #0]
 800a332:	2201      	movmi	r2, #1
 800a334:	bf5c      	itt	pl
 800a336:	6003      	strpl	r3, [r0, #0]
 800a338:	2202      	movpl	r2, #2
 800a33a:	4610      	mov	r0, r2
 800a33c:	4770      	bx	lr
 800a33e:	b299      	uxth	r1, r3
 800a340:	b909      	cbnz	r1, 800a346 <__lo0bits+0x2a>
 800a342:	0c1b      	lsrs	r3, r3, #16
 800a344:	2210      	movs	r2, #16
 800a346:	b2d9      	uxtb	r1, r3
 800a348:	b909      	cbnz	r1, 800a34e <__lo0bits+0x32>
 800a34a:	3208      	adds	r2, #8
 800a34c:	0a1b      	lsrs	r3, r3, #8
 800a34e:	0719      	lsls	r1, r3, #28
 800a350:	bf04      	itt	eq
 800a352:	091b      	lsreq	r3, r3, #4
 800a354:	3204      	addeq	r2, #4
 800a356:	0799      	lsls	r1, r3, #30
 800a358:	bf04      	itt	eq
 800a35a:	089b      	lsreq	r3, r3, #2
 800a35c:	3202      	addeq	r2, #2
 800a35e:	07d9      	lsls	r1, r3, #31
 800a360:	d403      	bmi.n	800a36a <__lo0bits+0x4e>
 800a362:	085b      	lsrs	r3, r3, #1
 800a364:	f102 0201 	add.w	r2, r2, #1
 800a368:	d003      	beq.n	800a372 <__lo0bits+0x56>
 800a36a:	6003      	str	r3, [r0, #0]
 800a36c:	e7e5      	b.n	800a33a <__lo0bits+0x1e>
 800a36e:	2200      	movs	r2, #0
 800a370:	e7e3      	b.n	800a33a <__lo0bits+0x1e>
 800a372:	2220      	movs	r2, #32
 800a374:	e7e1      	b.n	800a33a <__lo0bits+0x1e>
	...

0800a378 <__i2b>:
 800a378:	b510      	push	{r4, lr}
 800a37a:	460c      	mov	r4, r1
 800a37c:	2101      	movs	r1, #1
 800a37e:	f7ff ff05 	bl	800a18c <_Balloc>
 800a382:	4602      	mov	r2, r0
 800a384:	b928      	cbnz	r0, 800a392 <__i2b+0x1a>
 800a386:	4b05      	ldr	r3, [pc, #20]	; (800a39c <__i2b+0x24>)
 800a388:	4805      	ldr	r0, [pc, #20]	; (800a3a0 <__i2b+0x28>)
 800a38a:	f240 1145 	movw	r1, #325	; 0x145
 800a38e:	f000 fc99 	bl	800acc4 <__assert_func>
 800a392:	2301      	movs	r3, #1
 800a394:	6144      	str	r4, [r0, #20]
 800a396:	6103      	str	r3, [r0, #16]
 800a398:	bd10      	pop	{r4, pc}
 800a39a:	bf00      	nop
 800a39c:	0800b4bc 	.word	0x0800b4bc
 800a3a0:	0800b4cd 	.word	0x0800b4cd

0800a3a4 <__multiply>:
 800a3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a8:	4691      	mov	r9, r2
 800a3aa:	690a      	ldr	r2, [r1, #16]
 800a3ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	bfb8      	it	lt
 800a3b4:	460b      	movlt	r3, r1
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	bfbc      	itt	lt
 800a3ba:	464c      	movlt	r4, r9
 800a3bc:	4699      	movlt	r9, r3
 800a3be:	6927      	ldr	r7, [r4, #16]
 800a3c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3c4:	68a3      	ldr	r3, [r4, #8]
 800a3c6:	6861      	ldr	r1, [r4, #4]
 800a3c8:	eb07 060a 	add.w	r6, r7, sl
 800a3cc:	42b3      	cmp	r3, r6
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	bfb8      	it	lt
 800a3d2:	3101      	addlt	r1, #1
 800a3d4:	f7ff feda 	bl	800a18c <_Balloc>
 800a3d8:	b930      	cbnz	r0, 800a3e8 <__multiply+0x44>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	4b44      	ldr	r3, [pc, #272]	; (800a4f0 <__multiply+0x14c>)
 800a3de:	4845      	ldr	r0, [pc, #276]	; (800a4f4 <__multiply+0x150>)
 800a3e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a3e4:	f000 fc6e 	bl	800acc4 <__assert_func>
 800a3e8:	f100 0514 	add.w	r5, r0, #20
 800a3ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3f0:	462b      	mov	r3, r5
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	4543      	cmp	r3, r8
 800a3f6:	d321      	bcc.n	800a43c <__multiply+0x98>
 800a3f8:	f104 0314 	add.w	r3, r4, #20
 800a3fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a400:	f109 0314 	add.w	r3, r9, #20
 800a404:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a408:	9202      	str	r2, [sp, #8]
 800a40a:	1b3a      	subs	r2, r7, r4
 800a40c:	3a15      	subs	r2, #21
 800a40e:	f022 0203 	bic.w	r2, r2, #3
 800a412:	3204      	adds	r2, #4
 800a414:	f104 0115 	add.w	r1, r4, #21
 800a418:	428f      	cmp	r7, r1
 800a41a:	bf38      	it	cc
 800a41c:	2204      	movcc	r2, #4
 800a41e:	9201      	str	r2, [sp, #4]
 800a420:	9a02      	ldr	r2, [sp, #8]
 800a422:	9303      	str	r3, [sp, #12]
 800a424:	429a      	cmp	r2, r3
 800a426:	d80c      	bhi.n	800a442 <__multiply+0x9e>
 800a428:	2e00      	cmp	r6, #0
 800a42a:	dd03      	ble.n	800a434 <__multiply+0x90>
 800a42c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a430:	2b00      	cmp	r3, #0
 800a432:	d05b      	beq.n	800a4ec <__multiply+0x148>
 800a434:	6106      	str	r6, [r0, #16]
 800a436:	b005      	add	sp, #20
 800a438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a43c:	f843 2b04 	str.w	r2, [r3], #4
 800a440:	e7d8      	b.n	800a3f4 <__multiply+0x50>
 800a442:	f8b3 a000 	ldrh.w	sl, [r3]
 800a446:	f1ba 0f00 	cmp.w	sl, #0
 800a44a:	d024      	beq.n	800a496 <__multiply+0xf2>
 800a44c:	f104 0e14 	add.w	lr, r4, #20
 800a450:	46a9      	mov	r9, r5
 800a452:	f04f 0c00 	mov.w	ip, #0
 800a456:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a45a:	f8d9 1000 	ldr.w	r1, [r9]
 800a45e:	fa1f fb82 	uxth.w	fp, r2
 800a462:	b289      	uxth	r1, r1
 800a464:	fb0a 110b 	mla	r1, sl, fp, r1
 800a468:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a46c:	f8d9 2000 	ldr.w	r2, [r9]
 800a470:	4461      	add	r1, ip
 800a472:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a476:	fb0a c20b 	mla	r2, sl, fp, ip
 800a47a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a47e:	b289      	uxth	r1, r1
 800a480:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a484:	4577      	cmp	r7, lr
 800a486:	f849 1b04 	str.w	r1, [r9], #4
 800a48a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a48e:	d8e2      	bhi.n	800a456 <__multiply+0xb2>
 800a490:	9a01      	ldr	r2, [sp, #4]
 800a492:	f845 c002 	str.w	ip, [r5, r2]
 800a496:	9a03      	ldr	r2, [sp, #12]
 800a498:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a49c:	3304      	adds	r3, #4
 800a49e:	f1b9 0f00 	cmp.w	r9, #0
 800a4a2:	d021      	beq.n	800a4e8 <__multiply+0x144>
 800a4a4:	6829      	ldr	r1, [r5, #0]
 800a4a6:	f104 0c14 	add.w	ip, r4, #20
 800a4aa:	46ae      	mov	lr, r5
 800a4ac:	f04f 0a00 	mov.w	sl, #0
 800a4b0:	f8bc b000 	ldrh.w	fp, [ip]
 800a4b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4b8:	fb09 220b 	mla	r2, r9, fp, r2
 800a4bc:	4452      	add	r2, sl
 800a4be:	b289      	uxth	r1, r1
 800a4c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4c4:	f84e 1b04 	str.w	r1, [lr], #4
 800a4c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a4cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4d0:	f8be 1000 	ldrh.w	r1, [lr]
 800a4d4:	fb09 110a 	mla	r1, r9, sl, r1
 800a4d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a4dc:	4567      	cmp	r7, ip
 800a4de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4e2:	d8e5      	bhi.n	800a4b0 <__multiply+0x10c>
 800a4e4:	9a01      	ldr	r2, [sp, #4]
 800a4e6:	50a9      	str	r1, [r5, r2]
 800a4e8:	3504      	adds	r5, #4
 800a4ea:	e799      	b.n	800a420 <__multiply+0x7c>
 800a4ec:	3e01      	subs	r6, #1
 800a4ee:	e79b      	b.n	800a428 <__multiply+0x84>
 800a4f0:	0800b4bc 	.word	0x0800b4bc
 800a4f4:	0800b4cd 	.word	0x0800b4cd

0800a4f8 <__pow5mult>:
 800a4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4fc:	4615      	mov	r5, r2
 800a4fe:	f012 0203 	ands.w	r2, r2, #3
 800a502:	4606      	mov	r6, r0
 800a504:	460f      	mov	r7, r1
 800a506:	d007      	beq.n	800a518 <__pow5mult+0x20>
 800a508:	4c25      	ldr	r4, [pc, #148]	; (800a5a0 <__pow5mult+0xa8>)
 800a50a:	3a01      	subs	r2, #1
 800a50c:	2300      	movs	r3, #0
 800a50e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a512:	f7ff fe9d 	bl	800a250 <__multadd>
 800a516:	4607      	mov	r7, r0
 800a518:	10ad      	asrs	r5, r5, #2
 800a51a:	d03d      	beq.n	800a598 <__pow5mult+0xa0>
 800a51c:	69f4      	ldr	r4, [r6, #28]
 800a51e:	b97c      	cbnz	r4, 800a540 <__pow5mult+0x48>
 800a520:	2010      	movs	r0, #16
 800a522:	f7fe f879 	bl	8008618 <malloc>
 800a526:	4602      	mov	r2, r0
 800a528:	61f0      	str	r0, [r6, #28]
 800a52a:	b928      	cbnz	r0, 800a538 <__pow5mult+0x40>
 800a52c:	4b1d      	ldr	r3, [pc, #116]	; (800a5a4 <__pow5mult+0xac>)
 800a52e:	481e      	ldr	r0, [pc, #120]	; (800a5a8 <__pow5mult+0xb0>)
 800a530:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a534:	f000 fbc6 	bl	800acc4 <__assert_func>
 800a538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a53c:	6004      	str	r4, [r0, #0]
 800a53e:	60c4      	str	r4, [r0, #12]
 800a540:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a548:	b94c      	cbnz	r4, 800a55e <__pow5mult+0x66>
 800a54a:	f240 2171 	movw	r1, #625	; 0x271
 800a54e:	4630      	mov	r0, r6
 800a550:	f7ff ff12 	bl	800a378 <__i2b>
 800a554:	2300      	movs	r3, #0
 800a556:	f8c8 0008 	str.w	r0, [r8, #8]
 800a55a:	4604      	mov	r4, r0
 800a55c:	6003      	str	r3, [r0, #0]
 800a55e:	f04f 0900 	mov.w	r9, #0
 800a562:	07eb      	lsls	r3, r5, #31
 800a564:	d50a      	bpl.n	800a57c <__pow5mult+0x84>
 800a566:	4639      	mov	r1, r7
 800a568:	4622      	mov	r2, r4
 800a56a:	4630      	mov	r0, r6
 800a56c:	f7ff ff1a 	bl	800a3a4 <__multiply>
 800a570:	4639      	mov	r1, r7
 800a572:	4680      	mov	r8, r0
 800a574:	4630      	mov	r0, r6
 800a576:	f7ff fe49 	bl	800a20c <_Bfree>
 800a57a:	4647      	mov	r7, r8
 800a57c:	106d      	asrs	r5, r5, #1
 800a57e:	d00b      	beq.n	800a598 <__pow5mult+0xa0>
 800a580:	6820      	ldr	r0, [r4, #0]
 800a582:	b938      	cbnz	r0, 800a594 <__pow5mult+0x9c>
 800a584:	4622      	mov	r2, r4
 800a586:	4621      	mov	r1, r4
 800a588:	4630      	mov	r0, r6
 800a58a:	f7ff ff0b 	bl	800a3a4 <__multiply>
 800a58e:	6020      	str	r0, [r4, #0]
 800a590:	f8c0 9000 	str.w	r9, [r0]
 800a594:	4604      	mov	r4, r0
 800a596:	e7e4      	b.n	800a562 <__pow5mult+0x6a>
 800a598:	4638      	mov	r0, r7
 800a59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a59e:	bf00      	nop
 800a5a0:	0800b618 	.word	0x0800b618
 800a5a4:	0800b44d 	.word	0x0800b44d
 800a5a8:	0800b4cd 	.word	0x0800b4cd

0800a5ac <__lshift>:
 800a5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	6849      	ldr	r1, [r1, #4]
 800a5b4:	6923      	ldr	r3, [r4, #16]
 800a5b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5ba:	68a3      	ldr	r3, [r4, #8]
 800a5bc:	4607      	mov	r7, r0
 800a5be:	4691      	mov	r9, r2
 800a5c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5c4:	f108 0601 	add.w	r6, r8, #1
 800a5c8:	42b3      	cmp	r3, r6
 800a5ca:	db0b      	blt.n	800a5e4 <__lshift+0x38>
 800a5cc:	4638      	mov	r0, r7
 800a5ce:	f7ff fddd 	bl	800a18c <_Balloc>
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	b948      	cbnz	r0, 800a5ea <__lshift+0x3e>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	4b28      	ldr	r3, [pc, #160]	; (800a67c <__lshift+0xd0>)
 800a5da:	4829      	ldr	r0, [pc, #164]	; (800a680 <__lshift+0xd4>)
 800a5dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a5e0:	f000 fb70 	bl	800acc4 <__assert_func>
 800a5e4:	3101      	adds	r1, #1
 800a5e6:	005b      	lsls	r3, r3, #1
 800a5e8:	e7ee      	b.n	800a5c8 <__lshift+0x1c>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	f100 0114 	add.w	r1, r0, #20
 800a5f0:	f100 0210 	add.w	r2, r0, #16
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	4553      	cmp	r3, sl
 800a5f8:	db33      	blt.n	800a662 <__lshift+0xb6>
 800a5fa:	6920      	ldr	r0, [r4, #16]
 800a5fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a600:	f104 0314 	add.w	r3, r4, #20
 800a604:	f019 091f 	ands.w	r9, r9, #31
 800a608:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a60c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a610:	d02b      	beq.n	800a66a <__lshift+0xbe>
 800a612:	f1c9 0e20 	rsb	lr, r9, #32
 800a616:	468a      	mov	sl, r1
 800a618:	2200      	movs	r2, #0
 800a61a:	6818      	ldr	r0, [r3, #0]
 800a61c:	fa00 f009 	lsl.w	r0, r0, r9
 800a620:	4310      	orrs	r0, r2
 800a622:	f84a 0b04 	str.w	r0, [sl], #4
 800a626:	f853 2b04 	ldr.w	r2, [r3], #4
 800a62a:	459c      	cmp	ip, r3
 800a62c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a630:	d8f3      	bhi.n	800a61a <__lshift+0x6e>
 800a632:	ebac 0304 	sub.w	r3, ip, r4
 800a636:	3b15      	subs	r3, #21
 800a638:	f023 0303 	bic.w	r3, r3, #3
 800a63c:	3304      	adds	r3, #4
 800a63e:	f104 0015 	add.w	r0, r4, #21
 800a642:	4584      	cmp	ip, r0
 800a644:	bf38      	it	cc
 800a646:	2304      	movcc	r3, #4
 800a648:	50ca      	str	r2, [r1, r3]
 800a64a:	b10a      	cbz	r2, 800a650 <__lshift+0xa4>
 800a64c:	f108 0602 	add.w	r6, r8, #2
 800a650:	3e01      	subs	r6, #1
 800a652:	4638      	mov	r0, r7
 800a654:	612e      	str	r6, [r5, #16]
 800a656:	4621      	mov	r1, r4
 800a658:	f7ff fdd8 	bl	800a20c <_Bfree>
 800a65c:	4628      	mov	r0, r5
 800a65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a662:	f842 0f04 	str.w	r0, [r2, #4]!
 800a666:	3301      	adds	r3, #1
 800a668:	e7c5      	b.n	800a5f6 <__lshift+0x4a>
 800a66a:	3904      	subs	r1, #4
 800a66c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a670:	f841 2f04 	str.w	r2, [r1, #4]!
 800a674:	459c      	cmp	ip, r3
 800a676:	d8f9      	bhi.n	800a66c <__lshift+0xc0>
 800a678:	e7ea      	b.n	800a650 <__lshift+0xa4>
 800a67a:	bf00      	nop
 800a67c:	0800b4bc 	.word	0x0800b4bc
 800a680:	0800b4cd 	.word	0x0800b4cd

0800a684 <__mcmp>:
 800a684:	b530      	push	{r4, r5, lr}
 800a686:	6902      	ldr	r2, [r0, #16]
 800a688:	690c      	ldr	r4, [r1, #16]
 800a68a:	1b12      	subs	r2, r2, r4
 800a68c:	d10e      	bne.n	800a6ac <__mcmp+0x28>
 800a68e:	f100 0314 	add.w	r3, r0, #20
 800a692:	3114      	adds	r1, #20
 800a694:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a698:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a69c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6a4:	42a5      	cmp	r5, r4
 800a6a6:	d003      	beq.n	800a6b0 <__mcmp+0x2c>
 800a6a8:	d305      	bcc.n	800a6b6 <__mcmp+0x32>
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	bd30      	pop	{r4, r5, pc}
 800a6b0:	4283      	cmp	r3, r0
 800a6b2:	d3f3      	bcc.n	800a69c <__mcmp+0x18>
 800a6b4:	e7fa      	b.n	800a6ac <__mcmp+0x28>
 800a6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ba:	e7f7      	b.n	800a6ac <__mcmp+0x28>

0800a6bc <__mdiff>:
 800a6bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	4690      	mov	r8, r2
 800a6ca:	f7ff ffdb 	bl	800a684 <__mcmp>
 800a6ce:	1e05      	subs	r5, r0, #0
 800a6d0:	d110      	bne.n	800a6f4 <__mdiff+0x38>
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f7ff fd59 	bl	800a18c <_Balloc>
 800a6da:	b930      	cbnz	r0, 800a6ea <__mdiff+0x2e>
 800a6dc:	4b3a      	ldr	r3, [pc, #232]	; (800a7c8 <__mdiff+0x10c>)
 800a6de:	4602      	mov	r2, r0
 800a6e0:	f240 2137 	movw	r1, #567	; 0x237
 800a6e4:	4839      	ldr	r0, [pc, #228]	; (800a7cc <__mdiff+0x110>)
 800a6e6:	f000 faed 	bl	800acc4 <__assert_func>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f4:	bfa4      	itt	ge
 800a6f6:	4643      	movge	r3, r8
 800a6f8:	46a0      	movge	r8, r4
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a700:	bfa6      	itte	ge
 800a702:	461c      	movge	r4, r3
 800a704:	2500      	movge	r5, #0
 800a706:	2501      	movlt	r5, #1
 800a708:	f7ff fd40 	bl	800a18c <_Balloc>
 800a70c:	b920      	cbnz	r0, 800a718 <__mdiff+0x5c>
 800a70e:	4b2e      	ldr	r3, [pc, #184]	; (800a7c8 <__mdiff+0x10c>)
 800a710:	4602      	mov	r2, r0
 800a712:	f240 2145 	movw	r1, #581	; 0x245
 800a716:	e7e5      	b.n	800a6e4 <__mdiff+0x28>
 800a718:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a71c:	6926      	ldr	r6, [r4, #16]
 800a71e:	60c5      	str	r5, [r0, #12]
 800a720:	f104 0914 	add.w	r9, r4, #20
 800a724:	f108 0514 	add.w	r5, r8, #20
 800a728:	f100 0e14 	add.w	lr, r0, #20
 800a72c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a730:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a734:	f108 0210 	add.w	r2, r8, #16
 800a738:	46f2      	mov	sl, lr
 800a73a:	2100      	movs	r1, #0
 800a73c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a740:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a744:	fa11 f88b 	uxtah	r8, r1, fp
 800a748:	b299      	uxth	r1, r3
 800a74a:	0c1b      	lsrs	r3, r3, #16
 800a74c:	eba8 0801 	sub.w	r8, r8, r1
 800a750:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a754:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a758:	fa1f f888 	uxth.w	r8, r8
 800a75c:	1419      	asrs	r1, r3, #16
 800a75e:	454e      	cmp	r6, r9
 800a760:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a764:	f84a 3b04 	str.w	r3, [sl], #4
 800a768:	d8e8      	bhi.n	800a73c <__mdiff+0x80>
 800a76a:	1b33      	subs	r3, r6, r4
 800a76c:	3b15      	subs	r3, #21
 800a76e:	f023 0303 	bic.w	r3, r3, #3
 800a772:	3304      	adds	r3, #4
 800a774:	3415      	adds	r4, #21
 800a776:	42a6      	cmp	r6, r4
 800a778:	bf38      	it	cc
 800a77a:	2304      	movcc	r3, #4
 800a77c:	441d      	add	r5, r3
 800a77e:	4473      	add	r3, lr
 800a780:	469e      	mov	lr, r3
 800a782:	462e      	mov	r6, r5
 800a784:	4566      	cmp	r6, ip
 800a786:	d30e      	bcc.n	800a7a6 <__mdiff+0xea>
 800a788:	f10c 0203 	add.w	r2, ip, #3
 800a78c:	1b52      	subs	r2, r2, r5
 800a78e:	f022 0203 	bic.w	r2, r2, #3
 800a792:	3d03      	subs	r5, #3
 800a794:	45ac      	cmp	ip, r5
 800a796:	bf38      	it	cc
 800a798:	2200      	movcc	r2, #0
 800a79a:	4413      	add	r3, r2
 800a79c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a7a0:	b17a      	cbz	r2, 800a7c2 <__mdiff+0x106>
 800a7a2:	6107      	str	r7, [r0, #16]
 800a7a4:	e7a4      	b.n	800a6f0 <__mdiff+0x34>
 800a7a6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a7aa:	fa11 f288 	uxtah	r2, r1, r8
 800a7ae:	1414      	asrs	r4, r2, #16
 800a7b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a7b4:	b292      	uxth	r2, r2
 800a7b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a7ba:	f84e 2b04 	str.w	r2, [lr], #4
 800a7be:	1421      	asrs	r1, r4, #16
 800a7c0:	e7e0      	b.n	800a784 <__mdiff+0xc8>
 800a7c2:	3f01      	subs	r7, #1
 800a7c4:	e7ea      	b.n	800a79c <__mdiff+0xe0>
 800a7c6:	bf00      	nop
 800a7c8:	0800b4bc 	.word	0x0800b4bc
 800a7cc:	0800b4cd 	.word	0x0800b4cd

0800a7d0 <__d2b>:
 800a7d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7d4:	460f      	mov	r7, r1
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	ec59 8b10 	vmov	r8, r9, d0
 800a7dc:	4616      	mov	r6, r2
 800a7de:	f7ff fcd5 	bl	800a18c <_Balloc>
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	b930      	cbnz	r0, 800a7f4 <__d2b+0x24>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	4b24      	ldr	r3, [pc, #144]	; (800a87c <__d2b+0xac>)
 800a7ea:	4825      	ldr	r0, [pc, #148]	; (800a880 <__d2b+0xb0>)
 800a7ec:	f240 310f 	movw	r1, #783	; 0x30f
 800a7f0:	f000 fa68 	bl	800acc4 <__assert_func>
 800a7f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7fc:	bb2d      	cbnz	r5, 800a84a <__d2b+0x7a>
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	f1b8 0300 	subs.w	r3, r8, #0
 800a804:	d026      	beq.n	800a854 <__d2b+0x84>
 800a806:	4668      	mov	r0, sp
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	f7ff fd87 	bl	800a31c <__lo0bits>
 800a80e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a812:	b1e8      	cbz	r0, 800a850 <__d2b+0x80>
 800a814:	f1c0 0320 	rsb	r3, r0, #32
 800a818:	fa02 f303 	lsl.w	r3, r2, r3
 800a81c:	430b      	orrs	r3, r1
 800a81e:	40c2      	lsrs	r2, r0
 800a820:	6163      	str	r3, [r4, #20]
 800a822:	9201      	str	r2, [sp, #4]
 800a824:	9b01      	ldr	r3, [sp, #4]
 800a826:	61a3      	str	r3, [r4, #24]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	bf14      	ite	ne
 800a82c:	2202      	movne	r2, #2
 800a82e:	2201      	moveq	r2, #1
 800a830:	6122      	str	r2, [r4, #16]
 800a832:	b1bd      	cbz	r5, 800a864 <__d2b+0x94>
 800a834:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a838:	4405      	add	r5, r0
 800a83a:	603d      	str	r5, [r7, #0]
 800a83c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a840:	6030      	str	r0, [r6, #0]
 800a842:	4620      	mov	r0, r4
 800a844:	b003      	add	sp, #12
 800a846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a84a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a84e:	e7d6      	b.n	800a7fe <__d2b+0x2e>
 800a850:	6161      	str	r1, [r4, #20]
 800a852:	e7e7      	b.n	800a824 <__d2b+0x54>
 800a854:	a801      	add	r0, sp, #4
 800a856:	f7ff fd61 	bl	800a31c <__lo0bits>
 800a85a:	9b01      	ldr	r3, [sp, #4]
 800a85c:	6163      	str	r3, [r4, #20]
 800a85e:	3020      	adds	r0, #32
 800a860:	2201      	movs	r2, #1
 800a862:	e7e5      	b.n	800a830 <__d2b+0x60>
 800a864:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a868:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a86c:	6038      	str	r0, [r7, #0]
 800a86e:	6918      	ldr	r0, [r3, #16]
 800a870:	f7ff fd34 	bl	800a2dc <__hi0bits>
 800a874:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a878:	e7e2      	b.n	800a840 <__d2b+0x70>
 800a87a:	bf00      	nop
 800a87c:	0800b4bc 	.word	0x0800b4bc
 800a880:	0800b4cd 	.word	0x0800b4cd

0800a884 <__ssputs_r>:
 800a884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a888:	688e      	ldr	r6, [r1, #8]
 800a88a:	461f      	mov	r7, r3
 800a88c:	42be      	cmp	r6, r7
 800a88e:	680b      	ldr	r3, [r1, #0]
 800a890:	4682      	mov	sl, r0
 800a892:	460c      	mov	r4, r1
 800a894:	4690      	mov	r8, r2
 800a896:	d82c      	bhi.n	800a8f2 <__ssputs_r+0x6e>
 800a898:	898a      	ldrh	r2, [r1, #12]
 800a89a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a89e:	d026      	beq.n	800a8ee <__ssputs_r+0x6a>
 800a8a0:	6965      	ldr	r5, [r4, #20]
 800a8a2:	6909      	ldr	r1, [r1, #16]
 800a8a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8a8:	eba3 0901 	sub.w	r9, r3, r1
 800a8ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8b0:	1c7b      	adds	r3, r7, #1
 800a8b2:	444b      	add	r3, r9
 800a8b4:	106d      	asrs	r5, r5, #1
 800a8b6:	429d      	cmp	r5, r3
 800a8b8:	bf38      	it	cc
 800a8ba:	461d      	movcc	r5, r3
 800a8bc:	0553      	lsls	r3, r2, #21
 800a8be:	d527      	bpl.n	800a910 <__ssputs_r+0x8c>
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	f7fd fed9 	bl	8008678 <_malloc_r>
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	b360      	cbz	r0, 800a924 <__ssputs_r+0xa0>
 800a8ca:	6921      	ldr	r1, [r4, #16]
 800a8cc:	464a      	mov	r2, r9
 800a8ce:	f7fe fd88 	bl	80093e2 <memcpy>
 800a8d2:	89a3      	ldrh	r3, [r4, #12]
 800a8d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8dc:	81a3      	strh	r3, [r4, #12]
 800a8de:	6126      	str	r6, [r4, #16]
 800a8e0:	6165      	str	r5, [r4, #20]
 800a8e2:	444e      	add	r6, r9
 800a8e4:	eba5 0509 	sub.w	r5, r5, r9
 800a8e8:	6026      	str	r6, [r4, #0]
 800a8ea:	60a5      	str	r5, [r4, #8]
 800a8ec:	463e      	mov	r6, r7
 800a8ee:	42be      	cmp	r6, r7
 800a8f0:	d900      	bls.n	800a8f4 <__ssputs_r+0x70>
 800a8f2:	463e      	mov	r6, r7
 800a8f4:	6820      	ldr	r0, [r4, #0]
 800a8f6:	4632      	mov	r2, r6
 800a8f8:	4641      	mov	r1, r8
 800a8fa:	f000 f9c9 	bl	800ac90 <memmove>
 800a8fe:	68a3      	ldr	r3, [r4, #8]
 800a900:	1b9b      	subs	r3, r3, r6
 800a902:	60a3      	str	r3, [r4, #8]
 800a904:	6823      	ldr	r3, [r4, #0]
 800a906:	4433      	add	r3, r6
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	2000      	movs	r0, #0
 800a90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a910:	462a      	mov	r2, r5
 800a912:	f000 fa1d 	bl	800ad50 <_realloc_r>
 800a916:	4606      	mov	r6, r0
 800a918:	2800      	cmp	r0, #0
 800a91a:	d1e0      	bne.n	800a8de <__ssputs_r+0x5a>
 800a91c:	6921      	ldr	r1, [r4, #16]
 800a91e:	4650      	mov	r0, sl
 800a920:	f7ff fbe8 	bl	800a0f4 <_free_r>
 800a924:	230c      	movs	r3, #12
 800a926:	f8ca 3000 	str.w	r3, [sl]
 800a92a:	89a3      	ldrh	r3, [r4, #12]
 800a92c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a930:	81a3      	strh	r3, [r4, #12]
 800a932:	f04f 30ff 	mov.w	r0, #4294967295
 800a936:	e7e9      	b.n	800a90c <__ssputs_r+0x88>

0800a938 <_svfiprintf_r>:
 800a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93c:	4698      	mov	r8, r3
 800a93e:	898b      	ldrh	r3, [r1, #12]
 800a940:	061b      	lsls	r3, r3, #24
 800a942:	b09d      	sub	sp, #116	; 0x74
 800a944:	4607      	mov	r7, r0
 800a946:	460d      	mov	r5, r1
 800a948:	4614      	mov	r4, r2
 800a94a:	d50e      	bpl.n	800a96a <_svfiprintf_r+0x32>
 800a94c:	690b      	ldr	r3, [r1, #16]
 800a94e:	b963      	cbnz	r3, 800a96a <_svfiprintf_r+0x32>
 800a950:	2140      	movs	r1, #64	; 0x40
 800a952:	f7fd fe91 	bl	8008678 <_malloc_r>
 800a956:	6028      	str	r0, [r5, #0]
 800a958:	6128      	str	r0, [r5, #16]
 800a95a:	b920      	cbnz	r0, 800a966 <_svfiprintf_r+0x2e>
 800a95c:	230c      	movs	r3, #12
 800a95e:	603b      	str	r3, [r7, #0]
 800a960:	f04f 30ff 	mov.w	r0, #4294967295
 800a964:	e0d0      	b.n	800ab08 <_svfiprintf_r+0x1d0>
 800a966:	2340      	movs	r3, #64	; 0x40
 800a968:	616b      	str	r3, [r5, #20]
 800a96a:	2300      	movs	r3, #0
 800a96c:	9309      	str	r3, [sp, #36]	; 0x24
 800a96e:	2320      	movs	r3, #32
 800a970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a974:	f8cd 800c 	str.w	r8, [sp, #12]
 800a978:	2330      	movs	r3, #48	; 0x30
 800a97a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ab20 <_svfiprintf_r+0x1e8>
 800a97e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a982:	f04f 0901 	mov.w	r9, #1
 800a986:	4623      	mov	r3, r4
 800a988:	469a      	mov	sl, r3
 800a98a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a98e:	b10a      	cbz	r2, 800a994 <_svfiprintf_r+0x5c>
 800a990:	2a25      	cmp	r2, #37	; 0x25
 800a992:	d1f9      	bne.n	800a988 <_svfiprintf_r+0x50>
 800a994:	ebba 0b04 	subs.w	fp, sl, r4
 800a998:	d00b      	beq.n	800a9b2 <_svfiprintf_r+0x7a>
 800a99a:	465b      	mov	r3, fp
 800a99c:	4622      	mov	r2, r4
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	f7ff ff6f 	bl	800a884 <__ssputs_r>
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	f000 80a9 	beq.w	800aafe <_svfiprintf_r+0x1c6>
 800a9ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9ae:	445a      	add	r2, fp
 800a9b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 80a1 	beq.w	800aafe <_svfiprintf_r+0x1c6>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9c6:	f10a 0a01 	add.w	sl, sl, #1
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	9307      	str	r3, [sp, #28]
 800a9ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a9d4:	4654      	mov	r4, sl
 800a9d6:	2205      	movs	r2, #5
 800a9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9dc:	4850      	ldr	r0, [pc, #320]	; (800ab20 <_svfiprintf_r+0x1e8>)
 800a9de:	f7f5 fbff 	bl	80001e0 <memchr>
 800a9e2:	9a04      	ldr	r2, [sp, #16]
 800a9e4:	b9d8      	cbnz	r0, 800aa1e <_svfiprintf_r+0xe6>
 800a9e6:	06d0      	lsls	r0, r2, #27
 800a9e8:	bf44      	itt	mi
 800a9ea:	2320      	movmi	r3, #32
 800a9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9f0:	0711      	lsls	r1, r2, #28
 800a9f2:	bf44      	itt	mi
 800a9f4:	232b      	movmi	r3, #43	; 0x2b
 800a9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a9fe:	2b2a      	cmp	r3, #42	; 0x2a
 800aa00:	d015      	beq.n	800aa2e <_svfiprintf_r+0xf6>
 800aa02:	9a07      	ldr	r2, [sp, #28]
 800aa04:	4654      	mov	r4, sl
 800aa06:	2000      	movs	r0, #0
 800aa08:	f04f 0c0a 	mov.w	ip, #10
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa12:	3b30      	subs	r3, #48	; 0x30
 800aa14:	2b09      	cmp	r3, #9
 800aa16:	d94d      	bls.n	800aab4 <_svfiprintf_r+0x17c>
 800aa18:	b1b0      	cbz	r0, 800aa48 <_svfiprintf_r+0x110>
 800aa1a:	9207      	str	r2, [sp, #28]
 800aa1c:	e014      	b.n	800aa48 <_svfiprintf_r+0x110>
 800aa1e:	eba0 0308 	sub.w	r3, r0, r8
 800aa22:	fa09 f303 	lsl.w	r3, r9, r3
 800aa26:	4313      	orrs	r3, r2
 800aa28:	9304      	str	r3, [sp, #16]
 800aa2a:	46a2      	mov	sl, r4
 800aa2c:	e7d2      	b.n	800a9d4 <_svfiprintf_r+0x9c>
 800aa2e:	9b03      	ldr	r3, [sp, #12]
 800aa30:	1d19      	adds	r1, r3, #4
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	9103      	str	r1, [sp, #12]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	bfbb      	ittet	lt
 800aa3a:	425b      	neglt	r3, r3
 800aa3c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa40:	9307      	strge	r3, [sp, #28]
 800aa42:	9307      	strlt	r3, [sp, #28]
 800aa44:	bfb8      	it	lt
 800aa46:	9204      	strlt	r2, [sp, #16]
 800aa48:	7823      	ldrb	r3, [r4, #0]
 800aa4a:	2b2e      	cmp	r3, #46	; 0x2e
 800aa4c:	d10c      	bne.n	800aa68 <_svfiprintf_r+0x130>
 800aa4e:	7863      	ldrb	r3, [r4, #1]
 800aa50:	2b2a      	cmp	r3, #42	; 0x2a
 800aa52:	d134      	bne.n	800aabe <_svfiprintf_r+0x186>
 800aa54:	9b03      	ldr	r3, [sp, #12]
 800aa56:	1d1a      	adds	r2, r3, #4
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	9203      	str	r2, [sp, #12]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bfb8      	it	lt
 800aa60:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa64:	3402      	adds	r4, #2
 800aa66:	9305      	str	r3, [sp, #20]
 800aa68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ab30 <_svfiprintf_r+0x1f8>
 800aa6c:	7821      	ldrb	r1, [r4, #0]
 800aa6e:	2203      	movs	r2, #3
 800aa70:	4650      	mov	r0, sl
 800aa72:	f7f5 fbb5 	bl	80001e0 <memchr>
 800aa76:	b138      	cbz	r0, 800aa88 <_svfiprintf_r+0x150>
 800aa78:	9b04      	ldr	r3, [sp, #16]
 800aa7a:	eba0 000a 	sub.w	r0, r0, sl
 800aa7e:	2240      	movs	r2, #64	; 0x40
 800aa80:	4082      	lsls	r2, r0
 800aa82:	4313      	orrs	r3, r2
 800aa84:	3401      	adds	r4, #1
 800aa86:	9304      	str	r3, [sp, #16]
 800aa88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa8c:	4825      	ldr	r0, [pc, #148]	; (800ab24 <_svfiprintf_r+0x1ec>)
 800aa8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa92:	2206      	movs	r2, #6
 800aa94:	f7f5 fba4 	bl	80001e0 <memchr>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d038      	beq.n	800ab0e <_svfiprintf_r+0x1d6>
 800aa9c:	4b22      	ldr	r3, [pc, #136]	; (800ab28 <_svfiprintf_r+0x1f0>)
 800aa9e:	bb1b      	cbnz	r3, 800aae8 <_svfiprintf_r+0x1b0>
 800aaa0:	9b03      	ldr	r3, [sp, #12]
 800aaa2:	3307      	adds	r3, #7
 800aaa4:	f023 0307 	bic.w	r3, r3, #7
 800aaa8:	3308      	adds	r3, #8
 800aaaa:	9303      	str	r3, [sp, #12]
 800aaac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaae:	4433      	add	r3, r6
 800aab0:	9309      	str	r3, [sp, #36]	; 0x24
 800aab2:	e768      	b.n	800a986 <_svfiprintf_r+0x4e>
 800aab4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aab8:	460c      	mov	r4, r1
 800aaba:	2001      	movs	r0, #1
 800aabc:	e7a6      	b.n	800aa0c <_svfiprintf_r+0xd4>
 800aabe:	2300      	movs	r3, #0
 800aac0:	3401      	adds	r4, #1
 800aac2:	9305      	str	r3, [sp, #20]
 800aac4:	4619      	mov	r1, r3
 800aac6:	f04f 0c0a 	mov.w	ip, #10
 800aaca:	4620      	mov	r0, r4
 800aacc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aad0:	3a30      	subs	r2, #48	; 0x30
 800aad2:	2a09      	cmp	r2, #9
 800aad4:	d903      	bls.n	800aade <_svfiprintf_r+0x1a6>
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d0c6      	beq.n	800aa68 <_svfiprintf_r+0x130>
 800aada:	9105      	str	r1, [sp, #20]
 800aadc:	e7c4      	b.n	800aa68 <_svfiprintf_r+0x130>
 800aade:	fb0c 2101 	mla	r1, ip, r1, r2
 800aae2:	4604      	mov	r4, r0
 800aae4:	2301      	movs	r3, #1
 800aae6:	e7f0      	b.n	800aaca <_svfiprintf_r+0x192>
 800aae8:	ab03      	add	r3, sp, #12
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	462a      	mov	r2, r5
 800aaee:	4b0f      	ldr	r3, [pc, #60]	; (800ab2c <_svfiprintf_r+0x1f4>)
 800aaf0:	a904      	add	r1, sp, #16
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	f7fd feec 	bl	80088d0 <_printf_float>
 800aaf8:	1c42      	adds	r2, r0, #1
 800aafa:	4606      	mov	r6, r0
 800aafc:	d1d6      	bne.n	800aaac <_svfiprintf_r+0x174>
 800aafe:	89ab      	ldrh	r3, [r5, #12]
 800ab00:	065b      	lsls	r3, r3, #25
 800ab02:	f53f af2d 	bmi.w	800a960 <_svfiprintf_r+0x28>
 800ab06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab08:	b01d      	add	sp, #116	; 0x74
 800ab0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0e:	ab03      	add	r3, sp, #12
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	462a      	mov	r2, r5
 800ab14:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <_svfiprintf_r+0x1f4>)
 800ab16:	a904      	add	r1, sp, #16
 800ab18:	4638      	mov	r0, r7
 800ab1a:	f7fe f97d 	bl	8008e18 <_printf_i>
 800ab1e:	e7eb      	b.n	800aaf8 <_svfiprintf_r+0x1c0>
 800ab20:	0800b624 	.word	0x0800b624
 800ab24:	0800b62e 	.word	0x0800b62e
 800ab28:	080088d1 	.word	0x080088d1
 800ab2c:	0800a885 	.word	0x0800a885
 800ab30:	0800b62a 	.word	0x0800b62a

0800ab34 <__sflush_r>:
 800ab34:	898a      	ldrh	r2, [r1, #12]
 800ab36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3a:	4605      	mov	r5, r0
 800ab3c:	0710      	lsls	r0, r2, #28
 800ab3e:	460c      	mov	r4, r1
 800ab40:	d458      	bmi.n	800abf4 <__sflush_r+0xc0>
 800ab42:	684b      	ldr	r3, [r1, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	dc05      	bgt.n	800ab54 <__sflush_r+0x20>
 800ab48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	dc02      	bgt.n	800ab54 <__sflush_r+0x20>
 800ab4e:	2000      	movs	r0, #0
 800ab50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab56:	2e00      	cmp	r6, #0
 800ab58:	d0f9      	beq.n	800ab4e <__sflush_r+0x1a>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab60:	682f      	ldr	r7, [r5, #0]
 800ab62:	6a21      	ldr	r1, [r4, #32]
 800ab64:	602b      	str	r3, [r5, #0]
 800ab66:	d032      	beq.n	800abce <__sflush_r+0x9a>
 800ab68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	075a      	lsls	r2, r3, #29
 800ab6e:	d505      	bpl.n	800ab7c <__sflush_r+0x48>
 800ab70:	6863      	ldr	r3, [r4, #4]
 800ab72:	1ac0      	subs	r0, r0, r3
 800ab74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab76:	b10b      	cbz	r3, 800ab7c <__sflush_r+0x48>
 800ab78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab7a:	1ac0      	subs	r0, r0, r3
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	4602      	mov	r2, r0
 800ab80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab82:	6a21      	ldr	r1, [r4, #32]
 800ab84:	4628      	mov	r0, r5
 800ab86:	47b0      	blx	r6
 800ab88:	1c43      	adds	r3, r0, #1
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	d106      	bne.n	800ab9c <__sflush_r+0x68>
 800ab8e:	6829      	ldr	r1, [r5, #0]
 800ab90:	291d      	cmp	r1, #29
 800ab92:	d82b      	bhi.n	800abec <__sflush_r+0xb8>
 800ab94:	4a29      	ldr	r2, [pc, #164]	; (800ac3c <__sflush_r+0x108>)
 800ab96:	410a      	asrs	r2, r1
 800ab98:	07d6      	lsls	r6, r2, #31
 800ab9a:	d427      	bmi.n	800abec <__sflush_r+0xb8>
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	6062      	str	r2, [r4, #4]
 800aba0:	04d9      	lsls	r1, r3, #19
 800aba2:	6922      	ldr	r2, [r4, #16]
 800aba4:	6022      	str	r2, [r4, #0]
 800aba6:	d504      	bpl.n	800abb2 <__sflush_r+0x7e>
 800aba8:	1c42      	adds	r2, r0, #1
 800abaa:	d101      	bne.n	800abb0 <__sflush_r+0x7c>
 800abac:	682b      	ldr	r3, [r5, #0]
 800abae:	b903      	cbnz	r3, 800abb2 <__sflush_r+0x7e>
 800abb0:	6560      	str	r0, [r4, #84]	; 0x54
 800abb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abb4:	602f      	str	r7, [r5, #0]
 800abb6:	2900      	cmp	r1, #0
 800abb8:	d0c9      	beq.n	800ab4e <__sflush_r+0x1a>
 800abba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abbe:	4299      	cmp	r1, r3
 800abc0:	d002      	beq.n	800abc8 <__sflush_r+0x94>
 800abc2:	4628      	mov	r0, r5
 800abc4:	f7ff fa96 	bl	800a0f4 <_free_r>
 800abc8:	2000      	movs	r0, #0
 800abca:	6360      	str	r0, [r4, #52]	; 0x34
 800abcc:	e7c0      	b.n	800ab50 <__sflush_r+0x1c>
 800abce:	2301      	movs	r3, #1
 800abd0:	4628      	mov	r0, r5
 800abd2:	47b0      	blx	r6
 800abd4:	1c41      	adds	r1, r0, #1
 800abd6:	d1c8      	bne.n	800ab6a <__sflush_r+0x36>
 800abd8:	682b      	ldr	r3, [r5, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d0c5      	beq.n	800ab6a <__sflush_r+0x36>
 800abde:	2b1d      	cmp	r3, #29
 800abe0:	d001      	beq.n	800abe6 <__sflush_r+0xb2>
 800abe2:	2b16      	cmp	r3, #22
 800abe4:	d101      	bne.n	800abea <__sflush_r+0xb6>
 800abe6:	602f      	str	r7, [r5, #0]
 800abe8:	e7b1      	b.n	800ab4e <__sflush_r+0x1a>
 800abea:	89a3      	ldrh	r3, [r4, #12]
 800abec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abf0:	81a3      	strh	r3, [r4, #12]
 800abf2:	e7ad      	b.n	800ab50 <__sflush_r+0x1c>
 800abf4:	690f      	ldr	r7, [r1, #16]
 800abf6:	2f00      	cmp	r7, #0
 800abf8:	d0a9      	beq.n	800ab4e <__sflush_r+0x1a>
 800abfa:	0793      	lsls	r3, r2, #30
 800abfc:	680e      	ldr	r6, [r1, #0]
 800abfe:	bf08      	it	eq
 800ac00:	694b      	ldreq	r3, [r1, #20]
 800ac02:	600f      	str	r7, [r1, #0]
 800ac04:	bf18      	it	ne
 800ac06:	2300      	movne	r3, #0
 800ac08:	eba6 0807 	sub.w	r8, r6, r7
 800ac0c:	608b      	str	r3, [r1, #8]
 800ac0e:	f1b8 0f00 	cmp.w	r8, #0
 800ac12:	dd9c      	ble.n	800ab4e <__sflush_r+0x1a>
 800ac14:	6a21      	ldr	r1, [r4, #32]
 800ac16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac18:	4643      	mov	r3, r8
 800ac1a:	463a      	mov	r2, r7
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	47b0      	blx	r6
 800ac20:	2800      	cmp	r0, #0
 800ac22:	dc06      	bgt.n	800ac32 <__sflush_r+0xfe>
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac2a:	81a3      	strh	r3, [r4, #12]
 800ac2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac30:	e78e      	b.n	800ab50 <__sflush_r+0x1c>
 800ac32:	4407      	add	r7, r0
 800ac34:	eba8 0800 	sub.w	r8, r8, r0
 800ac38:	e7e9      	b.n	800ac0e <__sflush_r+0xda>
 800ac3a:	bf00      	nop
 800ac3c:	dfbffffe 	.word	0xdfbffffe

0800ac40 <_fflush_r>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	690b      	ldr	r3, [r1, #16]
 800ac44:	4605      	mov	r5, r0
 800ac46:	460c      	mov	r4, r1
 800ac48:	b913      	cbnz	r3, 800ac50 <_fflush_r+0x10>
 800ac4a:	2500      	movs	r5, #0
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	bd38      	pop	{r3, r4, r5, pc}
 800ac50:	b118      	cbz	r0, 800ac5a <_fflush_r+0x1a>
 800ac52:	6a03      	ldr	r3, [r0, #32]
 800ac54:	b90b      	cbnz	r3, 800ac5a <_fflush_r+0x1a>
 800ac56:	f7fe fa8d 	bl	8009174 <__sinit>
 800ac5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d0f3      	beq.n	800ac4a <_fflush_r+0xa>
 800ac62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac64:	07d0      	lsls	r0, r2, #31
 800ac66:	d404      	bmi.n	800ac72 <_fflush_r+0x32>
 800ac68:	0599      	lsls	r1, r3, #22
 800ac6a:	d402      	bmi.n	800ac72 <_fflush_r+0x32>
 800ac6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac6e:	f7fe fbb6 	bl	80093de <__retarget_lock_acquire_recursive>
 800ac72:	4628      	mov	r0, r5
 800ac74:	4621      	mov	r1, r4
 800ac76:	f7ff ff5d 	bl	800ab34 <__sflush_r>
 800ac7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac7c:	07da      	lsls	r2, r3, #31
 800ac7e:	4605      	mov	r5, r0
 800ac80:	d4e4      	bmi.n	800ac4c <_fflush_r+0xc>
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	059b      	lsls	r3, r3, #22
 800ac86:	d4e1      	bmi.n	800ac4c <_fflush_r+0xc>
 800ac88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac8a:	f7fe fba9 	bl	80093e0 <__retarget_lock_release_recursive>
 800ac8e:	e7dd      	b.n	800ac4c <_fflush_r+0xc>

0800ac90 <memmove>:
 800ac90:	4288      	cmp	r0, r1
 800ac92:	b510      	push	{r4, lr}
 800ac94:	eb01 0402 	add.w	r4, r1, r2
 800ac98:	d902      	bls.n	800aca0 <memmove+0x10>
 800ac9a:	4284      	cmp	r4, r0
 800ac9c:	4623      	mov	r3, r4
 800ac9e:	d807      	bhi.n	800acb0 <memmove+0x20>
 800aca0:	1e43      	subs	r3, r0, #1
 800aca2:	42a1      	cmp	r1, r4
 800aca4:	d008      	beq.n	800acb8 <memmove+0x28>
 800aca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acae:	e7f8      	b.n	800aca2 <memmove+0x12>
 800acb0:	4402      	add	r2, r0
 800acb2:	4601      	mov	r1, r0
 800acb4:	428a      	cmp	r2, r1
 800acb6:	d100      	bne.n	800acba <memmove+0x2a>
 800acb8:	bd10      	pop	{r4, pc}
 800acba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acc2:	e7f7      	b.n	800acb4 <memmove+0x24>

0800acc4 <__assert_func>:
 800acc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acc6:	4614      	mov	r4, r2
 800acc8:	461a      	mov	r2, r3
 800acca:	4b09      	ldr	r3, [pc, #36]	; (800acf0 <__assert_func+0x2c>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4605      	mov	r5, r0
 800acd0:	68d8      	ldr	r0, [r3, #12]
 800acd2:	b14c      	cbz	r4, 800ace8 <__assert_func+0x24>
 800acd4:	4b07      	ldr	r3, [pc, #28]	; (800acf4 <__assert_func+0x30>)
 800acd6:	9100      	str	r1, [sp, #0]
 800acd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800acdc:	4906      	ldr	r1, [pc, #24]	; (800acf8 <__assert_func+0x34>)
 800acde:	462b      	mov	r3, r5
 800ace0:	f000 f872 	bl	800adc8 <fiprintf>
 800ace4:	f000 f882 	bl	800adec <abort>
 800ace8:	4b04      	ldr	r3, [pc, #16]	; (800acfc <__assert_func+0x38>)
 800acea:	461c      	mov	r4, r3
 800acec:	e7f3      	b.n	800acd6 <__assert_func+0x12>
 800acee:	bf00      	nop
 800acf0:	20000068 	.word	0x20000068
 800acf4:	0800b63f 	.word	0x0800b63f
 800acf8:	0800b64c 	.word	0x0800b64c
 800acfc:	0800b67a 	.word	0x0800b67a

0800ad00 <_calloc_r>:
 800ad00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad02:	fba1 2402 	umull	r2, r4, r1, r2
 800ad06:	b94c      	cbnz	r4, 800ad1c <_calloc_r+0x1c>
 800ad08:	4611      	mov	r1, r2
 800ad0a:	9201      	str	r2, [sp, #4]
 800ad0c:	f7fd fcb4 	bl	8008678 <_malloc_r>
 800ad10:	9a01      	ldr	r2, [sp, #4]
 800ad12:	4605      	mov	r5, r0
 800ad14:	b930      	cbnz	r0, 800ad24 <_calloc_r+0x24>
 800ad16:	4628      	mov	r0, r5
 800ad18:	b003      	add	sp, #12
 800ad1a:	bd30      	pop	{r4, r5, pc}
 800ad1c:	220c      	movs	r2, #12
 800ad1e:	6002      	str	r2, [r0, #0]
 800ad20:	2500      	movs	r5, #0
 800ad22:	e7f8      	b.n	800ad16 <_calloc_r+0x16>
 800ad24:	4621      	mov	r1, r4
 800ad26:	f7fe fabe 	bl	80092a6 <memset>
 800ad2a:	e7f4      	b.n	800ad16 <_calloc_r+0x16>

0800ad2c <__ascii_mbtowc>:
 800ad2c:	b082      	sub	sp, #8
 800ad2e:	b901      	cbnz	r1, 800ad32 <__ascii_mbtowc+0x6>
 800ad30:	a901      	add	r1, sp, #4
 800ad32:	b142      	cbz	r2, 800ad46 <__ascii_mbtowc+0x1a>
 800ad34:	b14b      	cbz	r3, 800ad4a <__ascii_mbtowc+0x1e>
 800ad36:	7813      	ldrb	r3, [r2, #0]
 800ad38:	600b      	str	r3, [r1, #0]
 800ad3a:	7812      	ldrb	r2, [r2, #0]
 800ad3c:	1e10      	subs	r0, r2, #0
 800ad3e:	bf18      	it	ne
 800ad40:	2001      	movne	r0, #1
 800ad42:	b002      	add	sp, #8
 800ad44:	4770      	bx	lr
 800ad46:	4610      	mov	r0, r2
 800ad48:	e7fb      	b.n	800ad42 <__ascii_mbtowc+0x16>
 800ad4a:	f06f 0001 	mvn.w	r0, #1
 800ad4e:	e7f8      	b.n	800ad42 <__ascii_mbtowc+0x16>

0800ad50 <_realloc_r>:
 800ad50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad54:	4680      	mov	r8, r0
 800ad56:	4614      	mov	r4, r2
 800ad58:	460e      	mov	r6, r1
 800ad5a:	b921      	cbnz	r1, 800ad66 <_realloc_r+0x16>
 800ad5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad60:	4611      	mov	r1, r2
 800ad62:	f7fd bc89 	b.w	8008678 <_malloc_r>
 800ad66:	b92a      	cbnz	r2, 800ad74 <_realloc_r+0x24>
 800ad68:	f7ff f9c4 	bl	800a0f4 <_free_r>
 800ad6c:	4625      	mov	r5, r4
 800ad6e:	4628      	mov	r0, r5
 800ad70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad74:	f000 f841 	bl	800adfa <_malloc_usable_size_r>
 800ad78:	4284      	cmp	r4, r0
 800ad7a:	4607      	mov	r7, r0
 800ad7c:	d802      	bhi.n	800ad84 <_realloc_r+0x34>
 800ad7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad82:	d812      	bhi.n	800adaa <_realloc_r+0x5a>
 800ad84:	4621      	mov	r1, r4
 800ad86:	4640      	mov	r0, r8
 800ad88:	f7fd fc76 	bl	8008678 <_malloc_r>
 800ad8c:	4605      	mov	r5, r0
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d0ed      	beq.n	800ad6e <_realloc_r+0x1e>
 800ad92:	42bc      	cmp	r4, r7
 800ad94:	4622      	mov	r2, r4
 800ad96:	4631      	mov	r1, r6
 800ad98:	bf28      	it	cs
 800ad9a:	463a      	movcs	r2, r7
 800ad9c:	f7fe fb21 	bl	80093e2 <memcpy>
 800ada0:	4631      	mov	r1, r6
 800ada2:	4640      	mov	r0, r8
 800ada4:	f7ff f9a6 	bl	800a0f4 <_free_r>
 800ada8:	e7e1      	b.n	800ad6e <_realloc_r+0x1e>
 800adaa:	4635      	mov	r5, r6
 800adac:	e7df      	b.n	800ad6e <_realloc_r+0x1e>

0800adae <__ascii_wctomb>:
 800adae:	b149      	cbz	r1, 800adc4 <__ascii_wctomb+0x16>
 800adb0:	2aff      	cmp	r2, #255	; 0xff
 800adb2:	bf85      	ittet	hi
 800adb4:	238a      	movhi	r3, #138	; 0x8a
 800adb6:	6003      	strhi	r3, [r0, #0]
 800adb8:	700a      	strbls	r2, [r1, #0]
 800adba:	f04f 30ff 	movhi.w	r0, #4294967295
 800adbe:	bf98      	it	ls
 800adc0:	2001      	movls	r0, #1
 800adc2:	4770      	bx	lr
 800adc4:	4608      	mov	r0, r1
 800adc6:	4770      	bx	lr

0800adc8 <fiprintf>:
 800adc8:	b40e      	push	{r1, r2, r3}
 800adca:	b503      	push	{r0, r1, lr}
 800adcc:	4601      	mov	r1, r0
 800adce:	ab03      	add	r3, sp, #12
 800add0:	4805      	ldr	r0, [pc, #20]	; (800ade8 <fiprintf+0x20>)
 800add2:	f853 2b04 	ldr.w	r2, [r3], #4
 800add6:	6800      	ldr	r0, [r0, #0]
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	f000 f83f 	bl	800ae5c <_vfiprintf_r>
 800adde:	b002      	add	sp, #8
 800ade0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ade4:	b003      	add	sp, #12
 800ade6:	4770      	bx	lr
 800ade8:	20000068 	.word	0x20000068

0800adec <abort>:
 800adec:	b508      	push	{r3, lr}
 800adee:	2006      	movs	r0, #6
 800adf0:	f000 fa0c 	bl	800b20c <raise>
 800adf4:	2001      	movs	r0, #1
 800adf6:	f7f8 fae5 	bl	80033c4 <_exit>

0800adfa <_malloc_usable_size_r>:
 800adfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adfe:	1f18      	subs	r0, r3, #4
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	bfbc      	itt	lt
 800ae04:	580b      	ldrlt	r3, [r1, r0]
 800ae06:	18c0      	addlt	r0, r0, r3
 800ae08:	4770      	bx	lr

0800ae0a <__sfputc_r>:
 800ae0a:	6893      	ldr	r3, [r2, #8]
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	b410      	push	{r4}
 800ae12:	6093      	str	r3, [r2, #8]
 800ae14:	da08      	bge.n	800ae28 <__sfputc_r+0x1e>
 800ae16:	6994      	ldr	r4, [r2, #24]
 800ae18:	42a3      	cmp	r3, r4
 800ae1a:	db01      	blt.n	800ae20 <__sfputc_r+0x16>
 800ae1c:	290a      	cmp	r1, #10
 800ae1e:	d103      	bne.n	800ae28 <__sfputc_r+0x1e>
 800ae20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae24:	f000 b934 	b.w	800b090 <__swbuf_r>
 800ae28:	6813      	ldr	r3, [r2, #0]
 800ae2a:	1c58      	adds	r0, r3, #1
 800ae2c:	6010      	str	r0, [r2, #0]
 800ae2e:	7019      	strb	r1, [r3, #0]
 800ae30:	4608      	mov	r0, r1
 800ae32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <__sfputs_r>:
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	4606      	mov	r6, r0
 800ae3c:	460f      	mov	r7, r1
 800ae3e:	4614      	mov	r4, r2
 800ae40:	18d5      	adds	r5, r2, r3
 800ae42:	42ac      	cmp	r4, r5
 800ae44:	d101      	bne.n	800ae4a <__sfputs_r+0x12>
 800ae46:	2000      	movs	r0, #0
 800ae48:	e007      	b.n	800ae5a <__sfputs_r+0x22>
 800ae4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae4e:	463a      	mov	r2, r7
 800ae50:	4630      	mov	r0, r6
 800ae52:	f7ff ffda 	bl	800ae0a <__sfputc_r>
 800ae56:	1c43      	adds	r3, r0, #1
 800ae58:	d1f3      	bne.n	800ae42 <__sfputs_r+0xa>
 800ae5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae5c <_vfiprintf_r>:
 800ae5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae60:	460d      	mov	r5, r1
 800ae62:	b09d      	sub	sp, #116	; 0x74
 800ae64:	4614      	mov	r4, r2
 800ae66:	4698      	mov	r8, r3
 800ae68:	4606      	mov	r6, r0
 800ae6a:	b118      	cbz	r0, 800ae74 <_vfiprintf_r+0x18>
 800ae6c:	6a03      	ldr	r3, [r0, #32]
 800ae6e:	b90b      	cbnz	r3, 800ae74 <_vfiprintf_r+0x18>
 800ae70:	f7fe f980 	bl	8009174 <__sinit>
 800ae74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae76:	07d9      	lsls	r1, r3, #31
 800ae78:	d405      	bmi.n	800ae86 <_vfiprintf_r+0x2a>
 800ae7a:	89ab      	ldrh	r3, [r5, #12]
 800ae7c:	059a      	lsls	r2, r3, #22
 800ae7e:	d402      	bmi.n	800ae86 <_vfiprintf_r+0x2a>
 800ae80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae82:	f7fe faac 	bl	80093de <__retarget_lock_acquire_recursive>
 800ae86:	89ab      	ldrh	r3, [r5, #12]
 800ae88:	071b      	lsls	r3, r3, #28
 800ae8a:	d501      	bpl.n	800ae90 <_vfiprintf_r+0x34>
 800ae8c:	692b      	ldr	r3, [r5, #16]
 800ae8e:	b99b      	cbnz	r3, 800aeb8 <_vfiprintf_r+0x5c>
 800ae90:	4629      	mov	r1, r5
 800ae92:	4630      	mov	r0, r6
 800ae94:	f000 f93a 	bl	800b10c <__swsetup_r>
 800ae98:	b170      	cbz	r0, 800aeb8 <_vfiprintf_r+0x5c>
 800ae9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae9c:	07dc      	lsls	r4, r3, #31
 800ae9e:	d504      	bpl.n	800aeaa <_vfiprintf_r+0x4e>
 800aea0:	f04f 30ff 	mov.w	r0, #4294967295
 800aea4:	b01d      	add	sp, #116	; 0x74
 800aea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeaa:	89ab      	ldrh	r3, [r5, #12]
 800aeac:	0598      	lsls	r0, r3, #22
 800aeae:	d4f7      	bmi.n	800aea0 <_vfiprintf_r+0x44>
 800aeb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeb2:	f7fe fa95 	bl	80093e0 <__retarget_lock_release_recursive>
 800aeb6:	e7f3      	b.n	800aea0 <_vfiprintf_r+0x44>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	9309      	str	r3, [sp, #36]	; 0x24
 800aebc:	2320      	movs	r3, #32
 800aebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aec2:	f8cd 800c 	str.w	r8, [sp, #12]
 800aec6:	2330      	movs	r3, #48	; 0x30
 800aec8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b07c <_vfiprintf_r+0x220>
 800aecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aed0:	f04f 0901 	mov.w	r9, #1
 800aed4:	4623      	mov	r3, r4
 800aed6:	469a      	mov	sl, r3
 800aed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aedc:	b10a      	cbz	r2, 800aee2 <_vfiprintf_r+0x86>
 800aede:	2a25      	cmp	r2, #37	; 0x25
 800aee0:	d1f9      	bne.n	800aed6 <_vfiprintf_r+0x7a>
 800aee2:	ebba 0b04 	subs.w	fp, sl, r4
 800aee6:	d00b      	beq.n	800af00 <_vfiprintf_r+0xa4>
 800aee8:	465b      	mov	r3, fp
 800aeea:	4622      	mov	r2, r4
 800aeec:	4629      	mov	r1, r5
 800aeee:	4630      	mov	r0, r6
 800aef0:	f7ff ffa2 	bl	800ae38 <__sfputs_r>
 800aef4:	3001      	adds	r0, #1
 800aef6:	f000 80a9 	beq.w	800b04c <_vfiprintf_r+0x1f0>
 800aefa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aefc:	445a      	add	r2, fp
 800aefe:	9209      	str	r2, [sp, #36]	; 0x24
 800af00:	f89a 3000 	ldrb.w	r3, [sl]
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 80a1 	beq.w	800b04c <_vfiprintf_r+0x1f0>
 800af0a:	2300      	movs	r3, #0
 800af0c:	f04f 32ff 	mov.w	r2, #4294967295
 800af10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af14:	f10a 0a01 	add.w	sl, sl, #1
 800af18:	9304      	str	r3, [sp, #16]
 800af1a:	9307      	str	r3, [sp, #28]
 800af1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af20:	931a      	str	r3, [sp, #104]	; 0x68
 800af22:	4654      	mov	r4, sl
 800af24:	2205      	movs	r2, #5
 800af26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af2a:	4854      	ldr	r0, [pc, #336]	; (800b07c <_vfiprintf_r+0x220>)
 800af2c:	f7f5 f958 	bl	80001e0 <memchr>
 800af30:	9a04      	ldr	r2, [sp, #16]
 800af32:	b9d8      	cbnz	r0, 800af6c <_vfiprintf_r+0x110>
 800af34:	06d1      	lsls	r1, r2, #27
 800af36:	bf44      	itt	mi
 800af38:	2320      	movmi	r3, #32
 800af3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af3e:	0713      	lsls	r3, r2, #28
 800af40:	bf44      	itt	mi
 800af42:	232b      	movmi	r3, #43	; 0x2b
 800af44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af48:	f89a 3000 	ldrb.w	r3, [sl]
 800af4c:	2b2a      	cmp	r3, #42	; 0x2a
 800af4e:	d015      	beq.n	800af7c <_vfiprintf_r+0x120>
 800af50:	9a07      	ldr	r2, [sp, #28]
 800af52:	4654      	mov	r4, sl
 800af54:	2000      	movs	r0, #0
 800af56:	f04f 0c0a 	mov.w	ip, #10
 800af5a:	4621      	mov	r1, r4
 800af5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af60:	3b30      	subs	r3, #48	; 0x30
 800af62:	2b09      	cmp	r3, #9
 800af64:	d94d      	bls.n	800b002 <_vfiprintf_r+0x1a6>
 800af66:	b1b0      	cbz	r0, 800af96 <_vfiprintf_r+0x13a>
 800af68:	9207      	str	r2, [sp, #28]
 800af6a:	e014      	b.n	800af96 <_vfiprintf_r+0x13a>
 800af6c:	eba0 0308 	sub.w	r3, r0, r8
 800af70:	fa09 f303 	lsl.w	r3, r9, r3
 800af74:	4313      	orrs	r3, r2
 800af76:	9304      	str	r3, [sp, #16]
 800af78:	46a2      	mov	sl, r4
 800af7a:	e7d2      	b.n	800af22 <_vfiprintf_r+0xc6>
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	1d19      	adds	r1, r3, #4
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	9103      	str	r1, [sp, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	bfbb      	ittet	lt
 800af88:	425b      	neglt	r3, r3
 800af8a:	f042 0202 	orrlt.w	r2, r2, #2
 800af8e:	9307      	strge	r3, [sp, #28]
 800af90:	9307      	strlt	r3, [sp, #28]
 800af92:	bfb8      	it	lt
 800af94:	9204      	strlt	r2, [sp, #16]
 800af96:	7823      	ldrb	r3, [r4, #0]
 800af98:	2b2e      	cmp	r3, #46	; 0x2e
 800af9a:	d10c      	bne.n	800afb6 <_vfiprintf_r+0x15a>
 800af9c:	7863      	ldrb	r3, [r4, #1]
 800af9e:	2b2a      	cmp	r3, #42	; 0x2a
 800afa0:	d134      	bne.n	800b00c <_vfiprintf_r+0x1b0>
 800afa2:	9b03      	ldr	r3, [sp, #12]
 800afa4:	1d1a      	adds	r2, r3, #4
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	9203      	str	r2, [sp, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	bfb8      	it	lt
 800afae:	f04f 33ff 	movlt.w	r3, #4294967295
 800afb2:	3402      	adds	r4, #2
 800afb4:	9305      	str	r3, [sp, #20]
 800afb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b08c <_vfiprintf_r+0x230>
 800afba:	7821      	ldrb	r1, [r4, #0]
 800afbc:	2203      	movs	r2, #3
 800afbe:	4650      	mov	r0, sl
 800afc0:	f7f5 f90e 	bl	80001e0 <memchr>
 800afc4:	b138      	cbz	r0, 800afd6 <_vfiprintf_r+0x17a>
 800afc6:	9b04      	ldr	r3, [sp, #16]
 800afc8:	eba0 000a 	sub.w	r0, r0, sl
 800afcc:	2240      	movs	r2, #64	; 0x40
 800afce:	4082      	lsls	r2, r0
 800afd0:	4313      	orrs	r3, r2
 800afd2:	3401      	adds	r4, #1
 800afd4:	9304      	str	r3, [sp, #16]
 800afd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afda:	4829      	ldr	r0, [pc, #164]	; (800b080 <_vfiprintf_r+0x224>)
 800afdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afe0:	2206      	movs	r2, #6
 800afe2:	f7f5 f8fd 	bl	80001e0 <memchr>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d03f      	beq.n	800b06a <_vfiprintf_r+0x20e>
 800afea:	4b26      	ldr	r3, [pc, #152]	; (800b084 <_vfiprintf_r+0x228>)
 800afec:	bb1b      	cbnz	r3, 800b036 <_vfiprintf_r+0x1da>
 800afee:	9b03      	ldr	r3, [sp, #12]
 800aff0:	3307      	adds	r3, #7
 800aff2:	f023 0307 	bic.w	r3, r3, #7
 800aff6:	3308      	adds	r3, #8
 800aff8:	9303      	str	r3, [sp, #12]
 800affa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affc:	443b      	add	r3, r7
 800affe:	9309      	str	r3, [sp, #36]	; 0x24
 800b000:	e768      	b.n	800aed4 <_vfiprintf_r+0x78>
 800b002:	fb0c 3202 	mla	r2, ip, r2, r3
 800b006:	460c      	mov	r4, r1
 800b008:	2001      	movs	r0, #1
 800b00a:	e7a6      	b.n	800af5a <_vfiprintf_r+0xfe>
 800b00c:	2300      	movs	r3, #0
 800b00e:	3401      	adds	r4, #1
 800b010:	9305      	str	r3, [sp, #20]
 800b012:	4619      	mov	r1, r3
 800b014:	f04f 0c0a 	mov.w	ip, #10
 800b018:	4620      	mov	r0, r4
 800b01a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b01e:	3a30      	subs	r2, #48	; 0x30
 800b020:	2a09      	cmp	r2, #9
 800b022:	d903      	bls.n	800b02c <_vfiprintf_r+0x1d0>
 800b024:	2b00      	cmp	r3, #0
 800b026:	d0c6      	beq.n	800afb6 <_vfiprintf_r+0x15a>
 800b028:	9105      	str	r1, [sp, #20]
 800b02a:	e7c4      	b.n	800afb6 <_vfiprintf_r+0x15a>
 800b02c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b030:	4604      	mov	r4, r0
 800b032:	2301      	movs	r3, #1
 800b034:	e7f0      	b.n	800b018 <_vfiprintf_r+0x1bc>
 800b036:	ab03      	add	r3, sp, #12
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	462a      	mov	r2, r5
 800b03c:	4b12      	ldr	r3, [pc, #72]	; (800b088 <_vfiprintf_r+0x22c>)
 800b03e:	a904      	add	r1, sp, #16
 800b040:	4630      	mov	r0, r6
 800b042:	f7fd fc45 	bl	80088d0 <_printf_float>
 800b046:	4607      	mov	r7, r0
 800b048:	1c78      	adds	r0, r7, #1
 800b04a:	d1d6      	bne.n	800affa <_vfiprintf_r+0x19e>
 800b04c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b04e:	07d9      	lsls	r1, r3, #31
 800b050:	d405      	bmi.n	800b05e <_vfiprintf_r+0x202>
 800b052:	89ab      	ldrh	r3, [r5, #12]
 800b054:	059a      	lsls	r2, r3, #22
 800b056:	d402      	bmi.n	800b05e <_vfiprintf_r+0x202>
 800b058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b05a:	f7fe f9c1 	bl	80093e0 <__retarget_lock_release_recursive>
 800b05e:	89ab      	ldrh	r3, [r5, #12]
 800b060:	065b      	lsls	r3, r3, #25
 800b062:	f53f af1d 	bmi.w	800aea0 <_vfiprintf_r+0x44>
 800b066:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b068:	e71c      	b.n	800aea4 <_vfiprintf_r+0x48>
 800b06a:	ab03      	add	r3, sp, #12
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	462a      	mov	r2, r5
 800b070:	4b05      	ldr	r3, [pc, #20]	; (800b088 <_vfiprintf_r+0x22c>)
 800b072:	a904      	add	r1, sp, #16
 800b074:	4630      	mov	r0, r6
 800b076:	f7fd fecf 	bl	8008e18 <_printf_i>
 800b07a:	e7e4      	b.n	800b046 <_vfiprintf_r+0x1ea>
 800b07c:	0800b624 	.word	0x0800b624
 800b080:	0800b62e 	.word	0x0800b62e
 800b084:	080088d1 	.word	0x080088d1
 800b088:	0800ae39 	.word	0x0800ae39
 800b08c:	0800b62a 	.word	0x0800b62a

0800b090 <__swbuf_r>:
 800b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b092:	460e      	mov	r6, r1
 800b094:	4614      	mov	r4, r2
 800b096:	4605      	mov	r5, r0
 800b098:	b118      	cbz	r0, 800b0a2 <__swbuf_r+0x12>
 800b09a:	6a03      	ldr	r3, [r0, #32]
 800b09c:	b90b      	cbnz	r3, 800b0a2 <__swbuf_r+0x12>
 800b09e:	f7fe f869 	bl	8009174 <__sinit>
 800b0a2:	69a3      	ldr	r3, [r4, #24]
 800b0a4:	60a3      	str	r3, [r4, #8]
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	071a      	lsls	r2, r3, #28
 800b0aa:	d525      	bpl.n	800b0f8 <__swbuf_r+0x68>
 800b0ac:	6923      	ldr	r3, [r4, #16]
 800b0ae:	b31b      	cbz	r3, 800b0f8 <__swbuf_r+0x68>
 800b0b0:	6823      	ldr	r3, [r4, #0]
 800b0b2:	6922      	ldr	r2, [r4, #16]
 800b0b4:	1a98      	subs	r0, r3, r2
 800b0b6:	6963      	ldr	r3, [r4, #20]
 800b0b8:	b2f6      	uxtb	r6, r6
 800b0ba:	4283      	cmp	r3, r0
 800b0bc:	4637      	mov	r7, r6
 800b0be:	dc04      	bgt.n	800b0ca <__swbuf_r+0x3a>
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	f7ff fdbc 	bl	800ac40 <_fflush_r>
 800b0c8:	b9e0      	cbnz	r0, 800b104 <__swbuf_r+0x74>
 800b0ca:	68a3      	ldr	r3, [r4, #8]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	60a3      	str	r3, [r4, #8]
 800b0d0:	6823      	ldr	r3, [r4, #0]
 800b0d2:	1c5a      	adds	r2, r3, #1
 800b0d4:	6022      	str	r2, [r4, #0]
 800b0d6:	701e      	strb	r6, [r3, #0]
 800b0d8:	6962      	ldr	r2, [r4, #20]
 800b0da:	1c43      	adds	r3, r0, #1
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d004      	beq.n	800b0ea <__swbuf_r+0x5a>
 800b0e0:	89a3      	ldrh	r3, [r4, #12]
 800b0e2:	07db      	lsls	r3, r3, #31
 800b0e4:	d506      	bpl.n	800b0f4 <__swbuf_r+0x64>
 800b0e6:	2e0a      	cmp	r6, #10
 800b0e8:	d104      	bne.n	800b0f4 <__swbuf_r+0x64>
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	f7ff fda7 	bl	800ac40 <_fflush_r>
 800b0f2:	b938      	cbnz	r0, 800b104 <__swbuf_r+0x74>
 800b0f4:	4638      	mov	r0, r7
 800b0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f000 f806 	bl	800b10c <__swsetup_r>
 800b100:	2800      	cmp	r0, #0
 800b102:	d0d5      	beq.n	800b0b0 <__swbuf_r+0x20>
 800b104:	f04f 37ff 	mov.w	r7, #4294967295
 800b108:	e7f4      	b.n	800b0f4 <__swbuf_r+0x64>
	...

0800b10c <__swsetup_r>:
 800b10c:	b538      	push	{r3, r4, r5, lr}
 800b10e:	4b2a      	ldr	r3, [pc, #168]	; (800b1b8 <__swsetup_r+0xac>)
 800b110:	4605      	mov	r5, r0
 800b112:	6818      	ldr	r0, [r3, #0]
 800b114:	460c      	mov	r4, r1
 800b116:	b118      	cbz	r0, 800b120 <__swsetup_r+0x14>
 800b118:	6a03      	ldr	r3, [r0, #32]
 800b11a:	b90b      	cbnz	r3, 800b120 <__swsetup_r+0x14>
 800b11c:	f7fe f82a 	bl	8009174 <__sinit>
 800b120:	89a3      	ldrh	r3, [r4, #12]
 800b122:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b126:	0718      	lsls	r0, r3, #28
 800b128:	d422      	bmi.n	800b170 <__swsetup_r+0x64>
 800b12a:	06d9      	lsls	r1, r3, #27
 800b12c:	d407      	bmi.n	800b13e <__swsetup_r+0x32>
 800b12e:	2309      	movs	r3, #9
 800b130:	602b      	str	r3, [r5, #0]
 800b132:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b136:	81a3      	strh	r3, [r4, #12]
 800b138:	f04f 30ff 	mov.w	r0, #4294967295
 800b13c:	e034      	b.n	800b1a8 <__swsetup_r+0x9c>
 800b13e:	0758      	lsls	r0, r3, #29
 800b140:	d512      	bpl.n	800b168 <__swsetup_r+0x5c>
 800b142:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b144:	b141      	cbz	r1, 800b158 <__swsetup_r+0x4c>
 800b146:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b14a:	4299      	cmp	r1, r3
 800b14c:	d002      	beq.n	800b154 <__swsetup_r+0x48>
 800b14e:	4628      	mov	r0, r5
 800b150:	f7fe ffd0 	bl	800a0f4 <_free_r>
 800b154:	2300      	movs	r3, #0
 800b156:	6363      	str	r3, [r4, #52]	; 0x34
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b15e:	81a3      	strh	r3, [r4, #12]
 800b160:	2300      	movs	r3, #0
 800b162:	6063      	str	r3, [r4, #4]
 800b164:	6923      	ldr	r3, [r4, #16]
 800b166:	6023      	str	r3, [r4, #0]
 800b168:	89a3      	ldrh	r3, [r4, #12]
 800b16a:	f043 0308 	orr.w	r3, r3, #8
 800b16e:	81a3      	strh	r3, [r4, #12]
 800b170:	6923      	ldr	r3, [r4, #16]
 800b172:	b94b      	cbnz	r3, 800b188 <__swsetup_r+0x7c>
 800b174:	89a3      	ldrh	r3, [r4, #12]
 800b176:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b17a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b17e:	d003      	beq.n	800b188 <__swsetup_r+0x7c>
 800b180:	4621      	mov	r1, r4
 800b182:	4628      	mov	r0, r5
 800b184:	f000 f884 	bl	800b290 <__smakebuf_r>
 800b188:	89a0      	ldrh	r0, [r4, #12]
 800b18a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b18e:	f010 0301 	ands.w	r3, r0, #1
 800b192:	d00a      	beq.n	800b1aa <__swsetup_r+0x9e>
 800b194:	2300      	movs	r3, #0
 800b196:	60a3      	str	r3, [r4, #8]
 800b198:	6963      	ldr	r3, [r4, #20]
 800b19a:	425b      	negs	r3, r3
 800b19c:	61a3      	str	r3, [r4, #24]
 800b19e:	6923      	ldr	r3, [r4, #16]
 800b1a0:	b943      	cbnz	r3, 800b1b4 <__swsetup_r+0xa8>
 800b1a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b1a6:	d1c4      	bne.n	800b132 <__swsetup_r+0x26>
 800b1a8:	bd38      	pop	{r3, r4, r5, pc}
 800b1aa:	0781      	lsls	r1, r0, #30
 800b1ac:	bf58      	it	pl
 800b1ae:	6963      	ldrpl	r3, [r4, #20]
 800b1b0:	60a3      	str	r3, [r4, #8]
 800b1b2:	e7f4      	b.n	800b19e <__swsetup_r+0x92>
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	e7f7      	b.n	800b1a8 <__swsetup_r+0x9c>
 800b1b8:	20000068 	.word	0x20000068

0800b1bc <_raise_r>:
 800b1bc:	291f      	cmp	r1, #31
 800b1be:	b538      	push	{r3, r4, r5, lr}
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	460d      	mov	r5, r1
 800b1c4:	d904      	bls.n	800b1d0 <_raise_r+0x14>
 800b1c6:	2316      	movs	r3, #22
 800b1c8:	6003      	str	r3, [r0, #0]
 800b1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b1d2:	b112      	cbz	r2, 800b1da <_raise_r+0x1e>
 800b1d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1d8:	b94b      	cbnz	r3, 800b1ee <_raise_r+0x32>
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 f830 	bl	800b240 <_getpid_r>
 800b1e0:	462a      	mov	r2, r5
 800b1e2:	4601      	mov	r1, r0
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1ea:	f000 b817 	b.w	800b21c <_kill_r>
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d00a      	beq.n	800b208 <_raise_r+0x4c>
 800b1f2:	1c59      	adds	r1, r3, #1
 800b1f4:	d103      	bne.n	800b1fe <_raise_r+0x42>
 800b1f6:	2316      	movs	r3, #22
 800b1f8:	6003      	str	r3, [r0, #0]
 800b1fa:	2001      	movs	r0, #1
 800b1fc:	e7e7      	b.n	800b1ce <_raise_r+0x12>
 800b1fe:	2400      	movs	r4, #0
 800b200:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b204:	4628      	mov	r0, r5
 800b206:	4798      	blx	r3
 800b208:	2000      	movs	r0, #0
 800b20a:	e7e0      	b.n	800b1ce <_raise_r+0x12>

0800b20c <raise>:
 800b20c:	4b02      	ldr	r3, [pc, #8]	; (800b218 <raise+0xc>)
 800b20e:	4601      	mov	r1, r0
 800b210:	6818      	ldr	r0, [r3, #0]
 800b212:	f7ff bfd3 	b.w	800b1bc <_raise_r>
 800b216:	bf00      	nop
 800b218:	20000068 	.word	0x20000068

0800b21c <_kill_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	4d07      	ldr	r5, [pc, #28]	; (800b23c <_kill_r+0x20>)
 800b220:	2300      	movs	r3, #0
 800b222:	4604      	mov	r4, r0
 800b224:	4608      	mov	r0, r1
 800b226:	4611      	mov	r1, r2
 800b228:	602b      	str	r3, [r5, #0]
 800b22a:	f7f8 f8bb 	bl	80033a4 <_kill>
 800b22e:	1c43      	adds	r3, r0, #1
 800b230:	d102      	bne.n	800b238 <_kill_r+0x1c>
 800b232:	682b      	ldr	r3, [r5, #0]
 800b234:	b103      	cbz	r3, 800b238 <_kill_r+0x1c>
 800b236:	6023      	str	r3, [r4, #0]
 800b238:	bd38      	pop	{r3, r4, r5, pc}
 800b23a:	bf00      	nop
 800b23c:	200004f4 	.word	0x200004f4

0800b240 <_getpid_r>:
 800b240:	f7f8 b8a8 	b.w	8003394 <_getpid>

0800b244 <__swhatbuf_r>:
 800b244:	b570      	push	{r4, r5, r6, lr}
 800b246:	460c      	mov	r4, r1
 800b248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b24c:	2900      	cmp	r1, #0
 800b24e:	b096      	sub	sp, #88	; 0x58
 800b250:	4615      	mov	r5, r2
 800b252:	461e      	mov	r6, r3
 800b254:	da0d      	bge.n	800b272 <__swhatbuf_r+0x2e>
 800b256:	89a3      	ldrh	r3, [r4, #12]
 800b258:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b25c:	f04f 0100 	mov.w	r1, #0
 800b260:	bf0c      	ite	eq
 800b262:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b266:	2340      	movne	r3, #64	; 0x40
 800b268:	2000      	movs	r0, #0
 800b26a:	6031      	str	r1, [r6, #0]
 800b26c:	602b      	str	r3, [r5, #0]
 800b26e:	b016      	add	sp, #88	; 0x58
 800b270:	bd70      	pop	{r4, r5, r6, pc}
 800b272:	466a      	mov	r2, sp
 800b274:	f000 f848 	bl	800b308 <_fstat_r>
 800b278:	2800      	cmp	r0, #0
 800b27a:	dbec      	blt.n	800b256 <__swhatbuf_r+0x12>
 800b27c:	9901      	ldr	r1, [sp, #4]
 800b27e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b282:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b286:	4259      	negs	r1, r3
 800b288:	4159      	adcs	r1, r3
 800b28a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b28e:	e7eb      	b.n	800b268 <__swhatbuf_r+0x24>

0800b290 <__smakebuf_r>:
 800b290:	898b      	ldrh	r3, [r1, #12]
 800b292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b294:	079d      	lsls	r5, r3, #30
 800b296:	4606      	mov	r6, r0
 800b298:	460c      	mov	r4, r1
 800b29a:	d507      	bpl.n	800b2ac <__smakebuf_r+0x1c>
 800b29c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2a0:	6023      	str	r3, [r4, #0]
 800b2a2:	6123      	str	r3, [r4, #16]
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	6163      	str	r3, [r4, #20]
 800b2a8:	b002      	add	sp, #8
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
 800b2ac:	ab01      	add	r3, sp, #4
 800b2ae:	466a      	mov	r2, sp
 800b2b0:	f7ff ffc8 	bl	800b244 <__swhatbuf_r>
 800b2b4:	9900      	ldr	r1, [sp, #0]
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	f7fd f9dd 	bl	8008678 <_malloc_r>
 800b2be:	b948      	cbnz	r0, 800b2d4 <__smakebuf_r+0x44>
 800b2c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2c4:	059a      	lsls	r2, r3, #22
 800b2c6:	d4ef      	bmi.n	800b2a8 <__smakebuf_r+0x18>
 800b2c8:	f023 0303 	bic.w	r3, r3, #3
 800b2cc:	f043 0302 	orr.w	r3, r3, #2
 800b2d0:	81a3      	strh	r3, [r4, #12]
 800b2d2:	e7e3      	b.n	800b29c <__smakebuf_r+0xc>
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	6020      	str	r0, [r4, #0]
 800b2d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2dc:	81a3      	strh	r3, [r4, #12]
 800b2de:	9b00      	ldr	r3, [sp, #0]
 800b2e0:	6163      	str	r3, [r4, #20]
 800b2e2:	9b01      	ldr	r3, [sp, #4]
 800b2e4:	6120      	str	r0, [r4, #16]
 800b2e6:	b15b      	cbz	r3, 800b300 <__smakebuf_r+0x70>
 800b2e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	f000 f81d 	bl	800b32c <_isatty_r>
 800b2f2:	b128      	cbz	r0, 800b300 <__smakebuf_r+0x70>
 800b2f4:	89a3      	ldrh	r3, [r4, #12]
 800b2f6:	f023 0303 	bic.w	r3, r3, #3
 800b2fa:	f043 0301 	orr.w	r3, r3, #1
 800b2fe:	81a3      	strh	r3, [r4, #12]
 800b300:	89a3      	ldrh	r3, [r4, #12]
 800b302:	431d      	orrs	r5, r3
 800b304:	81a5      	strh	r5, [r4, #12]
 800b306:	e7cf      	b.n	800b2a8 <__smakebuf_r+0x18>

0800b308 <_fstat_r>:
 800b308:	b538      	push	{r3, r4, r5, lr}
 800b30a:	4d07      	ldr	r5, [pc, #28]	; (800b328 <_fstat_r+0x20>)
 800b30c:	2300      	movs	r3, #0
 800b30e:	4604      	mov	r4, r0
 800b310:	4608      	mov	r0, r1
 800b312:	4611      	mov	r1, r2
 800b314:	602b      	str	r3, [r5, #0]
 800b316:	f7f8 f8a4 	bl	8003462 <_fstat>
 800b31a:	1c43      	adds	r3, r0, #1
 800b31c:	d102      	bne.n	800b324 <_fstat_r+0x1c>
 800b31e:	682b      	ldr	r3, [r5, #0]
 800b320:	b103      	cbz	r3, 800b324 <_fstat_r+0x1c>
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	bd38      	pop	{r3, r4, r5, pc}
 800b326:	bf00      	nop
 800b328:	200004f4 	.word	0x200004f4

0800b32c <_isatty_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4d06      	ldr	r5, [pc, #24]	; (800b348 <_isatty_r+0x1c>)
 800b330:	2300      	movs	r3, #0
 800b332:	4604      	mov	r4, r0
 800b334:	4608      	mov	r0, r1
 800b336:	602b      	str	r3, [r5, #0]
 800b338:	f7f8 f8a3 	bl	8003482 <_isatty>
 800b33c:	1c43      	adds	r3, r0, #1
 800b33e:	d102      	bne.n	800b346 <_isatty_r+0x1a>
 800b340:	682b      	ldr	r3, [r5, #0]
 800b342:	b103      	cbz	r3, 800b346 <_isatty_r+0x1a>
 800b344:	6023      	str	r3, [r4, #0]
 800b346:	bd38      	pop	{r3, r4, r5, pc}
 800b348:	200004f4 	.word	0x200004f4

0800b34c <_init>:
 800b34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b34e:	bf00      	nop
 800b350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b352:	bc08      	pop	{r3}
 800b354:	469e      	mov	lr, r3
 800b356:	4770      	bx	lr

0800b358 <_fini>:
 800b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35a:	bf00      	nop
 800b35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b35e:	bc08      	pop	{r3}
 800b360:	469e      	mov	lr, r3
 800b362:	4770      	bx	lr
