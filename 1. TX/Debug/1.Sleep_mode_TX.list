
1.Sleep_mode_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800b278  0800b278  0001b278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b704  0800b704  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b704  0800b704  0001b704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b70c  0800b70c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b70c  0800b70c  0001b70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b710  0800b710  0001b710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800b714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001d8  0800b8ec  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800b8ec  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ab6  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003096  00000000  00000000  00034d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  00037d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9d  00000000  00000000  00039068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e43  00000000  00000000  00039f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f95  00000000  00000000  00053d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f31b  00000000  00000000  0006acdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060a0  00000000  00000000  00109ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00110098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b25c 	.word	0x0800b25c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800b25c 	.word	0x0800b25c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000f5c:	2305      	movs	r3, #5
 8000f5e:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f001 f9f3 	bl	8002350 <null_ptr_check>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d133      	bne.n	8000fde <bme280_init+0x8a>
		while (try_count) {
 8000f76:	e028      	b.n	8000fca <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f78:	f107 010d 	add.w	r1, r7, #13
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	20d0      	movs	r0, #208	; 0xd0
 8000f82:	f000 f832 	bl	8000fea <bme280_get_regs>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d114      	bne.n	8000fbc <bme280_init+0x68>
 8000f92:	7b7b      	ldrb	r3, [r7, #13]
 8000f94:	2b60      	cmp	r3, #96	; 0x60
 8000f96:	d111      	bne.n	8000fbc <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000f98:	7b7a      	ldrb	r2, [r7, #13]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f976 	bl	8001290 <bme280_soft_reset>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d110      	bne.n	8000fd2 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f001 f841 	bl	8002038 <get_calib_data>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000fba:	e00a      	b.n	8000fd2 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	4798      	blx	r3
			--try_count;
 8000fc4:	7bbb      	ldrb	r3, [r7, #14]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1d3      	bne.n	8000f78 <bme280_init+0x24>
 8000fd0:	e000      	b.n	8000fd4 <bme280_init+0x80>
				break;
 8000fd2:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000fda:	23fe      	movs	r3, #254	; 0xfe
 8000fdc:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000fea:	b590      	push	{r4, r7, lr}
 8000fec:	b087      	sub	sp, #28
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f001 f9a7 	bl	8002350 <null_ptr_check>
 8001002:	4603      	mov	r3, r0
 8001004:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d117      	bne.n	800103e <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	789b      	ldrb	r3, [r3, #2]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d003      	beq.n	800101e <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800101c:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685c      	ldr	r4, [r3, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7858      	ldrb	r0, [r3, #1]
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	7bf9      	ldrb	r1, [r7, #15]
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	47a0      	blx	r4
 800102e:	4603      	mov	r3, r0
 8001030:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8001032:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 800103a:	23fc      	movs	r3, #252	; 0xfc
 800103c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800103e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001042:	4618      	mov	r0, r3
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}

0800104a <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 800104a:	b590      	push	{r4, r7, lr}
 800104c:	b08d      	sub	sp, #52	; 0x34
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	4613      	mov	r3, r2
 8001058:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b0a      	cmp	r3, #10
 800105e:	d901      	bls.n	8001064 <bme280_set_regs+0x1a>
		len = 10;
 8001060:	230a      	movs	r3, #10
 8001062:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001064:	6838      	ldr	r0, [r7, #0]
 8001066:	f001 f973 	bl	8002350 <null_ptr_check>
 800106a:	4603      	mov	r3, r0
 800106c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8001070:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001074:	2b00      	cmp	r3, #0
 8001076:	d154      	bne.n	8001122 <bme280_set_regs+0xd8>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d051      	beq.n	8001122 <bme280_set_regs+0xd8>
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d04e      	beq.n	8001122 <bme280_set_regs+0xd8>
		if (len != 0) {
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d047      	beq.n	800111a <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	789b      	ldrb	r3, [r3, #2]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d01a      	beq.n	80010ce <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001098:	2300      	movs	r3, #0
 800109a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800109e:	e011      	b.n	80010c4 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80010a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	781a      	ldrb	r2, [r3, #0]
 80010aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010ae:	68f9      	ldr	r1, [r7, #12]
 80010b0:	440b      	add	r3, r1
 80010b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010be:	3301      	adds	r3, #1
 80010c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010c4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d3e8      	bcc.n	80010a0 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d90b      	bls.n	80010ec <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f107 0114 	add.w	r1, r7, #20
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 fff0 	bl	80020c2 <interleave_reg_addr>
				temp_len = len * 2;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010ea:	e001      	b.n	80010f0 <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689c      	ldr	r4, [r3, #8]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	7858      	ldrb	r0, [r3, #1]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	7819      	ldrb	r1, [r3, #0]
 80010fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010fe:	f107 0214 	add.w	r2, r7, #20
 8001102:	47a0      	blx	r4
 8001104:	4603      	mov	r3, r0
 8001106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800110a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00b      	beq.n	800112a <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 8001112:	23fc      	movs	r3, #252	; 0xfc
 8001114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001118:	e007      	b.n	800112a <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 800111a:	23fd      	movs	r3, #253	; 0xfd
 800111c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001120:	e003      	b.n	800112a <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001122:	23ff      	movs	r3, #255	; 0xff
 8001124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001128:	e000      	b.n	800112c <bme280_set_regs+0xe2>
		if (len != 0) {
 800112a:	bf00      	nop
	}


	return rslt;
 800112c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001130:	4618      	mov	r0, r3
 8001132:	3734      	adds	r7, #52	; 0x34
 8001134:	46bd      	mov	sp, r7
 8001136:	bd90      	pop	{r4, r7, pc}

08001138 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f001 f903 	bl	8002350 <null_ptr_check>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d13f      	bne.n	80011d6 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001156:	f107 030e 	add.w	r3, r7, #14
 800115a:	6839      	ldr	r1, [r7, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f874 	bl	800124a <bme280_get_sensor_mode>
 8001162:	4603      	mov	r3, r0
 8001164:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d107      	bne.n	800117e <bme280_set_sensor_settings+0x46>
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d004      	beq.n	800117e <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001174:	6838      	ldr	r0, [r7, #0]
 8001176:	f000 fb4e 	bl	8001816 <put_device_to_sleep>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d127      	bne.n	80011d6 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4619      	mov	r1, r3
 800118a:	2007      	movs	r0, #7
 800118c:	f001 f8c4 	bl	8002318 <are_settings_changed>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d009      	beq.n	80011aa <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f98a 	bl	80014ba <set_osr_settings>
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d111      	bne.n	80011d6 <bme280_set_sensor_settings+0x9e>
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4619      	mov	r1, r3
 80011b6:	2018      	movs	r0, #24
 80011b8:	f001 f8ae 	bl	8002318 <are_settings_changed>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fa11 	bl	80015f4 <set_filter_standby_settings>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	6039      	str	r1, [r7, #0]
 80011ec:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f001 f8ae 	bl	8002350 <null_ptr_check>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80011f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d11e      	bne.n	800123e <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001200:	f107 030e 	add.w	r3, r7, #14
 8001204:	6839      	ldr	r1, [r7, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f81f 	bl	800124a <bme280_get_sensor_mode>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d107      	bne.n	8001228 <bme280_set_sensor_mode+0x46>
 8001218:	7bbb      	ldrb	r3, [r7, #14]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 800121e:	6838      	ldr	r0, [r7, #0]
 8001220:	f000 faf9 	bl	8001816 <put_device_to_sleep>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8001228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	6839      	ldr	r1, [r7, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fabb 	bl	80017b0 <write_power_mode>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001254:	6838      	ldr	r0, [r7, #0]
 8001256:	f001 f87b 	bl	8002350 <null_ptr_check>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10e      	bne.n	8001284 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2201      	movs	r2, #1
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	20f4      	movs	r0, #244	; 0xf4
 800126e:	f7ff febc 	bl	8000fea <bme280_get_regs>
 8001272:	4603      	mov	r3, r0
 8001274:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	b2da      	uxtb	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001284:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001298:	23e0      	movs	r3, #224	; 0xe0
 800129a:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 800129c:	23b6      	movs	r3, #182	; 0xb6
 800129e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f001 f855 	bl	8002350 <null_ptr_check>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10d      	bne.n	80012ce <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80012b2:	f107 010d 	add.w	r1, r7, #13
 80012b6:	f107 000e 	add.w	r0, r7, #14
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	f7ff fec4 	bl	800104a <bme280_set_regs>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2002      	movs	r0, #2
 80012cc:	4798      	blx	r3
	}

	return rslt;
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b08a      	sub	sp, #40	; 0x28
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f001 f827 	bl	8002350 <null_ptr_check>
 8001302:	4603      	mov	r3, r0
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8001308:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800130c:	2b00      	cmp	r3, #0
 800130e:	d124      	bne.n	800135a <bme280_get_sensor_data+0x80>
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d021      	beq.n	800135a <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001316:	f107 011c 	add.w	r1, r7, #28
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2208      	movs	r2, #8
 800131e:	20f7      	movs	r0, #247	; 0xf7
 8001320:	f7ff fe63 	bl	8000fea <bme280_get_regs>
 8001324:	4603      	mov	r3, r0
 8001326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 800132a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800132e:	2b00      	cmp	r3, #0
 8001330:	d116      	bne.n	8001360 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001332:	f107 0210 	add.w	r2, r7, #16
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f000 f815 	bl	800136c <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3310      	adds	r3, #16
 8001346:	f107 0110 	add.w	r1, r7, #16
 800134a:	7bf8      	ldrb	r0, [r7, #15]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	f000 f853 	bl	80013f8 <bme280_compensate_data>
 8001352:	4603      	mov	r3, r0
 8001354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8001358:	e002      	b.n	8001360 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800135a:	23ff      	movs	r3, #255	; 0xff
 800135c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8001360:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001364:	4618      	mov	r0, r3
 8001366:	3728      	adds	r7, #40	; 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	031b      	lsls	r3, r3, #12
 800137c:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3301      	adds	r3, #1
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3302      	adds	r3, #2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	b2db      	uxtb	r3, r3
 8001392:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	431a      	orrs	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	431a      	orrs	r2, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3303      	adds	r3, #3
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	031b      	lsls	r3, r3, #12
 80013aa:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3304      	adds	r3, #4
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3305      	adds	r3, #5
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3306      	adds	r3, #6
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3307      	adds	r3, #7
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	609a      	str	r2, [r3, #8]
}
 80013ec:	bf00      	nop
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	4603      	mov	r3, r0
 8001406:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d04b      	beq.n	80014aa <bme280_compensate_data+0xb2>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d048      	beq.n	80014aa <bme280_compensate_data+0xb2>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d045      	beq.n	80014aa <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00a      	beq.n	8001468 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001452:	6839      	ldr	r1, [r7, #0]
 8001454:	68b8      	ldr	r0, [r7, #8]
 8001456:	f000 fa2b 	bl	80018b0 <compensate_temperature>
 800145a:	eeb0 7a40 	vmov.f32	s14, s0
 800145e:	eef0 7a60 	vmov.f32	s15, s1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00a      	beq.n	8001488 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001472:	6839      	ldr	r1, [r7, #0]
 8001474:	68b8      	ldr	r0, [r7, #8]
 8001476:	f000 faef 	bl	8001a58 <compensate_pressure>
 800147a:	eeb0 7a40 	vmov.f32	s14, s0
 800147e:	eef0 7a60 	vmov.f32	s15, s1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00d      	beq.n	80014ae <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001492:	6839      	ldr	r1, [r7, #0]
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f000 fcaf 	bl	8001df8 <compensate_humidity>
 800149a:	eeb0 7a40 	vmov.f32	s14, s0
 800149e:	eef0 7a60 	vmov.f32	s15, s1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 80014a8:	e001      	b.n	80014ae <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80014aa:	23ff      	movs	r3, #255	; 0xff
 80014ac:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80014ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80014c8:	2301      	movs	r3, #1
 80014ca:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	68b8      	ldr	r0, [r7, #8]
 80014da:	f000 f815 	bl	8001508 <set_osr_humidity_settings>
 80014de:	4603      	mov	r3, r0
 80014e0:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d007      	beq.n	80014fc <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f842 	bl	800157c <set_osr_press_temp_settings>
 80014f8:	4603      	mov	r3, r0
 80014fa:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80014fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001512:	23f2      	movs	r3, #242	; 0xf2
 8001514:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	789b      	ldrb	r3, [r3, #2]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	b2db      	uxtb	r3, r3
 8001520:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001522:	f107 010e 	add.w	r1, r7, #14
 8001526:	f107 000c 	add.w	r0, r7, #12
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2201      	movs	r2, #1
 800152e:	f7ff fd8c 	bl	800104a <bme280_set_regs>
 8001532:	4603      	mov	r3, r0
 8001534:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d118      	bne.n	8001570 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800153e:	23f4      	movs	r3, #244	; 0xf4
 8001540:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001542:	7b38      	ldrb	r0, [r7, #12]
 8001544:	f107 010d 	add.w	r1, r7, #13
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2201      	movs	r2, #1
 800154c:	f7ff fd4d 	bl	8000fea <bme280_get_regs>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d109      	bne.n	8001570 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800155c:	f107 010d 	add.w	r1, r7, #13
 8001560:	f107 000c 	add.w	r0, r7, #12
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2201      	movs	r2, #1
 8001568:	f7ff fd6f 	bl	800104a <bme280_set_regs>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001570:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800158a:	23f4      	movs	r3, #244	; 0xf4
 800158c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800158e:	7db8      	ldrb	r0, [r7, #22]
 8001590:	f107 0115 	add.w	r1, r7, #21
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f7ff fd27 	bl	8000fea <bme280_get_regs>
 800159c:	4603      	mov	r3, r0
 800159e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80015a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d11f      	bne.n	80015e8 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80015b2:	f107 0315 	add.w	r3, r7, #21
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f88e 	bl	80016da <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80015c8:	f107 0315 	add.w	r3, r7, #21
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f8a0 	bl	8001714 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80015d4:	f107 0115 	add.w	r1, r7, #21
 80015d8:	f107 0016 	add.w	r0, r7, #22
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f7ff fd33 	bl	800104a <bme280_set_regs>
 80015e4:	4603      	mov	r3, r0
 80015e6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001602:	23f5      	movs	r3, #245	; 0xf5
 8001604:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001606:	7db8      	ldrb	r0, [r7, #22]
 8001608:	f107 0115 	add.w	r1, r7, #21
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f7ff fceb 	bl	8000fea <bme280_get_regs>
 8001614:	4603      	mov	r3, r0
 8001616:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d11f      	bne.n	8001660 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800162a:	f107 0315 	add.w	r3, r7, #21
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f81b 	bl	800166c <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8001640:	f107 0315 	add.w	r3, r7, #21
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f82d 	bl	80016a6 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800164c:	f107 0115 	add.w	r1, r7, #21
 8001650:	f107 0016 	add.w	r0, r7, #22
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f7ff fcf7 	bl	800104a <bme280_set_regs>
 800165c:	4603      	mov	r3, r0
 800165e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001660:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b25b      	sxtb	r3, r3
 800167c:	f023 031c 	bic.w	r3, r3, #28
 8001680:	b25a      	sxtb	r2, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	78db      	ldrb	r3, [r3, #3]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	b25b      	sxtb	r3, r3
 800168a:	f003 031c 	and.w	r3, r3, #28
 800168e:	b25b      	sxtb	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b25b      	sxtb	r3, r3
 8001694:	b2da      	uxtb	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	701a      	strb	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	b25a      	sxtb	r2, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	791b      	ldrb	r3, [r3, #4]
 80016c0:	015b      	lsls	r3, r3, #5
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	701a      	strb	r2, [r3, #0]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	f023 031c 	bic.w	r3, r3, #28
 80016ee:	b25a      	sxtb	r2, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	f003 031c 	and.w	r3, r3, #28
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b25b      	sxtb	r3, r3
 8001702:	b2da      	uxtb	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	701a      	strb	r2, [r3, #0]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b25b      	sxtb	r3, r3
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	b25a      	sxtb	r2, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	785b      	ldrb	r3, [r3, #1]
 800172e:	015b      	lsls	r3, r3, #5
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2da      	uxtb	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	701a      	strb	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	b2da      	uxtb	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3302      	adds	r3, #2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	109b      	asrs	r3, r3, #2
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	b2da      	uxtb	r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3302      	adds	r3, #2
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	b2da      	uxtb	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	109b      	asrs	r3, r3, #2
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	b2da      	uxtb	r2, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3303      	adds	r3, #3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	711a      	strb	r2, [r3, #4]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80017bc:	23f4      	movs	r3, #244	; 0xf4
 80017be:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80017c0:	7bb8      	ldrb	r0, [r7, #14]
 80017c2:	f107 010d 	add.w	r1, r7, #13
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f7ff fc0e 	bl	8000fea <bme280_get_regs>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d117      	bne.n	800180a <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80017da:	7b7b      	ldrb	r3, [r7, #13]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	f023 0303 	bic.w	r3, r3, #3
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80017f6:	f107 010d 	add.w	r1, r7, #13
 80017fa:	f107 000e 	add.w	r0, r7, #14
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2201      	movs	r2, #1
 8001802:	f7ff fc22 	bl	800104a <bme280_set_regs>
 8001806:	4603      	mov	r3, r0
 8001808:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800181e:	f107 0110 	add.w	r1, r7, #16
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2204      	movs	r2, #4
 8001826:	20f2      	movs	r0, #242	; 0xf2
 8001828:	f7ff fbdf 	bl	8000fea <bme280_get_regs>
 800182c:	4603      	mov	r3, r0
 800182e:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001830:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d118      	bne.n	800186a <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8001838:	f107 0208 	add.w	r2, r7, #8
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff80 	bl	8001748 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fd21 	bl	8001290 <bme280_soft_reset>
 800184e:	4603      	mov	r3, r0
 8001850:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8001852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d107      	bne.n	800186a <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	f000 f808 	bl	8001876 <reload_device_settings>
 8001866:	4603      	mov	r3, r0
 8001868:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800186a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	201f      	movs	r0, #31
 8001886:	f7ff fe18 	bl	80014ba <set_osr_settings>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	201f      	movs	r0, #31
 800189c:	f7ff feaa 	bl	80015f4 <set_filter_standby_settings>
 80018a0:	4603      	mov	r3, r0
 80018a2:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80018a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b08c      	sub	sp, #48	; 0x30
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	4b5f      	ldr	r3, [pc, #380]	; (8001a3c <compensate_temperature+0x18c>)
 80018c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <compensate_temperature+0x190>)
 80018ca:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe1e 	bl	8000514 <__aeabi_ui2d>
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <compensate_temperature+0x194>)
 80018de:	f7fe ffbd 	bl	800085c <__aeabi_ddiv>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4614      	mov	r4, r2
 80018e8:	461d      	mov	r5, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe10 	bl	8000514 <__aeabi_ui2d>
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <compensate_temperature+0x198>)
 80018fa:	f7fe ffaf 	bl	800085c <__aeabi_ddiv>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4620      	mov	r0, r4
 8001904:	4629      	mov	r1, r5
 8001906:	f7fe fcc7 	bl	8000298 <__aeabi_dsub>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fe0b 	bl	8000534 <__aeabi_i2d>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001926:	f7fe fe6f 	bl	8000608 <__aeabi_dmul>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fdec 	bl	8000514 <__aeabi_ui2d>
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001944:	f7fe ff8a 	bl	800085c <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4614      	mov	r4, r2
 800194e:	461d      	mov	r5, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fddd 	bl	8000514 <__aeabi_ui2d>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <compensate_temperature+0x19c>)
 8001960:	f7fe ff7c 	bl	800085c <__aeabi_ddiv>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4620      	mov	r0, r4
 800196a:	4629      	mov	r1, r5
 800196c:	f7fe fc94 	bl	8000298 <__aeabi_dsub>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8001978:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800197c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001980:	f7fe fe42 	bl	8000608 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	461d      	mov	r5, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdce 	bl	8000534 <__aeabi_i2d>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4620      	mov	r0, r4
 800199e:	4629      	mov	r1, r5
 80019a0:	f7fe fe32 	bl	8000608 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 80019ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019b4:	f7fe fc72 	bl	800029c <__adddf3>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff f8d2 	bl	8000b68 <__aeabi_d2iz>
 80019c4:	4602      	mov	r2, r0
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80019ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019d2:	f7fe fc63 	bl	800029c <__adddf3>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <compensate_temperature+0x1a0>)
 80019e4:	f7fe ff3a 	bl	800085c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80019f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019f8:	f7ff f878 	bl	8000aec <__aeabi_dcmplt>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d004      	beq.n	8001a0c <compensate_temperature+0x15c>
		temperature = temperature_min;
 8001a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a0a:	e00c      	b.n	8001a26 <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 8001a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a14:	f7ff f888 	bl	8000b28 <__aeabi_dcmpgt>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <compensate_temperature+0x176>
		temperature = temperature_max;
 8001a1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a22:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8001a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a2a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a32:	eef0 0a67 	vmov.f32	s1, s15
 8001a36:	3730      	adds	r7, #48	; 0x30
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3c:	c0440000 	.word	0xc0440000
 8001a40:	40554000 	.word	0x40554000
 8001a44:	40d00000 	.word	0x40d00000
 8001a48:	40900000 	.word	0x40900000
 8001a4c:	40c00000 	.word	0x40c00000
 8001a50:	40b40000 	.word	0x40b40000
 8001a54:	00000000 	.word	0x00000000

08001a58 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b08e      	sub	sp, #56	; 0x38
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8001a62:	a3d9      	add	r3, pc, #868	; (adr r3, 8001dc8 <compensate_pressure+0x370>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8001a6c:	a3d8      	add	r3, pc, #864	; (adr r3, 8001dd0 <compensate_pressure+0x378>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd5a 	bl	8000534 <__aeabi_i2d>
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a88:	f7fe fee8 	bl	800085c <__aeabi_ddiv>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4bc1      	ldr	r3, [pc, #772]	; (8001da0 <compensate_pressure+0x348>)
 8001a9a:	f7fe fbfd 	bl	8000298 <__aeabi_dsub>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8001aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aaa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aae:	f7fe fdab 	bl	8000608 <__aeabi_dmul>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4614      	mov	r4, r2
 8001ab8:	461d      	mov	r5, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd37 	bl	8000534 <__aeabi_i2d>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4620      	mov	r0, r4
 8001acc:	4629      	mov	r1, r5
 8001ace:	f7fe fd9b 	bl	8000608 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4bb1      	ldr	r3, [pc, #708]	; (8001da4 <compensate_pressure+0x34c>)
 8001ae0:	f7fe febc 	bl	800085c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fd1e 	bl	8000534 <__aeabi_i2d>
 8001af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001afc:	f7fe fd84 	bl	8000608 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	f7fe fbc6 	bl	800029c <__adddf3>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b18:	f7fe fbc0 	bl	800029c <__adddf3>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b9f      	ldr	r3, [pc, #636]	; (8001da8 <compensate_pressure+0x350>)
 8001b2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b2e:	f7fe fe95 	bl	800085c <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4614      	mov	r4, r2
 8001b38:	461d      	mov	r5, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fcf7 	bl	8000534 <__aeabi_i2d>
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	4b98      	ldr	r3, [pc, #608]	; (8001dac <compensate_pressure+0x354>)
 8001b4c:	f7fe fd5c 	bl	8000608 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4620      	mov	r0, r4
 8001b56:	4629      	mov	r1, r5
 8001b58:	f7fe fba0 	bl	800029c <__adddf3>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fce2 	bl	8000534 <__aeabi_i2d>
 8001b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b74:	f7fe fd48 	bl	8000608 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b84:	f7fe fd40 	bl	8000608 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	4b86      	ldr	r3, [pc, #536]	; (8001db0 <compensate_pressure+0x358>)
 8001b96:	f7fe fe61 	bl	800085c <__aeabi_ddiv>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fcc3 	bl	8000534 <__aeabi_i2d>
 8001bae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb2:	f7fe fd29 	bl	8000608 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bc2:	f7fe fb6b 	bl	800029c <__adddf3>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	4b77      	ldr	r3, [pc, #476]	; (8001db0 <compensate_pressure+0x358>)
 8001bd4:	f7fe fe42 	bl	800085c <__aeabi_ddiv>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	4b6f      	ldr	r3, [pc, #444]	; (8001da4 <compensate_pressure+0x34c>)
 8001be6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bea:	f7fe fe37 	bl	800085c <__aeabi_ddiv>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	4b6e      	ldr	r3, [pc, #440]	; (8001db4 <compensate_pressure+0x35c>)
 8001bfc:	f7fe fb4e 	bl	800029c <__adddf3>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4614      	mov	r4, r2
 8001c06:	461d      	mov	r5, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	88db      	ldrh	r3, [r3, #6]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fc81 	bl	8000514 <__aeabi_ui2d>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4620      	mov	r0, r4
 8001c18:	4629      	mov	r1, r5
 8001c1a:	f7fe fcf5 	bl	8000608 <__aeabi_dmul>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c32:	f7fe ff51 	bl	8000ad8 <__aeabi_dcmpeq>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 80cd 	bne.w	8001dd8 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc66 	bl	8000514 <__aeabi_ui2d>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	f04f 0000 	mov.w	r0, #0
 8001c50:	4959      	ldr	r1, [pc, #356]	; (8001db8 <compensate_pressure+0x360>)
 8001c52:	f7fe fb21 	bl	8000298 <__aeabi_dsub>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	4b56      	ldr	r3, [pc, #344]	; (8001dbc <compensate_pressure+0x364>)
 8001c64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c68:	f7fe fdf8 	bl	800085c <__aeabi_ddiv>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c74:	f7fe fb10 	bl	8000298 <__aeabi_dsub>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	a345      	add	r3, pc, #276	; (adr r3, 8001d98 <compensate_pressure+0x340>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe fcbf 	bl	8000608 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c96:	f7fe fde1 	bl	800085c <__aeabi_ddiv>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc43 	bl	8000534 <__aeabi_i2d>
 8001cae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cb2:	f7fe fca9 	bl	8000608 <__aeabi_dmul>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cc2:	f7fe fca1 	bl	8000608 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <compensate_pressure+0x368>)
 8001cd4:	f7fe fdc2 	bl	800085c <__aeabi_ddiv>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fc24 	bl	8000534 <__aeabi_i2d>
 8001cec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cf0:	f7fe fc8a 	bl	8000608 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <compensate_pressure+0x34c>)
 8001d02:	f7fe fdab 	bl	800085c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8001d0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d16:	f7fe fac1 	bl	800029c <__adddf3>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4614      	mov	r4, r2
 8001d20:	461d      	mov	r5, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc03 	bl	8000534 <__aeabi_i2d>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4620      	mov	r0, r4
 8001d34:	4629      	mov	r1, r5
 8001d36:	f7fe fab1 	bl	800029c <__adddf3>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <compensate_pressure+0x36c>)
 8001d48:	f7fe fd88 	bl	800085c <__aeabi_ddiv>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d54:	f7fe faa2 	bl	800029c <__adddf3>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8001d60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d64:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d68:	f7fe fec0 	bl	8000aec <__aeabi_dcmplt>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <compensate_pressure+0x324>
			pressure = pressure_min;
 8001d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d76:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d7a:	e031      	b.n	8001de0 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8001d7c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d80:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d84:	f7fe fed0 	bl	8000b28 <__aeabi_dcmpgt>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d028      	beq.n	8001de0 <compensate_pressure+0x388>
			pressure = pressure_max;
 8001d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d92:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d96:	e023      	b.n	8001de0 <compensate_pressure+0x388>
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	40b86a00 	.word	0x40b86a00
 8001da0:	40ef4000 	.word	0x40ef4000
 8001da4:	40e00000 	.word	0x40e00000
 8001da8:	40100000 	.word	0x40100000
 8001dac:	40f00000 	.word	0x40f00000
 8001db0:	41200000 	.word	0x41200000
 8001db4:	3ff00000 	.word	0x3ff00000
 8001db8:	41300000 	.word	0x41300000
 8001dbc:	40b00000 	.word	0x40b00000
 8001dc0:	41e00000 	.word	0x41e00000
 8001dc4:	40300000 	.word	0x40300000
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	40dd4c00 	.word	0x40dd4c00
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 8001dd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ddc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8001de0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001de4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001de8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dec:	eef0 0a67 	vmov.f32	s1, s15
 8001df0:	3738      	adds	r7, #56	; 0x38
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bdb0      	pop	{r4, r5, r7, pc}
 8001df6:	bf00      	nop

08001df8 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	b094      	sub	sp, #80	; 0x50
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4b81      	ldr	r3, [pc, #516]	; (8002018 <compensate_humidity+0x220>)
 8001e14:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fb89 	bl	8000534 <__aeabi_i2d>
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	4b7d      	ldr	r3, [pc, #500]	; (800201c <compensate_humidity+0x224>)
 8001e28:	f7fe fa36 	bl	8000298 <__aeabi_dsub>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fb7a 	bl	8000534 <__aeabi_i2d>
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	4b76      	ldr	r3, [pc, #472]	; (8002020 <compensate_humidity+0x228>)
 8001e46:	f7fe fbdf 	bl	8000608 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4614      	mov	r4, r2
 8001e50:	461d      	mov	r5, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb6b 	bl	8000534 <__aeabi_i2d>
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	4b70      	ldr	r3, [pc, #448]	; (8002024 <compensate_humidity+0x22c>)
 8001e64:	f7fe fcfa 	bl	800085c <__aeabi_ddiv>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e74:	f7fe fbc8 	bl	8000608 <__aeabi_dmul>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	f7fe fa0c 	bl	800029c <__adddf3>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fb3f 	bl	8000514 <__aeabi_ui2d>
 8001e96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e9a:	f7fe f9fd 	bl	8000298 <__aeabi_dsub>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fb41 	bl	8000534 <__aeabi_i2d>
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	4b5c      	ldr	r3, [pc, #368]	; (8002028 <compensate_humidity+0x230>)
 8001eb8:	f7fe fcd0 	bl	800085c <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	7f1b      	ldrb	r3, [r3, #28]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fb23 	bl	8000514 <__aeabi_ui2d>
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	4b56      	ldr	r3, [pc, #344]	; (800202c <compensate_humidity+0x234>)
 8001ed4:	f7fe fcc2 	bl	800085c <__aeabi_ddiv>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ee4:	f7fe fb90 	bl	8000608 <__aeabi_dmul>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	4b4e      	ldr	r3, [pc, #312]	; (8002030 <compensate_humidity+0x238>)
 8001ef6:	f7fe f9d1 	bl	800029c <__adddf3>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fb13 	bl	8000534 <__aeabi_i2d>
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	4b46      	ldr	r3, [pc, #280]	; (800202c <compensate_humidity+0x234>)
 8001f14:	f7fe fca2 	bl	800085c <__aeabi_ddiv>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f24:	f7fe fb70 	bl	8000608 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f34:	f7fe fb68 	bl	8000608 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <compensate_humidity+0x238>)
 8001f46:	f7fe f9a9 	bl	800029c <__adddf3>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8001f52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f5a:	f7fe fb55 	bl	8000608 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4614      	mov	r4, r2
 8001f64:	461d      	mov	r5, r3
 8001f66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f6e:	f7fe fb4b 	bl	8000608 <__aeabi_dmul>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4620      	mov	r0, r4
 8001f78:	4629      	mov	r1, r5
 8001f7a:	f7fe fb45 	bl	8000608 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	7e1b      	ldrb	r3, [r3, #24]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fac2 	bl	8000514 <__aeabi_ui2d>
 8001f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f94:	f7fe fb38 	bl	8000608 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <compensate_humidity+0x23c>)
 8001fa6:	f7fe fc59 	bl	800085c <__aeabi_ddiv>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	f04f 0000 	mov.w	r0, #0
 8001fb2:	491f      	ldr	r1, [pc, #124]	; (8002030 <compensate_humidity+0x238>)
 8001fb4:	f7fe f970 	bl	8000298 <__aeabi_dsub>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fc0:	f7fe fb22 	bl	8000608 <__aeabi_dmul>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8001fcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fd0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fd4:	f7fe fda8 	bl	8000b28 <__aeabi_dcmpgt>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d004      	beq.n	8001fe8 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8001fde:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fe2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fe6:	e00c      	b.n	8002002 <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8001fe8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001ff0:	f7fe fd7c 	bl	8000aec <__aeabi_dcmplt>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <compensate_humidity+0x20a>
		humidity = humidity_min;
 8001ffa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ffe:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8002002:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002006:	ec43 2b17 	vmov	d7, r2, r3
}
 800200a:	eeb0 0a47 	vmov.f32	s0, s14
 800200e:	eef0 0a67 	vmov.f32	s1, s15
 8002012:	3750      	adds	r7, #80	; 0x50
 8002014:	46bd      	mov	sp, r7
 8002016:	bdb0      	pop	{r4, r5, r7, pc}
 8002018:	40590000 	.word	0x40590000
 800201c:	40f2c000 	.word	0x40f2c000
 8002020:	40500000 	.word	0x40500000
 8002024:	40d00000 	.word	0x40d00000
 8002028:	40f00000 	.word	0x40f00000
 800202c:	41900000 	.word	0x41900000
 8002030:	3ff00000 	.word	0x3ff00000
 8002034:	41200000 	.word	0x41200000

08002038 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002040:	2388      	movs	r3, #136	; 0x88
 8002042:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	f107 0310 	add.w	r3, r7, #16
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800205c:	f107 010c 	add.w	r1, r7, #12
 8002060:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	221a      	movs	r2, #26
 8002068:	f7fe ffbf 	bl	8000fea <bme280_get_regs>
 800206c:	4603      	mov	r3, r0
 800206e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8002072:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002076:	2b00      	cmp	r3, #0
 8002078:	d11d      	bne.n	80020b6 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4618      	mov	r0, r3
 8002082:	f000 f84a 	bl	800211a <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002086:	23e1      	movs	r3, #225	; 0xe1
 8002088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800208c:	f107 010c 	add.w	r1, r7, #12
 8002090:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2207      	movs	r2, #7
 8002098:	f7fe ffa7 	bl	8000fea <bme280_get_regs>
 800209c:	4603      	mov	r3, r0
 800209e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80020a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80020aa:	f107 030c 	add.w	r3, r7, #12
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 f8e2 	bl	800227a <parse_humidity_calib_data>
		}
	}

	return rslt;
 80020b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3728      	adds	r7, #40	; 0x28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b087      	sub	sp, #28
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80020d0:	2301      	movs	r3, #1
 80020d2:	75fb      	strb	r3, [r7, #23]
 80020d4:	e016      	b.n	8002104 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80020d6:	7dfb      	ldrb	r3, [r7, #23]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	441a      	add	r2, r3
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	3b01      	subs	r3, #1
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	440b      	add	r3, r1
 80020e6:	7812      	ldrb	r2, [r2, #0]
 80020e8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	441a      	add	r2, r3
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4619      	mov	r1, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	440b      	add	r3, r1
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
 8002100:	3301      	adds	r3, #1
 8002102:	75fb      	strb	r3, [r7, #23]
 8002104:	7dfa      	ldrb	r2, [r7, #23]
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	429a      	cmp	r2, r3
 800210a:	d3e4      	bcc.n	80020d6 <interleave_reg_addr+0x14>
	}
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	371c      	adds	r7, #28
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	3310      	adds	r3, #16
 8002128:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3301      	adds	r3, #1
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	b21a      	sxth	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b21b      	sxth	r3, r3
 800213a:	4313      	orrs	r3, r2
 800213c:	b21b      	sxth	r3, r3
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3303      	adds	r3, #3
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	b21a      	sxth	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3302      	adds	r3, #2
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b21b      	sxth	r3, r3
 8002156:	4313      	orrs	r3, r2
 8002158:	b21a      	sxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3305      	adds	r3, #5
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	b21a      	sxth	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3304      	adds	r3, #4
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	b21b      	sxth	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b21a      	sxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3307      	adds	r3, #7
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	b21a      	sxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3306      	adds	r3, #6
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b21b      	sxth	r3, r3
 800218a:	4313      	orrs	r3, r2
 800218c:	b21b      	sxth	r3, r3
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3309      	adds	r3, #9
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b21a      	sxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3308      	adds	r3, #8
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	4313      	orrs	r3, r2
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	330b      	adds	r3, #11
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	330a      	adds	r3, #10
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b21b      	sxth	r3, r3
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	330d      	adds	r3, #13
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	330c      	adds	r3, #12
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	b21a      	sxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	330f      	adds	r3, #15
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	330e      	adds	r3, #14
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b21a      	sxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3311      	adds	r3, #17
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	b21a      	sxth	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3310      	adds	r3, #16
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b21b      	sxth	r3, r3
 800220e:	4313      	orrs	r3, r2
 8002210:	b21a      	sxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3313      	adds	r3, #19
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	b21a      	sxth	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3312      	adds	r3, #18
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b21a      	sxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3315      	adds	r3, #21
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	b21a      	sxth	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3314      	adds	r3, #20
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b21b      	sxth	r3, r3
 8002242:	4313      	orrs	r3, r2
 8002244:	b21a      	sxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3317      	adds	r3, #23
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	b21a      	sxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3316      	adds	r3, #22
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b21b      	sxth	r3, r3
 800225c:	4313      	orrs	r3, r2
 800225e:	b21a      	sxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3319      	adds	r3, #25
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	761a      	strb	r2, [r3, #24]

}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800227a:	b480      	push	{r7}
 800227c:	b087      	sub	sp, #28
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	3310      	adds	r3, #16
 8002288:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3301      	adds	r3, #1
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	b21a      	sxth	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b21b      	sxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b21a      	sxth	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3302      	adds	r3, #2
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3303      	adds	r3, #3
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3304      	adds	r3, #4
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b21b      	sxth	r3, r3
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80022ca:	8a7a      	ldrh	r2, [r7, #18]
 80022cc:	8a3b      	ldrh	r3, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3305      	adds	r3, #5
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	b25b      	sxtb	r3, r3
 80022de:	b29b      	uxth	r3, r3
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80022f2:	89fa      	ldrh	r2, [r7, #14]
 80022f4:	89bb      	ldrh	r3, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b21a      	sxth	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3306      	adds	r3, #6
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b25a      	sxtb	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800230c:	bf00      	nop
 800230e:	371c      	adds	r7, #28
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	460a      	mov	r2, r1
 8002322:	71fb      	strb	r3, [r7, #7]
 8002324:	4613      	mov	r3, r2
 8002326:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 800232c:	79fa      	ldrb	r2, [r7, #7]
 800232e:	79bb      	ldrb	r3, [r7, #6]
 8002330:	4013      	ands	r3, r2
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e001      	b.n	8002342 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <null_ptr_check+0x26>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d007      	beq.n	8002376 <null_ptr_check+0x26>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <null_ptr_check+0x26>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8002376:	23ff      	movs	r3, #255	; 0xff
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	e001      	b.n	8002380 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <time_i2c_read_single>:
	HAL_I2C_Mem_Write(&hi2c1, device_address<<1, start_register_address, 1, data_array, data_length, 1000);
}

/*function to read one byte of data from register_address on ds3231*/
void time_i2c_read_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af04      	add	r7, sp, #16
 8002396:	4603      	mov	r3, r0
 8002398:	603a      	str	r2, [r7, #0]
 800239a:	71fb      	strb	r3, [r7, #7]
 800239c:	460b      	mov	r3, r1
 800239e:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,register_address, 1, data_byte, 1, 1000);
	HAL_I2C_Mem_Read(&hi2c1, device_address<<1,register_address, 1, data_byte, 1, 1000);
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	b299      	uxth	r1, r3
 80023a8:	79bb      	ldrb	r3, [r7, #6]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	2301      	movs	r3, #1
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2301      	movs	r3, #1
 80023bc:	4803      	ldr	r0, [pc, #12]	; (80023cc <time_i2c_read_single+0x3c>)
 80023be:	f003 f913 	bl	80055e8 <HAL_I2C_Mem_Read>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000240 	.word	0x20000240

080023d0 <time_i2c_read_multi>:

/*function to read an array of data from device_address*/
void time_i2c_read_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af04      	add	r7, sp, #16
 80023d6:	603a      	str	r2, [r7, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
 80023de:	460b      	mov	r3, r1
 80023e0:	71bb      	strb	r3, [r7, #6]
 80023e2:	4613      	mov	r3, r2
 80023e4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)device_address<<1,start_register_address, 1, data_array, data_length, 1000);
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	b299      	uxth	r1, r3
 80023ee:	79bb      	ldrb	r3, [r7, #6]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	797b      	ldrb	r3, [r7, #5]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023fa:	9002      	str	r0, [sp, #8]
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2301      	movs	r3, #1
 8002404:	4803      	ldr	r0, [pc, #12]	; (8002414 <time_i2c_read_multi+0x44>)
 8002406:	f003 f8ef 	bl	80055e8 <HAL_I2C_Mem_Read>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000240 	.word	0x20000240

08002418 <ds3231_read>:
  }
}

/*function to read internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_read(uint8_t option, uint8_t *data_array)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	2b0e      	cmp	r3, #14
 8002428:	f200 80ac 	bhi.w	8002584 <ds3231_read+0x16c>
 800242c:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <ds3231_read+0x1c>)
 800242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002432:	bf00      	nop
 8002434:	08002471 	.word	0x08002471
 8002438:	0800248d 	.word	0x0800248d
 800243c:	080024a9 	.word	0x080024a9
 8002440:	080024c5 	.word	0x080024c5
 8002444:	080024e1 	.word	0x080024e1
 8002448:	080024fd 	.word	0x080024fd
 800244c:	08002519 	.word	0x08002519
 8002450:	08002535 	.word	0x08002535
 8002454:	08002549 	.word	0x08002549
 8002458:	0800255d 	.word	0x0800255d
 800245c:	08002585 	.word	0x08002585
 8002460:	08002585 	.word	0x08002585
 8002464:	08002585 	.word	0x08002585
 8002468:	08002585 	.word	0x08002585
 800246c:	0800256f 	.word	0x0800256f
  {
    case SECOND:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &register_current_value);
 8002470:	4a48      	ldr	r2, [pc, #288]	; (8002594 <ds3231_read+0x17c>)
 8002472:	2100      	movs	r1, #0
 8002474:	2068      	movs	r0, #104	; 0x68
 8002476:	f7ff ff8b 	bl	8002390 <time_i2c_read_single>
      *data_array = register_current_value;
 800247a:	4b46      	ldr	r3, [pc, #280]	; (8002594 <ds3231_read+0x17c>)
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8002482:	2101      	movs	r1, #1
 8002484:	6838      	ldr	r0, [r7, #0]
 8002486:	f000 f887 	bl	8002598 <BCD_to_HEX>
      break;
 800248a:	e07d      	b.n	8002588 <ds3231_read+0x170>
    case MINUTE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &register_current_value);
 800248c:	4a41      	ldr	r2, [pc, #260]	; (8002594 <ds3231_read+0x17c>)
 800248e:	2101      	movs	r1, #1
 8002490:	2068      	movs	r0, #104	; 0x68
 8002492:	f7ff ff7d 	bl	8002390 <time_i2c_read_single>
      *data_array = register_current_value;
 8002496:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <ds3231_read+0x17c>)
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800249e:	2101      	movs	r1, #1
 80024a0:	6838      	ldr	r0, [r7, #0]
 80024a2:	f000 f879 	bl	8002598 <BCD_to_HEX>
      break;
 80024a6:	e06f      	b.n	8002588 <ds3231_read+0x170>
    case HOUR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &register_current_value);
 80024a8:	4a3a      	ldr	r2, [pc, #232]	; (8002594 <ds3231_read+0x17c>)
 80024aa:	2102      	movs	r1, #2
 80024ac:	2068      	movs	r0, #104	; 0x68
 80024ae:	f7ff ff6f 	bl	8002390 <time_i2c_read_single>
      *data_array = register_current_value;
 80024b2:	4b38      	ldr	r3, [pc, #224]	; (8002594 <ds3231_read+0x17c>)
 80024b4:	781a      	ldrb	r2, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80024ba:	2101      	movs	r1, #1
 80024bc:	6838      	ldr	r0, [r7, #0]
 80024be:	f000 f86b 	bl	8002598 <BCD_to_HEX>
      break;
 80024c2:	e061      	b.n	8002588 <ds3231_read+0x170>
    case DAY_OF_WEEK:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &register_current_value);
 80024c4:	4a33      	ldr	r2, [pc, #204]	; (8002594 <ds3231_read+0x17c>)
 80024c6:	2103      	movs	r1, #3
 80024c8:	2068      	movs	r0, #104	; 0x68
 80024ca:	f7ff ff61 	bl	8002390 <time_i2c_read_single>
      *data_array = register_current_value;
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <ds3231_read+0x17c>)
 80024d0:	781a      	ldrb	r2, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80024d6:	2101      	movs	r1, #1
 80024d8:	6838      	ldr	r0, [r7, #0]
 80024da:	f000 f85d 	bl	8002598 <BCD_to_HEX>
      break;
 80024de:	e053      	b.n	8002588 <ds3231_read+0x170>
    case DATE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &register_current_value);
 80024e0:	4a2c      	ldr	r2, [pc, #176]	; (8002594 <ds3231_read+0x17c>)
 80024e2:	2104      	movs	r1, #4
 80024e4:	2068      	movs	r0, #104	; 0x68
 80024e6:	f7ff ff53 	bl	8002390 <time_i2c_read_single>
      *data_array = register_current_value;
 80024ea:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <ds3231_read+0x17c>)
 80024ec:	781a      	ldrb	r2, [r3, #0]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80024f2:	2101      	movs	r1, #1
 80024f4:	6838      	ldr	r0, [r7, #0]
 80024f6:	f000 f84f 	bl	8002598 <BCD_to_HEX>
      break;
 80024fa:	e045      	b.n	8002588 <ds3231_read+0x170>
    case MONTH:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &register_current_value);
 80024fc:	4a25      	ldr	r2, [pc, #148]	; (8002594 <ds3231_read+0x17c>)
 80024fe:	2105      	movs	r1, #5
 8002500:	2068      	movs	r0, #104	; 0x68
 8002502:	f7ff ff45 	bl	8002390 <time_i2c_read_single>
      *data_array = register_current_value;
 8002506:	4b23      	ldr	r3, [pc, #140]	; (8002594 <ds3231_read+0x17c>)
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800250e:	2101      	movs	r1, #1
 8002510:	6838      	ldr	r0, [r7, #0]
 8002512:	f000 f841 	bl	8002598 <BCD_to_HEX>
      break;
 8002516:	e037      	b.n	8002588 <ds3231_read+0x170>
    case YEAR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &register_current_value);
 8002518:	4a1e      	ldr	r2, [pc, #120]	; (8002594 <ds3231_read+0x17c>)
 800251a:	2106      	movs	r1, #6
 800251c:	2068      	movs	r0, #104	; 0x68
 800251e:	f7ff ff37 	bl	8002390 <time_i2c_read_single>
      *data_array = register_current_value;
 8002522:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <ds3231_read+0x17c>)
 8002524:	781a      	ldrb	r2, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800252a:	2101      	movs	r1, #1
 800252c:	6838      	ldr	r0, [r7, #0]
 800252e:	f000 f833 	bl	8002598 <BCD_to_HEX>
      break;
 8002532:	e029      	b.n	8002588 <ds3231_read+0x170>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8002534:	4a17      	ldr	r2, [pc, #92]	; (8002594 <ds3231_read+0x17c>)
 8002536:	210e      	movs	r1, #14
 8002538:	2068      	movs	r0, #104	; 0x68
 800253a:	f7ff ff29 	bl	8002390 <time_i2c_read_single>
      *data_array = register_current_value;
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <ds3231_read+0x17c>)
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	701a      	strb	r2, [r3, #0]
      break;
 8002546:	e01f      	b.n	8002588 <ds3231_read+0x170>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 8002548:	4a12      	ldr	r2, [pc, #72]	; (8002594 <ds3231_read+0x17c>)
 800254a:	210f      	movs	r1, #15
 800254c:	2068      	movs	r0, #104	; 0x68
 800254e:	f7ff ff1f 	bl	8002390 <time_i2c_read_single>
      *data_array = register_current_value;
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <ds3231_read+0x17c>)
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	701a      	strb	r2, [r3, #0]
      break;
 800255a:	e015      	b.n	8002588 <ds3231_read+0x170>
    case AGING_OFFSET:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_current_value);
 800255c:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <ds3231_read+0x17c>)
 800255e:	2110      	movs	r1, #16
 8002560:	2068      	movs	r0, #104	; 0x68
 8002562:	f7ff ff15 	bl	8002390 <time_i2c_read_single>
      *data_array = register_current_value;
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <ds3231_read+0x17c>)
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	701a      	strb	r2, [r3, #0]
    case TIME:
      time_i2c_read_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, data_array, 7);
 800256e:	2307      	movs	r3, #7
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	2100      	movs	r1, #0
 8002574:	2068      	movs	r0, #104	; 0x68
 8002576:	f7ff ff2b 	bl	80023d0 <time_i2c_read_multi>
      BCD_to_HEX(data_array, 7);
 800257a:	2107      	movs	r1, #7
 800257c:	6838      	ldr	r0, [r7, #0]
 800257e:	f000 f80b 	bl	8002598 <BCD_to_HEX>
      break;
 8002582:	e001      	b.n	8002588 <ds3231_read+0x170>
    default:
      return OPERATION_FAILED;
 8002584:	2300      	movs	r3, #0
 8002586:	e000      	b.n	800258a <ds3231_read+0x172>
  }
  return OPERATION_DONE;
 8002588:	2301      	movs	r3, #1
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200001f4 	.word	0x200001f4

08002598 <BCD_to_HEX>:
  }
}

/*internal function related to this file and not accessible from outside*/
static void BCD_to_HEX(uint8_t *data_array, uint8_t array_length)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	70fb      	strb	r3, [r7, #3]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	73fb      	strb	r3, [r7, #15]
 80025ac:	e028      	b.n	8002600 <BCD_to_HEX+0x68>
  {
    data_array[index] = ((data_array[index] >> 4) << 1) + ((data_array[index] >> 4) << 3) + (data_array[index] & 0X0F);
 80025ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	440b      	add	r3, r1
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	b2d9      	uxtb	r1, r3
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4403      	add	r3, r0
 80025ee:	440a      	add	r2, r1
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 80025f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002604:	2b00      	cmp	r3, #0
 8002606:	dad2      	bge.n	80025ae <BCD_to_HEX+0x16>
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <error_blink_red_led>:
		HAL_Delay(100);
	}
}
// --------------------------------------------------------------------------------------
void error_blink_red_led(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
	while(1)
	{
		RED_LED_TOGLE;
 800261c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002620:	4803      	ldr	r0, [pc, #12]	; (8002630 <error_blink_red_led+0x18>)
 8002622:	f002 fb3a 	bl	8004c9a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8002626:	2064      	movs	r0, #100	; 0x64
 8002628:	f001 fb32 	bl	8003c90 <HAL_Delay>
		RED_LED_TOGLE;
 800262c:	e7f6      	b.n	800261c <error_blink_red_led+0x4>
 800262e:	bf00      	nop
 8002630:	40020400 	.word	0x40020400

08002634 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af02      	add	r7, sp, #8
 800263a:	603a      	str	r2, [r7, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
 8002642:	460b      	mov	r3, r1
 8002644:	71bb      	strb	r3, [r7, #6]
 8002646:	4613      	mov	r3, r2
 8002648:	80bb      	strh	r3, [r7, #4]
	if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	b29b      	uxth	r3, r3
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	b299      	uxth	r1, r3
 8002652:	1dba      	adds	r2, r7, #6
 8002654:	230a      	movs	r3, #10
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	2301      	movs	r3, #1
 800265a:	4811      	ldr	r0, [pc, #68]	; (80026a0 <user_i2c_read+0x6c>)
 800265c:	f002 fca0 	bl	8004fa0 <HAL_I2C_Master_Transmit>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <user_i2c_read+0x38>
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	e014      	b.n	8002696 <user_i2c_read+0x62>
	if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	b21b      	sxth	r3, r3
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	b21b      	sxth	r3, r3
 8002678:	b299      	uxth	r1, r3
 800267a:	88bb      	ldrh	r3, [r7, #4]
 800267c:	220a      	movs	r2, #10
 800267e:	9200      	str	r2, [sp, #0]
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	4807      	ldr	r0, [pc, #28]	; (80026a0 <user_i2c_read+0x6c>)
 8002684:	f002 fd8a 	bl	800519c <HAL_I2C_Master_Receive>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <user_i2c_read+0x60>
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	e000      	b.n	8002696 <user_i2c_read+0x62>

	return 0;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000240 	.word	0x20000240

080026a4 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f001 faef 	bl	8003c90 <HAL_Delay>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	603a      	str	r2, [r7, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
 80026ca:	460b      	mov	r3, r1
 80026cc:	71bb      	strb	r3, [r7, #6]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80bb      	strh	r3, [r7, #4]
	int8_t *buf;
	buf = malloc(len +1);
 80026d2:	88bb      	ldrh	r3, [r7, #4]
 80026d4:	3301      	adds	r3, #1
 80026d6:	4618      	mov	r0, r3
 80026d8:	f005 ff24 	bl	8008524 <malloc>
 80026dc:	4603      	mov	r3, r0
 80026de:	60fb      	str	r3, [r7, #12]
	buf[0] = reg_addr;
 80026e0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	701a      	strb	r2, [r3, #0]
	memcpy(buf +1, data, len);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3301      	adds	r3, #1
 80026ec:	88ba      	ldrh	r2, [r7, #4]
 80026ee:	6839      	ldr	r1, [r7, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f006 fdfc 	bl	80092ee <memcpy>

	if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	b299      	uxth	r1, r3
 80026fe:	88bb      	ldrh	r3, [r7, #4]
 8002700:	3301      	adds	r3, #1
 8002702:	b29b      	uxth	r3, r3
 8002704:	f04f 32ff 	mov.w	r2, #4294967295
 8002708:	9200      	str	r2, [sp, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4808      	ldr	r0, [pc, #32]	; (8002730 <user_i2c_write+0x74>)
 800270e:	f002 fc47 	bl	8004fa0 <HAL_I2C_Master_Transmit>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <user_i2c_write+0x62>
 8002718:	f04f 33ff 	mov.w	r3, #4294967295
 800271c:	e003      	b.n	8002726 <user_i2c_write+0x6a>

	free(buf);
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f005 ff08 	bl	8008534 <free>
	return 0;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000240 	.word	0x20000240

08002734 <init_bme280_>:
//----------------------------------------------------------------------------------------
void init_bme280_(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af04      	add	r7, sp, #16
	uint16_t STATUS=0;
 800273a:	2300      	movs	r3, #0
 800273c:	81fb      	strh	r3, [r7, #14]
	uint16_t addres_device = 0x76;  		 		// BME280
 800273e:	2376      	movs	r3, #118	; 0x76
 8002740:	81bb      	strh	r3, [r7, #12]
	uint16_t id_addr = 0xD0;
 8002742:	23d0      	movs	r3, #208	; 0xd0
 8002744:	817b      	strh	r3, [r7, #10]
	uint8_t id = 96;								// in hex form
 8002746:	2360      	movs	r3, #96	; 0x60
 8002748:	727b      	strb	r3, [r7, #9]
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 800274a:	2300      	movs	r3, #0
 800274c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;

	// For debug
	STATUS = HAL_I2C_Mem_Read(&hi2c1, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800274e:	89bb      	ldrh	r3, [r7, #12]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	b299      	uxth	r1, r3
 8002754:	897a      	ldrh	r2, [r7, #10]
 8002756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275a:	9302      	str	r3, [sp, #8]
 800275c:	2301      	movs	r3, #1
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	1dfb      	adds	r3, r7, #7
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2301      	movs	r3, #1
 8002766:	4823      	ldr	r0, [pc, #140]	; (80027f4 <init_bme280_+0xc0>)
 8002768:	f002 ff3e 	bl	80055e8 <HAL_I2C_Mem_Read>
 800276c:	4603      	mov	r3, r0
 800276e:	81fb      	strh	r3, [r7, #14]
	if(!((buff == id) && (STATUS == 0)))
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	7a7a      	ldrb	r2, [r7, #9]
 8002774:	429a      	cmp	r2, r3
 8002776:	d102      	bne.n	800277e <init_bme280_+0x4a>
 8002778:	89fb      	ldrh	r3, [r7, #14]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <init_bme280_+0x4e>
	{
		error_blink_red_led();
 800277e:	f7ff ff4b 	bl	8002618 <error_blink_red_led>
	}

	// Init BME280
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <init_bme280_+0xc4>)
 8002784:	2276      	movs	r2, #118	; 0x76
 8002786:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <init_bme280_+0xc4>)
 800278a:	2201      	movs	r2, #1
 800278c:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 800278e:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <init_bme280_+0xc4>)
 8002790:	4a1a      	ldr	r2, [pc, #104]	; (80027fc <init_bme280_+0xc8>)
 8002792:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8002794:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <init_bme280_+0xc4>)
 8002796:	4a1a      	ldr	r2, [pc, #104]	; (8002800 <init_bme280_+0xcc>)
 8002798:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 800279a:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <init_bme280_+0xc4>)
 800279c:	4a19      	ldr	r2, [pc, #100]	; (8002804 <init_bme280_+0xd0>)
 800279e:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 80027a0:	4815      	ldr	r0, [pc, #84]	; (80027f8 <init_bme280_+0xc4>)
 80027a2:	f7fe fbd7 	bl	8000f54 <bme280_init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	723b      	strb	r3, [r7, #8]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80027aa:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <init_bme280_+0xc4>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <init_bme280_+0xc4>)
 80027b4:	2205      	movs	r2, #5
 80027b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80027ba:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <init_bme280_+0xc4>)
 80027bc:	2202      	movs	r2, #2
 80027be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 80027c2:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <init_bme280_+0xc4>)
 80027c4:	2204      	movs	r2, #4
 80027c6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80027ca:	490b      	ldr	r1, [pc, #44]	; (80027f8 <init_bme280_+0xc4>)
 80027cc:	200f      	movs	r0, #15
 80027ce:	f7fe fcb3 	bl	8001138 <bme280_set_sensor_settings>
 80027d2:	4603      	mov	r3, r0
 80027d4:	723b      	strb	r3, [r7, #8]
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 80027d6:	4908      	ldr	r1, [pc, #32]	; (80027f8 <init_bme280_+0xc4>)
 80027d8:	2003      	movs	r0, #3
 80027da:	f7fe fd02 	bl	80011e2 <bme280_set_sensor_mode>
 80027de:	4603      	mov	r3, r0
 80027e0:	723b      	strb	r3, [r7, #8]

	dev.delay_ms(40);
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <init_bme280_+0xc4>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2028      	movs	r0, #40	; 0x28
 80027e8:	4798      	blx	r3
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000240 	.word	0x20000240
 80027f8:	20000350 	.word	0x20000350
 80027fc:	08002635 	.word	0x08002635
 8002800:	080026bd 	.word	0x080026bd
 8002804:	080026a5 	.word	0x080026a5

08002808 <get_THP_bme280>:
//----------------------------------------------------------------------------------------
void get_THP_bme280(float *T, float *H, float *P)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
	if(bme280_get_sensor_data(BME280_ALL, &comp_data, &dev) == BME280_OK)
 8002814:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <get_THP_bme280+0x78>)
 8002816:	491b      	ldr	r1, [pc, #108]	; (8002884 <get_THP_bme280+0x7c>)
 8002818:	2007      	movs	r0, #7
 800281a:	f7fe fd5e 	bl	80012da <bme280_get_sensor_data>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d11e      	bne.n	8002862 <get_THP_bme280+0x5a>
	{
		// Save data variables
		*T = (float)comp_data.temperature;
 8002824:	4b17      	ldr	r3, [pc, #92]	; (8002884 <get_THP_bme280+0x7c>)
 8002826:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f7fe f9c3 	bl	8000bb8 <__aeabi_d2f>
 8002832:	4602      	mov	r2, r0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	601a      	str	r2, [r3, #0]
		*H = (float)comp_data.humidity;
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <get_THP_bme280+0x7c>)
 800283a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe f9b9 	bl	8000bb8 <__aeabi_d2f>
 8002846:	4602      	mov	r2, r0
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	601a      	str	r2, [r3, #0]
		*P = (float)comp_data.pressure;
 800284c:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <get_THP_bme280+0x7c>)
 800284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	f7fe f9af 	bl	8000bb8 <__aeabi_d2f>
 800285a:	4602      	mov	r2, r0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	e001      	b.n	8002866 <get_THP_bme280+0x5e>
	}
	else
	{
		error_blink_red_led();
 8002862:	f7ff fed9 	bl	8002618 <error_blink_red_led>
	}

	if(put_device_to_sleep(&dev) != 0)
 8002866:	4806      	ldr	r0, [pc, #24]	; (8002880 <get_THP_bme280+0x78>)
 8002868:	f7fe ffd5 	bl	8001816 <put_device_to_sleep>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <get_THP_bme280+0x6e>
	{
		error_blink_red_led();
 8002872:	f7ff fed1 	bl	8002618 <error_blink_red_led>
	}
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000350 	.word	0x20000350
 8002884:	20000390 	.word	0x20000390

08002888 <meassure_battery_voltage>:
// --------------------------------------------------------------------------------
void meassure_battery_voltage(float *voltage)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08e      	sub	sp, #56	; 0x38
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	86fb      	strh	r3, [r7, #54]	; 0x36
	char str[35]={0};
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	221f      	movs	r2, #31
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f006 fc86 	bl	80091b2 <memset>

	HAL_ADC_Start(&hadc1);
 80028a6:	481c      	ldr	r0, [pc, #112]	; (8002918 <meassure_battery_voltage+0x90>)
 80028a8:	f001 fa5a 	bl	8003d60 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80028ac:	2164      	movs	r1, #100	; 0x64
 80028ae:	481a      	ldr	r0, [pc, #104]	; (8002918 <meassure_battery_voltage+0x90>)
 80028b0:	f001 fb3d 	bl	8003f2e <HAL_ADC_PollForConversion>
//		i = (uint32_t)HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
 80028b4:	4818      	ldr	r0, [pc, #96]	; (8002918 <meassure_battery_voltage+0x90>)
 80028b6:	f001 fb07 	bl	8003ec8 <HAL_ADC_Stop>

	float V_bat = (float)HAL_ADC_GetValue(&hadc1)*3.3/4096;
 80028ba:	4817      	ldr	r0, [pc, #92]	; (8002918 <meassure_battery_voltage+0x90>)
 80028bc:	f001 fcd2 	bl	8004264 <HAL_ADC_GetValue>
 80028c0:	ee07 0a90 	vmov	s15, r0
 80028c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c8:	ee17 0a90 	vmov	r0, s15
 80028cc:	f7fd fe44 	bl	8000558 <__aeabi_f2d>
 80028d0:	a30f      	add	r3, pc, #60	; (adr r3, 8002910 <meassure_battery_voltage+0x88>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd fe97 	bl	8000608 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	4b0d      	ldr	r3, [pc, #52]	; (800291c <meassure_battery_voltage+0x94>)
 80028e8:	f7fd ffb8 	bl	800085c <__aeabi_ddiv>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	f7fe f960 	bl	8000bb8 <__aeabi_d2f>
 80028f8:	4603      	mov	r3, r0
 80028fa:	633b      	str	r3, [r7, #48]	; 0x30

	*voltage = V_bat;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002900:	601a      	str	r2, [r3, #0]

//		sprintf(str, "ADC: %04d V_bat: %.2f V \n\r", i, V_bat);
//		HAL_UART_Transmit(&huart1, str, sizeof(str), 1000);
}
 8002902:	bf00      	nop
 8002904:	3738      	adds	r7, #56	; 0x38
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	f3af 8000 	nop.w
 8002910:	66666666 	.word	0x66666666
 8002914:	400a6666 	.word	0x400a6666
 8002918:	200001f8 	.word	0x200001f8
 800291c:	40b00000 	.word	0x40b00000

08002920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b0b0      	sub	sp, #192	; 0xc0
 8002924:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002926:	f001 f941 	bl	8003bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800292a:	f000 f9bf 	bl	8002cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800292e:	f000 fb6d 	bl	800300c <MX_GPIO_Init>
  MX_RTC_Init();
 8002932:	f000 faa7 	bl	8002e84 <MX_RTC_Init>
  MX_I2C1_Init();
 8002936:	f000 fa77 	bl	8002e28 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800293a:	f000 fb3d 	bl	8002fb8 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 800293e:	f000 fb05 	bl	8002f4c <MX_SPI2_Init>
  MX_ADC1_Init();
 8002942:	f000 fa1f 	bl	8002d84 <MX_ADC1_Init>

#if SLEEP_MODE == ON

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8002946:	4bce      	ldr	r3, [pc, #824]	; (8002c80 <main+0x360>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b02      	cmp	r3, #2
 8002950:	f040 8174 	bne.w	8002c3c <main+0x31c>
  {
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8002954:	4bca      	ldr	r3, [pc, #808]	; (8002c80 <main+0x360>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4ac9      	ldr	r2, [pc, #804]	; (8002c80 <main+0x360>)
 800295a:	f043 0308 	orr.w	r3, r3, #8
 800295e:	6013      	str	r3, [r2, #0]

	  GREEN_LED_ON;
 8002960:	2201      	movs	r2, #1
 8002962:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002966:	48c7      	ldr	r0, [pc, #796]	; (8002c84 <main+0x364>)
 8002968:	f002 f97e 	bl	8004c68 <HAL_GPIO_WritePin>

	  float BME280_temperature = 0;
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  float BME280_humidity = 0;
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  float BME280_preasure = 0;
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	  float battery_voltage = 0;
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	  init_bme280_();
 800298c:	f7ff fed2 	bl	8002734 <init_bme280_>
	  get_THP_bme280(&BME280_temperature, &BME280_humidity, &BME280_preasure);
 8002990:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002994:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002998:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff33 	bl	8002808 <get_THP_bme280>

 	  //  Prepare string of data
 	  uint8_t num_of_dev = 1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 	  char tramsmeet_data_buffer[50] = {0,};
 80029a8:	2300      	movs	r3, #0
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	222e      	movs	r2, #46	; 0x2e
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f006 fbfd 	bl	80091b2 <memset>

 	  char buf[10] = {0,};
 80029b8:	2300      	movs	r3, #0
 80029ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80029be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	809a      	strh	r2, [r3, #4]

 	  memset(buf, 0, sizeof(buf));
 80029c8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80029cc:	220a      	movs	r2, #10
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f006 fbee 	bl	80091b2 <memset>
 	  sprintf(buf, "T%.1f", BME280_temperature);
 80029d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fdbc 	bl	8000558 <__aeabi_f2d>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80029e8:	49a7      	ldr	r1, [pc, #668]	; (8002c88 <main+0x368>)
 80029ea:	f006 fb7f 	bl	80090ec <siprintf>
 	  strcat(tramsmeet_data_buffer, buf);
 80029ee:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80029f2:	463b      	mov	r3, r7
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f006 fbe3 	bl	80091c2 <strcat>

 	  memset(buf, 0, sizeof(buf));
 80029fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002a00:	220a      	movs	r2, #10
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f006 fbd4 	bl	80091b2 <memset>
 	  sprintf(buf, "H%.1f", BME280_humidity);
 8002a0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fda2 	bl	8000558 <__aeabi_f2d>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8002a1c:	499b      	ldr	r1, [pc, #620]	; (8002c8c <main+0x36c>)
 8002a1e:	f006 fb65 	bl	80090ec <siprintf>
 	  strcat(tramsmeet_data_buffer, buf);
 8002a22:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002a26:	463b      	mov	r3, r7
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f006 fbc9 	bl	80091c2 <strcat>

 	  // Meassure voltage on battery
 	  meassure_battery_voltage(&battery_voltage);
 8002a30:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff27 	bl	8002888 <meassure_battery_voltage>
 	  memset(buf, 0, sizeof(buf));
 8002a3a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002a3e:	220a      	movs	r2, #10
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f006 fbb5 	bl	80091b2 <memset>
 	  sprintf(buf, "V%.1f ", battery_voltage);
 8002a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fd83 	bl	8000558 <__aeabi_f2d>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8002a5a:	498d      	ldr	r1, [pc, #564]	; (8002c90 <main+0x370>)
 8002a5c:	f006 fb46 	bl	80090ec <siprintf>
 	  strcat(tramsmeet_data_buffer, buf);
 8002a60:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002a64:	463b      	mov	r3, r7
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f006 fbaa 	bl	80091c2 <strcat>

 	  // DS3231 clock
 	  uint8_t buffer = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 	  uint8_t time_ds3231[10] = {0,};
 8002a74:	2300      	movs	r3, #0
 8002a76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a7a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	809a      	strh	r2, [r3, #4]

 	  for(int i = 0; i <=8; i++)
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a8a:	e016      	b.n	8002aba <main+0x19a>
 	  {
 		  ds3231_read(i, &buffer);
 8002a8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f107 028b 	add.w	r2, r7, #139	; 0x8b
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fcbd 	bl	8002418 <ds3231_read>
 		  time_ds3231[i] = buffer;
 8002a9e:	f897 108b 	ldrb.w	r1, [r7, #139]	; 0x8b
 8002aa2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002aaa:	4413      	add	r3, r2
 8002aac:	460a      	mov	r2, r1
 8002aae:	701a      	strb	r2, [r3, #0]
 	  for(int i = 0; i <=8; i++)
 8002ab0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	dde4      	ble.n	8002a8c <main+0x16c>
 	  }

 	  // convert time into string
 	  char buf_1[5] = {0,};
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

 	  for(int i = 2; i >= 0 ; i--)
 8002acc:	2302      	movs	r3, #2
 8002ace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ad2:	e030      	b.n	8002b36 <main+0x216>
 	  {
 		  sprintf(buf_1, "%d", time_ds3231[i]);
 8002ad4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002ad8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002adc:	4413      	add	r3, r2
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ae6:	496b      	ldr	r1, [pc, #428]	; (8002c94 <main+0x374>)
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f006 faff 	bl	80090ec <siprintf>
 		  strcat(tramsmeet_data_buffer, buf_1);
 8002aee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002af2:	463b      	mov	r3, r7
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f006 fb63 	bl	80091c2 <strcat>
 		  memset(buf_1, 0, sizeof(buf_1));
 8002afc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b00:	2205      	movs	r2, #5
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f006 fb54 	bl	80091b2 <memset>
 		  if(i > 0)
 8002b0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	dd0c      	ble.n	8002b2c <main+0x20c>
 		  {
 			  strcat(tramsmeet_data_buffer, ":");
 8002b12:	463b      	mov	r3, r7
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fd fbb3 	bl	8000280 <strlen>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	463b      	mov	r3, r7
 8002b20:	4413      	add	r3, r2
 8002b22:	495d      	ldr	r1, [pc, #372]	; (8002c98 <main+0x378>)
 8002b24:	461a      	mov	r2, r3
 8002b26:	460b      	mov	r3, r1
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	8013      	strh	r3, [r2, #0]
 	  for(int i = 2; i >= 0 ; i--)
 8002b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b30:	3b01      	subs	r3, #1
 8002b32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	daca      	bge.n	8002ad4 <main+0x1b4>
 		  }
 	  }
 	  strcat(tramsmeet_data_buffer, " ");
 8002b3e:	463b      	mov	r3, r7
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fb9d 	bl	8000280 <strlen>
 8002b46:	4603      	mov	r3, r0
 8002b48:	461a      	mov	r2, r3
 8002b4a:	463b      	mov	r3, r7
 8002b4c:	4413      	add	r3, r2
 8002b4e:	4953      	ldr	r1, [pc, #332]	; (8002c9c <main+0x37c>)
 8002b50:	461a      	mov	r2, r3
 8002b52:	460b      	mov	r3, r1
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	8013      	strh	r3, [r2, #0]

// 	  HAL_UART_Transmit(&huart1, tramsmeet_data_buffer, sizeof(tramsmeet_data_buffer), 1000);

 	  NRF24_init_TX(0, 10, 0, 15, 0, 0);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	230f      	movs	r3, #15
 8002b62:	2200      	movs	r2, #0
 8002b64:	210a      	movs	r1, #10
 8002b66:	2000      	movs	r0, #0
 8002b68:	f000 fd86 	bl	8003678 <NRF24_init_TX>

 	  // Detect loat packages
	  char buf1[10] = {0,};
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b70:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	809a      	strh	r2, [r3, #4]
	  char buf2[54] = {0,};
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b82:	2232      	movs	r2, #50	; 0x32
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f006 fb13 	bl	80091b2 <memset>

	  uint8_t retr_packages = 0;;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
	  uint8_t dt = 0 ;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 	  uint16_t lost_packages = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa


 	  dt = NRF24L01_Transmit(1, tramsmeet_data_buffer);
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f000 ffa8 	bl	8003af8 <NRF24L01_Transmit>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad

 	  retr_packages  = dt & 0xF;			// Select retransmit packets
 8002bae:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 	  lost_packages = dt & 0xF0;			// Select lost packets
 8002bba:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa

#if UART_LOG == ON
 	  sprintf(buf2, "TX retr: %d, TX lost: %d \n\r", retr_packages, lost_packages);
 8002bc8:	f897 20ae 	ldrb.w	r2, [r7, #174]	; 0xae
 8002bcc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002bd0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002bd4:	4932      	ldr	r1, [pc, #200]	; (8002ca0 <main+0x380>)
 8002bd6:	f006 fa89 	bl	80090ec <siprintf>
 	  HAL_UART_Transmit(&huart1, buf2, sizeof(buf2), 1000);
 8002bda:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be2:	2236      	movs	r2, #54	; 0x36
 8002be4:	482f      	ldr	r0, [pc, #188]	; (8002ca4 <main+0x384>)
 8002be6:	f005 f928 	bl	8007e3a <HAL_UART_Transmit>
#endif

 	  if(lost_packages > 0)		// If lost packages was detected
 8002bea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00f      	beq.n	8002c12 <main+0x2f2>
 	  {
 		 RED_LED_ON;
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bf8:	4822      	ldr	r0, [pc, #136]	; (8002c84 <main+0x364>)
 8002bfa:	f002 f835 	bl	8004c68 <HAL_GPIO_WritePin>
 		 HAL_Delay(10);
 8002bfe:	200a      	movs	r0, #10
 8002c00:	f001 f846 	bl	8003c90 <HAL_Delay>
 		 RED_LED_OFF;
 8002c04:	2200      	movs	r2, #0
 8002c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c0a:	481e      	ldr	r0, [pc, #120]	; (8002c84 <main+0x364>)
 8002c0c:	f002 f82c 	bl	8004c68 <HAL_GPIO_WritePin>
 8002c10:	e005      	b.n	8002c1e <main+0x2fe>
// 		 HAL_UART_Transmit(&huart1, str, sizeof(str), 1000);
 	  }
 	  else
 	  {
 		 RED_LED_OFF;
 8002c12:	2200      	movs	r2, #0
 8002c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c18:	481a      	ldr	r0, [pc, #104]	; (8002c84 <main+0x364>)
 8002c1a:	f002 f825 	bl	8004c68 <HAL_GPIO_WritePin>
 	  }

 	  GREEN_LED_OFF;
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c24:	4817      	ldr	r0, [pc, #92]	; (8002c84 <main+0x364>)
 8002c26:	f002 f81f 	bl	8004c68 <HAL_GPIO_WritePin>

 	  NRF24_Sleep_mode();
 8002c2a:	f000 fd0f 	bl	800364c <NRF24_Sleep_mode>



 	  /** Disable the WWAKEUP PIN **/
 	  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8002c2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c32:	f003 fb27 	bl	8006284 <HAL_PWR_DisableWakeUpPin>

 	  /** Deactivate the RTC wakeup  **/
 	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002c36:	481c      	ldr	r0, [pc, #112]	; (8002ca8 <main+0x388>)
 8002c38:	f004 fc28 	bl	800748c <HAL_RTCEx_DeactivateWakeUpTimer>
   }


  /** Now enter the standby mode **/
    /* Clear the WU FLAG */
   __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002c3c:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <main+0x360>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <main+0x360>)
 8002c42:	f043 0304 	orr.w	r3, r3, #4
 8002c46:	6013      	str	r3, [r2, #0]

    /* clear the RTC Wake UP (WU) flag */
   __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002c48:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <main+0x388>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <main+0x388>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002c58:	60da      	str	r2, [r3, #12]


    /* Enable the WAKEUP PIN */
   HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002c5a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c5e:	f003 faff 	bl	8006260 <HAL_PWR_EnableWakeUpPin>

   if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WakeUpCounter_1_sec, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002c62:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8002c66:	2200      	movs	r2, #0
 8002c68:	4619      	mov	r1, r3
 8002c6a:	480f      	ldr	r0, [pc, #60]	; (8002ca8 <main+0x388>)
 8002c6c:	f004 fb4e 	bl	800730c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <main+0x35a>
   {
     Error_Handler();
 8002c76:	f000 fa37 	bl	80030e8 <Error_Handler>
   }

   /* Finally enter the standby mode */
   HAL_PWR_EnterSTANDBYMode();
 8002c7a:	f003 fb17 	bl	80062ac <HAL_PWR_EnterSTANDBYMode>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c7e:	e7fe      	b.n	8002c7e <main+0x35e>
 8002c80:	40007000 	.word	0x40007000
 8002c84:	40020400 	.word	0x40020400
 8002c88:	0800b278 	.word	0x0800b278
 8002c8c:	0800b280 	.word	0x0800b280
 8002c90:	0800b288 	.word	0x0800b288
 8002c94:	0800b290 	.word	0x0800b290
 8002c98:	0800b294 	.word	0x0800b294
 8002c9c:	0800b298 	.word	0x0800b298
 8002ca0:	0800b29c 	.word	0x0800b29c
 8002ca4:	2000030c 	.word	0x2000030c
 8002ca8:	20000294 	.word	0x20000294

08002cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b094      	sub	sp, #80	; 0x50
 8002cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cb2:	f107 0320 	add.w	r3, r7, #32
 8002cb6:	2230      	movs	r2, #48	; 0x30
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f006 fa79 	bl	80091b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	4b29      	ldr	r3, [pc, #164]	; (8002d7c <SystemClock_Config+0xd0>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <SystemClock_Config+0xd0>)
 8002cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cde:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce0:	4b26      	ldr	r3, [pc, #152]	; (8002d7c <SystemClock_Config+0xd0>)
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cec:	2300      	movs	r3, #0
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <SystemClock_Config+0xd4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002cf8:	4a21      	ldr	r2, [pc, #132]	; (8002d80 <SystemClock_Config+0xd4>)
 8002cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b1f      	ldr	r3, [pc, #124]	; (8002d80 <SystemClock_Config+0xd4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002d0c:	230a      	movs	r3, #10
 8002d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d10:	2301      	movs	r3, #1
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d14:	2310      	movs	r3, #16
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d20:	2300      	movs	r3, #0
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d24:	2308      	movs	r3, #8
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8002d28:	2340      	movs	r3, #64	; 0x40
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d30:	2304      	movs	r3, #4
 8002d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d34:	f107 0320 	add.w	r3, r7, #32
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f003 facf 	bl	80062dc <HAL_RCC_OscConfig>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002d44:	f000 f9d0 	bl	80030e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d48:	230f      	movs	r3, #15
 8002d4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	2102      	movs	r1, #2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 fd31 	bl	80067cc <HAL_RCC_ClockConfig>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002d70:	f000 f9ba 	bl	80030e8 <Error_Handler>
  }
}
 8002d74:	bf00      	nop
 8002d76:	3750      	adds	r7, #80	; 0x50
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40007000 	.word	0x40007000

08002d84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d8a:	463b      	mov	r3, r7
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d96:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <MX_ADC1_Init+0x98>)
 8002d98:	4a21      	ldr	r2, [pc, #132]	; (8002e20 <MX_ADC1_Init+0x9c>)
 8002d9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002d9c:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <MX_ADC1_Init+0x98>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <MX_ADC1_Init+0x98>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002da8:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <MX_ADC1_Init+0x98>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002dae:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <MX_ADC1_Init+0x98>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002db4:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <MX_ADC1_Init+0x98>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002dbc:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <MX_ADC1_Init+0x98>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dc2:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <MX_ADC1_Init+0x98>)
 8002dc4:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <MX_ADC1_Init+0xa0>)
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <MX_ADC1_Init+0x98>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <MX_ADC1_Init+0x98>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <MX_ADC1_Init+0x98>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <MX_ADC1_Init+0x98>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002de2:	480e      	ldr	r0, [pc, #56]	; (8002e1c <MX_ADC1_Init+0x98>)
 8002de4:	f000 ff78 	bl	8003cd8 <HAL_ADC_Init>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002dee:	f000 f97b 	bl	80030e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002df2:	2309      	movs	r3, #9
 8002df4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002df6:	2301      	movs	r3, #1
 8002df8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dfe:	463b      	mov	r3, r7
 8002e00:	4619      	mov	r1, r3
 8002e02:	4806      	ldr	r0, [pc, #24]	; (8002e1c <MX_ADC1_Init+0x98>)
 8002e04:	f001 fa5a 	bl	80042bc <HAL_ADC_ConfigChannel>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002e0e:	f000 f96b 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	200001f8 	.word	0x200001f8
 8002e20:	40012000 	.word	0x40012000
 8002e24:	0f000001 	.word	0x0f000001

08002e28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e2c:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <MX_I2C1_Init+0x54>)
 8002e30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e32:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e34:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <MX_I2C1_Init+0x58>)
 8002e36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e58:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e64:	4804      	ldr	r0, [pc, #16]	; (8002e78 <MX_I2C1_Init+0x50>)
 8002e66:	f001 ff57 	bl	8004d18 <HAL_I2C_Init>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e70:	f000 f93a 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000240 	.word	0x20000240
 8002e7c:	40005400 	.word	0x40005400
 8002e80:	000186a0 	.word	0x000186a0

08002e84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002e98:	2300      	movs	r3, #0
 8002e9a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e9c:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <MX_RTC_Init+0xc0>)
 8002e9e:	4a2a      	ldr	r2, [pc, #168]	; (8002f48 <MX_RTC_Init+0xc4>)
 8002ea0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ea2:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <MX_RTC_Init+0xc0>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ea8:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <MX_RTC_Init+0xc0>)
 8002eaa:	227f      	movs	r2, #127	; 0x7f
 8002eac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002eae:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <MX_RTC_Init+0xc0>)
 8002eb0:	22ff      	movs	r2, #255	; 0xff
 8002eb2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002eb4:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <MX_RTC_Init+0xc0>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002eba:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <MX_RTC_Init+0xc0>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ec0:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <MX_RTC_Init+0xc0>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ec6:	481f      	ldr	r0, [pc, #124]	; (8002f44 <MX_RTC_Init+0xc0>)
 8002ec8:	f003 ff4e 	bl	8006d68 <HAL_RTC_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002ed2:	f000 f909 	bl	80030e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	2201      	movs	r2, #1
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4814      	ldr	r0, [pc, #80]	; (8002f44 <MX_RTC_Init+0xc0>)
 8002ef2:	f003 ffaf 	bl	8006e54 <HAL_RTC_SetTime>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002efc:	f000 f8f4 	bl	80030e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002f00:	2301      	movs	r3, #1
 8002f02:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002f04:	2301      	movs	r3, #1
 8002f06:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002f10:	463b      	mov	r3, r7
 8002f12:	2201      	movs	r2, #1
 8002f14:	4619      	mov	r1, r3
 8002f16:	480b      	ldr	r0, [pc, #44]	; (8002f44 <MX_RTC_Init+0xc0>)
 8002f18:	f004 f836 	bl	8006f88 <HAL_RTC_SetDate>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002f22:	f000 f8e1 	bl	80030e8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002f26:	2200      	movs	r2, #0
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4806      	ldr	r0, [pc, #24]	; (8002f44 <MX_RTC_Init+0xc0>)
 8002f2c:	f004 f951 	bl	80071d2 <HAL_RTCEx_SetWakeUpTimer>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8002f36:	f000 f8d7 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002f3a:	bf00      	nop
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000294 	.word	0x20000294
 8002f48:	40002800 	.word	0x40002800

08002f4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002f50:	4b17      	ldr	r3, [pc, #92]	; (8002fb0 <MX_SPI2_Init+0x64>)
 8002f52:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <MX_SPI2_Init+0x68>)
 8002f54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <MX_SPI2_Init+0x64>)
 8002f58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002f5e:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <MX_SPI2_Init+0x64>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f64:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <MX_SPI2_Init+0x64>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <MX_SPI2_Init+0x64>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <MX_SPI2_Init+0x64>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f76:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <MX_SPI2_Init+0x64>)
 8002f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <MX_SPI2_Init+0x64>)
 8002f80:	2218      	movs	r2, #24
 8002f82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <MX_SPI2_Init+0x64>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <MX_SPI2_Init+0x64>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f90:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <MX_SPI2_Init+0x64>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <MX_SPI2_Init+0x64>)
 8002f98:	220a      	movs	r2, #10
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f9c:	4804      	ldr	r0, [pc, #16]	; (8002fb0 <MX_SPI2_Init+0x64>)
 8002f9e:	f004 facd 	bl	800753c <HAL_SPI_Init>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002fa8:	f000 f89e 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200002b4 	.word	0x200002b4
 8002fb4:	40003800 	.word	0x40003800

08002fb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <MX_USART1_UART_Init+0x4c>)
 8002fbe:	4a12      	ldr	r2, [pc, #72]	; (8003008 <MX_USART1_UART_Init+0x50>)
 8002fc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <MX_USART1_UART_Init+0x4c>)
 8002fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fca:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <MX_USART1_UART_Init+0x4c>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <MX_USART1_UART_Init+0x4c>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <MX_USART1_UART_Init+0x4c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fdc:	4b09      	ldr	r3, [pc, #36]	; (8003004 <MX_USART1_UART_Init+0x4c>)
 8002fde:	220c      	movs	r2, #12
 8002fe0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fe2:	4b08      	ldr	r3, [pc, #32]	; (8003004 <MX_USART1_UART_Init+0x4c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <MX_USART1_UART_Init+0x4c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fee:	4805      	ldr	r0, [pc, #20]	; (8003004 <MX_USART1_UART_Init+0x4c>)
 8002ff0:	f004 fed6 	bl	8007da0 <HAL_UART_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ffa:	f000 f875 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	2000030c 	.word	0x2000030c
 8003008:	40011000 	.word	0x40011000

0800300c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <MX_GPIO_Init+0xd0>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	4a2c      	ldr	r2, [pc, #176]	; (80030dc <MX_GPIO_Init+0xd0>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6313      	str	r3, [r2, #48]	; 0x30
 8003032:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <MX_GPIO_Init+0xd0>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	4b26      	ldr	r3, [pc, #152]	; (80030dc <MX_GPIO_Init+0xd0>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	4a25      	ldr	r2, [pc, #148]	; (80030dc <MX_GPIO_Init+0xd0>)
 8003048:	f043 0302 	orr.w	r3, r3, #2
 800304c:	6313      	str	r3, [r2, #48]	; 0x30
 800304e:	4b23      	ldr	r3, [pc, #140]	; (80030dc <MX_GPIO_Init+0xd0>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nrf_CE_Pin|nrf_CS_Pin, GPIO_PIN_RESET);
 800305a:	2200      	movs	r2, #0
 800305c:	2118      	movs	r1, #24
 800305e:	4820      	ldr	r0, [pc, #128]	; (80030e0 <MX_GPIO_Init+0xd4>)
 8003060:	f001 fe02 	bl	8004c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Red_Pin|LED_Green_Pin, GPIO_PIN_RESET);
 8003064:	2200      	movs	r2, #0
 8003066:	f44f 7140 	mov.w	r1, #768	; 0x300
 800306a:	481e      	ldr	r0, [pc, #120]	; (80030e4 <MX_GPIO_Init+0xd8>)
 800306c:	f001 fdfc 	bl	8004c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : nrf_IRQ_Pin */
  GPIO_InitStruct.Pin = nrf_IRQ_Pin;
 8003070:	2304      	movs	r3, #4
 8003072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003074:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(nrf_IRQ_GPIO_Port, &GPIO_InitStruct);
 800307e:	f107 030c 	add.w	r3, r7, #12
 8003082:	4619      	mov	r1, r3
 8003084:	4816      	ldr	r0, [pc, #88]	; (80030e0 <MX_GPIO_Init+0xd4>)
 8003086:	f001 fc53 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf_CE_Pin nrf_CS_Pin */
  GPIO_InitStruct.Pin = nrf_CE_Pin|nrf_CS_Pin;
 800308a:	2318      	movs	r3, #24
 800308c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308e:	2301      	movs	r3, #1
 8003090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	4619      	mov	r1, r3
 80030a0:	480f      	ldr	r0, [pc, #60]	; (80030e0 <MX_GPIO_Init+0xd4>)
 80030a2:	f001 fc45 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Red_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin;
 80030a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ac:	2301      	movs	r3, #1
 80030ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b8:	f107 030c 	add.w	r3, r7, #12
 80030bc:	4619      	mov	r1, r3
 80030be:	4809      	ldr	r0, [pc, #36]	; (80030e4 <MX_GPIO_Init+0xd8>)
 80030c0:	f001 fc36 	bl	8004930 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80030c4:	2200      	movs	r2, #0
 80030c6:	2100      	movs	r1, #0
 80030c8:	2008      	movs	r0, #8
 80030ca:	f001 fbfa 	bl	80048c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80030ce:	2008      	movs	r0, #8
 80030d0:	f001 fc13 	bl	80048fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030d4:	bf00      	nop
 80030d6:	3720      	adds	r7, #32
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40020000 	.word	0x40020000
 80030e4:	40020400 	.word	0x40020400

080030e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030ec:	b672      	cpsid	i
}
 80030ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030f0:	e7fe      	b.n	80030f0 <Error_Handler+0x8>
	...

080030f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	4b10      	ldr	r3, [pc, #64]	; (8003140 <HAL_MspInit+0x4c>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	4a0f      	ldr	r2, [pc, #60]	; (8003140 <HAL_MspInit+0x4c>)
 8003104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003108:	6453      	str	r3, [r2, #68]	; 0x44
 800310a:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <HAL_MspInit+0x4c>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_MspInit+0x4c>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	4a08      	ldr	r2, [pc, #32]	; (8003140 <HAL_MspInit+0x4c>)
 8003120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003124:	6413      	str	r3, [r2, #64]	; 0x40
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_MspInit+0x4c>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800

08003144 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	; 0x28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1b      	ldr	r2, [pc, #108]	; (80031d0 <HAL_ADC_MspInit+0x8c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d12f      	bne.n	80031c6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <HAL_ADC_MspInit+0x90>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <HAL_ADC_MspInit+0x90>)
 8003170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003174:	6453      	str	r3, [r2, #68]	; 0x44
 8003176:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_ADC_MspInit+0x90>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <HAL_ADC_MspInit+0x90>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <HAL_ADC_MspInit+0x90>)
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	6313      	str	r3, [r2, #48]	; 0x30
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_ADC_MspInit+0x90>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800319e:	2302      	movs	r3, #2
 80031a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031a2:	2303      	movs	r3, #3
 80031a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031aa:	f107 0314 	add.w	r3, r7, #20
 80031ae:	4619      	mov	r1, r3
 80031b0:	4809      	ldr	r0, [pc, #36]	; (80031d8 <HAL_ADC_MspInit+0x94>)
 80031b2:	f001 fbbd 	bl	8004930 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2100      	movs	r1, #0
 80031ba:	2012      	movs	r0, #18
 80031bc:	f001 fb81 	bl	80048c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80031c0:	2012      	movs	r0, #18
 80031c2:	f001 fb9a 	bl	80048fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031c6:	bf00      	nop
 80031c8:	3728      	adds	r7, #40	; 0x28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40012000 	.word	0x40012000
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40020400 	.word	0x40020400

080031dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	; 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a19      	ldr	r2, [pc, #100]	; (8003260 <HAL_I2C_MspInit+0x84>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d12b      	bne.n	8003256 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	4b18      	ldr	r3, [pc, #96]	; (8003264 <HAL_I2C_MspInit+0x88>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a17      	ldr	r2, [pc, #92]	; (8003264 <HAL_I2C_MspInit+0x88>)
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <HAL_I2C_MspInit+0x88>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800321a:	23c0      	movs	r3, #192	; 0xc0
 800321c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800321e:	2312      	movs	r3, #18
 8003220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003226:	2303      	movs	r3, #3
 8003228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800322a:	2304      	movs	r3, #4
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322e:	f107 0314 	add.w	r3, r7, #20
 8003232:	4619      	mov	r1, r3
 8003234:	480c      	ldr	r0, [pc, #48]	; (8003268 <HAL_I2C_MspInit+0x8c>)
 8003236:	f001 fb7b 	bl	8004930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <HAL_I2C_MspInit+0x88>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a08      	ldr	r2, [pc, #32]	; (8003264 <HAL_I2C_MspInit+0x88>)
 8003244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_I2C_MspInit+0x88>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003256:	bf00      	nop
 8003258:	3728      	adds	r7, #40	; 0x28
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40005400 	.word	0x40005400
 8003264:	40023800 	.word	0x40023800
 8003268:	40020400 	.word	0x40020400

0800326c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003274:	f107 030c 	add.w	r3, r7, #12
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0c      	ldr	r2, [pc, #48]	; (80032bc <HAL_RTC_MspInit+0x50>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d111      	bne.n	80032b2 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800328e:	2302      	movs	r3, #2
 8003290:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003296:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003298:	f107 030c 	add.w	r3, r7, #12
 800329c:	4618      	mov	r0, r3
 800329e:	f003 fc75 	bl	8006b8c <HAL_RCCEx_PeriphCLKConfig>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80032a8:	f7ff ff1e 	bl	80030e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <HAL_RTC_MspInit+0x54>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80032b2:	bf00      	nop
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40002800 	.word	0x40002800
 80032c0:	42470e3c 	.word	0x42470e3c

080032c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <HAL_SPI_MspInit+0x84>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d12c      	bne.n	8003340 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	4b18      	ldr	r3, [pc, #96]	; (800334c <HAL_SPI_MspInit+0x88>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	4a17      	ldr	r2, [pc, #92]	; (800334c <HAL_SPI_MspInit+0x88>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f4:	6413      	str	r3, [r2, #64]	; 0x40
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <HAL_SPI_MspInit+0x88>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	4b11      	ldr	r3, [pc, #68]	; (800334c <HAL_SPI_MspInit+0x88>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	4a10      	ldr	r2, [pc, #64]	; (800334c <HAL_SPI_MspInit+0x88>)
 800330c:	f043 0302 	orr.w	r3, r3, #2
 8003310:	6313      	str	r3, [r2, #48]	; 0x30
 8003312:	4b0e      	ldr	r3, [pc, #56]	; (800334c <HAL_SPI_MspInit+0x88>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800331e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332c:	2303      	movs	r3, #3
 800332e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003330:	2305      	movs	r3, #5
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4619      	mov	r1, r3
 800333a:	4805      	ldr	r0, [pc, #20]	; (8003350 <HAL_SPI_MspInit+0x8c>)
 800333c:	f001 faf8 	bl	8004930 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003340:	bf00      	nop
 8003342:	3728      	adds	r7, #40	; 0x28
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40003800 	.word	0x40003800
 800334c:	40023800 	.word	0x40023800
 8003350:	40020400 	.word	0x40020400

08003354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	; 0x28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <HAL_UART_MspInit+0x84>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d12c      	bne.n	80033d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	4b18      	ldr	r3, [pc, #96]	; (80033dc <HAL_UART_MspInit+0x88>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	4a17      	ldr	r2, [pc, #92]	; (80033dc <HAL_UART_MspInit+0x88>)
 8003380:	f043 0310 	orr.w	r3, r3, #16
 8003384:	6453      	str	r3, [r2, #68]	; 0x44
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <HAL_UART_MspInit+0x88>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	4b11      	ldr	r3, [pc, #68]	; (80033dc <HAL_UART_MspInit+0x88>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a10      	ldr	r2, [pc, #64]	; (80033dc <HAL_UART_MspInit+0x88>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <HAL_UART_MspInit+0x88>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80033ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033bc:	2303      	movs	r3, #3
 80033be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033c0:	2307      	movs	r3, #7
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	4619      	mov	r1, r3
 80033ca:	4805      	ldr	r0, [pc, #20]	; (80033e0 <HAL_UART_MspInit+0x8c>)
 80033cc:	f001 fab0 	bl	8004930 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80033d0:	bf00      	nop
 80033d2:	3728      	adds	r7, #40	; 0x28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40011000 	.word	0x40011000
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40020000 	.word	0x40020000

080033e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033e8:	e7fe      	b.n	80033e8 <NMI_Handler+0x4>

080033ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ee:	e7fe      	b.n	80033ee <HardFault_Handler+0x4>

080033f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f4:	e7fe      	b.n	80033f4 <MemManage_Handler+0x4>

080033f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033fa:	e7fe      	b.n	80033fa <BusFault_Handler+0x4>

080033fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003400:	e7fe      	b.n	8003400 <UsageFault_Handler+0x4>

08003402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003430:	f000 fc0e 	bl	8003c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}

08003438 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nrf_IRQ_Pin);
 800343c:	2004      	movs	r0, #4
 800343e:	f001 fc47 	bl	8004cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800344c:	4802      	ldr	r0, [pc, #8]	; (8003458 <ADC_IRQHandler+0x10>)
 800344e:	f000 fdf9 	bl	8004044 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	200001f8 	.word	0x200001f8

0800345c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return 1;
 8003460:	2301      	movs	r3, #1
}
 8003462:	4618      	mov	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <_kill>:

int _kill(int pid, int sig)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003476:	f005 ff0d 	bl	8009294 <__errno>
 800347a:	4603      	mov	r3, r0
 800347c:	2216      	movs	r2, #22
 800347e:	601a      	str	r2, [r3, #0]
  return -1;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <_exit>:

void _exit (int status)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003494:	f04f 31ff 	mov.w	r1, #4294967295
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ffe7 	bl	800346c <_kill>
  while (1) {}    /* Make sure we hang here */
 800349e:	e7fe      	b.n	800349e <_exit+0x12>

080034a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	e00a      	b.n	80034c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034b2:	f3af 8000 	nop.w
 80034b6:	4601      	mov	r1, r0
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	60ba      	str	r2, [r7, #8]
 80034be:	b2ca      	uxtb	r2, r1
 80034c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	3301      	adds	r3, #1
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	dbf0      	blt.n	80034b2 <_read+0x12>
  }

  return len;
 80034d0:	687b      	ldr	r3, [r7, #4]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	e009      	b.n	8003500 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	60ba      	str	r2, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	3301      	adds	r3, #1
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	429a      	cmp	r2, r3
 8003506:	dbf1      	blt.n	80034ec <_write+0x12>
  }
  return len;
 8003508:	687b      	ldr	r3, [r7, #4]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <_close>:

int _close(int file)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800351a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800353a:	605a      	str	r2, [r3, #4]
  return 0;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <_isatty>:

int _isatty(int file)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003552:	2301      	movs	r3, #1
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003584:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <_sbrk+0x5c>)
 8003586:	4b15      	ldr	r3, [pc, #84]	; (80035dc <_sbrk+0x60>)
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <_sbrk+0x64>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003598:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <_sbrk+0x64>)
 800359a:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <_sbrk+0x68>)
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <_sbrk+0x64>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d207      	bcs.n	80035bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035ac:	f005 fe72 	bl	8009294 <__errno>
 80035b0:	4603      	mov	r3, r0
 80035b2:	220c      	movs	r2, #12
 80035b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035b6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ba:	e009      	b.n	80035d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <_sbrk+0x64>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035c2:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <_sbrk+0x64>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	4a05      	ldr	r2, [pc, #20]	; (80035e0 <_sbrk+0x64>)
 80035cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035ce:	68fb      	ldr	r3, [r7, #12]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20010000 	.word	0x20010000
 80035dc:	00000400 	.word	0x00000400
 80035e0:	200003a8 	.word	0x200003a8
 80035e4:	20000500 	.word	0x20000500

080035e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <SystemInit+0x20>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	4a05      	ldr	r2, [pc, #20]	; (8003608 <SystemInit+0x20>)
 80035f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <DelayMicro>:
void print_Data_Ower_uart(uint8_t *RX_BUF, uint8_t *pipe);


// -------------------------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 7;   // 9
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <DelayMicro+0x38>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <DelayMicro+0x3c>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	0a9b      	lsrs	r3, r3, #10
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	fb02 f303 	mul.w	r3, r2, r3
 8003628:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--) ;
 800362a:	bf00      	nop
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	1e5a      	subs	r2, r3, #1
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1fa      	bne.n	800362c <DelayMicro+0x20>
}
 8003636:	bf00      	nop
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	20000000 	.word	0x20000000
 8003648:	02659117 	.word	0x02659117

0800364c <NRF24_Sleep_mode>:
// -------------------------------------------------------------------------------------
void NRF24_Sleep_mode(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
	CE_RESET;
 8003650:	2200      	movs	r2, #0
 8003652:	2108      	movs	r1, #8
 8003654:	4807      	ldr	r0, [pc, #28]	; (8003674 <NRF24_Sleep_mode+0x28>)
 8003656:	f001 fb07 	bl	8004c68 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800365a:	2005      	movs	r0, #5
 800365c:	f000 fb18 	bl	8003c90 <HAL_Delay>
	NRF24_WriteReg(CONFIG, 0x00);
 8003660:	2100      	movs	r1, #0
 8003662:	2000      	movs	r0, #0
 8003664:	f000 f8a6 	bl	80037b4 <NRF24_WriteReg>
	HAL_Delay(5);
 8003668:	2005      	movs	r0, #5
 800366a:	f000 fb11 	bl	8003c90 <HAL_Delay>


}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40020000 	.word	0x40020000

08003678 <NRF24_init_TX>:
	 NRF24L01_RX_Mode();
	 //LED_OFF;
}
// -------------------------------------------------------------------------------------
void NRF24_init_TX(uint8_t pipe, uint8_t chanel, uint8_t retrans_delay, uint8_t retransmit_attempt, uint8_t data_rate, uint8_t output_tx_power)
{
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4604      	mov	r4, r0
 8003680:	4608      	mov	r0, r1
 8003682:	4611      	mov	r1, r2
 8003684:	461a      	mov	r2, r3
 8003686:	4623      	mov	r3, r4
 8003688:	71fb      	strb	r3, [r7, #7]
 800368a:	4603      	mov	r3, r0
 800368c:	71bb      	strb	r3, [r7, #6]
 800368e:	460b      	mov	r3, r1
 8003690:	717b      	strb	r3, [r7, #5]
 8003692:	4613      	mov	r3, r2
 8003694:	713b      	strb	r3, [r7, #4]
	if(chanel < 0 || chanel > 127)
 8003696:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800369a:	2b00      	cmp	r3, #0
 800369c:	da01      	bge.n	80036a2 <NRF24_init_TX+0x2a>
	{
		chanel = 10;
 800369e:	230a      	movs	r3, #10
 80036a0:	71bb      	strb	r3, [r7, #6]
	}

	CE_RESET;
 80036a2:	2200      	movs	r2, #0
 80036a4:	2108      	movs	r1, #8
 80036a6:	4827      	ldr	r0, [pc, #156]	; (8003744 <NRF24_init_TX+0xcc>)
 80036a8:	f001 fade 	bl	8004c68 <HAL_GPIO_WritePin>
	// DelayMicro(5000);
//	osDelay(5);
	 HAL_Delay(5);
 80036ac:	2005      	movs	r0, #5
 80036ae:	f000 faef 	bl	8003c90 <HAL_Delay>
	NRF24_WriteReg(CONFIG, 0x0A); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 80036b2:	210a      	movs	r1, #10
 80036b4:	2000      	movs	r0, #0
 80036b6:	f000 f87d 	bl	80037b4 <NRF24_WriteReg>
	// DelayMicro(5000);
	 HAL_Delay(5);
 80036ba:	2005      	movs	r0, #5
 80036bc:	f000 fae8 	bl	8003c90 <HAL_Delay>
//	osDelay(5);

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable pipe 0
 80036c0:	2101      	movs	r1, #1
 80036c2:	2001      	movs	r0, #1
 80036c4:	f000 f876 	bl	80037b4 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe 0				// включає канал
 80036c8:	2101      	movs	r1, #1
 80036ca:	2002      	movs	r0, #2
 80036cc:	f000 f872 	bl	80037b4 <NRF24_WriteReg>

	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 80036d0:	2101      	movs	r1, #1
 80036d2:	2003      	movs	r0, #3
 80036d4:	f000 f86e 	bl	80037b4 <NRF24_WriteReg>

//	uint8_t SETUP_RETR_data = (retrans_delay << 4) | (retransmit_attempt);
//	NRF24_WriteReg(SETUP_RETR, SETUP_RETR_data);		// 1500us, 15 retrans           0x7F
	NRF24_WriteReg(SETUP_RETR, 0x5F);
 80036d8:	215f      	movs	r1, #95	; 0x5f
 80036da:	2004      	movs	r0, #4
 80036dc:	f000 f86a 	bl	80037b4 <NRF24_WriteReg>

	NRF24_ToggleFeatures();
 80036e0:	f000 f896 	bl	8003810 <NRF24_ToggleFeatures>

	NRF24_WriteReg(FEATURE, 0);
 80036e4:	2100      	movs	r1, #0
 80036e6:	201d      	movs	r0, #29
 80036e8:	f000 f864 	bl	80037b4 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 80036ec:	2100      	movs	r1, #0
 80036ee:	201c      	movs	r0, #28
 80036f0:	f000 f860 	bl	80037b4 <NRF24_WriteReg>
	NRF24_WriteReg(STATUSS, 0x70);			// Reset flags for IRQ
 80036f4:	2170      	movs	r1, #112	; 0x70
 80036f6:	2007      	movs	r0, #7
 80036f8:	f000 f85c 	bl	80037b4 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76);
 80036fc:	214c      	movs	r1, #76	; 0x4c
 80036fe:	2005      	movs	r0, #5
 8003700:	f000 f858 	bl	80037b4 <NRF24_WriteReg>
//	NRF24_WriteReg(RF_CH, chanel); 			//  2400 + chanel MHz


	NRF24_WriteReg(RF_SETUP, data_rate|output_tx_power);  		// TX_PWR:0dBm, Datarate: 250kbp	- New version
 8003704:	7e3a      	ldrb	r2, [r7, #24]
 8003706:	7f3b      	ldrb	r3, [r7, #28]
 8003708:	4313      	orrs	r3, r2
 800370a:	b2db      	uxtb	r3, r3
 800370c:	4619      	mov	r1, r3
 800370e:	2006      	movs	r0, #6
 8003710:	f000 f850 	bl	80037b4 <NRF24_WriteReg>

	if(pipe == 0)
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10d      	bne.n	8003736 <NRF24_init_TX+0xbe>
	{
		NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);											// Write TX address
 800371a:	2203      	movs	r2, #3
 800371c:	490a      	ldr	r1, [pc, #40]	; (8003748 <NRF24_init_TX+0xd0>)
 800371e:	2010      	movs	r0, #16
 8003720:	f000 f8a0 	bl	8003864 <NRF24_Write_Buf>
		NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);											// Write RX address Pipe 0
 8003724:	2203      	movs	r2, #3
 8003726:	4908      	ldr	r1, [pc, #32]	; (8003748 <NRF24_init_TX+0xd0>)
 8003728:	200a      	movs	r0, #10
 800372a:	f000 f89b 	bl	8003864 <NRF24_Write_Buf>
		NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 													// Number of bytes in RX payload in data pipe 0
 800372e:	2120      	movs	r1, #32
 8003730:	2011      	movs	r0, #17
 8003732:	f000 f83f 	bl	80037b4 <NRF24_WriteReg>
//		NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_5, TX_ADR_WIDTH);											// Write RX address Pipe 0
//		NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 													// Number of bytes in RX payload in data pipe 0
//	}


	 NRF24L01_RX_Mode();
 8003736:	f000 f90b 	bl	8003950 <NRF24L01_RX_Mode>
	 //LED_OFF;
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	bd90      	pop	{r4, r7, pc}
 8003742:	bf00      	nop
 8003744:	40020000 	.word	0x40020000
 8003748:	20000004 	.word	0x20000004

0800374c <NRF24_ReadReg>:
// -------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af02      	add	r7, sp, #8
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
	uint8_t dt=0, cmd;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
	CS_ON;
 800375a:	2200      	movs	r2, #0
 800375c:	2110      	movs	r1, #16
 800375e:	4813      	ldr	r0, [pc, #76]	; (80037ac <NRF24_ReadReg+0x60>)
 8003760:	f001 fa82 	bl	8004c68 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi2, &addr, &dt, 1, 1000);
 8003764:	f107 020f 	add.w	r2, r7, #15
 8003768:	1df9      	adds	r1, r7, #7
 800376a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2301      	movs	r3, #1
 8003772:	480f      	ldr	r0, [pc, #60]	; (80037b0 <NRF24_ReadReg+0x64>)
 8003774:	f004 f8a7 	bl	80078c6 <HAL_SPI_TransmitReceive>

	if (addr != STATUSS)		//если адрес равен адрес регистра статус то и возварщаем его состояние
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	2b07      	cmp	r3, #7
 800377c:	d00c      	beq.n	8003798 <NRF24_ReadReg+0x4c>
	{
		cmd = 0xFF;
 800377e:	23ff      	movs	r3, #255	; 0xff
 8003780:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_TransmitReceive(&hspi2, &cmd, &dt, 1, 1000);
 8003782:	f107 020f 	add.w	r2, r7, #15
 8003786:	f107 010e 	add.w	r1, r7, #14
 800378a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	2301      	movs	r3, #1
 8003792:	4807      	ldr	r0, [pc, #28]	; (80037b0 <NRF24_ReadReg+0x64>)
 8003794:	f004 f897 	bl	80078c6 <HAL_SPI_TransmitReceive>
	}

	CS_OFF;
 8003798:	2201      	movs	r2, #1
 800379a:	2110      	movs	r1, #16
 800379c:	4803      	ldr	r0, [pc, #12]	; (80037ac <NRF24_ReadReg+0x60>)
 800379e:	f001 fa63 	bl	8004c68 <HAL_GPIO_WritePin>

	return dt;
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40020000 	.word	0x40020000
 80037b0:	200002b4 	.word	0x200002b4

080037b4 <NRF24_WriteReg>:
// -------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	460a      	mov	r2, r1
 80037be:	71fb      	strb	r3, [r7, #7]
 80037c0:	4613      	mov	r3, r2
 80037c2:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;//включим бит записи в адрес
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	f043 0320 	orr.w	r3, r3, #32
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 80037ce:	2200      	movs	r2, #0
 80037d0:	2110      	movs	r1, #16
 80037d2:	480d      	ldr	r0, [pc, #52]	; (8003808 <NRF24_WriteReg+0x54>)
 80037d4:	f001 fa48 	bl	8004c68 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);	//отправим адрес в шину
 80037d8:	1df9      	adds	r1, r7, #7
 80037da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037de:	2201      	movs	r2, #1
 80037e0:	480a      	ldr	r0, [pc, #40]	; (800380c <NRF24_WriteReg+0x58>)
 80037e2:	f003 ff34 	bl	800764e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&dt,1,1000);	//отправим данные в шину
 80037e6:	1db9      	adds	r1, r7, #6
 80037e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037ec:	2201      	movs	r2, #1
 80037ee:	4807      	ldr	r0, [pc, #28]	; (800380c <NRF24_WriteReg+0x58>)
 80037f0:	f003 ff2d 	bl	800764e <HAL_SPI_Transmit>

	CS_OFF;
 80037f4:	2201      	movs	r2, #1
 80037f6:	2110      	movs	r1, #16
 80037f8:	4803      	ldr	r0, [pc, #12]	; (8003808 <NRF24_WriteReg+0x54>)
 80037fa:	f001 fa35 	bl	8004c68 <HAL_GPIO_WritePin>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40020000 	.word	0x40020000
 800380c:	200002b4 	.word	0x200002b4

08003810 <NRF24_ToggleFeatures>:
// -------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {ACTIVATE};
 8003816:	2350      	movs	r3, #80	; 0x50
 8003818:	713b      	strb	r3, [r7, #4]

	CS_ON;
 800381a:	2200      	movs	r2, #0
 800381c:	2110      	movs	r1, #16
 800381e:	480f      	ldr	r0, [pc, #60]	; (800385c <NRF24_ToggleFeatures+0x4c>)
 8003820:	f001 fa22 	bl	8004c68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8003824:	1d39      	adds	r1, r7, #4
 8003826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800382a:	2201      	movs	r2, #1
 800382c:	480c      	ldr	r0, [pc, #48]	; (8003860 <NRF24_ToggleFeatures+0x50>)
 800382e:	f003 ff0e 	bl	800764e <HAL_SPI_Transmit>

	DelayMicro(1);
 8003832:	2001      	movs	r0, #1
 8003834:	f7ff feea 	bl	800360c <DelayMicro>

	dt[0] = 0x73;
 8003838:	2373      	movs	r3, #115	; 0x73
 800383a:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 800383c:	1d39      	adds	r1, r7, #4
 800383e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003842:	2201      	movs	r2, #1
 8003844:	4806      	ldr	r0, [pc, #24]	; (8003860 <NRF24_ToggleFeatures+0x50>)
 8003846:	f003 ff02 	bl	800764e <HAL_SPI_Transmit>
	CS_OFF;
 800384a:	2201      	movs	r2, #1
 800384c:	2110      	movs	r1, #16
 800384e:	4803      	ldr	r0, [pc, #12]	; (800385c <NRF24_ToggleFeatures+0x4c>)
 8003850:	f001 fa0a 	bl	8004c68 <HAL_GPIO_WritePin>
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40020000 	.word	0x40020000
 8003860:	200002b4 	.word	0x200002b4

08003864 <NRF24_Write_Buf>:

	CS_OFF;
}
// -------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	6039      	str	r1, [r7, #0]
 800386e:	71fb      	strb	r3, [r7, #7]
 8003870:	4613      	mov	r3, r2
 8003872:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;									//включим бит записи в адрес
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	f043 0320 	orr.w	r3, r3, #32
 800387a:	b2db      	uxtb	r3, r3
 800387c:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 800387e:	2200      	movs	r2, #0
 8003880:	2110      	movs	r1, #16
 8003882:	480f      	ldr	r0, [pc, #60]	; (80038c0 <NRF24_Write_Buf+0x5c>)
 8003884:	f001 f9f0 	bl	8004c68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 8003888:	1df9      	adds	r1, r7, #7
 800388a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800388e:	2201      	movs	r2, #1
 8003890:	480c      	ldr	r0, [pc, #48]	; (80038c4 <NRF24_Write_Buf+0x60>)
 8003892:	f003 fedc 	bl	800764e <HAL_SPI_Transmit>

	DelayMicro(1);
 8003896:	2001      	movs	r0, #1
 8003898:	f7ff feb8 	bl	800360c <DelayMicro>

	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 800389c:	79bb      	ldrb	r3, [r7, #6]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038a4:	6839      	ldr	r1, [r7, #0]
 80038a6:	4807      	ldr	r0, [pc, #28]	; (80038c4 <NRF24_Write_Buf+0x60>)
 80038a8:	f003 fed1 	bl	800764e <HAL_SPI_Transmit>

	CS_OFF;
 80038ac:	2201      	movs	r2, #1
 80038ae:	2110      	movs	r1, #16
 80038b0:	4803      	ldr	r0, [pc, #12]	; (80038c0 <NRF24_Write_Buf+0x5c>)
 80038b2:	f001 f9d9 	bl	8004c68 <HAL_GPIO_WritePin>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40020000 	.word	0x40020000
 80038c4:	200002b4 	.word	0x200002b4

080038c8 <NRF24_FlushRX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushRX(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_RX};
 80038ce:	23e2      	movs	r3, #226	; 0xe2
 80038d0:	713b      	strb	r3, [r7, #4]

	CS_ON;
 80038d2:	2200      	movs	r2, #0
 80038d4:	2110      	movs	r1, #16
 80038d6:	480b      	ldr	r0, [pc, #44]	; (8003904 <NRF24_FlushRX+0x3c>)
 80038d8:	f001 f9c6 	bl	8004c68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 80038dc:	1d39      	adds	r1, r7, #4
 80038de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038e2:	2201      	movs	r2, #1
 80038e4:	4808      	ldr	r0, [pc, #32]	; (8003908 <NRF24_FlushRX+0x40>)
 80038e6:	f003 feb2 	bl	800764e <HAL_SPI_Transmit>
	DelayMicro(1);
 80038ea:	2001      	movs	r0, #1
 80038ec:	f7ff fe8e 	bl	800360c <DelayMicro>
	CS_OFF;
 80038f0:	2201      	movs	r2, #1
 80038f2:	2110      	movs	r1, #16
 80038f4:	4803      	ldr	r0, [pc, #12]	; (8003904 <NRF24_FlushRX+0x3c>)
 80038f6:	f001 f9b7 	bl	8004c68 <HAL_GPIO_WritePin>
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40020000 	.word	0x40020000
 8003908:	200002b4 	.word	0x200002b4

0800390c <NRF24_FlushTX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushTX(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_TX};
 8003912:	23e1      	movs	r3, #225	; 0xe1
 8003914:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8003916:	2200      	movs	r2, #0
 8003918:	2110      	movs	r1, #16
 800391a:	480b      	ldr	r0, [pc, #44]	; (8003948 <NRF24_FlushTX+0x3c>)
 800391c:	f001 f9a4 	bl	8004c68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8003920:	1d39      	adds	r1, r7, #4
 8003922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003926:	2201      	movs	r2, #1
 8003928:	4808      	ldr	r0, [pc, #32]	; (800394c <NRF24_FlushTX+0x40>)
 800392a:	f003 fe90 	bl	800764e <HAL_SPI_Transmit>
	DelayMicro(1);
 800392e:	2001      	movs	r0, #1
 8003930:	f7ff fe6c 	bl	800360c <DelayMicro>
	CS_OFF;
 8003934:	2201      	movs	r2, #1
 8003936:	2110      	movs	r1, #16
 8003938:	4803      	ldr	r0, [pc, #12]	; (8003948 <NRF24_FlushTX+0x3c>)
 800393a:	f001 f995 	bl	8004c68 <HAL_GPIO_WritePin>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40020000 	.word	0x40020000
 800394c:	200002b4 	.word	0x200002b4

08003950 <NRF24L01_RX_Mode>:
// -------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
	uint8_t regval=0x00;
 8003956:	2300      	movs	r3, #0
 8003958:	71fb      	strb	r3, [r7, #7]
	regval = NRF24_ReadReg(CONFIG);
 800395a:	2000      	movs	r0, #0
 800395c:	f7ff fef6 	bl	800374c <NRF24_ReadReg>
 8003960:	4603      	mov	r3, r0
 8003962:	71fb      	strb	r3, [r7, #7]

	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	f043 0303 	orr.w	r3, r3, #3
 800396a:	71fb      	strb	r3, [r7, #7]

	NRF24_WriteReg(CONFIG, regval);
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	4619      	mov	r1, r3
 8003970:	2000      	movs	r0, #0
 8003972:	f7ff ff1f 	bl	80037b4 <NRF24_WriteReg>
	CE_SET;
 8003976:	2201      	movs	r2, #1
 8003978:	2108      	movs	r1, #8
 800397a:	4807      	ldr	r0, [pc, #28]	; (8003998 <NRF24L01_RX_Mode+0x48>)
 800397c:	f001 f974 	bl	8004c68 <HAL_GPIO_WritePin>

	DelayMicro(150);
 8003980:	2096      	movs	r0, #150	; 0x96
 8003982:	f7ff fe43 	bl	800360c <DelayMicro>

	// Flush buffers
	NRF24_FlushRX();
 8003986:	f7ff ff9f 	bl	80038c8 <NRF24_FlushRX>
	NRF24_FlushTX();
 800398a:	f7ff ffbf 	bl	800390c <NRF24_FlushTX>
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40020000 	.word	0x40020000

0800399c <NRF24L01_TX_Mode>:
	//HAL_GPIO_TogglePin(GPIOC, LED_Pin);
	DelayMicro(1000);
}
// -------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 80039a0:	2203      	movs	r2, #3
 80039a2:	4907      	ldr	r1, [pc, #28]	; (80039c0 <NRF24L01_TX_Mode+0x24>)
 80039a4:	2010      	movs	r0, #16
 80039a6:	f7ff ff5d 	bl	8003864 <NRF24_Write_Buf>
	CE_RESET;
 80039aa:	2200      	movs	r2, #0
 80039ac:	2108      	movs	r1, #8
 80039ae:	4805      	ldr	r0, [pc, #20]	; (80039c4 <NRF24L01_TX_Mode+0x28>)
 80039b0:	f001 f95a 	bl	8004c68 <HAL_GPIO_WritePin>

	// Flush buffers
	NRF24_FlushRX();
 80039b4:	f7ff ff88 	bl	80038c8 <NRF24_FlushRX>
	NRF24_FlushTX();
 80039b8:	f7ff ffa8 	bl	800390c <NRF24_FlushTX>
}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000004 	.word	0x20000004
 80039c4:	40020000 	.word	0x40020000

080039c8 <NRF24_Transmit>:
// -------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	6039      	str	r1, [r7, #0]
 80039d2:	71fb      	strb	r3, [r7, #7]
 80039d4:	4613      	mov	r3, r2
 80039d6:	71bb      	strb	r3, [r7, #6]
	CE_RESET;
 80039d8:	2200      	movs	r2, #0
 80039da:	2108      	movs	r1, #8
 80039dc:	4813      	ldr	r0, [pc, #76]	; (8003a2c <NRF24_Transmit+0x64>)
 80039de:	f001 f943 	bl	8004c68 <HAL_GPIO_WritePin>
	CS_ON;
 80039e2:	2200      	movs	r2, #0
 80039e4:	2110      	movs	r1, #16
 80039e6:	4811      	ldr	r0, [pc, #68]	; (8003a2c <NRF24_Transmit+0x64>)
 80039e8:	f001 f93e 	bl	8004c68 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);			// Send address in buss
 80039ec:	1df9      	adds	r1, r7, #7
 80039ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039f2:	2201      	movs	r2, #1
 80039f4:	480e      	ldr	r0, [pc, #56]	; (8003a30 <NRF24_Transmit+0x68>)
 80039f6:	f003 fe2a 	bl	800764e <HAL_SPI_Transmit>
	DelayMicro(1);
 80039fa:	2001      	movs	r0, #1
 80039fc:	f7ff fe06 	bl	800360c <DelayMicro>
	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);		// Send data in buss
 8003a00:	79bb      	ldrb	r3, [r7, #6]
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a08:	6839      	ldr	r1, [r7, #0]
 8003a0a:	4809      	ldr	r0, [pc, #36]	; (8003a30 <NRF24_Transmit+0x68>)
 8003a0c:	f003 fe1f 	bl	800764e <HAL_SPI_Transmit>

	CS_OFF;
 8003a10:	2201      	movs	r2, #1
 8003a12:	2110      	movs	r1, #16
 8003a14:	4805      	ldr	r0, [pc, #20]	; (8003a2c <NRF24_Transmit+0x64>)
 8003a16:	f001 f927 	bl	8004c68 <HAL_GPIO_WritePin>
	CE_SET;
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	2108      	movs	r1, #8
 8003a1e:	4803      	ldr	r0, [pc, #12]	; (8003a2c <NRF24_Transmit+0x64>)
 8003a20:	f001 f922 	bl	8004c68 <HAL_GPIO_WritePin>
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40020000 	.word	0x40020000
 8003a30:	200002b4 	.word	0x200002b4

08003a34 <NRF24L01_Send>:
// -------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	uint8_t status=0x00, regval=0x00;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	73fb      	strb	r3, [r7, #15]
 8003a40:	2300      	movs	r3, #0
 8003a42:	73bb      	strb	r3, [r7, #14]

	NRF24L01_TX_Mode();
 8003a44:	f7ff ffaa 	bl	800399c <NRF24L01_TX_Mode>
	regval = NRF24_ReadReg(CONFIG);
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f7ff fe7f 	bl	800374c <NRF24_ReadReg>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	73bb      	strb	r3, [r7, #14]
	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);
 8003a52:	7bbb      	ldrb	r3, [r7, #14]
 8003a54:	f043 0302 	orr.w	r3, r3, #2
 8003a58:	73bb      	strb	r3, [r7, #14]
	regval &= ~(1<<PRIM_RX);
 8003a5a:	7bbb      	ldrb	r3, [r7, #14]
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	73bb      	strb	r3, [r7, #14]
	NRF24_WriteReg(CONFIG,regval);
 8003a62:	7bbb      	ldrb	r3, [r7, #14]
 8003a64:	4619      	mov	r1, r3
 8003a66:	2000      	movs	r0, #0
 8003a68:	f7ff fea4 	bl	80037b4 <NRF24_WriteReg>
	DelayMicro(150); //Задержка минимум 130 мкс
 8003a6c:	2096      	movs	r0, #150	; 0x96
 8003a6e:	f7ff fdcd 	bl	800360c <DelayMicro>

	//Отправим данные в воздух
	NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);
 8003a72:	2220      	movs	r2, #32
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	20a0      	movs	r0, #160	; 0xa0
 8003a78:	f7ff ffa6 	bl	80039c8 <NRF24_Transmit>
	CE_SET;
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	2108      	movs	r1, #8
 8003a80:	481c      	ldr	r0, [pc, #112]	; (8003af4 <NRF24L01_Send+0xc0>)
 8003a82:	f001 f8f1 	bl	8004c68 <HAL_GPIO_WritePin>
	DelayMicro(15); //minimum 10us high pulse (Page 21)
 8003a86:	200f      	movs	r0, #15
 8003a88:	f7ff fdc0 	bl	800360c <DelayMicro>
	CE_RESET;
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2108      	movs	r1, #8
 8003a90:	4818      	ldr	r0, [pc, #96]	; (8003af4 <NRF24L01_Send+0xc0>)
 8003a92:	f001 f8e9 	bl	8004c68 <HAL_GPIO_WritePin>

	while((GPIO_PinState)IRQ == GPIO_PIN_SET) {}
 8003a96:	bf00      	nop
 8003a98:	2104      	movs	r1, #4
 8003a9a:	4816      	ldr	r0, [pc, #88]	; (8003af4 <NRF24L01_Send+0xc0>)
 8003a9c:	f001 f8cc 	bl	8004c38 <HAL_GPIO_ReadPin>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d0f8      	beq.n	8003a98 <NRF24L01_Send+0x64>
	status = NRF24_ReadReg(STATUSS);
 8003aa6:	2007      	movs	r0, #7
 8003aa8:	f7ff fe50 	bl	800374c <NRF24_ReadReg>
 8003aac:	4603      	mov	r3, r0
 8003aae:	73fb      	strb	r3, [r7, #15]
	if(status&TX_DS) //tx_ds == 0x20
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d004      	beq.n	8003ac4 <NRF24L01_Send+0x90>
	{
		// LED_TGL;										 <<<<<<<<<<<< LED
	    NRF24_WriteReg(STATUSS, 0x20);
 8003aba:	2120      	movs	r1, #32
 8003abc:	2007      	movs	r0, #7
 8003abe:	f7ff fe79 	bl	80037b4 <NRF24_WriteReg>
 8003ac2:	e00a      	b.n	8003ada <NRF24L01_Send+0xa6>
	}
	else if(status&MAX_RT)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <NRF24L01_Send+0xa6>
	{
		NRF24_WriteReg(STATUSS, 0x10);
 8003ace:	2110      	movs	r1, #16
 8003ad0:	2007      	movs	r0, #7
 8003ad2:	f7ff fe6f 	bl	80037b4 <NRF24_WriteReg>
		NRF24_FlushTX();
 8003ad6:	f7ff ff19 	bl	800390c <NRF24_FlushTX>
	}

	regval = NRF24_ReadReg(OBSERVE_TX);
 8003ada:	2008      	movs	r0, #8
 8003adc:	f7ff fe36 	bl	800374c <NRF24_ReadReg>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	73bb      	strb	r3, [r7, #14]

	//Уходим в режим приёмника
	NRF24L01_RX_Mode();
 8003ae4:	f7ff ff34 	bl	8003950 <NRF24L01_RX_Mode>

	return regval;
 8003ae8:	7bbb      	ldrb	r3, [r7, #14]


}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40020000 	.word	0x40020000

08003af8 <NRF24L01_Transmit>:
// -------------------------------------------------------------------------------------
uint8_t NRF24L01_Transmit(uint8_t *pipe_address, char *data[])
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b094      	sub	sp, #80	; 0x50
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
	uint8_t regval = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	regval = NRF24L01_Send(data);
 8003b08:	6838      	ldr	r0, [r7, #0]
 8003b0a:	f7ff ff93 	bl	8003a34 <NRF24L01_Send>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	char buf_uart_tx[70] = {0,};
 8003b14:	2300      	movs	r3, #0
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	f107 030c 	add.w	r3, r7, #12
 8003b1c:	2242      	movs	r2, #66	; 0x42
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4618      	mov	r0, r3
 8003b22:	f005 fb46 	bl	80091b2 <memset>
	sprintf(buf_uart_tx, "TX data: %s \n\r", data);
 8003b26:	f107 0308 	add.w	r3, r7, #8
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	4908      	ldr	r1, [pc, #32]	; (8003b50 <NRF24L01_Transmit+0x58>)
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f005 fadc 	bl	80090ec <siprintf>

	HAL_UART_Transmit(&huart1, buf_uart_tx, sizeof(buf_uart_tx), 1000);
 8003b34:	f107 0108 	add.w	r1, r7, #8
 8003b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b3c:	2246      	movs	r2, #70	; 0x46
 8003b3e:	4805      	ldr	r0, [pc, #20]	; (8003b54 <NRF24L01_Transmit+0x5c>)
 8003b40:	f004 f97b 	bl	8007e3a <HAL_UART_Transmit>

	return regval;
 8003b44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3750      	adds	r7, #80	; 0x50
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	0800b360 	.word	0x0800b360
 8003b54:	2000030c 	.word	0x2000030c

08003b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b5c:	480d      	ldr	r0, [pc, #52]	; (8003b94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b5e:	490e      	ldr	r1, [pc, #56]	; (8003b98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b60:	4a0e      	ldr	r2, [pc, #56]	; (8003b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b64:	e002      	b.n	8003b6c <LoopCopyDataInit>

08003b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b6a:	3304      	adds	r3, #4

08003b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b70:	d3f9      	bcc.n	8003b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b72:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b74:	4c0b      	ldr	r4, [pc, #44]	; (8003ba4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b78:	e001      	b.n	8003b7e <LoopFillZerobss>

08003b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b7c:	3204      	adds	r2, #4

08003b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b80:	d3fb      	bcc.n	8003b7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b82:	f7ff fd31 	bl	80035e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b86:	f005 fb8b 	bl	80092a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b8a:	f7fe fec9 	bl	8002920 <main>
  bx  lr    
 8003b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b98:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003b9c:	0800b714 	.word	0x0800b714
  ldr r2, =_sbss
 8003ba0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003ba4:	200004fc 	.word	0x200004fc

08003ba8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ba8:	e7fe      	b.n	8003ba8 <DMA1_Stream0_IRQHandler>
	...

08003bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bb0:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <HAL_Init+0x40>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a0d      	ldr	r2, [pc, #52]	; (8003bec <HAL_Init+0x40>)
 8003bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_Init+0x40>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <HAL_Init+0x40>)
 8003bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bc8:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_Init+0x40>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a07      	ldr	r2, [pc, #28]	; (8003bec <HAL_Init+0x40>)
 8003bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bd4:	2003      	movs	r0, #3
 8003bd6:	f000 fe69 	bl	80048ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bda:	200f      	movs	r0, #15
 8003bdc:	f000 f808 	bl	8003bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003be0:	f7ff fa88 	bl	80030f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40023c00 	.word	0x40023c00

08003bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bf8:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <HAL_InitTick+0x54>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <HAL_InitTick+0x58>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	4619      	mov	r1, r3
 8003c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fe81 	bl	8004916 <HAL_SYSTICK_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e00e      	b.n	8003c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b0f      	cmp	r3, #15
 8003c22:	d80a      	bhi.n	8003c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c24:	2200      	movs	r2, #0
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2c:	f000 fe49 	bl	80048c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c30:	4a06      	ldr	r2, [pc, #24]	; (8003c4c <HAL_InitTick+0x5c>)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e000      	b.n	8003c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20000000 	.word	0x20000000
 8003c48:	2000000c 	.word	0x2000000c
 8003c4c:	20000008 	.word	0x20000008

08003c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_IncTick+0x20>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_IncTick+0x24>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4413      	add	r3, r2
 8003c60:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <HAL_IncTick+0x24>)
 8003c62:	6013      	str	r3, [r2, #0]
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	2000000c 	.word	0x2000000c
 8003c74:	200003ac 	.word	0x200003ac

08003c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <HAL_GetTick+0x14>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	200003ac 	.word	0x200003ac

08003c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c98:	f7ff ffee 	bl	8003c78 <HAL_GetTick>
 8003c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d005      	beq.n	8003cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <HAL_Delay+0x44>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cb6:	bf00      	nop
 8003cb8:	f7ff ffde 	bl	8003c78 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d8f7      	bhi.n	8003cb8 <HAL_Delay+0x28>
  {
  }
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	2000000c 	.word	0x2000000c

08003cd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e033      	b.n	8003d56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff fa24 	bl	8003144 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d118      	bne.n	8003d48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d1e:	f023 0302 	bic.w	r3, r3, #2
 8003d22:	f043 0202 	orr.w	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fbe8 	bl	8004500 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f023 0303 	bic.w	r3, r3, #3
 8003d3e:	f043 0201 	orr.w	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40
 8003d46:	e001      	b.n	8003d4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_Start+0x1a>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e097      	b.n	8003eaa <HAL_ADC_Start+0x14a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d018      	beq.n	8003dc2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003da0:	4b45      	ldr	r3, [pc, #276]	; (8003eb8 <HAL_ADC_Start+0x158>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a45      	ldr	r2, [pc, #276]	; (8003ebc <HAL_ADC_Start+0x15c>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	0c9a      	lsrs	r2, r3, #18
 8003dac:	4613      	mov	r3, r2
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	4413      	add	r3, r2
 8003db2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003db4:	e002      	b.n	8003dbc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f9      	bne.n	8003db6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d15f      	bne.n	8003e90 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0e:	d106      	bne.n	8003e1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e14:	f023 0206 	bic.w	r2, r3, #6
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	645a      	str	r2, [r3, #68]	; 0x44
 8003e1c:	e002      	b.n	8003e24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e2c:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <HAL_ADC_Start+0x160>)
 8003e2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e38:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10f      	bne.n	8003e66 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d129      	bne.n	8003ea8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	e020      	b.n	8003ea8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a16      	ldr	r2, [pc, #88]	; (8003ec4 <HAL_ADC_Start+0x164>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d11b      	bne.n	8003ea8 <HAL_ADC_Start+0x148>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d114      	bne.n	8003ea8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e8c:	609a      	str	r2, [r3, #8]
 8003e8e:	e00b      	b.n	8003ea8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f043 0210 	orr.w	r2, r3, #16
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea0:	f043 0201 	orr.w	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000000 	.word	0x20000000
 8003ebc:	431bde83 	.word	0x431bde83
 8003ec0:	40012300 	.word	0x40012300
 8003ec4:	40012000 	.word	0x40012000

08003ec8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_ADC_Stop+0x16>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e021      	b.n	8003f22 <HAL_ADC_Stop+0x5a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d109      	bne.n	8003f18 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	f043 0201 	orr.w	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4a:	d113      	bne.n	8003f74 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5a:	d10b      	bne.n	8003f74 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	f043 0220 	orr.w	r2, r3, #32
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e063      	b.n	800403c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003f74:	f7ff fe80 	bl	8003c78 <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f7a:	e021      	b.n	8003fc0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f82:	d01d      	beq.n	8003fc0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <HAL_ADC_PollForConversion+0x6c>
 8003f8a:	f7ff fe75 	bl	8003c78 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d212      	bcs.n	8003fc0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	f043 0204 	orr.w	r2, r3, #4
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e03d      	b.n	800403c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d1d6      	bne.n	8003f7c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f06f 0212 	mvn.w	r2, #18
 8003fd6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d123      	bne.n	800403a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d11f      	bne.n	800403a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004004:	2b00      	cmp	r3, #0
 8004006:	d006      	beq.n	8004016 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004012:	2b00      	cmp	r3, #0
 8004014:	d111      	bne.n	800403a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d105      	bne.n	800403a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f043 0201 	orr.w	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d049      	beq.n	800410e <HAL_ADC_IRQHandler+0xca>
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d046      	beq.n	800410e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	d105      	bne.n	8004098 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d12b      	bne.n	80040fe <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d127      	bne.n	80040fe <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d006      	beq.n	80040ca <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d119      	bne.n	80040fe <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0220 	bic.w	r2, r2, #32
 80040d8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d105      	bne.n	80040fe <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f043 0201 	orr.w	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f8bd 	bl	800427e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0212 	mvn.w	r2, #18
 800410c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d057      	beq.n	80041d4 <HAL_ADC_IRQHandler+0x190>
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d054      	beq.n	80041d4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b00      	cmp	r3, #0
 8004134:	d105      	bne.n	8004142 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d139      	bne.n	80041c4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004156:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800415a:	2b00      	cmp	r3, #0
 800415c:	d006      	beq.n	800416c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004168:	2b00      	cmp	r3, #0
 800416a:	d12b      	bne.n	80041c4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004176:	2b00      	cmp	r3, #0
 8004178:	d124      	bne.n	80041c4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004184:	2b00      	cmp	r3, #0
 8004186:	d11d      	bne.n	80041c4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800418c:	2b00      	cmp	r3, #0
 800418e:	d119      	bne.n	80041c4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800419e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fa97 	bl	80046f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f06f 020c 	mvn.w	r2, #12
 80041d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d017      	beq.n	800421a <HAL_ADC_IRQHandler+0x1d6>
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d014      	beq.n	800421a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d10d      	bne.n	800421a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f841 	bl	8004292 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0201 	mvn.w	r2, #1
 8004218:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004228:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d015      	beq.n	800425c <HAL_ADC_IRQHandler+0x218>
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d012      	beq.n	800425c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f043 0202 	orr.w	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f06f 0220 	mvn.w	r2, #32
 800424a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f82a 	bl	80042a6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f06f 0220 	mvn.w	r2, #32
 800425a:	601a      	str	r2, [r3, #0]
  }
}
 800425c:	bf00      	nop
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x1c>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e105      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x228>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b09      	cmp	r3, #9
 80042e6:	d925      	bls.n	8004334 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68d9      	ldr	r1, [r3, #12]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	4613      	mov	r3, r2
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	4413      	add	r3, r2
 80042fc:	3b1e      	subs	r3, #30
 80042fe:	2207      	movs	r2, #7
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43da      	mvns	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	400a      	ands	r2, r1
 800430c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68d9      	ldr	r1, [r3, #12]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	b29b      	uxth	r3, r3
 800431e:	4618      	mov	r0, r3
 8004320:	4603      	mov	r3, r0
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	4403      	add	r3, r0
 8004326:	3b1e      	subs	r3, #30
 8004328:	409a      	lsls	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	60da      	str	r2, [r3, #12]
 8004332:	e022      	b.n	800437a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6919      	ldr	r1, [r3, #16]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	b29b      	uxth	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	4613      	mov	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4413      	add	r3, r2
 8004348:	2207      	movs	r2, #7
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43da      	mvns	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	400a      	ands	r2, r1
 8004356:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6919      	ldr	r1, [r3, #16]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	b29b      	uxth	r3, r3
 8004368:	4618      	mov	r0, r3
 800436a:	4603      	mov	r3, r0
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4403      	add	r3, r0
 8004370:	409a      	lsls	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b06      	cmp	r3, #6
 8004380:	d824      	bhi.n	80043cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	3b05      	subs	r3, #5
 8004394:	221f      	movs	r2, #31
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43da      	mvns	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	400a      	ands	r2, r1
 80043a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	4618      	mov	r0, r3
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	3b05      	subs	r3, #5
 80043be:	fa00 f203 	lsl.w	r2, r0, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	635a      	str	r2, [r3, #52]	; 0x34
 80043ca:	e04c      	b.n	8004466 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	d824      	bhi.n	800441e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	3b23      	subs	r3, #35	; 0x23
 80043e6:	221f      	movs	r2, #31
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43da      	mvns	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	400a      	ands	r2, r1
 80043f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	b29b      	uxth	r3, r3
 8004402:	4618      	mov	r0, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	3b23      	subs	r3, #35	; 0x23
 8004410:	fa00 f203 	lsl.w	r2, r0, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
 800441c:	e023      	b.n	8004466 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	3b41      	subs	r3, #65	; 0x41
 8004430:	221f      	movs	r2, #31
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	43da      	mvns	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	400a      	ands	r2, r1
 800443e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	4618      	mov	r0, r3
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	3b41      	subs	r3, #65	; 0x41
 800445a:	fa00 f203 	lsl.w	r2, r0, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004466:	4b22      	ldr	r3, [pc, #136]	; (80044f0 <HAL_ADC_ConfigChannel+0x234>)
 8004468:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a21      	ldr	r2, [pc, #132]	; (80044f4 <HAL_ADC_ConfigChannel+0x238>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d109      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x1cc>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b12      	cmp	r3, #18
 800447a:	d105      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <HAL_ADC_ConfigChannel+0x238>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d123      	bne.n	80044da <HAL_ADC_ConfigChannel+0x21e>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b10      	cmp	r3, #16
 8004498:	d003      	beq.n	80044a2 <HAL_ADC_ConfigChannel+0x1e6>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b11      	cmp	r3, #17
 80044a0:	d11b      	bne.n	80044da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d111      	bne.n	80044da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <HAL_ADC_ConfigChannel+0x23c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a10      	ldr	r2, [pc, #64]	; (80044fc <HAL_ADC_ConfigChannel+0x240>)
 80044bc:	fba2 2303 	umull	r2, r3, r2, r3
 80044c0:	0c9a      	lsrs	r2, r3, #18
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044cc:	e002      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	3b01      	subs	r3, #1
 80044d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f9      	bne.n	80044ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	40012300 	.word	0x40012300
 80044f4:	40012000 	.word	0x40012000
 80044f8:	20000000 	.word	0x20000000
 80044fc:	431bde83 	.word	0x431bde83

08004500 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004508:	4b79      	ldr	r3, [pc, #484]	; (80046f0 <ADC_Init+0x1f0>)
 800450a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	431a      	orrs	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6859      	ldr	r1, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	021a      	lsls	r2, r3, #8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800457a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6899      	ldr	r1, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	4a58      	ldr	r2, [pc, #352]	; (80046f4 <ADC_Init+0x1f4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d022      	beq.n	80045de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6899      	ldr	r1, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6899      	ldr	r1, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	e00f      	b.n	80045fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0202 	bic.w	r2, r2, #2
 800460c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6899      	ldr	r1, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	7e1b      	ldrb	r3, [r3, #24]
 8004618:	005a      	lsls	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01b      	beq.n	8004664 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800463a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800464a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	3b01      	subs	r3, #1
 8004658:	035a      	lsls	r2, r3, #13
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
 8004662:	e007      	b.n	8004674 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004672:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	3b01      	subs	r3, #1
 8004690:	051a      	lsls	r2, r3, #20
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6899      	ldr	r1, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046b6:	025a      	lsls	r2, r3, #9
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6899      	ldr	r1, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	029a      	lsls	r2, r3, #10
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	40012300 	.word	0x40012300
 80046f4:	0f000001 	.word	0x0f000001

080046f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800471c:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <__NVIC_SetPriorityGrouping+0x44>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004728:	4013      	ands	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800473c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800473e:	4a04      	ldr	r2, [pc, #16]	; (8004750 <__NVIC_SetPriorityGrouping+0x44>)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	60d3      	str	r3, [r2, #12]
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	e000ed00 	.word	0xe000ed00

08004754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004758:	4b04      	ldr	r3, [pc, #16]	; (800476c <__NVIC_GetPriorityGrouping+0x18>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	0a1b      	lsrs	r3, r3, #8
 800475e:	f003 0307 	and.w	r3, r3, #7
}
 8004762:	4618      	mov	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	e000ed00 	.word	0xe000ed00

08004770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800477a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477e:	2b00      	cmp	r3, #0
 8004780:	db0b      	blt.n	800479a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	f003 021f 	and.w	r2, r3, #31
 8004788:	4907      	ldr	r1, [pc, #28]	; (80047a8 <__NVIC_EnableIRQ+0x38>)
 800478a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	2001      	movs	r0, #1
 8004792:	fa00 f202 	lsl.w	r2, r0, r2
 8004796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	e000e100 	.word	0xe000e100

080047ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	6039      	str	r1, [r7, #0]
 80047b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	db0a      	blt.n	80047d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	490c      	ldr	r1, [pc, #48]	; (80047f8 <__NVIC_SetPriority+0x4c>)
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	0112      	lsls	r2, r2, #4
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	440b      	add	r3, r1
 80047d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047d4:	e00a      	b.n	80047ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	4908      	ldr	r1, [pc, #32]	; (80047fc <__NVIC_SetPriority+0x50>)
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	3b04      	subs	r3, #4
 80047e4:	0112      	lsls	r2, r2, #4
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	440b      	add	r3, r1
 80047ea:	761a      	strb	r2, [r3, #24]
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	e000e100 	.word	0xe000e100
 80047fc:	e000ed00 	.word	0xe000ed00

08004800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004800:	b480      	push	{r7}
 8004802:	b089      	sub	sp, #36	; 0x24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f1c3 0307 	rsb	r3, r3, #7
 800481a:	2b04      	cmp	r3, #4
 800481c:	bf28      	it	cs
 800481e:	2304      	movcs	r3, #4
 8004820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3304      	adds	r3, #4
 8004826:	2b06      	cmp	r3, #6
 8004828:	d902      	bls.n	8004830 <NVIC_EncodePriority+0x30>
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	3b03      	subs	r3, #3
 800482e:	e000      	b.n	8004832 <NVIC_EncodePriority+0x32>
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004834:	f04f 32ff 	mov.w	r2, #4294967295
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43da      	mvns	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	401a      	ands	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004848:	f04f 31ff 	mov.w	r1, #4294967295
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	fa01 f303 	lsl.w	r3, r1, r3
 8004852:	43d9      	mvns	r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004858:	4313      	orrs	r3, r2
         );
}
 800485a:	4618      	mov	r0, r3
 800485c:	3724      	adds	r7, #36	; 0x24
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3b01      	subs	r3, #1
 8004874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004878:	d301      	bcc.n	800487e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800487a:	2301      	movs	r3, #1
 800487c:	e00f      	b.n	800489e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800487e:	4a0a      	ldr	r2, [pc, #40]	; (80048a8 <SysTick_Config+0x40>)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3b01      	subs	r3, #1
 8004884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004886:	210f      	movs	r1, #15
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	f7ff ff8e 	bl	80047ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <SysTick_Config+0x40>)
 8004892:	2200      	movs	r2, #0
 8004894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004896:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <SysTick_Config+0x40>)
 8004898:	2207      	movs	r2, #7
 800489a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	e000e010 	.word	0xe000e010

080048ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff ff29 	bl	800470c <__NVIC_SetPriorityGrouping>
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b086      	sub	sp, #24
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	4603      	mov	r3, r0
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048d4:	f7ff ff3e 	bl	8004754 <__NVIC_GetPriorityGrouping>
 80048d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	6978      	ldr	r0, [r7, #20]
 80048e0:	f7ff ff8e 	bl	8004800 <NVIC_EncodePriority>
 80048e4:	4602      	mov	r2, r0
 80048e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff ff5d 	bl	80047ac <__NVIC_SetPriority>
}
 80048f2:	bf00      	nop
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	4603      	mov	r3, r0
 8004902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff ff31 	bl	8004770 <__NVIC_EnableIRQ>
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ffa2 	bl	8004868 <SysTick_Config>
 8004924:	4603      	mov	r3, r0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	; 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004942:	2300      	movs	r3, #0
 8004944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	e159      	b.n	8004c00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800494c:	2201      	movs	r2, #1
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4013      	ands	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	429a      	cmp	r2, r3
 8004966:	f040 8148 	bne.w	8004bfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d005      	beq.n	8004982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800497e:	2b02      	cmp	r3, #2
 8004980:	d130      	bne.n	80049e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	2203      	movs	r2, #3
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049b8:	2201      	movs	r2, #1
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 0201 	and.w	r2, r3, #1
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d017      	beq.n	8004a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	2203      	movs	r2, #3
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d123      	bne.n	8004a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	08da      	lsrs	r2, r3, #3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3208      	adds	r2, #8
 8004a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	220f      	movs	r2, #15
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	08da      	lsrs	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3208      	adds	r2, #8
 8004a6e:	69b9      	ldr	r1, [r7, #24]
 8004a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	2203      	movs	r2, #3
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	43db      	mvns	r3, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 0203 	and.w	r2, r3, #3
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80a2 	beq.w	8004bfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	4b57      	ldr	r3, [pc, #348]	; (8004c18 <HAL_GPIO_Init+0x2e8>)
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	4a56      	ldr	r2, [pc, #344]	; (8004c18 <HAL_GPIO_Init+0x2e8>)
 8004ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ac6:	4b54      	ldr	r3, [pc, #336]	; (8004c18 <HAL_GPIO_Init+0x2e8>)
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ad2:	4a52      	ldr	r2, [pc, #328]	; (8004c1c <HAL_GPIO_Init+0x2ec>)
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	3302      	adds	r3, #2
 8004ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	220f      	movs	r2, #15
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a49      	ldr	r2, [pc, #292]	; (8004c20 <HAL_GPIO_Init+0x2f0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d019      	beq.n	8004b32 <HAL_GPIO_Init+0x202>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a48      	ldr	r2, [pc, #288]	; (8004c24 <HAL_GPIO_Init+0x2f4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <HAL_GPIO_Init+0x1fe>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a47      	ldr	r2, [pc, #284]	; (8004c28 <HAL_GPIO_Init+0x2f8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00d      	beq.n	8004b2a <HAL_GPIO_Init+0x1fa>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a46      	ldr	r2, [pc, #280]	; (8004c2c <HAL_GPIO_Init+0x2fc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <HAL_GPIO_Init+0x1f6>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a45      	ldr	r2, [pc, #276]	; (8004c30 <HAL_GPIO_Init+0x300>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d101      	bne.n	8004b22 <HAL_GPIO_Init+0x1f2>
 8004b1e:	2304      	movs	r3, #4
 8004b20:	e008      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b22:	2307      	movs	r3, #7
 8004b24:	e006      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b26:	2303      	movs	r3, #3
 8004b28:	e004      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e002      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b32:	2300      	movs	r3, #0
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	f002 0203 	and.w	r2, r2, #3
 8004b3a:	0092      	lsls	r2, r2, #2
 8004b3c:	4093      	lsls	r3, r2
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b44:	4935      	ldr	r1, [pc, #212]	; (8004c1c <HAL_GPIO_Init+0x2ec>)
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b52:	4b38      	ldr	r3, [pc, #224]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b76:	4a2f      	ldr	r2, [pc, #188]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b7c:	4b2d      	ldr	r3, [pc, #180]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	43db      	mvns	r3, r3
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ba0:	4a24      	ldr	r2, [pc, #144]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ba6:	4b23      	ldr	r3, [pc, #140]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bca:	4a1a      	ldr	r2, [pc, #104]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bd0:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bf4:	4a0f      	ldr	r2, [pc, #60]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b0f      	cmp	r3, #15
 8004c04:	f67f aea2 	bls.w	800494c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	3724      	adds	r7, #36	; 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40013800 	.word	0x40013800
 8004c20:	40020000 	.word	0x40020000
 8004c24:	40020400 	.word	0x40020400
 8004c28:	40020800 	.word	0x40020800
 8004c2c:	40020c00 	.word	0x40020c00
 8004c30:	40021000 	.word	0x40021000
 8004c34:	40013c00 	.word	0x40013c00

08004c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	887b      	ldrh	r3, [r7, #2]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
 8004c54:	e001      	b.n	8004c5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c56:	2300      	movs	r3, #0
 8004c58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	807b      	strh	r3, [r7, #2]
 8004c74:	4613      	mov	r3, r2
 8004c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c78:	787b      	ldrb	r3, [r7, #1]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c7e:	887a      	ldrh	r2, [r7, #2]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c84:	e003      	b.n	8004c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c86:	887b      	ldrh	r3, [r7, #2]
 8004c88:	041a      	lsls	r2, r3, #16
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	619a      	str	r2, [r3, #24]
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b085      	sub	sp, #20
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cac:	887a      	ldrh	r2, [r7, #2]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	041a      	lsls	r2, r3, #16
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	43d9      	mvns	r1, r3
 8004cb8:	887b      	ldrh	r3, [r7, #2]
 8004cba:	400b      	ands	r3, r1
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	619a      	str	r2, [r3, #24]
}
 8004cc2:	bf00      	nop
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004cda:	4b08      	ldr	r3, [pc, #32]	; (8004cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cdc:	695a      	ldr	r2, [r3, #20]
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d006      	beq.n	8004cf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ce6:	4a05      	ldr	r2, [pc, #20]	; (8004cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f806 	bl	8004d00 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40013c00 	.word	0x40013c00

08004d00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	4603      	mov	r3, r0
 8004d08:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e12b      	b.n	8004f82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fe fa4c 	bl	80031dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2224      	movs	r2, #36	; 0x24
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0201 	bic.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d7c:	f001 fede 	bl	8006b3c <HAL_RCC_GetPCLK1Freq>
 8004d80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	4a81      	ldr	r2, [pc, #516]	; (8004f8c <HAL_I2C_Init+0x274>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d807      	bhi.n	8004d9c <HAL_I2C_Init+0x84>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a80      	ldr	r2, [pc, #512]	; (8004f90 <HAL_I2C_Init+0x278>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	bf94      	ite	ls
 8004d94:	2301      	movls	r3, #1
 8004d96:	2300      	movhi	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e006      	b.n	8004daa <HAL_I2C_Init+0x92>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4a7d      	ldr	r2, [pc, #500]	; (8004f94 <HAL_I2C_Init+0x27c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	bf94      	ite	ls
 8004da4:	2301      	movls	r3, #1
 8004da6:	2300      	movhi	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e0e7      	b.n	8004f82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4a78      	ldr	r2, [pc, #480]	; (8004f98 <HAL_I2C_Init+0x280>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	0c9b      	lsrs	r3, r3, #18
 8004dbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a6a      	ldr	r2, [pc, #424]	; (8004f8c <HAL_I2C_Init+0x274>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d802      	bhi.n	8004dec <HAL_I2C_Init+0xd4>
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	3301      	adds	r3, #1
 8004dea:	e009      	b.n	8004e00 <HAL_I2C_Init+0xe8>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004df2:	fb02 f303 	mul.w	r3, r2, r3
 8004df6:	4a69      	ldr	r2, [pc, #420]	; (8004f9c <HAL_I2C_Init+0x284>)
 8004df8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	3301      	adds	r3, #1
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	495c      	ldr	r1, [pc, #368]	; (8004f8c <HAL_I2C_Init+0x274>)
 8004e1c:	428b      	cmp	r3, r1
 8004e1e:	d819      	bhi.n	8004e54 <HAL_I2C_Init+0x13c>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1e59      	subs	r1, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e34:	400b      	ands	r3, r1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_I2C_Init+0x138>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1e59      	subs	r1, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e48:	3301      	adds	r3, #1
 8004e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4e:	e051      	b.n	8004ef4 <HAL_I2C_Init+0x1dc>
 8004e50:	2304      	movs	r3, #4
 8004e52:	e04f      	b.n	8004ef4 <HAL_I2C_Init+0x1dc>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d111      	bne.n	8004e80 <HAL_I2C_Init+0x168>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1e58      	subs	r0, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6859      	ldr	r1, [r3, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	440b      	add	r3, r1
 8004e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e6e:	3301      	adds	r3, #1
 8004e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf0c      	ite	eq
 8004e78:	2301      	moveq	r3, #1
 8004e7a:	2300      	movne	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	e012      	b.n	8004ea6 <HAL_I2C_Init+0x18e>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1e58      	subs	r0, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6859      	ldr	r1, [r3, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	0099      	lsls	r1, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e96:	3301      	adds	r3, #1
 8004e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	bf0c      	ite	eq
 8004ea0:	2301      	moveq	r3, #1
 8004ea2:	2300      	movne	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_I2C_Init+0x196>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e022      	b.n	8004ef4 <HAL_I2C_Init+0x1dc>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10e      	bne.n	8004ed4 <HAL_I2C_Init+0x1bc>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1e58      	subs	r0, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	440b      	add	r3, r1
 8004ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ec8:	3301      	adds	r3, #1
 8004eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed2:	e00f      	b.n	8004ef4 <HAL_I2C_Init+0x1dc>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1e58      	subs	r0, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	0099      	lsls	r1, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eea:	3301      	adds	r3, #1
 8004eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	6809      	ldr	r1, [r1, #0]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69da      	ldr	r2, [r3, #28]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6911      	ldr	r1, [r2, #16]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	68d2      	ldr	r2, [r2, #12]
 8004f2e:	4311      	orrs	r1, r2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	430b      	orrs	r3, r1
 8004f36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	000186a0 	.word	0x000186a0
 8004f90:	001e847f 	.word	0x001e847f
 8004f94:	003d08ff 	.word	0x003d08ff
 8004f98:	431bde83 	.word	0x431bde83
 8004f9c:	10624dd3 	.word	0x10624dd3

08004fa0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	461a      	mov	r2, r3
 8004fac:	460b      	mov	r3, r1
 8004fae:	817b      	strh	r3, [r7, #10]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fb4:	f7fe fe60 	bl	8003c78 <HAL_GetTick>
 8004fb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	f040 80e0 	bne.w	8005188 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	2319      	movs	r3, #25
 8004fce:	2201      	movs	r2, #1
 8004fd0:	4970      	ldr	r1, [pc, #448]	; (8005194 <HAL_I2C_Master_Transmit+0x1f4>)
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 ff66 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e0d3      	b.n	800518a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_I2C_Master_Transmit+0x50>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e0cc      	b.n	800518a <HAL_I2C_Master_Transmit+0x1ea>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b01      	cmp	r3, #1
 8005004:	d007      	beq.n	8005016 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0201 	orr.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005024:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2221      	movs	r2, #33	; 0x21
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2210      	movs	r2, #16
 8005032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	893a      	ldrh	r2, [r7, #8]
 8005046:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4a50      	ldr	r2, [pc, #320]	; (8005198 <HAL_I2C_Master_Transmit+0x1f8>)
 8005056:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005058:	8979      	ldrh	r1, [r7, #10]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	6a3a      	ldr	r2, [r7, #32]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fce8 	bl	8005a34 <I2C_MasterRequestWrite>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e08d      	b.n	800518a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506e:	2300      	movs	r3, #0
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005084:	e066      	b.n	8005154 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	6a39      	ldr	r1, [r7, #32]
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 ffe0 	bl	8006050 <I2C_WaitOnTXEFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00d      	beq.n	80050b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b04      	cmp	r3, #4
 800509c:	d107      	bne.n	80050ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e06b      	b.n	800518a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	781a      	ldrb	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d11b      	bne.n	8005128 <HAL_I2C_Master_Transmit+0x188>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d017      	beq.n	8005128 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	781a      	ldrb	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	6a39      	ldr	r1, [r7, #32]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 ffd0 	bl	80060d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00d      	beq.n	8005154 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	2b04      	cmp	r3, #4
 800513e:	d107      	bne.n	8005150 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e01a      	b.n	800518a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005158:	2b00      	cmp	r3, #0
 800515a:	d194      	bne.n	8005086 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800516a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	e000      	b.n	800518a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	00100002 	.word	0x00100002
 8005198:	ffff0000 	.word	0xffff0000

0800519c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08c      	sub	sp, #48	; 0x30
 80051a0:	af02      	add	r7, sp, #8
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	461a      	mov	r2, r3
 80051a8:	460b      	mov	r3, r1
 80051aa:	817b      	strh	r3, [r7, #10]
 80051ac:	4613      	mov	r3, r2
 80051ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051b0:	f7fe fd62 	bl	8003c78 <HAL_GetTick>
 80051b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b20      	cmp	r3, #32
 80051c0:	f040 820b 	bne.w	80055da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	2319      	movs	r3, #25
 80051ca:	2201      	movs	r2, #1
 80051cc:	497c      	ldr	r1, [pc, #496]	; (80053c0 <HAL_I2C_Master_Receive+0x224>)
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fe68 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80051da:	2302      	movs	r3, #2
 80051dc:	e1fe      	b.n	80055dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_I2C_Master_Receive+0x50>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e1f7      	b.n	80055dc <HAL_I2C_Master_Receive+0x440>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d007      	beq.n	8005212 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005220:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2222      	movs	r2, #34	; 0x22
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2210      	movs	r2, #16
 800522e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	893a      	ldrh	r2, [r7, #8]
 8005242:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4a5c      	ldr	r2, [pc, #368]	; (80053c4 <HAL_I2C_Master_Receive+0x228>)
 8005252:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005254:	8979      	ldrh	r1, [r7, #10]
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fc6c 	bl	8005b38 <I2C_MasterRequestRead>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e1b8      	b.n	80055dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526e:	2b00      	cmp	r3, #0
 8005270:	d113      	bne.n	800529a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005272:	2300      	movs	r3, #0
 8005274:	623b      	str	r3, [r7, #32]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	623b      	str	r3, [r7, #32]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	623b      	str	r3, [r7, #32]
 8005286:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	e18c      	b.n	80055b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d11b      	bne.n	80052da <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	e16c      	b.n	80055b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d11b      	bne.n	800531a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005300:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005302:	2300      	movs	r3, #0
 8005304:	61bb      	str	r3, [r7, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	e14c      	b.n	80055b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005340:	e138      	b.n	80055b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005346:	2b03      	cmp	r3, #3
 8005348:	f200 80f1 	bhi.w	800552e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005350:	2b01      	cmp	r3, #1
 8005352:	d123      	bne.n	800539c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 fefb 	bl	8006154 <I2C_WaitOnRXNEFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e139      	b.n	80055dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	855a      	strh	r2, [r3, #42]	; 0x2a
 800539a:	e10b      	b.n	80055b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d14e      	bne.n	8005442 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	2200      	movs	r2, #0
 80053ac:	4906      	ldr	r1, [pc, #24]	; (80053c8 <HAL_I2C_Master_Receive+0x22c>)
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 fd78 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e10e      	b.n	80055dc <HAL_I2C_Master_Receive+0x440>
 80053be:	bf00      	nop
 80053c0:	00100002 	.word	0x00100002
 80053c4:	ffff0000 	.word	0xffff0000
 80053c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005440:	e0b8      	b.n	80055b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	2200      	movs	r2, #0
 800544a:	4966      	ldr	r1, [pc, #408]	; (80055e4 <HAL_I2C_Master_Receive+0x448>)
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 fd29 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0bf      	b.n	80055dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	2200      	movs	r2, #0
 80054a6:	494f      	ldr	r1, [pc, #316]	; (80055e4 <HAL_I2C_Master_Receive+0x448>)
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fcfb 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e091      	b.n	80055dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800552c:	e042      	b.n	80055b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800552e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fe0e 	bl	8006154 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e04c      	b.n	80055dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b04      	cmp	r3, #4
 8005580:	d118      	bne.n	80055b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f47f aec2 	bne.w	8005342 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e000      	b.n	80055dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80055da:	2302      	movs	r3, #2
  }
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3728      	adds	r7, #40	; 0x28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	00010004 	.word	0x00010004

080055e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08c      	sub	sp, #48	; 0x30
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	4608      	mov	r0, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	461a      	mov	r2, r3
 80055f6:	4603      	mov	r3, r0
 80055f8:	817b      	strh	r3, [r7, #10]
 80055fa:	460b      	mov	r3, r1
 80055fc:	813b      	strh	r3, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005602:	f7fe fb39 	bl	8003c78 <HAL_GetTick>
 8005606:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b20      	cmp	r3, #32
 8005612:	f040 8208 	bne.w	8005a26 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	2319      	movs	r3, #25
 800561c:	2201      	movs	r2, #1
 800561e:	497b      	ldr	r1, [pc, #492]	; (800580c <HAL_I2C_Mem_Read+0x224>)
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 fc3f 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800562c:	2302      	movs	r3, #2
 800562e:	e1fb      	b.n	8005a28 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_I2C_Mem_Read+0x56>
 800563a:	2302      	movs	r3, #2
 800563c:	e1f4      	b.n	8005a28 <HAL_I2C_Mem_Read+0x440>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b01      	cmp	r3, #1
 8005652:	d007      	beq.n	8005664 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005672:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2222      	movs	r2, #34	; 0x22
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2240      	movs	r2, #64	; 0x40
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4a5b      	ldr	r2, [pc, #364]	; (8005810 <HAL_I2C_Mem_Read+0x228>)
 80056a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056a6:	88f8      	ldrh	r0, [r7, #6]
 80056a8:	893a      	ldrh	r2, [r7, #8]
 80056aa:	8979      	ldrh	r1, [r7, #10]
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	9301      	str	r3, [sp, #4]
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	4603      	mov	r3, r0
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fb0c 	bl	8005cd4 <I2C_RequestMemoryRead>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e1b0      	b.n	8005a28 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d113      	bne.n	80056f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ce:	2300      	movs	r3, #0
 80056d0:	623b      	str	r3, [r7, #32]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	623b      	str	r3, [r7, #32]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	623b      	str	r3, [r7, #32]
 80056e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	e184      	b.n	8005a00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d11b      	bne.n	8005736 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800570c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570e:	2300      	movs	r3, #0
 8005710:	61fb      	str	r3, [r7, #28]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	e164      	b.n	8005a00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573a:	2b02      	cmp	r3, #2
 800573c:	d11b      	bne.n	8005776 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800574c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800575c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575e:	2300      	movs	r3, #0
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	e144      	b.n	8005a00 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800578c:	e138      	b.n	8005a00 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005792:	2b03      	cmp	r3, #3
 8005794:	f200 80f1 	bhi.w	800597a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579c:	2b01      	cmp	r3, #1
 800579e:	d123      	bne.n	80057e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fcd5 	bl	8006154 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e139      	b.n	8005a28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057e6:	e10b      	b.n	8005a00 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d14e      	bne.n	800588e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f6:	2200      	movs	r2, #0
 80057f8:	4906      	ldr	r1, [pc, #24]	; (8005814 <HAL_I2C_Mem_Read+0x22c>)
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fb52 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d008      	beq.n	8005818 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e10e      	b.n	8005a28 <HAL_I2C_Mem_Read+0x440>
 800580a:	bf00      	nop
 800580c:	00100002 	.word	0x00100002
 8005810:	ffff0000 	.word	0xffff0000
 8005814:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691a      	ldr	r2, [r3, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800588c:	e0b8      	b.n	8005a00 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005894:	2200      	movs	r2, #0
 8005896:	4966      	ldr	r1, [pc, #408]	; (8005a30 <HAL_I2C_Mem_Read+0x448>)
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 fb03 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0bf      	b.n	8005a28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f0:	2200      	movs	r2, #0
 80058f2:	494f      	ldr	r1, [pc, #316]	; (8005a30 <HAL_I2C_Mem_Read+0x448>)
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fad5 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e091      	b.n	8005a28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005912:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005930:	3b01      	subs	r3, #1
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005978:	e042      	b.n	8005a00 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800597a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fbe8 	bl	8006154 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e04c      	b.n	8005a28 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d118      	bne.n	8005a00 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f47f aec2 	bne.w	800578e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	e000      	b.n	8005a28 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005a26:	2302      	movs	r3, #2
  }
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3728      	adds	r7, #40	; 0x28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	00010004 	.word	0x00010004

08005a34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	607a      	str	r2, [r7, #4]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	460b      	mov	r3, r1
 8005a42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d006      	beq.n	8005a5e <I2C_MasterRequestWrite+0x2a>
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d003      	beq.n	8005a5e <I2C_MasterRequestWrite+0x2a>
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a5c:	d108      	bne.n	8005a70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	e00b      	b.n	8005a88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	2b12      	cmp	r3, #18
 8005a76:	d107      	bne.n	8005a88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fa05 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00d      	beq.n	8005abc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aae:	d103      	bne.n	8005ab8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e035      	b.n	8005b28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ac4:	d108      	bne.n	8005ad8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ac6:	897b      	ldrh	r3, [r7, #10]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	461a      	mov	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ad4:	611a      	str	r2, [r3, #16]
 8005ad6:	e01b      	b.n	8005b10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ad8:	897b      	ldrh	r3, [r7, #10]
 8005ada:	11db      	asrs	r3, r3, #7
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	f003 0306 	and.w	r3, r3, #6
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f063 030f 	orn	r3, r3, #15
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	490e      	ldr	r1, [pc, #56]	; (8005b30 <I2C_MasterRequestWrite+0xfc>)
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fa2b 	bl	8005f52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e010      	b.n	8005b28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b06:	897b      	ldrh	r3, [r7, #10]
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	4907      	ldr	r1, [pc, #28]	; (8005b34 <I2C_MasterRequestWrite+0x100>)
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fa1b 	bl	8005f52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	00010008 	.word	0x00010008
 8005b34:	00010002 	.word	0x00010002

08005b38 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	607a      	str	r2, [r7, #4]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	460b      	mov	r3, r1
 8005b46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b5c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d006      	beq.n	8005b72 <I2C_MasterRequestRead+0x3a>
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d003      	beq.n	8005b72 <I2C_MasterRequestRead+0x3a>
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b70:	d108      	bne.n	8005b84 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	e00b      	b.n	8005b9c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	2b11      	cmp	r3, #17
 8005b8a:	d107      	bne.n	8005b9c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f97b 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00d      	beq.n	8005bd0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bc2:	d103      	bne.n	8005bcc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e079      	b.n	8005cc4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bd8:	d108      	bne.n	8005bec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bda:	897b      	ldrh	r3, [r7, #10]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	f043 0301 	orr.w	r3, r3, #1
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	611a      	str	r2, [r3, #16]
 8005bea:	e05f      	b.n	8005cac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005bec:	897b      	ldrh	r3, [r7, #10]
 8005bee:	11db      	asrs	r3, r3, #7
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	f003 0306 	and.w	r3, r3, #6
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f063 030f 	orn	r3, r3, #15
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	4930      	ldr	r1, [pc, #192]	; (8005ccc <I2C_MasterRequestRead+0x194>)
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 f9a1 	bl	8005f52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e054      	b.n	8005cc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c1a:	897b      	ldrh	r3, [r7, #10]
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	4929      	ldr	r1, [pc, #164]	; (8005cd0 <I2C_MasterRequestRead+0x198>)
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f991 	bl	8005f52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e044      	b.n	8005cc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c5e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f919 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00d      	beq.n	8005c94 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c86:	d103      	bne.n	8005c90 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e017      	b.n	8005cc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005c94:	897b      	ldrh	r3, [r7, #10]
 8005c96:	11db      	asrs	r3, r3, #7
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	f003 0306 	and.w	r3, r3, #6
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	f063 030e 	orn	r3, r3, #14
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	4907      	ldr	r1, [pc, #28]	; (8005cd0 <I2C_MasterRequestRead+0x198>)
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 f94d 	bl	8005f52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e000      	b.n	8005cc4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	00010008 	.word	0x00010008
 8005cd0:	00010002 	.word	0x00010002

08005cd4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	4608      	mov	r0, r1
 8005cde:	4611      	mov	r1, r2
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	817b      	strh	r3, [r7, #10]
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	813b      	strh	r3, [r7, #8]
 8005cea:	4613      	mov	r3, r2
 8005cec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cfc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 f8c2 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00d      	beq.n	8005d42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d34:	d103      	bne.n	8005d3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e0aa      	b.n	8005e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d42:	897b      	ldrh	r3, [r7, #10]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	6a3a      	ldr	r2, [r7, #32]
 8005d56:	4952      	ldr	r1, [pc, #328]	; (8005ea0 <I2C_RequestMemoryRead+0x1cc>)
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f8fa 	bl	8005f52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e097      	b.n	8005e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d80:	6a39      	ldr	r1, [r7, #32]
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 f964 	bl	8006050 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00d      	beq.n	8005daa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d107      	bne.n	8005da6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e076      	b.n	8005e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005daa:	88fb      	ldrh	r3, [r7, #6]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d105      	bne.n	8005dbc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005db0:	893b      	ldrh	r3, [r7, #8]
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	611a      	str	r2, [r3, #16]
 8005dba:	e021      	b.n	8005e00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005dbc:	893b      	ldrh	r3, [r7, #8]
 8005dbe:	0a1b      	lsrs	r3, r3, #8
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dcc:	6a39      	ldr	r1, [r7, #32]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f93e 	bl	8006050 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00d      	beq.n	8005df6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d107      	bne.n	8005df2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e050      	b.n	8005e98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005df6:	893b      	ldrh	r3, [r7, #8]
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e02:	6a39      	ldr	r1, [r7, #32]
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 f923 	bl	8006050 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00d      	beq.n	8005e2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d107      	bne.n	8005e28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e035      	b.n	8005e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f82b 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00d      	beq.n	8005e70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e62:	d103      	bne.n	8005e6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e013      	b.n	8005e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e70:	897b      	ldrh	r3, [r7, #10]
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	6a3a      	ldr	r2, [r7, #32]
 8005e84:	4906      	ldr	r1, [pc, #24]	; (8005ea0 <I2C_RequestMemoryRead+0x1cc>)
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 f863 	bl	8005f52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e000      	b.n	8005e98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	00010002 	.word	0x00010002

08005ea4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eb4:	e025      	b.n	8005f02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d021      	beq.n	8005f02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebe:	f7fd fedb 	bl	8003c78 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d302      	bcc.n	8005ed4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d116      	bne.n	8005f02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f043 0220 	orr.w	r2, r3, #32
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e023      	b.n	8005f4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	0c1b      	lsrs	r3, r3, #16
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d10d      	bne.n	8005f28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	43da      	mvns	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4013      	ands	r3, r2
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bf0c      	ite	eq
 8005f1e:	2301      	moveq	r3, #1
 8005f20:	2300      	movne	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	e00c      	b.n	8005f42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	43da      	mvns	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	4013      	ands	r3, r2
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	bf0c      	ite	eq
 8005f3a:	2301      	moveq	r3, #1
 8005f3c:	2300      	movne	r3, #0
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	461a      	mov	r2, r3
 8005f42:	79fb      	ldrb	r3, [r7, #7]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d0b6      	beq.n	8005eb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f60:	e051      	b.n	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f70:	d123      	bne.n	8005fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f043 0204 	orr.w	r2, r3, #4
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e046      	b.n	8006048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc0:	d021      	beq.n	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc2:	f7fd fe59 	bl	8003c78 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d302      	bcc.n	8005fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d116      	bne.n	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	f043 0220 	orr.w	r2, r3, #32
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e020      	b.n	8006048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	0c1b      	lsrs	r3, r3, #16
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b01      	cmp	r3, #1
 800600e:	d10c      	bne.n	800602a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	43da      	mvns	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4013      	ands	r3, r2
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	bf14      	ite	ne
 8006022:	2301      	movne	r3, #1
 8006024:	2300      	moveq	r3, #0
 8006026:	b2db      	uxtb	r3, r3
 8006028:	e00b      	b.n	8006042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	43da      	mvns	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4013      	ands	r3, r2
 8006036:	b29b      	uxth	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	bf14      	ite	ne
 800603c:	2301      	movne	r3, #1
 800603e:	2300      	moveq	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d18d      	bne.n	8005f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800605c:	e02d      	b.n	80060ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f8ce 	bl	8006200 <I2C_IsAcknowledgeFailed>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e02d      	b.n	80060ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d021      	beq.n	80060ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006076:	f7fd fdff 	bl	8003c78 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	429a      	cmp	r2, r3
 8006084:	d302      	bcc.n	800608c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d116      	bne.n	80060ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f043 0220 	orr.w	r2, r3, #32
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e007      	b.n	80060ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c4:	2b80      	cmp	r3, #128	; 0x80
 80060c6:	d1ca      	bne.n	800605e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060de:	e02d      	b.n	800613c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f88d 	bl	8006200 <I2C_IsAcknowledgeFailed>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e02d      	b.n	800614c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f6:	d021      	beq.n	800613c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f8:	f7fd fdbe 	bl	8003c78 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	429a      	cmp	r2, r3
 8006106:	d302      	bcc.n	800610e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d116      	bne.n	800613c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	f043 0220 	orr.w	r2, r3, #32
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e007      	b.n	800614c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b04      	cmp	r3, #4
 8006148:	d1ca      	bne.n	80060e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006160:	e042      	b.n	80061e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	2b10      	cmp	r3, #16
 800616e:	d119      	bne.n	80061a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0210 	mvn.w	r2, #16
 8006178:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e029      	b.n	80061f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a4:	f7fd fd68 	bl	8003c78 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d302      	bcc.n	80061ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d116      	bne.n	80061e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	f043 0220 	orr.w	r2, r3, #32
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e007      	b.n	80061f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f2:	2b40      	cmp	r3, #64	; 0x40
 80061f4:	d1b5      	bne.n	8006162 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006216:	d11b      	bne.n	8006250 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006220:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	f043 0204 	orr.w	r2, r3, #4
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8006268:	4b05      	ldr	r3, [pc, #20]	; (8006280 <HAL_PWR_EnableWakeUpPin+0x20>)
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	4904      	ldr	r1, [pc, #16]	; (8006280 <HAL_PWR_EnableWakeUpPin+0x20>)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4313      	orrs	r3, r2
 8006272:	604b      	str	r3, [r1, #4]
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	40007000 	.word	0x40007000

08006284 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800628c:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <HAL_PWR_DisableWakeUpPin+0x24>)
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	43db      	mvns	r3, r3
 8006294:	4904      	ldr	r1, [pc, #16]	; (80062a8 <HAL_PWR_DisableWakeUpPin+0x24>)
 8006296:	4013      	ands	r3, r2
 8006298:	604b      	str	r3, [r1, #4]
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40007000 	.word	0x40007000

080062ac <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80062b0:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a07      	ldr	r2, [pc, #28]	; (80062d4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80062b6:	f043 0302 	orr.w	r3, r3, #2
 80062ba:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	4a05      	ldr	r2, [pc, #20]	; (80062d8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80062c2:	f043 0304 	orr.w	r3, r3, #4
 80062c6:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80062c8:	bf30      	wfi
}
 80062ca:	bf00      	nop
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	40007000 	.word	0x40007000
 80062d8:	e000ed00 	.word	0xe000ed00

080062dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e267      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d075      	beq.n	80063e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062fa:	4b88      	ldr	r3, [pc, #544]	; (800651c <HAL_RCC_OscConfig+0x240>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 030c 	and.w	r3, r3, #12
 8006302:	2b04      	cmp	r3, #4
 8006304:	d00c      	beq.n	8006320 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006306:	4b85      	ldr	r3, [pc, #532]	; (800651c <HAL_RCC_OscConfig+0x240>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800630e:	2b08      	cmp	r3, #8
 8006310:	d112      	bne.n	8006338 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006312:	4b82      	ldr	r3, [pc, #520]	; (800651c <HAL_RCC_OscConfig+0x240>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800631a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800631e:	d10b      	bne.n	8006338 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006320:	4b7e      	ldr	r3, [pc, #504]	; (800651c <HAL_RCC_OscConfig+0x240>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d05b      	beq.n	80063e4 <HAL_RCC_OscConfig+0x108>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d157      	bne.n	80063e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e242      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006340:	d106      	bne.n	8006350 <HAL_RCC_OscConfig+0x74>
 8006342:	4b76      	ldr	r3, [pc, #472]	; (800651c <HAL_RCC_OscConfig+0x240>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a75      	ldr	r2, [pc, #468]	; (800651c <HAL_RCC_OscConfig+0x240>)
 8006348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	e01d      	b.n	800638c <HAL_RCC_OscConfig+0xb0>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006358:	d10c      	bne.n	8006374 <HAL_RCC_OscConfig+0x98>
 800635a:	4b70      	ldr	r3, [pc, #448]	; (800651c <HAL_RCC_OscConfig+0x240>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a6f      	ldr	r2, [pc, #444]	; (800651c <HAL_RCC_OscConfig+0x240>)
 8006360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	4b6d      	ldr	r3, [pc, #436]	; (800651c <HAL_RCC_OscConfig+0x240>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a6c      	ldr	r2, [pc, #432]	; (800651c <HAL_RCC_OscConfig+0x240>)
 800636c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	e00b      	b.n	800638c <HAL_RCC_OscConfig+0xb0>
 8006374:	4b69      	ldr	r3, [pc, #420]	; (800651c <HAL_RCC_OscConfig+0x240>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a68      	ldr	r2, [pc, #416]	; (800651c <HAL_RCC_OscConfig+0x240>)
 800637a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	4b66      	ldr	r3, [pc, #408]	; (800651c <HAL_RCC_OscConfig+0x240>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a65      	ldr	r2, [pc, #404]	; (800651c <HAL_RCC_OscConfig+0x240>)
 8006386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800638a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d013      	beq.n	80063bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006394:	f7fd fc70 	bl	8003c78 <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800639c:	f7fd fc6c 	bl	8003c78 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b64      	cmp	r3, #100	; 0x64
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e207      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ae:	4b5b      	ldr	r3, [pc, #364]	; (800651c <HAL_RCC_OscConfig+0x240>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0f0      	beq.n	800639c <HAL_RCC_OscConfig+0xc0>
 80063ba:	e014      	b.n	80063e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063bc:	f7fd fc5c 	bl	8003c78 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063c4:	f7fd fc58 	bl	8003c78 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b64      	cmp	r3, #100	; 0x64
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e1f3      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063d6:	4b51      	ldr	r3, [pc, #324]	; (800651c <HAL_RCC_OscConfig+0x240>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f0      	bne.n	80063c4 <HAL_RCC_OscConfig+0xe8>
 80063e2:	e000      	b.n	80063e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d063      	beq.n	80064ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063f2:	4b4a      	ldr	r3, [pc, #296]	; (800651c <HAL_RCC_OscConfig+0x240>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 030c 	and.w	r3, r3, #12
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00b      	beq.n	8006416 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063fe:	4b47      	ldr	r3, [pc, #284]	; (800651c <HAL_RCC_OscConfig+0x240>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006406:	2b08      	cmp	r3, #8
 8006408:	d11c      	bne.n	8006444 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800640a:	4b44      	ldr	r3, [pc, #272]	; (800651c <HAL_RCC_OscConfig+0x240>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d116      	bne.n	8006444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006416:	4b41      	ldr	r3, [pc, #260]	; (800651c <HAL_RCC_OscConfig+0x240>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d005      	beq.n	800642e <HAL_RCC_OscConfig+0x152>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d001      	beq.n	800642e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e1c7      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800642e:	4b3b      	ldr	r3, [pc, #236]	; (800651c <HAL_RCC_OscConfig+0x240>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	4937      	ldr	r1, [pc, #220]	; (800651c <HAL_RCC_OscConfig+0x240>)
 800643e:	4313      	orrs	r3, r2
 8006440:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006442:	e03a      	b.n	80064ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d020      	beq.n	800648e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800644c:	4b34      	ldr	r3, [pc, #208]	; (8006520 <HAL_RCC_OscConfig+0x244>)
 800644e:	2201      	movs	r2, #1
 8006450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006452:	f7fd fc11 	bl	8003c78 <HAL_GetTick>
 8006456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006458:	e008      	b.n	800646c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800645a:	f7fd fc0d 	bl	8003c78 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d901      	bls.n	800646c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e1a8      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800646c:	4b2b      	ldr	r3, [pc, #172]	; (800651c <HAL_RCC_OscConfig+0x240>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0f0      	beq.n	800645a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006478:	4b28      	ldr	r3, [pc, #160]	; (800651c <HAL_RCC_OscConfig+0x240>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	4925      	ldr	r1, [pc, #148]	; (800651c <HAL_RCC_OscConfig+0x240>)
 8006488:	4313      	orrs	r3, r2
 800648a:	600b      	str	r3, [r1, #0]
 800648c:	e015      	b.n	80064ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800648e:	4b24      	ldr	r3, [pc, #144]	; (8006520 <HAL_RCC_OscConfig+0x244>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006494:	f7fd fbf0 	bl	8003c78 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800649c:	f7fd fbec 	bl	8003c78 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e187      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ae:	4b1b      	ldr	r3, [pc, #108]	; (800651c <HAL_RCC_OscConfig+0x240>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d036      	beq.n	8006534 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d016      	beq.n	80064fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ce:	4b15      	ldr	r3, [pc, #84]	; (8006524 <HAL_RCC_OscConfig+0x248>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d4:	f7fd fbd0 	bl	8003c78 <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064dc:	f7fd fbcc 	bl	8003c78 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e167      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ee:	4b0b      	ldr	r3, [pc, #44]	; (800651c <HAL_RCC_OscConfig+0x240>)
 80064f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0f0      	beq.n	80064dc <HAL_RCC_OscConfig+0x200>
 80064fa:	e01b      	b.n	8006534 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064fc:	4b09      	ldr	r3, [pc, #36]	; (8006524 <HAL_RCC_OscConfig+0x248>)
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006502:	f7fd fbb9 	bl	8003c78 <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006508:	e00e      	b.n	8006528 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800650a:	f7fd fbb5 	bl	8003c78 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d907      	bls.n	8006528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e150      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
 800651c:	40023800 	.word	0x40023800
 8006520:	42470000 	.word	0x42470000
 8006524:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006528:	4b88      	ldr	r3, [pc, #544]	; (800674c <HAL_RCC_OscConfig+0x470>)
 800652a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1ea      	bne.n	800650a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8097 	beq.w	8006670 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006542:	2300      	movs	r3, #0
 8006544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006546:	4b81      	ldr	r3, [pc, #516]	; (800674c <HAL_RCC_OscConfig+0x470>)
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10f      	bne.n	8006572 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006552:	2300      	movs	r3, #0
 8006554:	60bb      	str	r3, [r7, #8]
 8006556:	4b7d      	ldr	r3, [pc, #500]	; (800674c <HAL_RCC_OscConfig+0x470>)
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	4a7c      	ldr	r2, [pc, #496]	; (800674c <HAL_RCC_OscConfig+0x470>)
 800655c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006560:	6413      	str	r3, [r2, #64]	; 0x40
 8006562:	4b7a      	ldr	r3, [pc, #488]	; (800674c <HAL_RCC_OscConfig+0x470>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656a:	60bb      	str	r3, [r7, #8]
 800656c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800656e:	2301      	movs	r3, #1
 8006570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006572:	4b77      	ldr	r3, [pc, #476]	; (8006750 <HAL_RCC_OscConfig+0x474>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657a:	2b00      	cmp	r3, #0
 800657c:	d118      	bne.n	80065b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800657e:	4b74      	ldr	r3, [pc, #464]	; (8006750 <HAL_RCC_OscConfig+0x474>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a73      	ldr	r2, [pc, #460]	; (8006750 <HAL_RCC_OscConfig+0x474>)
 8006584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800658a:	f7fd fb75 	bl	8003c78 <HAL_GetTick>
 800658e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006592:	f7fd fb71 	bl	8003c78 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e10c      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a4:	4b6a      	ldr	r3, [pc, #424]	; (8006750 <HAL_RCC_OscConfig+0x474>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0f0      	beq.n	8006592 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d106      	bne.n	80065c6 <HAL_RCC_OscConfig+0x2ea>
 80065b8:	4b64      	ldr	r3, [pc, #400]	; (800674c <HAL_RCC_OscConfig+0x470>)
 80065ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065bc:	4a63      	ldr	r2, [pc, #396]	; (800674c <HAL_RCC_OscConfig+0x470>)
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	6713      	str	r3, [r2, #112]	; 0x70
 80065c4:	e01c      	b.n	8006600 <HAL_RCC_OscConfig+0x324>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d10c      	bne.n	80065e8 <HAL_RCC_OscConfig+0x30c>
 80065ce:	4b5f      	ldr	r3, [pc, #380]	; (800674c <HAL_RCC_OscConfig+0x470>)
 80065d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d2:	4a5e      	ldr	r2, [pc, #376]	; (800674c <HAL_RCC_OscConfig+0x470>)
 80065d4:	f043 0304 	orr.w	r3, r3, #4
 80065d8:	6713      	str	r3, [r2, #112]	; 0x70
 80065da:	4b5c      	ldr	r3, [pc, #368]	; (800674c <HAL_RCC_OscConfig+0x470>)
 80065dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065de:	4a5b      	ldr	r2, [pc, #364]	; (800674c <HAL_RCC_OscConfig+0x470>)
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	6713      	str	r3, [r2, #112]	; 0x70
 80065e6:	e00b      	b.n	8006600 <HAL_RCC_OscConfig+0x324>
 80065e8:	4b58      	ldr	r3, [pc, #352]	; (800674c <HAL_RCC_OscConfig+0x470>)
 80065ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ec:	4a57      	ldr	r2, [pc, #348]	; (800674c <HAL_RCC_OscConfig+0x470>)
 80065ee:	f023 0301 	bic.w	r3, r3, #1
 80065f2:	6713      	str	r3, [r2, #112]	; 0x70
 80065f4:	4b55      	ldr	r3, [pc, #340]	; (800674c <HAL_RCC_OscConfig+0x470>)
 80065f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f8:	4a54      	ldr	r2, [pc, #336]	; (800674c <HAL_RCC_OscConfig+0x470>)
 80065fa:	f023 0304 	bic.w	r3, r3, #4
 80065fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d015      	beq.n	8006634 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006608:	f7fd fb36 	bl	8003c78 <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800660e:	e00a      	b.n	8006626 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006610:	f7fd fb32 	bl	8003c78 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	f241 3288 	movw	r2, #5000	; 0x1388
 800661e:	4293      	cmp	r3, r2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e0cb      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006626:	4b49      	ldr	r3, [pc, #292]	; (800674c <HAL_RCC_OscConfig+0x470>)
 8006628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0ee      	beq.n	8006610 <HAL_RCC_OscConfig+0x334>
 8006632:	e014      	b.n	800665e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006634:	f7fd fb20 	bl	8003c78 <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800663a:	e00a      	b.n	8006652 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800663c:	f7fd fb1c 	bl	8003c78 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	f241 3288 	movw	r2, #5000	; 0x1388
 800664a:	4293      	cmp	r3, r2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e0b5      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006652:	4b3e      	ldr	r3, [pc, #248]	; (800674c <HAL_RCC_OscConfig+0x470>)
 8006654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1ee      	bne.n	800663c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800665e:	7dfb      	ldrb	r3, [r7, #23]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d105      	bne.n	8006670 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006664:	4b39      	ldr	r3, [pc, #228]	; (800674c <HAL_RCC_OscConfig+0x470>)
 8006666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006668:	4a38      	ldr	r2, [pc, #224]	; (800674c <HAL_RCC_OscConfig+0x470>)
 800666a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800666e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80a1 	beq.w	80067bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800667a:	4b34      	ldr	r3, [pc, #208]	; (800674c <HAL_RCC_OscConfig+0x470>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 030c 	and.w	r3, r3, #12
 8006682:	2b08      	cmp	r3, #8
 8006684:	d05c      	beq.n	8006740 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	2b02      	cmp	r3, #2
 800668c:	d141      	bne.n	8006712 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800668e:	4b31      	ldr	r3, [pc, #196]	; (8006754 <HAL_RCC_OscConfig+0x478>)
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006694:	f7fd faf0 	bl	8003c78 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800669c:	f7fd faec 	bl	8003c78 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e087      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ae:	4b27      	ldr	r3, [pc, #156]	; (800674c <HAL_RCC_OscConfig+0x470>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	69da      	ldr	r2, [r3, #28]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	019b      	lsls	r3, r3, #6
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	085b      	lsrs	r3, r3, #1
 80066d2:	3b01      	subs	r3, #1
 80066d4:	041b      	lsls	r3, r3, #16
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	061b      	lsls	r3, r3, #24
 80066de:	491b      	ldr	r1, [pc, #108]	; (800674c <HAL_RCC_OscConfig+0x470>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066e4:	4b1b      	ldr	r3, [pc, #108]	; (8006754 <HAL_RCC_OscConfig+0x478>)
 80066e6:	2201      	movs	r2, #1
 80066e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ea:	f7fd fac5 	bl	8003c78 <HAL_GetTick>
 80066ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066f0:	e008      	b.n	8006704 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066f2:	f7fd fac1 	bl	8003c78 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d901      	bls.n	8006704 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e05c      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006704:	4b11      	ldr	r3, [pc, #68]	; (800674c <HAL_RCC_OscConfig+0x470>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0f0      	beq.n	80066f2 <HAL_RCC_OscConfig+0x416>
 8006710:	e054      	b.n	80067bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006712:	4b10      	ldr	r3, [pc, #64]	; (8006754 <HAL_RCC_OscConfig+0x478>)
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006718:	f7fd faae 	bl	8003c78 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006720:	f7fd faaa 	bl	8003c78 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e045      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006732:	4b06      	ldr	r3, [pc, #24]	; (800674c <HAL_RCC_OscConfig+0x470>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1f0      	bne.n	8006720 <HAL_RCC_OscConfig+0x444>
 800673e:	e03d      	b.n	80067bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d107      	bne.n	8006758 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e038      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
 800674c:	40023800 	.word	0x40023800
 8006750:	40007000 	.word	0x40007000
 8006754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006758:	4b1b      	ldr	r3, [pc, #108]	; (80067c8 <HAL_RCC_OscConfig+0x4ec>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d028      	beq.n	80067b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006770:	429a      	cmp	r2, r3
 8006772:	d121      	bne.n	80067b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800677e:	429a      	cmp	r2, r3
 8006780:	d11a      	bne.n	80067b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006788:	4013      	ands	r3, r2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800678e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006790:	4293      	cmp	r3, r2
 8006792:	d111      	bne.n	80067b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679e:	085b      	lsrs	r3, r3, #1
 80067a0:	3b01      	subs	r3, #1
 80067a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d107      	bne.n	80067b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d001      	beq.n	80067bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40023800 	.word	0x40023800

080067cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e0cc      	b.n	800697a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067e0:	4b68      	ldr	r3, [pc, #416]	; (8006984 <HAL_RCC_ClockConfig+0x1b8>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d90c      	bls.n	8006808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ee:	4b65      	ldr	r3, [pc, #404]	; (8006984 <HAL_RCC_ClockConfig+0x1b8>)
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f6:	4b63      	ldr	r3, [pc, #396]	; (8006984 <HAL_RCC_ClockConfig+0x1b8>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d001      	beq.n	8006808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e0b8      	b.n	800697a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d020      	beq.n	8006856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006820:	4b59      	ldr	r3, [pc, #356]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	4a58      	ldr	r2, [pc, #352]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 8006826:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800682a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006838:	4b53      	ldr	r3, [pc, #332]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	4a52      	ldr	r2, [pc, #328]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006842:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006844:	4b50      	ldr	r3, [pc, #320]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	494d      	ldr	r1, [pc, #308]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	4313      	orrs	r3, r2
 8006854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d044      	beq.n	80068ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d107      	bne.n	800687a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800686a:	4b47      	ldr	r3, [pc, #284]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d119      	bne.n	80068aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e07f      	b.n	800697a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b02      	cmp	r3, #2
 8006880:	d003      	beq.n	800688a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006886:	2b03      	cmp	r3, #3
 8006888:	d107      	bne.n	800689a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800688a:	4b3f      	ldr	r3, [pc, #252]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e06f      	b.n	800697a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800689a:	4b3b      	ldr	r3, [pc, #236]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e067      	b.n	800697a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068aa:	4b37      	ldr	r3, [pc, #220]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f023 0203 	bic.w	r2, r3, #3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	4934      	ldr	r1, [pc, #208]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068bc:	f7fd f9dc 	bl	8003c78 <HAL_GetTick>
 80068c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068c2:	e00a      	b.n	80068da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068c4:	f7fd f9d8 	bl	8003c78 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e04f      	b.n	800697a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068da:	4b2b      	ldr	r3, [pc, #172]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 020c 	and.w	r2, r3, #12
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d1eb      	bne.n	80068c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068ec:	4b25      	ldr	r3, [pc, #148]	; (8006984 <HAL_RCC_ClockConfig+0x1b8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d20c      	bcs.n	8006914 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068fa:	4b22      	ldr	r3, [pc, #136]	; (8006984 <HAL_RCC_ClockConfig+0x1b8>)
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006902:	4b20      	ldr	r3, [pc, #128]	; (8006984 <HAL_RCC_ClockConfig+0x1b8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	429a      	cmp	r2, r3
 800690e:	d001      	beq.n	8006914 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e032      	b.n	800697a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b00      	cmp	r3, #0
 800691e:	d008      	beq.n	8006932 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006920:	4b19      	ldr	r3, [pc, #100]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	4916      	ldr	r1, [pc, #88]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800692e:	4313      	orrs	r3, r2
 8006930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d009      	beq.n	8006952 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800693e:	4b12      	ldr	r3, [pc, #72]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	490e      	ldr	r1, [pc, #56]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800694e:	4313      	orrs	r3, r2
 8006950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006952:	f000 f821 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8006956:	4602      	mov	r2, r0
 8006958:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	091b      	lsrs	r3, r3, #4
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	490a      	ldr	r1, [pc, #40]	; (800698c <HAL_RCC_ClockConfig+0x1c0>)
 8006964:	5ccb      	ldrb	r3, [r1, r3]
 8006966:	fa22 f303 	lsr.w	r3, r2, r3
 800696a:	4a09      	ldr	r2, [pc, #36]	; (8006990 <HAL_RCC_ClockConfig+0x1c4>)
 800696c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800696e:	4b09      	ldr	r3, [pc, #36]	; (8006994 <HAL_RCC_ClockConfig+0x1c8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4618      	mov	r0, r3
 8006974:	f7fd f93c 	bl	8003bf0 <HAL_InitTick>

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40023c00 	.word	0x40023c00
 8006988:	40023800 	.word	0x40023800
 800698c:	0800b37c 	.word	0x0800b37c
 8006990:	20000000 	.word	0x20000000
 8006994:	20000008 	.word	0x20000008

08006998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800699c:	b090      	sub	sp, #64	; 0x40
 800699e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	637b      	str	r3, [r7, #52]	; 0x34
 80069a4:	2300      	movs	r3, #0
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a8:	2300      	movs	r3, #0
 80069aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069b0:	4b59      	ldr	r3, [pc, #356]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 030c 	and.w	r3, r3, #12
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d00d      	beq.n	80069d8 <HAL_RCC_GetSysClockFreq+0x40>
 80069bc:	2b08      	cmp	r3, #8
 80069be:	f200 80a1 	bhi.w	8006b04 <HAL_RCC_GetSysClockFreq+0x16c>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <HAL_RCC_GetSysClockFreq+0x34>
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d003      	beq.n	80069d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80069ca:	e09b      	b.n	8006b04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069cc:	4b53      	ldr	r3, [pc, #332]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x184>)
 80069ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80069d0:	e09b      	b.n	8006b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069d2:	4b53      	ldr	r3, [pc, #332]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x188>)
 80069d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069d6:	e098      	b.n	8006b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069d8:	4b4f      	ldr	r3, [pc, #316]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069e2:	4b4d      	ldr	r3, [pc, #308]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d028      	beq.n	8006a40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ee:	4b4a      	ldr	r3, [pc, #296]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	099b      	lsrs	r3, r3, #6
 80069f4:	2200      	movs	r2, #0
 80069f6:	623b      	str	r3, [r7, #32]
 80069f8:	627a      	str	r2, [r7, #36]	; 0x24
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006a00:	2100      	movs	r1, #0
 8006a02:	4b47      	ldr	r3, [pc, #284]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a04:	fb03 f201 	mul.w	r2, r3, r1
 8006a08:	2300      	movs	r3, #0
 8006a0a:	fb00 f303 	mul.w	r3, r0, r3
 8006a0e:	4413      	add	r3, r2
 8006a10:	4a43      	ldr	r2, [pc, #268]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a12:	fba0 1202 	umull	r1, r2, r0, r2
 8006a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a18:	460a      	mov	r2, r1
 8006a1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8006a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a1e:	4413      	add	r3, r2
 8006a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a24:	2200      	movs	r2, #0
 8006a26:	61bb      	str	r3, [r7, #24]
 8006a28:	61fa      	str	r2, [r7, #28]
 8006a2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006a32:	f7fa f911 	bl	8000c58 <__aeabi_uldivmod>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a3e:	e053      	b.n	8006ae8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a40:	4b35      	ldr	r3, [pc, #212]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	099b      	lsrs	r3, r3, #6
 8006a46:	2200      	movs	r2, #0
 8006a48:	613b      	str	r3, [r7, #16]
 8006a4a:	617a      	str	r2, [r7, #20]
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006a52:	f04f 0b00 	mov.w	fp, #0
 8006a56:	4652      	mov	r2, sl
 8006a58:	465b      	mov	r3, fp
 8006a5a:	f04f 0000 	mov.w	r0, #0
 8006a5e:	f04f 0100 	mov.w	r1, #0
 8006a62:	0159      	lsls	r1, r3, #5
 8006a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a68:	0150      	lsls	r0, r2, #5
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	ebb2 080a 	subs.w	r8, r2, sl
 8006a72:	eb63 090b 	sbc.w	r9, r3, fp
 8006a76:	f04f 0200 	mov.w	r2, #0
 8006a7a:	f04f 0300 	mov.w	r3, #0
 8006a7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006a82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006a86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006a8a:	ebb2 0408 	subs.w	r4, r2, r8
 8006a8e:	eb63 0509 	sbc.w	r5, r3, r9
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	00eb      	lsls	r3, r5, #3
 8006a9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aa0:	00e2      	lsls	r2, r4, #3
 8006aa2:	4614      	mov	r4, r2
 8006aa4:	461d      	mov	r5, r3
 8006aa6:	eb14 030a 	adds.w	r3, r4, sl
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	eb45 030b 	adc.w	r3, r5, fp
 8006ab0:	607b      	str	r3, [r7, #4]
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006abe:	4629      	mov	r1, r5
 8006ac0:	028b      	lsls	r3, r1, #10
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ac8:	4621      	mov	r1, r4
 8006aca:	028a      	lsls	r2, r1, #10
 8006acc:	4610      	mov	r0, r2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	60bb      	str	r3, [r7, #8]
 8006ad6:	60fa      	str	r2, [r7, #12]
 8006ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006adc:	f7fa f8bc 	bl	8000c58 <__aeabi_uldivmod>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ae8:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	3301      	adds	r3, #1
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006af8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b02:	e002      	b.n	8006b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b04:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x184>)
 8006b06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3740      	adds	r7, #64	; 0x40
 8006b10:	46bd      	mov	sp, r7
 8006b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b16:	bf00      	nop
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	00f42400 	.word	0x00f42400
 8006b20:	017d7840 	.word	0x017d7840

08006b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b28:	4b03      	ldr	r3, [pc, #12]	; (8006b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	20000000 	.word	0x20000000

08006b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b40:	f7ff fff0 	bl	8006b24 <HAL_RCC_GetHCLKFreq>
 8006b44:	4602      	mov	r2, r0
 8006b46:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	0a9b      	lsrs	r3, r3, #10
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	4903      	ldr	r1, [pc, #12]	; (8006b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b52:	5ccb      	ldrb	r3, [r1, r3]
 8006b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	0800b38c 	.word	0x0800b38c

08006b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b68:	f7ff ffdc 	bl	8006b24 <HAL_RCC_GetHCLKFreq>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	0b5b      	lsrs	r3, r3, #13
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	4903      	ldr	r1, [pc, #12]	; (8006b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b7a:	5ccb      	ldrb	r3, [r1, r3]
 8006b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	40023800 	.word	0x40023800
 8006b88:	0800b38c 	.word	0x0800b38c

08006b8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d105      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d035      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006bb4:	4b67      	ldr	r3, [pc, #412]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bba:	f7fd f85d 	bl	8003c78 <HAL_GetTick>
 8006bbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bc0:	e008      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bc2:	f7fd f859 	bl	8003c78 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d901      	bls.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e0ba      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bd4:	4b60      	ldr	r3, [pc, #384]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1f0      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	019a      	lsls	r2, r3, #6
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	071b      	lsls	r3, r3, #28
 8006bec:	495a      	ldr	r1, [pc, #360]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bf4:	4b57      	ldr	r3, [pc, #348]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bfa:	f7fd f83d 	bl	8003c78 <HAL_GetTick>
 8006bfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c00:	e008      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c02:	f7fd f839 	bl	8003c78 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e09a      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c14:	4b50      	ldr	r3, [pc, #320]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0f0      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 8083 	beq.w	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	4b49      	ldr	r3, [pc, #292]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	4a48      	ldr	r2, [pc, #288]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c3e:	4b46      	ldr	r3, [pc, #280]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c4a:	4b44      	ldr	r3, [pc, #272]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a43      	ldr	r2, [pc, #268]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c56:	f7fd f80f 	bl	8003c78 <HAL_GetTick>
 8006c5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c5c:	e008      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c5e:	f7fd f80b 	bl	8003c78 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e06c      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c70:	4b3a      	ldr	r3, [pc, #232]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d0f0      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c7c:	4b36      	ldr	r3, [pc, #216]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c84:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d02f      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d028      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c9a:	4b2f      	ldr	r3, [pc, #188]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ca2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ca4:	4b2e      	ldr	r3, [pc, #184]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006caa:	4b2d      	ldr	r3, [pc, #180]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006cb0:	4a29      	ldr	r2, [pc, #164]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cb6:	4b28      	ldr	r3, [pc, #160]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d114      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006cc2:	f7fc ffd9 	bl	8003c78 <HAL_GetTick>
 8006cc6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cc8:	e00a      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cca:	f7fc ffd5 	bl	8003c78 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d901      	bls.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e034      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce0:	4b1d      	ldr	r3, [pc, #116]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0ee      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cf8:	d10d      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006cfa:	4b17      	ldr	r3, [pc, #92]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d0e:	4912      	ldr	r1, [pc, #72]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	608b      	str	r3, [r1, #8]
 8006d14:	e005      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	4a0f      	ldr	r2, [pc, #60]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d1c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d20:	6093      	str	r3, [r2, #8]
 8006d22:	4b0d      	ldr	r3, [pc, #52]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d2e:	490a      	ldr	r1, [pc, #40]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0308 	and.w	r3, r3, #8
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	7c1a      	ldrb	r2, [r3, #16]
 8006d44:	4b07      	ldr	r3, [pc, #28]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006d46:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	42470068 	.word	0x42470068
 8006d58:	40023800 	.word	0x40023800
 8006d5c:	40007000 	.word	0x40007000
 8006d60:	42470e40 	.word	0x42470e40
 8006d64:	424711e0 	.word	0x424711e0

08006d68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e066      	b.n	8006e4c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	7f5b      	ldrb	r3, [r3, #29]
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d105      	bne.n	8006d94 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fc fa6c 	bl	800326c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	22ca      	movs	r2, #202	; 0xca
 8006da0:	625a      	str	r2, [r3, #36]	; 0x24
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2253      	movs	r2, #83	; 0x53
 8006da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f998 	bl	80070e0 <RTC_EnterInitMode>
 8006db0:	4603      	mov	r3, r0
 8006db2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d12c      	bne.n	8006e14 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dcc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6899      	ldr	r1, [r3, #8]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	68d2      	ldr	r2, [r2, #12]
 8006df4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6919      	ldr	r1, [r3, #16]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	041a      	lsls	r2, r3, #16
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f99f 	bl	800714e <RTC_ExitInitMode>
 8006e10:	4603      	mov	r3, r0
 8006e12:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d113      	bne.n	8006e42 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	22ff      	movs	r2, #255	; 0xff
 8006e48:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006e54:	b590      	push	{r4, r7, lr}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	7f1b      	ldrb	r3, [r3, #28]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_RTC_SetTime+0x1c>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e087      	b.n	8006f80 <HAL_RTC_SetTime+0x12c>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2201      	movs	r2, #1
 8006e74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d126      	bne.n	8006ed0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2200      	movs	r2, #0
 8006e94:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 f97c 	bl	8007198 <RTC_ByteToBcd2>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	785b      	ldrb	r3, [r3, #1]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 f975 	bl	8007198 <RTC_ByteToBcd2>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006eb2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	789b      	ldrb	r3, [r3, #2]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 f96d 	bl	8007198 <RTC_ByteToBcd2>
 8006ebe:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ec0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	78db      	ldrb	r3, [r3, #3]
 8006ec8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	e018      	b.n	8006f02 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d102      	bne.n	8006ee4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	785b      	ldrb	r3, [r3, #1]
 8006eee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006ef0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006ef6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	78db      	ldrb	r3, [r3, #3]
 8006efc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	22ca      	movs	r2, #202	; 0xca
 8006f08:	625a      	str	r2, [r3, #36]	; 0x24
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2253      	movs	r2, #83	; 0x53
 8006f10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 f8e4 	bl	80070e0 <RTC_EnterInitMode>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006f1c:	7cfb      	ldrb	r3, [r7, #19]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d120      	bne.n	8006f64 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006f2c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006f30:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f40:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6899      	ldr	r1, [r3, #8]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	431a      	orrs	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 f8f7 	bl	800714e <RTC_ExitInitMode>
 8006f60:	4603      	mov	r3, r0
 8006f62:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006f64:	7cfb      	ldrb	r3, [r7, #19]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d102      	bne.n	8006f70 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	22ff      	movs	r2, #255	; 0xff
 8006f76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	771a      	strb	r2, [r3, #28]

  return status;
 8006f7e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	371c      	adds	r7, #28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd90      	pop	{r4, r7, pc}

08006f88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006f88:	b590      	push	{r4, r7, lr}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	7f1b      	ldrb	r3, [r3, #28]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d101      	bne.n	8006fa4 <HAL_RTC_SetDate+0x1c>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e071      	b.n	8007088 <HAL_RTC_SetDate+0x100>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2202      	movs	r2, #2
 8006fae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10e      	bne.n	8006fd4 <HAL_RTC_SetDate+0x4c>
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	785b      	ldrb	r3, [r3, #1]
 8006fba:	f003 0310 	and.w	r3, r3, #16
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d008      	beq.n	8006fd4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	f023 0310 	bic.w	r3, r3, #16
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	330a      	adds	r3, #10
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d11c      	bne.n	8007014 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	78db      	ldrb	r3, [r3, #3]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 f8da 	bl	8007198 <RTC_ByteToBcd2>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	785b      	ldrb	r3, [r3, #1]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 f8d3 	bl	8007198 <RTC_ByteToBcd2>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006ff6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	789b      	ldrb	r3, [r3, #2]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 f8cb 	bl	8007198 <RTC_ByteToBcd2>
 8007002:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007004:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800700e:	4313      	orrs	r3, r2
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	e00e      	b.n	8007032 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	78db      	ldrb	r3, [r3, #3]
 8007018:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007020:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007026:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800702e:	4313      	orrs	r3, r2
 8007030:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	22ca      	movs	r2, #202	; 0xca
 8007038:	625a      	str	r2, [r3, #36]	; 0x24
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2253      	movs	r2, #83	; 0x53
 8007040:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 f84c 	bl	80070e0 <RTC_EnterInitMode>
 8007048:	4603      	mov	r3, r0
 800704a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800704c:	7cfb      	ldrb	r3, [r7, #19]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10c      	bne.n	800706c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800705c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007060:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 f873 	bl	800714e <RTC_ExitInitMode>
 8007068:	4603      	mov	r3, r0
 800706a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800706c:	7cfb      	ldrb	r3, [r7, #19]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d102      	bne.n	8007078 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	22ff      	movs	r2, #255	; 0xff
 800707e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	771a      	strb	r2, [r3, #28]

  return status;
 8007086:	7cfb      	ldrb	r3, [r7, #19]
}
 8007088:	4618      	mov	r0, r3
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	bd90      	pop	{r4, r7, pc}

08007090 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070aa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070ac:	f7fc fde4 	bl	8003c78 <HAL_GetTick>
 80070b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80070b2:	e009      	b.n	80070c8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80070b4:	f7fc fde0 	bl	8003c78 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070c2:	d901      	bls.n	80070c8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e007      	b.n	80070d8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0ee      	beq.n	80070b4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d122      	bne.n	8007144 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68da      	ldr	r2, [r3, #12]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800710c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800710e:	f7fc fdb3 	bl	8003c78 <HAL_GetTick>
 8007112:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007114:	e00c      	b.n	8007130 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007116:	f7fc fdaf 	bl	8003c78 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007124:	d904      	bls.n	8007130 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2204      	movs	r2, #4
 800712a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713a:	2b00      	cmp	r3, #0
 800713c:	d102      	bne.n	8007144 <RTC_EnterInitMode+0x64>
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d1e8      	bne.n	8007116 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68da      	ldr	r2, [r3, #12]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007168:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 0320 	and.w	r3, r3, #32
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10a      	bne.n	800718e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff ff89 	bl	8007090 <HAL_RTC_WaitForSynchro>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d004      	beq.n	800718e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2204      	movs	r2, #4
 8007188:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80071a6:	e005      	b.n	80071b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
 80071aa:	3301      	adds	r3, #1
 80071ac:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	3b0a      	subs	r3, #10
 80071b2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80071b4:	79fb      	ldrb	r3, [r7, #7]
 80071b6:	2b09      	cmp	r3, #9
 80071b8:	d8f6      	bhi.n	80071a8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	011b      	lsls	r3, r3, #4
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	b2db      	uxtb	r3, r3
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b086      	sub	sp, #24
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	60f8      	str	r0, [r7, #12]
 80071da:	60b9      	str	r1, [r7, #8]
 80071dc:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	7f1b      	ldrb	r3, [r3, #28]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_RTCEx_SetWakeUpTimer+0x1c>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e08a      	b.n	8007304 <HAL_RTCEx_SetWakeUpTimer+0x132>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2202      	movs	r2, #2
 80071f8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	22ca      	movs	r2, #202	; 0xca
 8007200:	625a      	str	r2, [r3, #36]	; 0x24
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2253      	movs	r2, #83	; 0x53
 8007208:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01e      	beq.n	8007256 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8007218:	f7fc fd2e 	bl	8003c78 <HAL_GetTick>
 800721c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 800721e:	e013      	b.n	8007248 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007220:	f7fc fd2a 	bl	8003c78 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800722e:	d90b      	bls.n	8007248 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	22ff      	movs	r2, #255	; 0xff
 8007236:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2203      	movs	r2, #3
 800723c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e05d      	b.n	8007304 <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f003 0304 	and.w	r3, r3, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e4      	bne.n	8007220 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007264:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	b2da      	uxtb	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007276:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007278:	f7fc fcfe 	bl	8003c78 <HAL_GetTick>
 800727c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800727e:	e013      	b.n	80072a8 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007280:	f7fc fcfa 	bl	8003c78 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800728e:	d90b      	bls.n	80072a8 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	22ff      	movs	r2, #255	; 0xff
 8007296:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2203      	movs	r2, #3
 800729c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e02d      	b.n	8007304 <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f003 0304 	and.w	r3, r3, #4
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0e4      	beq.n	8007280 <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0207 	bic.w	r2, r2, #7
 80072c4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6899      	ldr	r1, [r3, #8]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072ec:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	22ff      	movs	r2, #255	; 0xff
 80072f4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8007318:	4b59      	ldr	r3, [pc, #356]	; (8007480 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a59      	ldr	r2, [pc, #356]	; (8007484 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800731e:	fba2 2303 	umull	r2, r3, r2, r3
 8007322:	0adb      	lsrs	r3, r3, #11
 8007324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007328:	fb02 f303 	mul.w	r3, r2, r3
 800732c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	7f1b      	ldrb	r3, [r3, #28]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d101      	bne.n	800733a <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8007336:	2302      	movs	r3, #2
 8007338:	e09b      	b.n	8007472 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2201      	movs	r2, #1
 800733e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2202      	movs	r2, #2
 8007344:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	22ca      	movs	r2, #202	; 0xca
 800734c:	625a      	str	r2, [r3, #36]	; 0x24
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2253      	movs	r2, #83	; 0x53
 8007354:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007360:	2b00      	cmp	r3, #0
 8007362:	d017      	beq.n	8007394 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	1e5a      	subs	r2, r3, #1
 8007368:	617a      	str	r2, [r7, #20]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10b      	bne.n	8007386 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	22ff      	movs	r2, #255	; 0xff
 8007374:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2203      	movs	r2, #3
 800737a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e075      	b.n	8007472 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e7      	bne.n	8007364 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073a2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80073b4:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80073b6:	4b32      	ldr	r3, [pc, #200]	; (8007480 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a32      	ldr	r2, [pc, #200]	; (8007484 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80073bc:	fba2 2303 	umull	r2, r3, r2, r3
 80073c0:	0adb      	lsrs	r3, r3, #11
 80073c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073c6:	fb02 f303 	mul.w	r3, r2, r3
 80073ca:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	1e5a      	subs	r2, r3, #1
 80073d0:	617a      	str	r2, [r7, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10b      	bne.n	80073ee <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	22ff      	movs	r2, #255	; 0xff
 80073dc:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2203      	movs	r2, #3
 80073e2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e041      	b.n	8007472 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0e7      	beq.n	80073cc <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0207 	bic.w	r2, r2, #7
 800740a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6899      	ldr	r1, [r3, #8]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	430a      	orrs	r2, r1
 800741a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007424:	4b18      	ldr	r3, [pc, #96]	; (8007488 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a17      	ldr	r2, [pc, #92]	; (8007488 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800742a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800742e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007430:	4b15      	ldr	r3, [pc, #84]	; (8007488 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	4a14      	ldr	r2, [pc, #80]	; (8007488 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8007436:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800743a:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800744a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800745a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	22ff      	movs	r2, #255	; 0xff
 8007462:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	20000000 	.word	0x20000000
 8007484:	10624dd3 	.word	0x10624dd3
 8007488:	40013c00 	.word	0x40013c00

0800748c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	7f1b      	ldrb	r3, [r3, #28]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e047      	b.n	8007534 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2202      	movs	r2, #2
 80074ae:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	22ca      	movs	r2, #202	; 0xca
 80074b6:	625a      	str	r2, [r3, #36]	; 0x24
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2253      	movs	r2, #83	; 0x53
 80074be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ce:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074de:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074e0:	f7fc fbca 	bl	8003c78 <HAL_GetTick>
 80074e4:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80074e6:	e013      	b.n	8007510 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074e8:	f7fc fbc6 	bl	8003c78 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074f6:	d90b      	bls.n	8007510 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	22ff      	movs	r2, #255	; 0xff
 80074fe:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2203      	movs	r2, #3
 8007504:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e011      	b.n	8007534 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0e4      	beq.n	80074e8 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	22ff      	movs	r2, #255	; 0xff
 8007524:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e07b      	b.n	8007646 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	2b00      	cmp	r3, #0
 8007554:	d108      	bne.n	8007568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800755e:	d009      	beq.n	8007574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	61da      	str	r2, [r3, #28]
 8007566:	e005      	b.n	8007574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d106      	bne.n	8007594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7fb fe98 	bl	80032c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f003 0302 	and.w	r3, r3, #2
 80075d0:	431a      	orrs	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f8:	ea42 0103 	orr.w	r1, r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007600:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	430a      	orrs	r2, r1
 800760a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	0c1b      	lsrs	r3, r3, #16
 8007612:	f003 0104 	and.w	r1, r3, #4
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	f003 0210 	and.w	r2, r3, #16
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69da      	ldr	r2, [r3, #28]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007634:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b088      	sub	sp, #32
 8007652:	af00      	add	r7, sp, #0
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	60b9      	str	r1, [r7, #8]
 8007658:	603b      	str	r3, [r7, #0]
 800765a:	4613      	mov	r3, r2
 800765c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007668:	2b01      	cmp	r3, #1
 800766a:	d101      	bne.n	8007670 <HAL_SPI_Transmit+0x22>
 800766c:	2302      	movs	r3, #2
 800766e:	e126      	b.n	80078be <HAL_SPI_Transmit+0x270>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007678:	f7fc fafe 	bl	8003c78 <HAL_GetTick>
 800767c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800767e:	88fb      	ldrh	r3, [r7, #6]
 8007680:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b01      	cmp	r3, #1
 800768c:	d002      	beq.n	8007694 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800768e:	2302      	movs	r3, #2
 8007690:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007692:	e10b      	b.n	80078ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_SPI_Transmit+0x52>
 800769a:	88fb      	ldrh	r3, [r7, #6]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d102      	bne.n	80076a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076a4:	e102      	b.n	80078ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2203      	movs	r2, #3
 80076aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	88fa      	ldrh	r2, [r7, #6]
 80076be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	88fa      	ldrh	r2, [r7, #6]
 80076c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ec:	d10f      	bne.n	800770e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800770c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007718:	2b40      	cmp	r3, #64	; 0x40
 800771a:	d007      	beq.n	800772c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800772a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007734:	d14b      	bne.n	80077ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <HAL_SPI_Transmit+0xf6>
 800773e:	8afb      	ldrh	r3, [r7, #22]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d13e      	bne.n	80077c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007748:	881a      	ldrh	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007754:	1c9a      	adds	r2, r3, #2
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800775e:	b29b      	uxth	r3, r3
 8007760:	3b01      	subs	r3, #1
 8007762:	b29a      	uxth	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007768:	e02b      	b.n	80077c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b02      	cmp	r3, #2
 8007776:	d112      	bne.n	800779e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777c:	881a      	ldrh	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007788:	1c9a      	adds	r2, r3, #2
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007792:	b29b      	uxth	r3, r3
 8007794:	3b01      	subs	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	86da      	strh	r2, [r3, #54]	; 0x36
 800779c:	e011      	b.n	80077c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800779e:	f7fc fa6b 	bl	8003c78 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	683a      	ldr	r2, [r7, #0]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d803      	bhi.n	80077b6 <HAL_SPI_Transmit+0x168>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b4:	d102      	bne.n	80077bc <HAL_SPI_Transmit+0x16e>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d102      	bne.n	80077c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077c0:	e074      	b.n	80078ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1ce      	bne.n	800776a <HAL_SPI_Transmit+0x11c>
 80077cc:	e04c      	b.n	8007868 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <HAL_SPI_Transmit+0x18e>
 80077d6:	8afb      	ldrh	r3, [r7, #22]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d140      	bne.n	800785e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	330c      	adds	r3, #12
 80077e6:	7812      	ldrb	r2, [r2, #0]
 80077e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007802:	e02c      	b.n	800785e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b02      	cmp	r3, #2
 8007810:	d113      	bne.n	800783a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	330c      	adds	r3, #12
 800781c:	7812      	ldrb	r2, [r2, #0]
 800781e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b01      	subs	r3, #1
 8007832:	b29a      	uxth	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	86da      	strh	r2, [r3, #54]	; 0x36
 8007838:	e011      	b.n	800785e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800783a:	f7fc fa1d 	bl	8003c78 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	429a      	cmp	r2, r3
 8007848:	d803      	bhi.n	8007852 <HAL_SPI_Transmit+0x204>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007850:	d102      	bne.n	8007858 <HAL_SPI_Transmit+0x20a>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d102      	bne.n	800785e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800785c:	e026      	b.n	80078ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007862:	b29b      	uxth	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1cd      	bne.n	8007804 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007868:	69ba      	ldr	r2, [r7, #24]
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 fa55 	bl	8007d1c <SPI_EndRxTxTransaction>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10a      	bne.n	800789c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007886:	2300      	movs	r3, #0
 8007888:	613b      	str	r3, [r7, #16]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	613b      	str	r3, [r7, #16]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	613b      	str	r3, [r7, #16]
 800789a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	77fb      	strb	r3, [r7, #31]
 80078a8:	e000      	b.n	80078ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80078aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3720      	adds	r7, #32
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b08c      	sub	sp, #48	; 0x30
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	607a      	str	r2, [r7, #4]
 80078d2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078d4:	2301      	movs	r3, #1
 80078d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d101      	bne.n	80078ec <HAL_SPI_TransmitReceive+0x26>
 80078e8:	2302      	movs	r3, #2
 80078ea:	e18a      	b.n	8007c02 <HAL_SPI_TransmitReceive+0x33c>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078f4:	f7fc f9c0 	bl	8003c78 <HAL_GetTick>
 80078f8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800790a:	887b      	ldrh	r3, [r7, #2]
 800790c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800790e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007912:	2b01      	cmp	r3, #1
 8007914:	d00f      	beq.n	8007936 <HAL_SPI_TransmitReceive+0x70>
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800791c:	d107      	bne.n	800792e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d103      	bne.n	800792e <HAL_SPI_TransmitReceive+0x68>
 8007926:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800792a:	2b04      	cmp	r3, #4
 800792c:	d003      	beq.n	8007936 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800792e:	2302      	movs	r3, #2
 8007930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007934:	e15b      	b.n	8007bee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <HAL_SPI_TransmitReceive+0x82>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d002      	beq.n	8007948 <HAL_SPI_TransmitReceive+0x82>
 8007942:	887b      	ldrh	r3, [r7, #2]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d103      	bne.n	8007950 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800794e:	e14e      	b.n	8007bee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b04      	cmp	r3, #4
 800795a:	d003      	beq.n	8007964 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2205      	movs	r2, #5
 8007960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	887a      	ldrh	r2, [r7, #2]
 8007974:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	887a      	ldrh	r2, [r7, #2]
 800797a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	887a      	ldrh	r2, [r7, #2]
 8007986:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	887a      	ldrh	r2, [r7, #2]
 800798c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a4:	2b40      	cmp	r3, #64	; 0x40
 80079a6:	d007      	beq.n	80079b8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c0:	d178      	bne.n	8007ab4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_SPI_TransmitReceive+0x10a>
 80079ca:	8b7b      	ldrh	r3, [r7, #26]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d166      	bne.n	8007a9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d4:	881a      	ldrh	r2, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e0:	1c9a      	adds	r2, r3, #2
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079f4:	e053      	b.n	8007a9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d11b      	bne.n	8007a3c <HAL_SPI_TransmitReceive+0x176>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d016      	beq.n	8007a3c <HAL_SPI_TransmitReceive+0x176>
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d113      	bne.n	8007a3c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a18:	881a      	ldrh	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a24:	1c9a      	adds	r2, r3, #2
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	3b01      	subs	r3, #1
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d119      	bne.n	8007a7e <HAL_SPI_TransmitReceive+0x1b8>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d014      	beq.n	8007a7e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	b292      	uxth	r2, r2
 8007a60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a66:	1c9a      	adds	r2, r3, #2
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3b01      	subs	r3, #1
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a7e:	f7fc f8fb 	bl	8003c78 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d807      	bhi.n	8007a9e <HAL_SPI_TransmitReceive+0x1d8>
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a94:	d003      	beq.n	8007a9e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a9c:	e0a7      	b.n	8007bee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1a6      	bne.n	80079f6 <HAL_SPI_TransmitReceive+0x130>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1a1      	bne.n	80079f6 <HAL_SPI_TransmitReceive+0x130>
 8007ab2:	e07c      	b.n	8007bae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_SPI_TransmitReceive+0x1fc>
 8007abc:	8b7b      	ldrh	r3, [r7, #26]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d16b      	bne.n	8007b9a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	330c      	adds	r3, #12
 8007acc:	7812      	ldrb	r2, [r2, #0]
 8007ace:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ae8:	e057      	b.n	8007b9a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d11c      	bne.n	8007b32 <HAL_SPI_TransmitReceive+0x26c>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d017      	beq.n	8007b32 <HAL_SPI_TransmitReceive+0x26c>
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d114      	bne.n	8007b32 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	330c      	adds	r3, #12
 8007b12:	7812      	ldrb	r2, [r2, #0]
 8007b14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d119      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x2ae>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d014      	beq.n	8007b74 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	b2d2      	uxtb	r2, r2
 8007b56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b70:	2301      	movs	r3, #1
 8007b72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b74:	f7fc f880 	bl	8003c78 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d803      	bhi.n	8007b8c <HAL_SPI_TransmitReceive+0x2c6>
 8007b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8a:	d102      	bne.n	8007b92 <HAL_SPI_TransmitReceive+0x2cc>
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d103      	bne.n	8007b9a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b98:	e029      	b.n	8007bee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1a2      	bne.n	8007aea <HAL_SPI_TransmitReceive+0x224>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d19d      	bne.n	8007aea <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f8b2 	bl	8007d1c <SPI_EndRxTxTransaction>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d006      	beq.n	8007bcc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007bca:	e010      	b.n	8007bee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10b      	bne.n	8007bec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	617b      	str	r3, [r7, #20]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	e000      	b.n	8007bee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007bec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3730      	adds	r7, #48	; 0x30
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	603b      	str	r3, [r7, #0]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c1c:	f7fc f82c 	bl	8003c78 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c24:	1a9b      	subs	r3, r3, r2
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	4413      	add	r3, r2
 8007c2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c2c:	f7fc f824 	bl	8003c78 <HAL_GetTick>
 8007c30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c32:	4b39      	ldr	r3, [pc, #228]	; (8007d18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	015b      	lsls	r3, r3, #5
 8007c38:	0d1b      	lsrs	r3, r3, #20
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	fb02 f303 	mul.w	r3, r2, r3
 8007c40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c42:	e054      	b.n	8007cee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4a:	d050      	beq.n	8007cee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c4c:	f7fc f814 	bl	8003c78 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	69fa      	ldr	r2, [r7, #28]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d902      	bls.n	8007c62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d13d      	bne.n	8007cde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c7a:	d111      	bne.n	8007ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c84:	d004      	beq.n	8007c90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c8e:	d107      	bne.n	8007ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ca8:	d10f      	bne.n	8007cca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e017      	b.n	8007d0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689a      	ldr	r2, [r3, #8]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	bf0c      	ite	eq
 8007cfe:	2301      	moveq	r3, #1
 8007d00:	2300      	movne	r3, #0
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d19b      	bne.n	8007c44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3720      	adds	r7, #32
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20000000 	.word	0x20000000

08007d1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af02      	add	r7, sp, #8
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d28:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <SPI_EndRxTxTransaction+0x7c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a1b      	ldr	r2, [pc, #108]	; (8007d9c <SPI_EndRxTxTransaction+0x80>)
 8007d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d32:	0d5b      	lsrs	r3, r3, #21
 8007d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d38:	fb02 f303 	mul.w	r3, r2, r3
 8007d3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d46:	d112      	bne.n	8007d6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2180      	movs	r1, #128	; 0x80
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7ff ff5a 	bl	8007c0c <SPI_WaitFlagStateUntilTimeout>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d016      	beq.n	8007d8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d62:	f043 0220 	orr.w	r2, r3, #32
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e00f      	b.n	8007d8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00a      	beq.n	8007d8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d84:	2b80      	cmp	r3, #128	; 0x80
 8007d86:	d0f2      	beq.n	8007d6e <SPI_EndRxTxTransaction+0x52>
 8007d88:	e000      	b.n	8007d8c <SPI_EndRxTxTransaction+0x70>
        break;
 8007d8a:	bf00      	nop
  }

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	20000000 	.word	0x20000000
 8007d9c:	165e9f81 	.word	0x165e9f81

08007da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e03f      	b.n	8007e32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d106      	bne.n	8007dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7fb fac4 	bl	8003354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2224      	movs	r2, #36	; 0x24
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f929 	bl	800803c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	691a      	ldr	r2, [r3, #16]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	695a      	ldr	r2, [r3, #20]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b08a      	sub	sp, #40	; 0x28
 8007e3e:	af02      	add	r7, sp, #8
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	4613      	mov	r3, r2
 8007e48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b20      	cmp	r3, #32
 8007e58:	d17c      	bne.n	8007f54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d002      	beq.n	8007e66 <HAL_UART_Transmit+0x2c>
 8007e60:	88fb      	ldrh	r3, [r7, #6]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e075      	b.n	8007f56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d101      	bne.n	8007e78 <HAL_UART_Transmit+0x3e>
 8007e74:	2302      	movs	r3, #2
 8007e76:	e06e      	b.n	8007f56 <HAL_UART_Transmit+0x11c>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2221      	movs	r2, #33	; 0x21
 8007e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e8e:	f7fb fef3 	bl	8003c78 <HAL_GetTick>
 8007e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	88fa      	ldrh	r2, [r7, #6]
 8007e98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	88fa      	ldrh	r2, [r7, #6]
 8007e9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea8:	d108      	bne.n	8007ebc <HAL_UART_Transmit+0x82>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d104      	bne.n	8007ebc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	61bb      	str	r3, [r7, #24]
 8007eba:	e003      	b.n	8007ec4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ecc:	e02a      	b.n	8007f24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2180      	movs	r1, #128	; 0x80
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 f840 	bl	8007f5e <UART_WaitOnFlagUntilTimeout>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e036      	b.n	8007f56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10b      	bne.n	8007f06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	3302      	adds	r3, #2
 8007f02:	61bb      	str	r3, [r7, #24]
 8007f04:	e007      	b.n	8007f16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	781a      	ldrb	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	3301      	adds	r3, #1
 8007f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1cf      	bne.n	8007ece <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2200      	movs	r2, #0
 8007f36:	2140      	movs	r1, #64	; 0x40
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 f810 	bl	8007f5e <UART_WaitOnFlagUntilTimeout>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e006      	b.n	8007f56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	e000      	b.n	8007f56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f54:	2302      	movs	r3, #2
  }
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3720      	adds	r7, #32
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b090      	sub	sp, #64	; 0x40
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	603b      	str	r3, [r7, #0]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f6e:	e050      	b.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f76:	d04c      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d007      	beq.n	8007f8e <UART_WaitOnFlagUntilTimeout+0x30>
 8007f7e:	f7fb fe7b 	bl	8003c78 <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d241      	bcs.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	330c      	adds	r3, #12
 8007f94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	330c      	adds	r3, #12
 8007fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fae:	637a      	str	r2, [r7, #52]	; 0x34
 8007fb0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e5      	bne.n	8007f8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3314      	adds	r3, #20
 8007fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f023 0301 	bic.w	r3, r3, #1
 8007fd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3314      	adds	r3, #20
 8007fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fe2:	623a      	str	r2, [r7, #32]
 8007fe4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	69f9      	ldr	r1, [r7, #28]
 8007fe8:	6a3a      	ldr	r2, [r7, #32]
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e5      	bne.n	8007fc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e00f      	b.n	8008032 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4013      	ands	r3, r2
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	429a      	cmp	r2, r3
 8008020:	bf0c      	ite	eq
 8008022:	2301      	moveq	r3, #1
 8008024:	2300      	movne	r3, #0
 8008026:	b2db      	uxtb	r3, r3
 8008028:	461a      	mov	r2, r3
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	429a      	cmp	r2, r3
 800802e:	d09f      	beq.n	8007f70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3740      	adds	r7, #64	; 0x40
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800803c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008040:	b0c0      	sub	sp, #256	; 0x100
 8008042:	af00      	add	r7, sp, #0
 8008044:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008058:	68d9      	ldr	r1, [r3, #12]
 800805a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	ea40 0301 	orr.w	r3, r0, r1
 8008064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800806a:	689a      	ldr	r2, [r3, #8]
 800806c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	431a      	orrs	r2, r3
 8008074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	431a      	orrs	r2, r3
 800807c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	4313      	orrs	r3, r2
 8008084:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008094:	f021 010c 	bic.w	r1, r1, #12
 8008098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080a2:	430b      	orrs	r3, r1
 80080a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80080b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b6:	6999      	ldr	r1, [r3, #24]
 80080b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	ea40 0301 	orr.w	r3, r0, r1
 80080c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	4b8f      	ldr	r3, [pc, #572]	; (8008308 <UART_SetConfig+0x2cc>)
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d005      	beq.n	80080dc <UART_SetConfig+0xa0>
 80080d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4b8d      	ldr	r3, [pc, #564]	; (800830c <UART_SetConfig+0x2d0>)
 80080d8:	429a      	cmp	r2, r3
 80080da:	d104      	bne.n	80080e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080dc:	f7fe fd42 	bl	8006b64 <HAL_RCC_GetPCLK2Freq>
 80080e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80080e4:	e003      	b.n	80080ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080e6:	f7fe fd29 	bl	8006b3c <HAL_RCC_GetPCLK1Freq>
 80080ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f8:	f040 810c 	bne.w	8008314 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008100:	2200      	movs	r2, #0
 8008102:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008106:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800810a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800810e:	4622      	mov	r2, r4
 8008110:	462b      	mov	r3, r5
 8008112:	1891      	adds	r1, r2, r2
 8008114:	65b9      	str	r1, [r7, #88]	; 0x58
 8008116:	415b      	adcs	r3, r3
 8008118:	65fb      	str	r3, [r7, #92]	; 0x5c
 800811a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800811e:	4621      	mov	r1, r4
 8008120:	eb12 0801 	adds.w	r8, r2, r1
 8008124:	4629      	mov	r1, r5
 8008126:	eb43 0901 	adc.w	r9, r3, r1
 800812a:	f04f 0200 	mov.w	r2, #0
 800812e:	f04f 0300 	mov.w	r3, #0
 8008132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800813a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800813e:	4690      	mov	r8, r2
 8008140:	4699      	mov	r9, r3
 8008142:	4623      	mov	r3, r4
 8008144:	eb18 0303 	adds.w	r3, r8, r3
 8008148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800814c:	462b      	mov	r3, r5
 800814e:	eb49 0303 	adc.w	r3, r9, r3
 8008152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008162:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800816a:	460b      	mov	r3, r1
 800816c:	18db      	adds	r3, r3, r3
 800816e:	653b      	str	r3, [r7, #80]	; 0x50
 8008170:	4613      	mov	r3, r2
 8008172:	eb42 0303 	adc.w	r3, r2, r3
 8008176:	657b      	str	r3, [r7, #84]	; 0x54
 8008178:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800817c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008180:	f7f8 fd6a 	bl	8000c58 <__aeabi_uldivmod>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4b61      	ldr	r3, [pc, #388]	; (8008310 <UART_SetConfig+0x2d4>)
 800818a:	fba3 2302 	umull	r2, r3, r3, r2
 800818e:	095b      	lsrs	r3, r3, #5
 8008190:	011c      	lsls	r4, r3, #4
 8008192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008196:	2200      	movs	r2, #0
 8008198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800819c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80081a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80081a4:	4642      	mov	r2, r8
 80081a6:	464b      	mov	r3, r9
 80081a8:	1891      	adds	r1, r2, r2
 80081aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80081ac:	415b      	adcs	r3, r3
 80081ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80081b4:	4641      	mov	r1, r8
 80081b6:	eb12 0a01 	adds.w	sl, r2, r1
 80081ba:	4649      	mov	r1, r9
 80081bc:	eb43 0b01 	adc.w	fp, r3, r1
 80081c0:	f04f 0200 	mov.w	r2, #0
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80081cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80081d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081d4:	4692      	mov	sl, r2
 80081d6:	469b      	mov	fp, r3
 80081d8:	4643      	mov	r3, r8
 80081da:	eb1a 0303 	adds.w	r3, sl, r3
 80081de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081e2:	464b      	mov	r3, r9
 80081e4:	eb4b 0303 	adc.w	r3, fp, r3
 80081e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80081fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008200:	460b      	mov	r3, r1
 8008202:	18db      	adds	r3, r3, r3
 8008204:	643b      	str	r3, [r7, #64]	; 0x40
 8008206:	4613      	mov	r3, r2
 8008208:	eb42 0303 	adc.w	r3, r2, r3
 800820c:	647b      	str	r3, [r7, #68]	; 0x44
 800820e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008216:	f7f8 fd1f 	bl	8000c58 <__aeabi_uldivmod>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4611      	mov	r1, r2
 8008220:	4b3b      	ldr	r3, [pc, #236]	; (8008310 <UART_SetConfig+0x2d4>)
 8008222:	fba3 2301 	umull	r2, r3, r3, r1
 8008226:	095b      	lsrs	r3, r3, #5
 8008228:	2264      	movs	r2, #100	; 0x64
 800822a:	fb02 f303 	mul.w	r3, r2, r3
 800822e:	1acb      	subs	r3, r1, r3
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008236:	4b36      	ldr	r3, [pc, #216]	; (8008310 <UART_SetConfig+0x2d4>)
 8008238:	fba3 2302 	umull	r2, r3, r3, r2
 800823c:	095b      	lsrs	r3, r3, #5
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008244:	441c      	add	r4, r3
 8008246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800824a:	2200      	movs	r2, #0
 800824c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008250:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008254:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008258:	4642      	mov	r2, r8
 800825a:	464b      	mov	r3, r9
 800825c:	1891      	adds	r1, r2, r2
 800825e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008260:	415b      	adcs	r3, r3
 8008262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008268:	4641      	mov	r1, r8
 800826a:	1851      	adds	r1, r2, r1
 800826c:	6339      	str	r1, [r7, #48]	; 0x30
 800826e:	4649      	mov	r1, r9
 8008270:	414b      	adcs	r3, r1
 8008272:	637b      	str	r3, [r7, #52]	; 0x34
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	f04f 0300 	mov.w	r3, #0
 800827c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008280:	4659      	mov	r1, fp
 8008282:	00cb      	lsls	r3, r1, #3
 8008284:	4651      	mov	r1, sl
 8008286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800828a:	4651      	mov	r1, sl
 800828c:	00ca      	lsls	r2, r1, #3
 800828e:	4610      	mov	r0, r2
 8008290:	4619      	mov	r1, r3
 8008292:	4603      	mov	r3, r0
 8008294:	4642      	mov	r2, r8
 8008296:	189b      	adds	r3, r3, r2
 8008298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800829c:	464b      	mov	r3, r9
 800829e:	460a      	mov	r2, r1
 80082a0:	eb42 0303 	adc.w	r3, r2, r3
 80082a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80082b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80082bc:	460b      	mov	r3, r1
 80082be:	18db      	adds	r3, r3, r3
 80082c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80082c2:	4613      	mov	r3, r2
 80082c4:	eb42 0303 	adc.w	r3, r2, r3
 80082c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80082d2:	f7f8 fcc1 	bl	8000c58 <__aeabi_uldivmod>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4b0d      	ldr	r3, [pc, #52]	; (8008310 <UART_SetConfig+0x2d4>)
 80082dc:	fba3 1302 	umull	r1, r3, r3, r2
 80082e0:	095b      	lsrs	r3, r3, #5
 80082e2:	2164      	movs	r1, #100	; 0x64
 80082e4:	fb01 f303 	mul.w	r3, r1, r3
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	3332      	adds	r3, #50	; 0x32
 80082ee:	4a08      	ldr	r2, [pc, #32]	; (8008310 <UART_SetConfig+0x2d4>)
 80082f0:	fba2 2303 	umull	r2, r3, r2, r3
 80082f4:	095b      	lsrs	r3, r3, #5
 80082f6:	f003 0207 	and.w	r2, r3, #7
 80082fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4422      	add	r2, r4
 8008302:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008304:	e106      	b.n	8008514 <UART_SetConfig+0x4d8>
 8008306:	bf00      	nop
 8008308:	40011000 	.word	0x40011000
 800830c:	40011400 	.word	0x40011400
 8008310:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008318:	2200      	movs	r2, #0
 800831a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800831e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008322:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008326:	4642      	mov	r2, r8
 8008328:	464b      	mov	r3, r9
 800832a:	1891      	adds	r1, r2, r2
 800832c:	6239      	str	r1, [r7, #32]
 800832e:	415b      	adcs	r3, r3
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
 8008332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008336:	4641      	mov	r1, r8
 8008338:	1854      	adds	r4, r2, r1
 800833a:	4649      	mov	r1, r9
 800833c:	eb43 0501 	adc.w	r5, r3, r1
 8008340:	f04f 0200 	mov.w	r2, #0
 8008344:	f04f 0300 	mov.w	r3, #0
 8008348:	00eb      	lsls	r3, r5, #3
 800834a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800834e:	00e2      	lsls	r2, r4, #3
 8008350:	4614      	mov	r4, r2
 8008352:	461d      	mov	r5, r3
 8008354:	4643      	mov	r3, r8
 8008356:	18e3      	adds	r3, r4, r3
 8008358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800835c:	464b      	mov	r3, r9
 800835e:	eb45 0303 	adc.w	r3, r5, r3
 8008362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008372:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008376:	f04f 0200 	mov.w	r2, #0
 800837a:	f04f 0300 	mov.w	r3, #0
 800837e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008382:	4629      	mov	r1, r5
 8008384:	008b      	lsls	r3, r1, #2
 8008386:	4621      	mov	r1, r4
 8008388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800838c:	4621      	mov	r1, r4
 800838e:	008a      	lsls	r2, r1, #2
 8008390:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008394:	f7f8 fc60 	bl	8000c58 <__aeabi_uldivmod>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	4b60      	ldr	r3, [pc, #384]	; (8008520 <UART_SetConfig+0x4e4>)
 800839e:	fba3 2302 	umull	r2, r3, r3, r2
 80083a2:	095b      	lsrs	r3, r3, #5
 80083a4:	011c      	lsls	r4, r3, #4
 80083a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083aa:	2200      	movs	r2, #0
 80083ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80083b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80083b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80083b8:	4642      	mov	r2, r8
 80083ba:	464b      	mov	r3, r9
 80083bc:	1891      	adds	r1, r2, r2
 80083be:	61b9      	str	r1, [r7, #24]
 80083c0:	415b      	adcs	r3, r3
 80083c2:	61fb      	str	r3, [r7, #28]
 80083c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083c8:	4641      	mov	r1, r8
 80083ca:	1851      	adds	r1, r2, r1
 80083cc:	6139      	str	r1, [r7, #16]
 80083ce:	4649      	mov	r1, r9
 80083d0:	414b      	adcs	r3, r1
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	f04f 0300 	mov.w	r3, #0
 80083dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083e0:	4659      	mov	r1, fp
 80083e2:	00cb      	lsls	r3, r1, #3
 80083e4:	4651      	mov	r1, sl
 80083e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083ea:	4651      	mov	r1, sl
 80083ec:	00ca      	lsls	r2, r1, #3
 80083ee:	4610      	mov	r0, r2
 80083f0:	4619      	mov	r1, r3
 80083f2:	4603      	mov	r3, r0
 80083f4:	4642      	mov	r2, r8
 80083f6:	189b      	adds	r3, r3, r2
 80083f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083fc:	464b      	mov	r3, r9
 80083fe:	460a      	mov	r2, r1
 8008400:	eb42 0303 	adc.w	r3, r2, r3
 8008404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	67bb      	str	r3, [r7, #120]	; 0x78
 8008412:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008414:	f04f 0200 	mov.w	r2, #0
 8008418:	f04f 0300 	mov.w	r3, #0
 800841c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008420:	4649      	mov	r1, r9
 8008422:	008b      	lsls	r3, r1, #2
 8008424:	4641      	mov	r1, r8
 8008426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800842a:	4641      	mov	r1, r8
 800842c:	008a      	lsls	r2, r1, #2
 800842e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008432:	f7f8 fc11 	bl	8000c58 <__aeabi_uldivmod>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4611      	mov	r1, r2
 800843c:	4b38      	ldr	r3, [pc, #224]	; (8008520 <UART_SetConfig+0x4e4>)
 800843e:	fba3 2301 	umull	r2, r3, r3, r1
 8008442:	095b      	lsrs	r3, r3, #5
 8008444:	2264      	movs	r2, #100	; 0x64
 8008446:	fb02 f303 	mul.w	r3, r2, r3
 800844a:	1acb      	subs	r3, r1, r3
 800844c:	011b      	lsls	r3, r3, #4
 800844e:	3332      	adds	r3, #50	; 0x32
 8008450:	4a33      	ldr	r2, [pc, #204]	; (8008520 <UART_SetConfig+0x4e4>)
 8008452:	fba2 2303 	umull	r2, r3, r2, r3
 8008456:	095b      	lsrs	r3, r3, #5
 8008458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800845c:	441c      	add	r4, r3
 800845e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008462:	2200      	movs	r2, #0
 8008464:	673b      	str	r3, [r7, #112]	; 0x70
 8008466:	677a      	str	r2, [r7, #116]	; 0x74
 8008468:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800846c:	4642      	mov	r2, r8
 800846e:	464b      	mov	r3, r9
 8008470:	1891      	adds	r1, r2, r2
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	415b      	adcs	r3, r3
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800847c:	4641      	mov	r1, r8
 800847e:	1851      	adds	r1, r2, r1
 8008480:	6039      	str	r1, [r7, #0]
 8008482:	4649      	mov	r1, r9
 8008484:	414b      	adcs	r3, r1
 8008486:	607b      	str	r3, [r7, #4]
 8008488:	f04f 0200 	mov.w	r2, #0
 800848c:	f04f 0300 	mov.w	r3, #0
 8008490:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008494:	4659      	mov	r1, fp
 8008496:	00cb      	lsls	r3, r1, #3
 8008498:	4651      	mov	r1, sl
 800849a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800849e:	4651      	mov	r1, sl
 80084a0:	00ca      	lsls	r2, r1, #3
 80084a2:	4610      	mov	r0, r2
 80084a4:	4619      	mov	r1, r3
 80084a6:	4603      	mov	r3, r0
 80084a8:	4642      	mov	r2, r8
 80084aa:	189b      	adds	r3, r3, r2
 80084ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80084ae:	464b      	mov	r3, r9
 80084b0:	460a      	mov	r2, r1
 80084b2:	eb42 0303 	adc.w	r3, r2, r3
 80084b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	663b      	str	r3, [r7, #96]	; 0x60
 80084c2:	667a      	str	r2, [r7, #100]	; 0x64
 80084c4:	f04f 0200 	mov.w	r2, #0
 80084c8:	f04f 0300 	mov.w	r3, #0
 80084cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80084d0:	4649      	mov	r1, r9
 80084d2:	008b      	lsls	r3, r1, #2
 80084d4:	4641      	mov	r1, r8
 80084d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084da:	4641      	mov	r1, r8
 80084dc:	008a      	lsls	r2, r1, #2
 80084de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80084e2:	f7f8 fbb9 	bl	8000c58 <__aeabi_uldivmod>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4b0d      	ldr	r3, [pc, #52]	; (8008520 <UART_SetConfig+0x4e4>)
 80084ec:	fba3 1302 	umull	r1, r3, r3, r2
 80084f0:	095b      	lsrs	r3, r3, #5
 80084f2:	2164      	movs	r1, #100	; 0x64
 80084f4:	fb01 f303 	mul.w	r3, r1, r3
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	3332      	adds	r3, #50	; 0x32
 80084fe:	4a08      	ldr	r2, [pc, #32]	; (8008520 <UART_SetConfig+0x4e4>)
 8008500:	fba2 2303 	umull	r2, r3, r2, r3
 8008504:	095b      	lsrs	r3, r3, #5
 8008506:	f003 020f 	and.w	r2, r3, #15
 800850a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4422      	add	r2, r4
 8008512:	609a      	str	r2, [r3, #8]
}
 8008514:	bf00      	nop
 8008516:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800851a:	46bd      	mov	sp, r7
 800851c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008520:	51eb851f 	.word	0x51eb851f

08008524 <malloc>:
 8008524:	4b02      	ldr	r3, [pc, #8]	; (8008530 <malloc+0xc>)
 8008526:	4601      	mov	r1, r0
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	f000 b82b 	b.w	8008584 <_malloc_r>
 800852e:	bf00      	nop
 8008530:	20000068 	.word	0x20000068

08008534 <free>:
 8008534:	4b02      	ldr	r3, [pc, #8]	; (8008540 <free+0xc>)
 8008536:	4601      	mov	r1, r0
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	f001 bd63 	b.w	800a004 <_free_r>
 800853e:	bf00      	nop
 8008540:	20000068 	.word	0x20000068

08008544 <sbrk_aligned>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	4e0e      	ldr	r6, [pc, #56]	; (8008580 <sbrk_aligned+0x3c>)
 8008548:	460c      	mov	r4, r1
 800854a:	6831      	ldr	r1, [r6, #0]
 800854c:	4605      	mov	r5, r0
 800854e:	b911      	cbnz	r1, 8008556 <sbrk_aligned+0x12>
 8008550:	f000 fe7e 	bl	8009250 <_sbrk_r>
 8008554:	6030      	str	r0, [r6, #0]
 8008556:	4621      	mov	r1, r4
 8008558:	4628      	mov	r0, r5
 800855a:	f000 fe79 	bl	8009250 <_sbrk_r>
 800855e:	1c43      	adds	r3, r0, #1
 8008560:	d00a      	beq.n	8008578 <sbrk_aligned+0x34>
 8008562:	1cc4      	adds	r4, r0, #3
 8008564:	f024 0403 	bic.w	r4, r4, #3
 8008568:	42a0      	cmp	r0, r4
 800856a:	d007      	beq.n	800857c <sbrk_aligned+0x38>
 800856c:	1a21      	subs	r1, r4, r0
 800856e:	4628      	mov	r0, r5
 8008570:	f000 fe6e 	bl	8009250 <_sbrk_r>
 8008574:	3001      	adds	r0, #1
 8008576:	d101      	bne.n	800857c <sbrk_aligned+0x38>
 8008578:	f04f 34ff 	mov.w	r4, #4294967295
 800857c:	4620      	mov	r0, r4
 800857e:	bd70      	pop	{r4, r5, r6, pc}
 8008580:	200003b4 	.word	0x200003b4

08008584 <_malloc_r>:
 8008584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008588:	1ccd      	adds	r5, r1, #3
 800858a:	f025 0503 	bic.w	r5, r5, #3
 800858e:	3508      	adds	r5, #8
 8008590:	2d0c      	cmp	r5, #12
 8008592:	bf38      	it	cc
 8008594:	250c      	movcc	r5, #12
 8008596:	2d00      	cmp	r5, #0
 8008598:	4607      	mov	r7, r0
 800859a:	db01      	blt.n	80085a0 <_malloc_r+0x1c>
 800859c:	42a9      	cmp	r1, r5
 800859e:	d905      	bls.n	80085ac <_malloc_r+0x28>
 80085a0:	230c      	movs	r3, #12
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	2600      	movs	r6, #0
 80085a6:	4630      	mov	r0, r6
 80085a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008680 <_malloc_r+0xfc>
 80085b0:	f000 f868 	bl	8008684 <__malloc_lock>
 80085b4:	f8d8 3000 	ldr.w	r3, [r8]
 80085b8:	461c      	mov	r4, r3
 80085ba:	bb5c      	cbnz	r4, 8008614 <_malloc_r+0x90>
 80085bc:	4629      	mov	r1, r5
 80085be:	4638      	mov	r0, r7
 80085c0:	f7ff ffc0 	bl	8008544 <sbrk_aligned>
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	4604      	mov	r4, r0
 80085c8:	d155      	bne.n	8008676 <_malloc_r+0xf2>
 80085ca:	f8d8 4000 	ldr.w	r4, [r8]
 80085ce:	4626      	mov	r6, r4
 80085d0:	2e00      	cmp	r6, #0
 80085d2:	d145      	bne.n	8008660 <_malloc_r+0xdc>
 80085d4:	2c00      	cmp	r4, #0
 80085d6:	d048      	beq.n	800866a <_malloc_r+0xe6>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	4631      	mov	r1, r6
 80085dc:	4638      	mov	r0, r7
 80085de:	eb04 0903 	add.w	r9, r4, r3
 80085e2:	f000 fe35 	bl	8009250 <_sbrk_r>
 80085e6:	4581      	cmp	r9, r0
 80085e8:	d13f      	bne.n	800866a <_malloc_r+0xe6>
 80085ea:	6821      	ldr	r1, [r4, #0]
 80085ec:	1a6d      	subs	r5, r5, r1
 80085ee:	4629      	mov	r1, r5
 80085f0:	4638      	mov	r0, r7
 80085f2:	f7ff ffa7 	bl	8008544 <sbrk_aligned>
 80085f6:	3001      	adds	r0, #1
 80085f8:	d037      	beq.n	800866a <_malloc_r+0xe6>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	442b      	add	r3, r5
 80085fe:	6023      	str	r3, [r4, #0]
 8008600:	f8d8 3000 	ldr.w	r3, [r8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d038      	beq.n	800867a <_malloc_r+0xf6>
 8008608:	685a      	ldr	r2, [r3, #4]
 800860a:	42a2      	cmp	r2, r4
 800860c:	d12b      	bne.n	8008666 <_malloc_r+0xe2>
 800860e:	2200      	movs	r2, #0
 8008610:	605a      	str	r2, [r3, #4]
 8008612:	e00f      	b.n	8008634 <_malloc_r+0xb0>
 8008614:	6822      	ldr	r2, [r4, #0]
 8008616:	1b52      	subs	r2, r2, r5
 8008618:	d41f      	bmi.n	800865a <_malloc_r+0xd6>
 800861a:	2a0b      	cmp	r2, #11
 800861c:	d917      	bls.n	800864e <_malloc_r+0xca>
 800861e:	1961      	adds	r1, r4, r5
 8008620:	42a3      	cmp	r3, r4
 8008622:	6025      	str	r5, [r4, #0]
 8008624:	bf18      	it	ne
 8008626:	6059      	strne	r1, [r3, #4]
 8008628:	6863      	ldr	r3, [r4, #4]
 800862a:	bf08      	it	eq
 800862c:	f8c8 1000 	streq.w	r1, [r8]
 8008630:	5162      	str	r2, [r4, r5]
 8008632:	604b      	str	r3, [r1, #4]
 8008634:	4638      	mov	r0, r7
 8008636:	f104 060b 	add.w	r6, r4, #11
 800863a:	f000 f829 	bl	8008690 <__malloc_unlock>
 800863e:	f026 0607 	bic.w	r6, r6, #7
 8008642:	1d23      	adds	r3, r4, #4
 8008644:	1af2      	subs	r2, r6, r3
 8008646:	d0ae      	beq.n	80085a6 <_malloc_r+0x22>
 8008648:	1b9b      	subs	r3, r3, r6
 800864a:	50a3      	str	r3, [r4, r2]
 800864c:	e7ab      	b.n	80085a6 <_malloc_r+0x22>
 800864e:	42a3      	cmp	r3, r4
 8008650:	6862      	ldr	r2, [r4, #4]
 8008652:	d1dd      	bne.n	8008610 <_malloc_r+0x8c>
 8008654:	f8c8 2000 	str.w	r2, [r8]
 8008658:	e7ec      	b.n	8008634 <_malloc_r+0xb0>
 800865a:	4623      	mov	r3, r4
 800865c:	6864      	ldr	r4, [r4, #4]
 800865e:	e7ac      	b.n	80085ba <_malloc_r+0x36>
 8008660:	4634      	mov	r4, r6
 8008662:	6876      	ldr	r6, [r6, #4]
 8008664:	e7b4      	b.n	80085d0 <_malloc_r+0x4c>
 8008666:	4613      	mov	r3, r2
 8008668:	e7cc      	b.n	8008604 <_malloc_r+0x80>
 800866a:	230c      	movs	r3, #12
 800866c:	603b      	str	r3, [r7, #0]
 800866e:	4638      	mov	r0, r7
 8008670:	f000 f80e 	bl	8008690 <__malloc_unlock>
 8008674:	e797      	b.n	80085a6 <_malloc_r+0x22>
 8008676:	6025      	str	r5, [r4, #0]
 8008678:	e7dc      	b.n	8008634 <_malloc_r+0xb0>
 800867a:	605b      	str	r3, [r3, #4]
 800867c:	deff      	udf	#255	; 0xff
 800867e:	bf00      	nop
 8008680:	200003b0 	.word	0x200003b0

08008684 <__malloc_lock>:
 8008684:	4801      	ldr	r0, [pc, #4]	; (800868c <__malloc_lock+0x8>)
 8008686:	f000 be30 	b.w	80092ea <__retarget_lock_acquire_recursive>
 800868a:	bf00      	nop
 800868c:	200004f8 	.word	0x200004f8

08008690 <__malloc_unlock>:
 8008690:	4801      	ldr	r0, [pc, #4]	; (8008698 <__malloc_unlock+0x8>)
 8008692:	f000 be2b 	b.w	80092ec <__retarget_lock_release_recursive>
 8008696:	bf00      	nop
 8008698:	200004f8 	.word	0x200004f8

0800869c <__cvt>:
 800869c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086a0:	ec55 4b10 	vmov	r4, r5, d0
 80086a4:	2d00      	cmp	r5, #0
 80086a6:	460e      	mov	r6, r1
 80086a8:	4619      	mov	r1, r3
 80086aa:	462b      	mov	r3, r5
 80086ac:	bfbb      	ittet	lt
 80086ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80086b2:	461d      	movlt	r5, r3
 80086b4:	2300      	movge	r3, #0
 80086b6:	232d      	movlt	r3, #45	; 0x2d
 80086b8:	700b      	strb	r3, [r1, #0]
 80086ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80086c0:	4691      	mov	r9, r2
 80086c2:	f023 0820 	bic.w	r8, r3, #32
 80086c6:	bfbc      	itt	lt
 80086c8:	4622      	movlt	r2, r4
 80086ca:	4614      	movlt	r4, r2
 80086cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086d0:	d005      	beq.n	80086de <__cvt+0x42>
 80086d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80086d6:	d100      	bne.n	80086da <__cvt+0x3e>
 80086d8:	3601      	adds	r6, #1
 80086da:	2102      	movs	r1, #2
 80086dc:	e000      	b.n	80086e0 <__cvt+0x44>
 80086de:	2103      	movs	r1, #3
 80086e0:	ab03      	add	r3, sp, #12
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	ab02      	add	r3, sp, #8
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	ec45 4b10 	vmov	d0, r4, r5
 80086ec:	4653      	mov	r3, sl
 80086ee:	4632      	mov	r2, r6
 80086f0:	f000 fe96 	bl	8009420 <_dtoa_r>
 80086f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086f8:	4607      	mov	r7, r0
 80086fa:	d102      	bne.n	8008702 <__cvt+0x66>
 80086fc:	f019 0f01 	tst.w	r9, #1
 8008700:	d022      	beq.n	8008748 <__cvt+0xac>
 8008702:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008706:	eb07 0906 	add.w	r9, r7, r6
 800870a:	d110      	bne.n	800872e <__cvt+0x92>
 800870c:	783b      	ldrb	r3, [r7, #0]
 800870e:	2b30      	cmp	r3, #48	; 0x30
 8008710:	d10a      	bne.n	8008728 <__cvt+0x8c>
 8008712:	2200      	movs	r2, #0
 8008714:	2300      	movs	r3, #0
 8008716:	4620      	mov	r0, r4
 8008718:	4629      	mov	r1, r5
 800871a:	f7f8 f9dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800871e:	b918      	cbnz	r0, 8008728 <__cvt+0x8c>
 8008720:	f1c6 0601 	rsb	r6, r6, #1
 8008724:	f8ca 6000 	str.w	r6, [sl]
 8008728:	f8da 3000 	ldr.w	r3, [sl]
 800872c:	4499      	add	r9, r3
 800872e:	2200      	movs	r2, #0
 8008730:	2300      	movs	r3, #0
 8008732:	4620      	mov	r0, r4
 8008734:	4629      	mov	r1, r5
 8008736:	f7f8 f9cf 	bl	8000ad8 <__aeabi_dcmpeq>
 800873a:	b108      	cbz	r0, 8008740 <__cvt+0xa4>
 800873c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008740:	2230      	movs	r2, #48	; 0x30
 8008742:	9b03      	ldr	r3, [sp, #12]
 8008744:	454b      	cmp	r3, r9
 8008746:	d307      	bcc.n	8008758 <__cvt+0xbc>
 8008748:	9b03      	ldr	r3, [sp, #12]
 800874a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800874c:	1bdb      	subs	r3, r3, r7
 800874e:	4638      	mov	r0, r7
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	b004      	add	sp, #16
 8008754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008758:	1c59      	adds	r1, r3, #1
 800875a:	9103      	str	r1, [sp, #12]
 800875c:	701a      	strb	r2, [r3, #0]
 800875e:	e7f0      	b.n	8008742 <__cvt+0xa6>

08008760 <__exponent>:
 8008760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008762:	4603      	mov	r3, r0
 8008764:	2900      	cmp	r1, #0
 8008766:	bfb8      	it	lt
 8008768:	4249      	neglt	r1, r1
 800876a:	f803 2b02 	strb.w	r2, [r3], #2
 800876e:	bfb4      	ite	lt
 8008770:	222d      	movlt	r2, #45	; 0x2d
 8008772:	222b      	movge	r2, #43	; 0x2b
 8008774:	2909      	cmp	r1, #9
 8008776:	7042      	strb	r2, [r0, #1]
 8008778:	dd2a      	ble.n	80087d0 <__exponent+0x70>
 800877a:	f10d 0207 	add.w	r2, sp, #7
 800877e:	4617      	mov	r7, r2
 8008780:	260a      	movs	r6, #10
 8008782:	4694      	mov	ip, r2
 8008784:	fb91 f5f6 	sdiv	r5, r1, r6
 8008788:	fb06 1415 	mls	r4, r6, r5, r1
 800878c:	3430      	adds	r4, #48	; 0x30
 800878e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008792:	460c      	mov	r4, r1
 8008794:	2c63      	cmp	r4, #99	; 0x63
 8008796:	f102 32ff 	add.w	r2, r2, #4294967295
 800879a:	4629      	mov	r1, r5
 800879c:	dcf1      	bgt.n	8008782 <__exponent+0x22>
 800879e:	3130      	adds	r1, #48	; 0x30
 80087a0:	f1ac 0402 	sub.w	r4, ip, #2
 80087a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80087a8:	1c41      	adds	r1, r0, #1
 80087aa:	4622      	mov	r2, r4
 80087ac:	42ba      	cmp	r2, r7
 80087ae:	d30a      	bcc.n	80087c6 <__exponent+0x66>
 80087b0:	f10d 0209 	add.w	r2, sp, #9
 80087b4:	eba2 020c 	sub.w	r2, r2, ip
 80087b8:	42bc      	cmp	r4, r7
 80087ba:	bf88      	it	hi
 80087bc:	2200      	movhi	r2, #0
 80087be:	4413      	add	r3, r2
 80087c0:	1a18      	subs	r0, r3, r0
 80087c2:	b003      	add	sp, #12
 80087c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80087ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 80087ce:	e7ed      	b.n	80087ac <__exponent+0x4c>
 80087d0:	2330      	movs	r3, #48	; 0x30
 80087d2:	3130      	adds	r1, #48	; 0x30
 80087d4:	7083      	strb	r3, [r0, #2]
 80087d6:	70c1      	strb	r1, [r0, #3]
 80087d8:	1d03      	adds	r3, r0, #4
 80087da:	e7f1      	b.n	80087c0 <__exponent+0x60>

080087dc <_printf_float>:
 80087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	ed2d 8b02 	vpush	{d8}
 80087e4:	b08d      	sub	sp, #52	; 0x34
 80087e6:	460c      	mov	r4, r1
 80087e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80087ec:	4616      	mov	r6, r2
 80087ee:	461f      	mov	r7, r3
 80087f0:	4605      	mov	r5, r0
 80087f2:	f000 fcf5 	bl	80091e0 <_localeconv_r>
 80087f6:	f8d0 a000 	ldr.w	sl, [r0]
 80087fa:	4650      	mov	r0, sl
 80087fc:	f7f7 fd40 	bl	8000280 <strlen>
 8008800:	2300      	movs	r3, #0
 8008802:	930a      	str	r3, [sp, #40]	; 0x28
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	9305      	str	r3, [sp, #20]
 8008808:	f8d8 3000 	ldr.w	r3, [r8]
 800880c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008810:	3307      	adds	r3, #7
 8008812:	f023 0307 	bic.w	r3, r3, #7
 8008816:	f103 0208 	add.w	r2, r3, #8
 800881a:	f8c8 2000 	str.w	r2, [r8]
 800881e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008822:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008826:	9307      	str	r3, [sp, #28]
 8008828:	f8cd 8018 	str.w	r8, [sp, #24]
 800882c:	ee08 0a10 	vmov	s16, r0
 8008830:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008834:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008838:	4b9e      	ldr	r3, [pc, #632]	; (8008ab4 <_printf_float+0x2d8>)
 800883a:	f04f 32ff 	mov.w	r2, #4294967295
 800883e:	f7f8 f97d 	bl	8000b3c <__aeabi_dcmpun>
 8008842:	bb88      	cbnz	r0, 80088a8 <_printf_float+0xcc>
 8008844:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008848:	4b9a      	ldr	r3, [pc, #616]	; (8008ab4 <_printf_float+0x2d8>)
 800884a:	f04f 32ff 	mov.w	r2, #4294967295
 800884e:	f7f8 f957 	bl	8000b00 <__aeabi_dcmple>
 8008852:	bb48      	cbnz	r0, 80088a8 <_printf_float+0xcc>
 8008854:	2200      	movs	r2, #0
 8008856:	2300      	movs	r3, #0
 8008858:	4640      	mov	r0, r8
 800885a:	4649      	mov	r1, r9
 800885c:	f7f8 f946 	bl	8000aec <__aeabi_dcmplt>
 8008860:	b110      	cbz	r0, 8008868 <_printf_float+0x8c>
 8008862:	232d      	movs	r3, #45	; 0x2d
 8008864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008868:	4a93      	ldr	r2, [pc, #588]	; (8008ab8 <_printf_float+0x2dc>)
 800886a:	4b94      	ldr	r3, [pc, #592]	; (8008abc <_printf_float+0x2e0>)
 800886c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008870:	bf94      	ite	ls
 8008872:	4690      	movls	r8, r2
 8008874:	4698      	movhi	r8, r3
 8008876:	2303      	movs	r3, #3
 8008878:	6123      	str	r3, [r4, #16]
 800887a:	9b05      	ldr	r3, [sp, #20]
 800887c:	f023 0304 	bic.w	r3, r3, #4
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	f04f 0900 	mov.w	r9, #0
 8008886:	9700      	str	r7, [sp, #0]
 8008888:	4633      	mov	r3, r6
 800888a:	aa0b      	add	r2, sp, #44	; 0x2c
 800888c:	4621      	mov	r1, r4
 800888e:	4628      	mov	r0, r5
 8008890:	f000 f9da 	bl	8008c48 <_printf_common>
 8008894:	3001      	adds	r0, #1
 8008896:	f040 8090 	bne.w	80089ba <_printf_float+0x1de>
 800889a:	f04f 30ff 	mov.w	r0, #4294967295
 800889e:	b00d      	add	sp, #52	; 0x34
 80088a0:	ecbd 8b02 	vpop	{d8}
 80088a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a8:	4642      	mov	r2, r8
 80088aa:	464b      	mov	r3, r9
 80088ac:	4640      	mov	r0, r8
 80088ae:	4649      	mov	r1, r9
 80088b0:	f7f8 f944 	bl	8000b3c <__aeabi_dcmpun>
 80088b4:	b140      	cbz	r0, 80088c8 <_printf_float+0xec>
 80088b6:	464b      	mov	r3, r9
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	bfbc      	itt	lt
 80088bc:	232d      	movlt	r3, #45	; 0x2d
 80088be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80088c2:	4a7f      	ldr	r2, [pc, #508]	; (8008ac0 <_printf_float+0x2e4>)
 80088c4:	4b7f      	ldr	r3, [pc, #508]	; (8008ac4 <_printf_float+0x2e8>)
 80088c6:	e7d1      	b.n	800886c <_printf_float+0x90>
 80088c8:	6863      	ldr	r3, [r4, #4]
 80088ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80088ce:	9206      	str	r2, [sp, #24]
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	d13f      	bne.n	8008954 <_printf_float+0x178>
 80088d4:	2306      	movs	r3, #6
 80088d6:	6063      	str	r3, [r4, #4]
 80088d8:	9b05      	ldr	r3, [sp, #20]
 80088da:	6861      	ldr	r1, [r4, #4]
 80088dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80088e0:	2300      	movs	r3, #0
 80088e2:	9303      	str	r3, [sp, #12]
 80088e4:	ab0a      	add	r3, sp, #40	; 0x28
 80088e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80088ea:	ab09      	add	r3, sp, #36	; 0x24
 80088ec:	ec49 8b10 	vmov	d0, r8, r9
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	6022      	str	r2, [r4, #0]
 80088f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80088f8:	4628      	mov	r0, r5
 80088fa:	f7ff fecf 	bl	800869c <__cvt>
 80088fe:	9b06      	ldr	r3, [sp, #24]
 8008900:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008902:	2b47      	cmp	r3, #71	; 0x47
 8008904:	4680      	mov	r8, r0
 8008906:	d108      	bne.n	800891a <_printf_float+0x13e>
 8008908:	1cc8      	adds	r0, r1, #3
 800890a:	db02      	blt.n	8008912 <_printf_float+0x136>
 800890c:	6863      	ldr	r3, [r4, #4]
 800890e:	4299      	cmp	r1, r3
 8008910:	dd41      	ble.n	8008996 <_printf_float+0x1ba>
 8008912:	f1ab 0302 	sub.w	r3, fp, #2
 8008916:	fa5f fb83 	uxtb.w	fp, r3
 800891a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800891e:	d820      	bhi.n	8008962 <_printf_float+0x186>
 8008920:	3901      	subs	r1, #1
 8008922:	465a      	mov	r2, fp
 8008924:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008928:	9109      	str	r1, [sp, #36]	; 0x24
 800892a:	f7ff ff19 	bl	8008760 <__exponent>
 800892e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008930:	1813      	adds	r3, r2, r0
 8008932:	2a01      	cmp	r2, #1
 8008934:	4681      	mov	r9, r0
 8008936:	6123      	str	r3, [r4, #16]
 8008938:	dc02      	bgt.n	8008940 <_printf_float+0x164>
 800893a:	6822      	ldr	r2, [r4, #0]
 800893c:	07d2      	lsls	r2, r2, #31
 800893e:	d501      	bpl.n	8008944 <_printf_float+0x168>
 8008940:	3301      	adds	r3, #1
 8008942:	6123      	str	r3, [r4, #16]
 8008944:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008948:	2b00      	cmp	r3, #0
 800894a:	d09c      	beq.n	8008886 <_printf_float+0xaa>
 800894c:	232d      	movs	r3, #45	; 0x2d
 800894e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008952:	e798      	b.n	8008886 <_printf_float+0xaa>
 8008954:	9a06      	ldr	r2, [sp, #24]
 8008956:	2a47      	cmp	r2, #71	; 0x47
 8008958:	d1be      	bne.n	80088d8 <_printf_float+0xfc>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1bc      	bne.n	80088d8 <_printf_float+0xfc>
 800895e:	2301      	movs	r3, #1
 8008960:	e7b9      	b.n	80088d6 <_printf_float+0xfa>
 8008962:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008966:	d118      	bne.n	800899a <_printf_float+0x1be>
 8008968:	2900      	cmp	r1, #0
 800896a:	6863      	ldr	r3, [r4, #4]
 800896c:	dd0b      	ble.n	8008986 <_printf_float+0x1aa>
 800896e:	6121      	str	r1, [r4, #16]
 8008970:	b913      	cbnz	r3, 8008978 <_printf_float+0x19c>
 8008972:	6822      	ldr	r2, [r4, #0]
 8008974:	07d0      	lsls	r0, r2, #31
 8008976:	d502      	bpl.n	800897e <_printf_float+0x1a2>
 8008978:	3301      	adds	r3, #1
 800897a:	440b      	add	r3, r1
 800897c:	6123      	str	r3, [r4, #16]
 800897e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008980:	f04f 0900 	mov.w	r9, #0
 8008984:	e7de      	b.n	8008944 <_printf_float+0x168>
 8008986:	b913      	cbnz	r3, 800898e <_printf_float+0x1b2>
 8008988:	6822      	ldr	r2, [r4, #0]
 800898a:	07d2      	lsls	r2, r2, #31
 800898c:	d501      	bpl.n	8008992 <_printf_float+0x1b6>
 800898e:	3302      	adds	r3, #2
 8008990:	e7f4      	b.n	800897c <_printf_float+0x1a0>
 8008992:	2301      	movs	r3, #1
 8008994:	e7f2      	b.n	800897c <_printf_float+0x1a0>
 8008996:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800899a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800899c:	4299      	cmp	r1, r3
 800899e:	db05      	blt.n	80089ac <_printf_float+0x1d0>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	6121      	str	r1, [r4, #16]
 80089a4:	07d8      	lsls	r0, r3, #31
 80089a6:	d5ea      	bpl.n	800897e <_printf_float+0x1a2>
 80089a8:	1c4b      	adds	r3, r1, #1
 80089aa:	e7e7      	b.n	800897c <_printf_float+0x1a0>
 80089ac:	2900      	cmp	r1, #0
 80089ae:	bfd4      	ite	le
 80089b0:	f1c1 0202 	rsble	r2, r1, #2
 80089b4:	2201      	movgt	r2, #1
 80089b6:	4413      	add	r3, r2
 80089b8:	e7e0      	b.n	800897c <_printf_float+0x1a0>
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	055a      	lsls	r2, r3, #21
 80089be:	d407      	bmi.n	80089d0 <_printf_float+0x1f4>
 80089c0:	6923      	ldr	r3, [r4, #16]
 80089c2:	4642      	mov	r2, r8
 80089c4:	4631      	mov	r1, r6
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b8      	blx	r7
 80089ca:	3001      	adds	r0, #1
 80089cc:	d12c      	bne.n	8008a28 <_printf_float+0x24c>
 80089ce:	e764      	b.n	800889a <_printf_float+0xbe>
 80089d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089d4:	f240 80e0 	bls.w	8008b98 <_printf_float+0x3bc>
 80089d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089dc:	2200      	movs	r2, #0
 80089de:	2300      	movs	r3, #0
 80089e0:	f7f8 f87a 	bl	8000ad8 <__aeabi_dcmpeq>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d034      	beq.n	8008a52 <_printf_float+0x276>
 80089e8:	4a37      	ldr	r2, [pc, #220]	; (8008ac8 <_printf_float+0x2ec>)
 80089ea:	2301      	movs	r3, #1
 80089ec:	4631      	mov	r1, r6
 80089ee:	4628      	mov	r0, r5
 80089f0:	47b8      	blx	r7
 80089f2:	3001      	adds	r0, #1
 80089f4:	f43f af51 	beq.w	800889a <_printf_float+0xbe>
 80089f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089fc:	429a      	cmp	r2, r3
 80089fe:	db02      	blt.n	8008a06 <_printf_float+0x22a>
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	07d8      	lsls	r0, r3, #31
 8008a04:	d510      	bpl.n	8008a28 <_printf_float+0x24c>
 8008a06:	ee18 3a10 	vmov	r3, s16
 8008a0a:	4652      	mov	r2, sl
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4628      	mov	r0, r5
 8008a10:	47b8      	blx	r7
 8008a12:	3001      	adds	r0, #1
 8008a14:	f43f af41 	beq.w	800889a <_printf_float+0xbe>
 8008a18:	f04f 0800 	mov.w	r8, #0
 8008a1c:	f104 091a 	add.w	r9, r4, #26
 8008a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a22:	3b01      	subs	r3, #1
 8008a24:	4543      	cmp	r3, r8
 8008a26:	dc09      	bgt.n	8008a3c <_printf_float+0x260>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	079b      	lsls	r3, r3, #30
 8008a2c:	f100 8107 	bmi.w	8008c3e <_printf_float+0x462>
 8008a30:	68e0      	ldr	r0, [r4, #12]
 8008a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a34:	4298      	cmp	r0, r3
 8008a36:	bfb8      	it	lt
 8008a38:	4618      	movlt	r0, r3
 8008a3a:	e730      	b.n	800889e <_printf_float+0xc2>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	464a      	mov	r2, r9
 8008a40:	4631      	mov	r1, r6
 8008a42:	4628      	mov	r0, r5
 8008a44:	47b8      	blx	r7
 8008a46:	3001      	adds	r0, #1
 8008a48:	f43f af27 	beq.w	800889a <_printf_float+0xbe>
 8008a4c:	f108 0801 	add.w	r8, r8, #1
 8008a50:	e7e6      	b.n	8008a20 <_printf_float+0x244>
 8008a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	dc39      	bgt.n	8008acc <_printf_float+0x2f0>
 8008a58:	4a1b      	ldr	r2, [pc, #108]	; (8008ac8 <_printf_float+0x2ec>)
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	4628      	mov	r0, r5
 8008a60:	47b8      	blx	r7
 8008a62:	3001      	adds	r0, #1
 8008a64:	f43f af19 	beq.w	800889a <_printf_float+0xbe>
 8008a68:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	d102      	bne.n	8008a76 <_printf_float+0x29a>
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	07d9      	lsls	r1, r3, #31
 8008a74:	d5d8      	bpl.n	8008a28 <_printf_float+0x24c>
 8008a76:	ee18 3a10 	vmov	r3, s16
 8008a7a:	4652      	mov	r2, sl
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	4628      	mov	r0, r5
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	f43f af09 	beq.w	800889a <_printf_float+0xbe>
 8008a88:	f04f 0900 	mov.w	r9, #0
 8008a8c:	f104 0a1a 	add.w	sl, r4, #26
 8008a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a92:	425b      	negs	r3, r3
 8008a94:	454b      	cmp	r3, r9
 8008a96:	dc01      	bgt.n	8008a9c <_printf_float+0x2c0>
 8008a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a9a:	e792      	b.n	80089c2 <_printf_float+0x1e6>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	4652      	mov	r2, sl
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	47b8      	blx	r7
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	f43f aef7 	beq.w	800889a <_printf_float+0xbe>
 8008aac:	f109 0901 	add.w	r9, r9, #1
 8008ab0:	e7ee      	b.n	8008a90 <_printf_float+0x2b4>
 8008ab2:	bf00      	nop
 8008ab4:	7fefffff 	.word	0x7fefffff
 8008ab8:	0800b394 	.word	0x0800b394
 8008abc:	0800b398 	.word	0x0800b398
 8008ac0:	0800b39c 	.word	0x0800b39c
 8008ac4:	0800b3a0 	.word	0x0800b3a0
 8008ac8:	0800b3a4 	.word	0x0800b3a4
 8008acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ace:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	bfa8      	it	ge
 8008ad4:	461a      	movge	r2, r3
 8008ad6:	2a00      	cmp	r2, #0
 8008ad8:	4691      	mov	r9, r2
 8008ada:	dc37      	bgt.n	8008b4c <_printf_float+0x370>
 8008adc:	f04f 0b00 	mov.w	fp, #0
 8008ae0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ae4:	f104 021a 	add.w	r2, r4, #26
 8008ae8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008aea:	9305      	str	r3, [sp, #20]
 8008aec:	eba3 0309 	sub.w	r3, r3, r9
 8008af0:	455b      	cmp	r3, fp
 8008af2:	dc33      	bgt.n	8008b5c <_printf_float+0x380>
 8008af4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008af8:	429a      	cmp	r2, r3
 8008afa:	db3b      	blt.n	8008b74 <_printf_float+0x398>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	07da      	lsls	r2, r3, #31
 8008b00:	d438      	bmi.n	8008b74 <_printf_float+0x398>
 8008b02:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b06:	eba2 0903 	sub.w	r9, r2, r3
 8008b0a:	9b05      	ldr	r3, [sp, #20]
 8008b0c:	1ad2      	subs	r2, r2, r3
 8008b0e:	4591      	cmp	r9, r2
 8008b10:	bfa8      	it	ge
 8008b12:	4691      	movge	r9, r2
 8008b14:	f1b9 0f00 	cmp.w	r9, #0
 8008b18:	dc35      	bgt.n	8008b86 <_printf_float+0x3aa>
 8008b1a:	f04f 0800 	mov.w	r8, #0
 8008b1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b22:	f104 0a1a 	add.w	sl, r4, #26
 8008b26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b2a:	1a9b      	subs	r3, r3, r2
 8008b2c:	eba3 0309 	sub.w	r3, r3, r9
 8008b30:	4543      	cmp	r3, r8
 8008b32:	f77f af79 	ble.w	8008a28 <_printf_float+0x24c>
 8008b36:	2301      	movs	r3, #1
 8008b38:	4652      	mov	r2, sl
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	47b8      	blx	r7
 8008b40:	3001      	adds	r0, #1
 8008b42:	f43f aeaa 	beq.w	800889a <_printf_float+0xbe>
 8008b46:	f108 0801 	add.w	r8, r8, #1
 8008b4a:	e7ec      	b.n	8008b26 <_printf_float+0x34a>
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4642      	mov	r2, r8
 8008b52:	4628      	mov	r0, r5
 8008b54:	47b8      	blx	r7
 8008b56:	3001      	adds	r0, #1
 8008b58:	d1c0      	bne.n	8008adc <_printf_float+0x300>
 8008b5a:	e69e      	b.n	800889a <_printf_float+0xbe>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4628      	mov	r0, r5
 8008b62:	9205      	str	r2, [sp, #20]
 8008b64:	47b8      	blx	r7
 8008b66:	3001      	adds	r0, #1
 8008b68:	f43f ae97 	beq.w	800889a <_printf_float+0xbe>
 8008b6c:	9a05      	ldr	r2, [sp, #20]
 8008b6e:	f10b 0b01 	add.w	fp, fp, #1
 8008b72:	e7b9      	b.n	8008ae8 <_printf_float+0x30c>
 8008b74:	ee18 3a10 	vmov	r3, s16
 8008b78:	4652      	mov	r2, sl
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	47b8      	blx	r7
 8008b80:	3001      	adds	r0, #1
 8008b82:	d1be      	bne.n	8008b02 <_printf_float+0x326>
 8008b84:	e689      	b.n	800889a <_printf_float+0xbe>
 8008b86:	9a05      	ldr	r2, [sp, #20]
 8008b88:	464b      	mov	r3, r9
 8008b8a:	4442      	add	r2, r8
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4628      	mov	r0, r5
 8008b90:	47b8      	blx	r7
 8008b92:	3001      	adds	r0, #1
 8008b94:	d1c1      	bne.n	8008b1a <_printf_float+0x33e>
 8008b96:	e680      	b.n	800889a <_printf_float+0xbe>
 8008b98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b9a:	2a01      	cmp	r2, #1
 8008b9c:	dc01      	bgt.n	8008ba2 <_printf_float+0x3c6>
 8008b9e:	07db      	lsls	r3, r3, #31
 8008ba0:	d53a      	bpl.n	8008c18 <_printf_float+0x43c>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	4642      	mov	r2, r8
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	4628      	mov	r0, r5
 8008baa:	47b8      	blx	r7
 8008bac:	3001      	adds	r0, #1
 8008bae:	f43f ae74 	beq.w	800889a <_printf_float+0xbe>
 8008bb2:	ee18 3a10 	vmov	r3, s16
 8008bb6:	4652      	mov	r2, sl
 8008bb8:	4631      	mov	r1, r6
 8008bba:	4628      	mov	r0, r5
 8008bbc:	47b8      	blx	r7
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	f43f ae6b 	beq.w	800889a <_printf_float+0xbe>
 8008bc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bc8:	2200      	movs	r2, #0
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008bd0:	f7f7 ff82 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bd4:	b9d8      	cbnz	r0, 8008c0e <_printf_float+0x432>
 8008bd6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008bda:	f108 0201 	add.w	r2, r8, #1
 8008bde:	4631      	mov	r1, r6
 8008be0:	4628      	mov	r0, r5
 8008be2:	47b8      	blx	r7
 8008be4:	3001      	adds	r0, #1
 8008be6:	d10e      	bne.n	8008c06 <_printf_float+0x42a>
 8008be8:	e657      	b.n	800889a <_printf_float+0xbe>
 8008bea:	2301      	movs	r3, #1
 8008bec:	4652      	mov	r2, sl
 8008bee:	4631      	mov	r1, r6
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	47b8      	blx	r7
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	f43f ae50 	beq.w	800889a <_printf_float+0xbe>
 8008bfa:	f108 0801 	add.w	r8, r8, #1
 8008bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c00:	3b01      	subs	r3, #1
 8008c02:	4543      	cmp	r3, r8
 8008c04:	dcf1      	bgt.n	8008bea <_printf_float+0x40e>
 8008c06:	464b      	mov	r3, r9
 8008c08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c0c:	e6da      	b.n	80089c4 <_printf_float+0x1e8>
 8008c0e:	f04f 0800 	mov.w	r8, #0
 8008c12:	f104 0a1a 	add.w	sl, r4, #26
 8008c16:	e7f2      	b.n	8008bfe <_printf_float+0x422>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	4642      	mov	r2, r8
 8008c1c:	e7df      	b.n	8008bde <_printf_float+0x402>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	464a      	mov	r2, r9
 8008c22:	4631      	mov	r1, r6
 8008c24:	4628      	mov	r0, r5
 8008c26:	47b8      	blx	r7
 8008c28:	3001      	adds	r0, #1
 8008c2a:	f43f ae36 	beq.w	800889a <_printf_float+0xbe>
 8008c2e:	f108 0801 	add.w	r8, r8, #1
 8008c32:	68e3      	ldr	r3, [r4, #12]
 8008c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c36:	1a5b      	subs	r3, r3, r1
 8008c38:	4543      	cmp	r3, r8
 8008c3a:	dcf0      	bgt.n	8008c1e <_printf_float+0x442>
 8008c3c:	e6f8      	b.n	8008a30 <_printf_float+0x254>
 8008c3e:	f04f 0800 	mov.w	r8, #0
 8008c42:	f104 0919 	add.w	r9, r4, #25
 8008c46:	e7f4      	b.n	8008c32 <_printf_float+0x456>

08008c48 <_printf_common>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	4616      	mov	r6, r2
 8008c4e:	4699      	mov	r9, r3
 8008c50:	688a      	ldr	r2, [r1, #8]
 8008c52:	690b      	ldr	r3, [r1, #16]
 8008c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	bfb8      	it	lt
 8008c5c:	4613      	movlt	r3, r2
 8008c5e:	6033      	str	r3, [r6, #0]
 8008c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c64:	4607      	mov	r7, r0
 8008c66:	460c      	mov	r4, r1
 8008c68:	b10a      	cbz	r2, 8008c6e <_printf_common+0x26>
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	6033      	str	r3, [r6, #0]
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	0699      	lsls	r1, r3, #26
 8008c72:	bf42      	ittt	mi
 8008c74:	6833      	ldrmi	r3, [r6, #0]
 8008c76:	3302      	addmi	r3, #2
 8008c78:	6033      	strmi	r3, [r6, #0]
 8008c7a:	6825      	ldr	r5, [r4, #0]
 8008c7c:	f015 0506 	ands.w	r5, r5, #6
 8008c80:	d106      	bne.n	8008c90 <_printf_common+0x48>
 8008c82:	f104 0a19 	add.w	sl, r4, #25
 8008c86:	68e3      	ldr	r3, [r4, #12]
 8008c88:	6832      	ldr	r2, [r6, #0]
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	42ab      	cmp	r3, r5
 8008c8e:	dc26      	bgt.n	8008cde <_printf_common+0x96>
 8008c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c94:	1e13      	subs	r3, r2, #0
 8008c96:	6822      	ldr	r2, [r4, #0]
 8008c98:	bf18      	it	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	0692      	lsls	r2, r2, #26
 8008c9e:	d42b      	bmi.n	8008cf8 <_printf_common+0xb0>
 8008ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	47c0      	blx	r8
 8008caa:	3001      	adds	r0, #1
 8008cac:	d01e      	beq.n	8008cec <_printf_common+0xa4>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	6922      	ldr	r2, [r4, #16]
 8008cb2:	f003 0306 	and.w	r3, r3, #6
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	bf02      	ittt	eq
 8008cba:	68e5      	ldreq	r5, [r4, #12]
 8008cbc:	6833      	ldreq	r3, [r6, #0]
 8008cbe:	1aed      	subeq	r5, r5, r3
 8008cc0:	68a3      	ldr	r3, [r4, #8]
 8008cc2:	bf0c      	ite	eq
 8008cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cc8:	2500      	movne	r5, #0
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	bfc4      	itt	gt
 8008cce:	1a9b      	subgt	r3, r3, r2
 8008cd0:	18ed      	addgt	r5, r5, r3
 8008cd2:	2600      	movs	r6, #0
 8008cd4:	341a      	adds	r4, #26
 8008cd6:	42b5      	cmp	r5, r6
 8008cd8:	d11a      	bne.n	8008d10 <_printf_common+0xc8>
 8008cda:	2000      	movs	r0, #0
 8008cdc:	e008      	b.n	8008cf0 <_printf_common+0xa8>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4652      	mov	r2, sl
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	47c0      	blx	r8
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d103      	bne.n	8008cf4 <_printf_common+0xac>
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf4:	3501      	adds	r5, #1
 8008cf6:	e7c6      	b.n	8008c86 <_printf_common+0x3e>
 8008cf8:	18e1      	adds	r1, r4, r3
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	2030      	movs	r0, #48	; 0x30
 8008cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d02:	4422      	add	r2, r4
 8008d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	e7c7      	b.n	8008ca0 <_printf_common+0x58>
 8008d10:	2301      	movs	r3, #1
 8008d12:	4622      	mov	r2, r4
 8008d14:	4649      	mov	r1, r9
 8008d16:	4638      	mov	r0, r7
 8008d18:	47c0      	blx	r8
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d0e6      	beq.n	8008cec <_printf_common+0xa4>
 8008d1e:	3601      	adds	r6, #1
 8008d20:	e7d9      	b.n	8008cd6 <_printf_common+0x8e>
	...

08008d24 <_printf_i>:
 8008d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d28:	7e0f      	ldrb	r7, [r1, #24]
 8008d2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d2c:	2f78      	cmp	r7, #120	; 0x78
 8008d2e:	4691      	mov	r9, r2
 8008d30:	4680      	mov	r8, r0
 8008d32:	460c      	mov	r4, r1
 8008d34:	469a      	mov	sl, r3
 8008d36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d3a:	d807      	bhi.n	8008d4c <_printf_i+0x28>
 8008d3c:	2f62      	cmp	r7, #98	; 0x62
 8008d3e:	d80a      	bhi.n	8008d56 <_printf_i+0x32>
 8008d40:	2f00      	cmp	r7, #0
 8008d42:	f000 80d4 	beq.w	8008eee <_printf_i+0x1ca>
 8008d46:	2f58      	cmp	r7, #88	; 0x58
 8008d48:	f000 80c0 	beq.w	8008ecc <_printf_i+0x1a8>
 8008d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d54:	e03a      	b.n	8008dcc <_printf_i+0xa8>
 8008d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d5a:	2b15      	cmp	r3, #21
 8008d5c:	d8f6      	bhi.n	8008d4c <_printf_i+0x28>
 8008d5e:	a101      	add	r1, pc, #4	; (adr r1, 8008d64 <_printf_i+0x40>)
 8008d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d64:	08008dbd 	.word	0x08008dbd
 8008d68:	08008dd1 	.word	0x08008dd1
 8008d6c:	08008d4d 	.word	0x08008d4d
 8008d70:	08008d4d 	.word	0x08008d4d
 8008d74:	08008d4d 	.word	0x08008d4d
 8008d78:	08008d4d 	.word	0x08008d4d
 8008d7c:	08008dd1 	.word	0x08008dd1
 8008d80:	08008d4d 	.word	0x08008d4d
 8008d84:	08008d4d 	.word	0x08008d4d
 8008d88:	08008d4d 	.word	0x08008d4d
 8008d8c:	08008d4d 	.word	0x08008d4d
 8008d90:	08008ed5 	.word	0x08008ed5
 8008d94:	08008dfd 	.word	0x08008dfd
 8008d98:	08008e8f 	.word	0x08008e8f
 8008d9c:	08008d4d 	.word	0x08008d4d
 8008da0:	08008d4d 	.word	0x08008d4d
 8008da4:	08008ef7 	.word	0x08008ef7
 8008da8:	08008d4d 	.word	0x08008d4d
 8008dac:	08008dfd 	.word	0x08008dfd
 8008db0:	08008d4d 	.word	0x08008d4d
 8008db4:	08008d4d 	.word	0x08008d4d
 8008db8:	08008e97 	.word	0x08008e97
 8008dbc:	682b      	ldr	r3, [r5, #0]
 8008dbe:	1d1a      	adds	r2, r3, #4
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	602a      	str	r2, [r5, #0]
 8008dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e09f      	b.n	8008f10 <_printf_i+0x1ec>
 8008dd0:	6820      	ldr	r0, [r4, #0]
 8008dd2:	682b      	ldr	r3, [r5, #0]
 8008dd4:	0607      	lsls	r7, r0, #24
 8008dd6:	f103 0104 	add.w	r1, r3, #4
 8008dda:	6029      	str	r1, [r5, #0]
 8008ddc:	d501      	bpl.n	8008de2 <_printf_i+0xbe>
 8008dde:	681e      	ldr	r6, [r3, #0]
 8008de0:	e003      	b.n	8008dea <_printf_i+0xc6>
 8008de2:	0646      	lsls	r6, r0, #25
 8008de4:	d5fb      	bpl.n	8008dde <_printf_i+0xba>
 8008de6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008dea:	2e00      	cmp	r6, #0
 8008dec:	da03      	bge.n	8008df6 <_printf_i+0xd2>
 8008dee:	232d      	movs	r3, #45	; 0x2d
 8008df0:	4276      	negs	r6, r6
 8008df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008df6:	485a      	ldr	r0, [pc, #360]	; (8008f60 <_printf_i+0x23c>)
 8008df8:	230a      	movs	r3, #10
 8008dfa:	e012      	b.n	8008e22 <_printf_i+0xfe>
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	6820      	ldr	r0, [r4, #0]
 8008e00:	1d19      	adds	r1, r3, #4
 8008e02:	6029      	str	r1, [r5, #0]
 8008e04:	0605      	lsls	r5, r0, #24
 8008e06:	d501      	bpl.n	8008e0c <_printf_i+0xe8>
 8008e08:	681e      	ldr	r6, [r3, #0]
 8008e0a:	e002      	b.n	8008e12 <_printf_i+0xee>
 8008e0c:	0641      	lsls	r1, r0, #25
 8008e0e:	d5fb      	bpl.n	8008e08 <_printf_i+0xe4>
 8008e10:	881e      	ldrh	r6, [r3, #0]
 8008e12:	4853      	ldr	r0, [pc, #332]	; (8008f60 <_printf_i+0x23c>)
 8008e14:	2f6f      	cmp	r7, #111	; 0x6f
 8008e16:	bf0c      	ite	eq
 8008e18:	2308      	moveq	r3, #8
 8008e1a:	230a      	movne	r3, #10
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e22:	6865      	ldr	r5, [r4, #4]
 8008e24:	60a5      	str	r5, [r4, #8]
 8008e26:	2d00      	cmp	r5, #0
 8008e28:	bfa2      	ittt	ge
 8008e2a:	6821      	ldrge	r1, [r4, #0]
 8008e2c:	f021 0104 	bicge.w	r1, r1, #4
 8008e30:	6021      	strge	r1, [r4, #0]
 8008e32:	b90e      	cbnz	r6, 8008e38 <_printf_i+0x114>
 8008e34:	2d00      	cmp	r5, #0
 8008e36:	d04b      	beq.n	8008ed0 <_printf_i+0x1ac>
 8008e38:	4615      	mov	r5, r2
 8008e3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e3e:	fb03 6711 	mls	r7, r3, r1, r6
 8008e42:	5dc7      	ldrb	r7, [r0, r7]
 8008e44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e48:	4637      	mov	r7, r6
 8008e4a:	42bb      	cmp	r3, r7
 8008e4c:	460e      	mov	r6, r1
 8008e4e:	d9f4      	bls.n	8008e3a <_printf_i+0x116>
 8008e50:	2b08      	cmp	r3, #8
 8008e52:	d10b      	bne.n	8008e6c <_printf_i+0x148>
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	07de      	lsls	r6, r3, #31
 8008e58:	d508      	bpl.n	8008e6c <_printf_i+0x148>
 8008e5a:	6923      	ldr	r3, [r4, #16]
 8008e5c:	6861      	ldr	r1, [r4, #4]
 8008e5e:	4299      	cmp	r1, r3
 8008e60:	bfde      	ittt	le
 8008e62:	2330      	movle	r3, #48	; 0x30
 8008e64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e6c:	1b52      	subs	r2, r2, r5
 8008e6e:	6122      	str	r2, [r4, #16]
 8008e70:	f8cd a000 	str.w	sl, [sp]
 8008e74:	464b      	mov	r3, r9
 8008e76:	aa03      	add	r2, sp, #12
 8008e78:	4621      	mov	r1, r4
 8008e7a:	4640      	mov	r0, r8
 8008e7c:	f7ff fee4 	bl	8008c48 <_printf_common>
 8008e80:	3001      	adds	r0, #1
 8008e82:	d14a      	bne.n	8008f1a <_printf_i+0x1f6>
 8008e84:	f04f 30ff 	mov.w	r0, #4294967295
 8008e88:	b004      	add	sp, #16
 8008e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	f043 0320 	orr.w	r3, r3, #32
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	4833      	ldr	r0, [pc, #204]	; (8008f64 <_printf_i+0x240>)
 8008e98:	2778      	movs	r7, #120	; 0x78
 8008e9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	6829      	ldr	r1, [r5, #0]
 8008ea2:	061f      	lsls	r7, r3, #24
 8008ea4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ea8:	d402      	bmi.n	8008eb0 <_printf_i+0x18c>
 8008eaa:	065f      	lsls	r7, r3, #25
 8008eac:	bf48      	it	mi
 8008eae:	b2b6      	uxthmi	r6, r6
 8008eb0:	07df      	lsls	r7, r3, #31
 8008eb2:	bf48      	it	mi
 8008eb4:	f043 0320 	orrmi.w	r3, r3, #32
 8008eb8:	6029      	str	r1, [r5, #0]
 8008eba:	bf48      	it	mi
 8008ebc:	6023      	strmi	r3, [r4, #0]
 8008ebe:	b91e      	cbnz	r6, 8008ec8 <_printf_i+0x1a4>
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	f023 0320 	bic.w	r3, r3, #32
 8008ec6:	6023      	str	r3, [r4, #0]
 8008ec8:	2310      	movs	r3, #16
 8008eca:	e7a7      	b.n	8008e1c <_printf_i+0xf8>
 8008ecc:	4824      	ldr	r0, [pc, #144]	; (8008f60 <_printf_i+0x23c>)
 8008ece:	e7e4      	b.n	8008e9a <_printf_i+0x176>
 8008ed0:	4615      	mov	r5, r2
 8008ed2:	e7bd      	b.n	8008e50 <_printf_i+0x12c>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	6826      	ldr	r6, [r4, #0]
 8008ed8:	6961      	ldr	r1, [r4, #20]
 8008eda:	1d18      	adds	r0, r3, #4
 8008edc:	6028      	str	r0, [r5, #0]
 8008ede:	0635      	lsls	r5, r6, #24
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	d501      	bpl.n	8008ee8 <_printf_i+0x1c4>
 8008ee4:	6019      	str	r1, [r3, #0]
 8008ee6:	e002      	b.n	8008eee <_printf_i+0x1ca>
 8008ee8:	0670      	lsls	r0, r6, #25
 8008eea:	d5fb      	bpl.n	8008ee4 <_printf_i+0x1c0>
 8008eec:	8019      	strh	r1, [r3, #0]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	6123      	str	r3, [r4, #16]
 8008ef2:	4615      	mov	r5, r2
 8008ef4:	e7bc      	b.n	8008e70 <_printf_i+0x14c>
 8008ef6:	682b      	ldr	r3, [r5, #0]
 8008ef8:	1d1a      	adds	r2, r3, #4
 8008efa:	602a      	str	r2, [r5, #0]
 8008efc:	681d      	ldr	r5, [r3, #0]
 8008efe:	6862      	ldr	r2, [r4, #4]
 8008f00:	2100      	movs	r1, #0
 8008f02:	4628      	mov	r0, r5
 8008f04:	f7f7 f96c 	bl	80001e0 <memchr>
 8008f08:	b108      	cbz	r0, 8008f0e <_printf_i+0x1ea>
 8008f0a:	1b40      	subs	r0, r0, r5
 8008f0c:	6060      	str	r0, [r4, #4]
 8008f0e:	6863      	ldr	r3, [r4, #4]
 8008f10:	6123      	str	r3, [r4, #16]
 8008f12:	2300      	movs	r3, #0
 8008f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f18:	e7aa      	b.n	8008e70 <_printf_i+0x14c>
 8008f1a:	6923      	ldr	r3, [r4, #16]
 8008f1c:	462a      	mov	r2, r5
 8008f1e:	4649      	mov	r1, r9
 8008f20:	4640      	mov	r0, r8
 8008f22:	47d0      	blx	sl
 8008f24:	3001      	adds	r0, #1
 8008f26:	d0ad      	beq.n	8008e84 <_printf_i+0x160>
 8008f28:	6823      	ldr	r3, [r4, #0]
 8008f2a:	079b      	lsls	r3, r3, #30
 8008f2c:	d413      	bmi.n	8008f56 <_printf_i+0x232>
 8008f2e:	68e0      	ldr	r0, [r4, #12]
 8008f30:	9b03      	ldr	r3, [sp, #12]
 8008f32:	4298      	cmp	r0, r3
 8008f34:	bfb8      	it	lt
 8008f36:	4618      	movlt	r0, r3
 8008f38:	e7a6      	b.n	8008e88 <_printf_i+0x164>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	4632      	mov	r2, r6
 8008f3e:	4649      	mov	r1, r9
 8008f40:	4640      	mov	r0, r8
 8008f42:	47d0      	blx	sl
 8008f44:	3001      	adds	r0, #1
 8008f46:	d09d      	beq.n	8008e84 <_printf_i+0x160>
 8008f48:	3501      	adds	r5, #1
 8008f4a:	68e3      	ldr	r3, [r4, #12]
 8008f4c:	9903      	ldr	r1, [sp, #12]
 8008f4e:	1a5b      	subs	r3, r3, r1
 8008f50:	42ab      	cmp	r3, r5
 8008f52:	dcf2      	bgt.n	8008f3a <_printf_i+0x216>
 8008f54:	e7eb      	b.n	8008f2e <_printf_i+0x20a>
 8008f56:	2500      	movs	r5, #0
 8008f58:	f104 0619 	add.w	r6, r4, #25
 8008f5c:	e7f5      	b.n	8008f4a <_printf_i+0x226>
 8008f5e:	bf00      	nop
 8008f60:	0800b3a6 	.word	0x0800b3a6
 8008f64:	0800b3b7 	.word	0x0800b3b7

08008f68 <std>:
 8008f68:	2300      	movs	r3, #0
 8008f6a:	b510      	push	{r4, lr}
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8008f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f76:	6083      	str	r3, [r0, #8]
 8008f78:	8181      	strh	r1, [r0, #12]
 8008f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8008f7c:	81c2      	strh	r2, [r0, #14]
 8008f7e:	6183      	str	r3, [r0, #24]
 8008f80:	4619      	mov	r1, r3
 8008f82:	2208      	movs	r2, #8
 8008f84:	305c      	adds	r0, #92	; 0x5c
 8008f86:	f000 f914 	bl	80091b2 <memset>
 8008f8a:	4b0d      	ldr	r3, [pc, #52]	; (8008fc0 <std+0x58>)
 8008f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8008f8e:	4b0d      	ldr	r3, [pc, #52]	; (8008fc4 <std+0x5c>)
 8008f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f92:	4b0d      	ldr	r3, [pc, #52]	; (8008fc8 <std+0x60>)
 8008f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f96:	4b0d      	ldr	r3, [pc, #52]	; (8008fcc <std+0x64>)
 8008f98:	6323      	str	r3, [r4, #48]	; 0x30
 8008f9a:	4b0d      	ldr	r3, [pc, #52]	; (8008fd0 <std+0x68>)
 8008f9c:	6224      	str	r4, [r4, #32]
 8008f9e:	429c      	cmp	r4, r3
 8008fa0:	d006      	beq.n	8008fb0 <std+0x48>
 8008fa2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008fa6:	4294      	cmp	r4, r2
 8008fa8:	d002      	beq.n	8008fb0 <std+0x48>
 8008faa:	33d0      	adds	r3, #208	; 0xd0
 8008fac:	429c      	cmp	r4, r3
 8008fae:	d105      	bne.n	8008fbc <std+0x54>
 8008fb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fb8:	f000 b996 	b.w	80092e8 <__retarget_lock_init_recursive>
 8008fbc:	bd10      	pop	{r4, pc}
 8008fbe:	bf00      	nop
 8008fc0:	0800912d 	.word	0x0800912d
 8008fc4:	0800914f 	.word	0x0800914f
 8008fc8:	08009187 	.word	0x08009187
 8008fcc:	080091ab 	.word	0x080091ab
 8008fd0:	200003b8 	.word	0x200003b8

08008fd4 <stdio_exit_handler>:
 8008fd4:	4a02      	ldr	r2, [pc, #8]	; (8008fe0 <stdio_exit_handler+0xc>)
 8008fd6:	4903      	ldr	r1, [pc, #12]	; (8008fe4 <stdio_exit_handler+0x10>)
 8008fd8:	4803      	ldr	r0, [pc, #12]	; (8008fe8 <stdio_exit_handler+0x14>)
 8008fda:	f000 b869 	b.w	80090b0 <_fwalk_sglue>
 8008fde:	bf00      	nop
 8008fe0:	20000010 	.word	0x20000010
 8008fe4:	0800ab51 	.word	0x0800ab51
 8008fe8:	2000001c 	.word	0x2000001c

08008fec <cleanup_stdio>:
 8008fec:	6841      	ldr	r1, [r0, #4]
 8008fee:	4b0c      	ldr	r3, [pc, #48]	; (8009020 <cleanup_stdio+0x34>)
 8008ff0:	4299      	cmp	r1, r3
 8008ff2:	b510      	push	{r4, lr}
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	d001      	beq.n	8008ffc <cleanup_stdio+0x10>
 8008ff8:	f001 fdaa 	bl	800ab50 <_fflush_r>
 8008ffc:	68a1      	ldr	r1, [r4, #8]
 8008ffe:	4b09      	ldr	r3, [pc, #36]	; (8009024 <cleanup_stdio+0x38>)
 8009000:	4299      	cmp	r1, r3
 8009002:	d002      	beq.n	800900a <cleanup_stdio+0x1e>
 8009004:	4620      	mov	r0, r4
 8009006:	f001 fda3 	bl	800ab50 <_fflush_r>
 800900a:	68e1      	ldr	r1, [r4, #12]
 800900c:	4b06      	ldr	r3, [pc, #24]	; (8009028 <cleanup_stdio+0x3c>)
 800900e:	4299      	cmp	r1, r3
 8009010:	d004      	beq.n	800901c <cleanup_stdio+0x30>
 8009012:	4620      	mov	r0, r4
 8009014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009018:	f001 bd9a 	b.w	800ab50 <_fflush_r>
 800901c:	bd10      	pop	{r4, pc}
 800901e:	bf00      	nop
 8009020:	200003b8 	.word	0x200003b8
 8009024:	20000420 	.word	0x20000420
 8009028:	20000488 	.word	0x20000488

0800902c <global_stdio_init.part.0>:
 800902c:	b510      	push	{r4, lr}
 800902e:	4b0b      	ldr	r3, [pc, #44]	; (800905c <global_stdio_init.part.0+0x30>)
 8009030:	4c0b      	ldr	r4, [pc, #44]	; (8009060 <global_stdio_init.part.0+0x34>)
 8009032:	4a0c      	ldr	r2, [pc, #48]	; (8009064 <global_stdio_init.part.0+0x38>)
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	4620      	mov	r0, r4
 8009038:	2200      	movs	r2, #0
 800903a:	2104      	movs	r1, #4
 800903c:	f7ff ff94 	bl	8008f68 <std>
 8009040:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009044:	2201      	movs	r2, #1
 8009046:	2109      	movs	r1, #9
 8009048:	f7ff ff8e 	bl	8008f68 <std>
 800904c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009050:	2202      	movs	r2, #2
 8009052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009056:	2112      	movs	r1, #18
 8009058:	f7ff bf86 	b.w	8008f68 <std>
 800905c:	200004f0 	.word	0x200004f0
 8009060:	200003b8 	.word	0x200003b8
 8009064:	08008fd5 	.word	0x08008fd5

08009068 <__sfp_lock_acquire>:
 8009068:	4801      	ldr	r0, [pc, #4]	; (8009070 <__sfp_lock_acquire+0x8>)
 800906a:	f000 b93e 	b.w	80092ea <__retarget_lock_acquire_recursive>
 800906e:	bf00      	nop
 8009070:	200004f9 	.word	0x200004f9

08009074 <__sfp_lock_release>:
 8009074:	4801      	ldr	r0, [pc, #4]	; (800907c <__sfp_lock_release+0x8>)
 8009076:	f000 b939 	b.w	80092ec <__retarget_lock_release_recursive>
 800907a:	bf00      	nop
 800907c:	200004f9 	.word	0x200004f9

08009080 <__sinit>:
 8009080:	b510      	push	{r4, lr}
 8009082:	4604      	mov	r4, r0
 8009084:	f7ff fff0 	bl	8009068 <__sfp_lock_acquire>
 8009088:	6a23      	ldr	r3, [r4, #32]
 800908a:	b11b      	cbz	r3, 8009094 <__sinit+0x14>
 800908c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009090:	f7ff bff0 	b.w	8009074 <__sfp_lock_release>
 8009094:	4b04      	ldr	r3, [pc, #16]	; (80090a8 <__sinit+0x28>)
 8009096:	6223      	str	r3, [r4, #32]
 8009098:	4b04      	ldr	r3, [pc, #16]	; (80090ac <__sinit+0x2c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1f5      	bne.n	800908c <__sinit+0xc>
 80090a0:	f7ff ffc4 	bl	800902c <global_stdio_init.part.0>
 80090a4:	e7f2      	b.n	800908c <__sinit+0xc>
 80090a6:	bf00      	nop
 80090a8:	08008fed 	.word	0x08008fed
 80090ac:	200004f0 	.word	0x200004f0

080090b0 <_fwalk_sglue>:
 80090b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090b4:	4607      	mov	r7, r0
 80090b6:	4688      	mov	r8, r1
 80090b8:	4614      	mov	r4, r2
 80090ba:	2600      	movs	r6, #0
 80090bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090c0:	f1b9 0901 	subs.w	r9, r9, #1
 80090c4:	d505      	bpl.n	80090d2 <_fwalk_sglue+0x22>
 80090c6:	6824      	ldr	r4, [r4, #0]
 80090c8:	2c00      	cmp	r4, #0
 80090ca:	d1f7      	bne.n	80090bc <_fwalk_sglue+0xc>
 80090cc:	4630      	mov	r0, r6
 80090ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090d2:	89ab      	ldrh	r3, [r5, #12]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d907      	bls.n	80090e8 <_fwalk_sglue+0x38>
 80090d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090dc:	3301      	adds	r3, #1
 80090de:	d003      	beq.n	80090e8 <_fwalk_sglue+0x38>
 80090e0:	4629      	mov	r1, r5
 80090e2:	4638      	mov	r0, r7
 80090e4:	47c0      	blx	r8
 80090e6:	4306      	orrs	r6, r0
 80090e8:	3568      	adds	r5, #104	; 0x68
 80090ea:	e7e9      	b.n	80090c0 <_fwalk_sglue+0x10>

080090ec <siprintf>:
 80090ec:	b40e      	push	{r1, r2, r3}
 80090ee:	b500      	push	{lr}
 80090f0:	b09c      	sub	sp, #112	; 0x70
 80090f2:	ab1d      	add	r3, sp, #116	; 0x74
 80090f4:	9002      	str	r0, [sp, #8]
 80090f6:	9006      	str	r0, [sp, #24]
 80090f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090fc:	4809      	ldr	r0, [pc, #36]	; (8009124 <siprintf+0x38>)
 80090fe:	9107      	str	r1, [sp, #28]
 8009100:	9104      	str	r1, [sp, #16]
 8009102:	4909      	ldr	r1, [pc, #36]	; (8009128 <siprintf+0x3c>)
 8009104:	f853 2b04 	ldr.w	r2, [r3], #4
 8009108:	9105      	str	r1, [sp, #20]
 800910a:	6800      	ldr	r0, [r0, #0]
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	a902      	add	r1, sp, #8
 8009110:	f001 fb9a 	bl	800a848 <_svfiprintf_r>
 8009114:	9b02      	ldr	r3, [sp, #8]
 8009116:	2200      	movs	r2, #0
 8009118:	701a      	strb	r2, [r3, #0]
 800911a:	b01c      	add	sp, #112	; 0x70
 800911c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009120:	b003      	add	sp, #12
 8009122:	4770      	bx	lr
 8009124:	20000068 	.word	0x20000068
 8009128:	ffff0208 	.word	0xffff0208

0800912c <__sread>:
 800912c:	b510      	push	{r4, lr}
 800912e:	460c      	mov	r4, r1
 8009130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009134:	f000 f87a 	bl	800922c <_read_r>
 8009138:	2800      	cmp	r0, #0
 800913a:	bfab      	itete	ge
 800913c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800913e:	89a3      	ldrhlt	r3, [r4, #12]
 8009140:	181b      	addge	r3, r3, r0
 8009142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009146:	bfac      	ite	ge
 8009148:	6563      	strge	r3, [r4, #84]	; 0x54
 800914a:	81a3      	strhlt	r3, [r4, #12]
 800914c:	bd10      	pop	{r4, pc}

0800914e <__swrite>:
 800914e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009152:	461f      	mov	r7, r3
 8009154:	898b      	ldrh	r3, [r1, #12]
 8009156:	05db      	lsls	r3, r3, #23
 8009158:	4605      	mov	r5, r0
 800915a:	460c      	mov	r4, r1
 800915c:	4616      	mov	r6, r2
 800915e:	d505      	bpl.n	800916c <__swrite+0x1e>
 8009160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009164:	2302      	movs	r3, #2
 8009166:	2200      	movs	r2, #0
 8009168:	f000 f84e 	bl	8009208 <_lseek_r>
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	4632      	mov	r2, r6
 800917a:	463b      	mov	r3, r7
 800917c:	4628      	mov	r0, r5
 800917e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009182:	f000 b875 	b.w	8009270 <_write_r>

08009186 <__sseek>:
 8009186:	b510      	push	{r4, lr}
 8009188:	460c      	mov	r4, r1
 800918a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800918e:	f000 f83b 	bl	8009208 <_lseek_r>
 8009192:	1c43      	adds	r3, r0, #1
 8009194:	89a3      	ldrh	r3, [r4, #12]
 8009196:	bf15      	itete	ne
 8009198:	6560      	strne	r0, [r4, #84]	; 0x54
 800919a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800919e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091a2:	81a3      	strheq	r3, [r4, #12]
 80091a4:	bf18      	it	ne
 80091a6:	81a3      	strhne	r3, [r4, #12]
 80091a8:	bd10      	pop	{r4, pc}

080091aa <__sclose>:
 80091aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ae:	f000 b81b 	b.w	80091e8 <_close_r>

080091b2 <memset>:
 80091b2:	4402      	add	r2, r0
 80091b4:	4603      	mov	r3, r0
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d100      	bne.n	80091bc <memset+0xa>
 80091ba:	4770      	bx	lr
 80091bc:	f803 1b01 	strb.w	r1, [r3], #1
 80091c0:	e7f9      	b.n	80091b6 <memset+0x4>

080091c2 <strcat>:
 80091c2:	b510      	push	{r4, lr}
 80091c4:	4602      	mov	r2, r0
 80091c6:	7814      	ldrb	r4, [r2, #0]
 80091c8:	4613      	mov	r3, r2
 80091ca:	3201      	adds	r2, #1
 80091cc:	2c00      	cmp	r4, #0
 80091ce:	d1fa      	bne.n	80091c6 <strcat+0x4>
 80091d0:	3b01      	subs	r3, #1
 80091d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091da:	2a00      	cmp	r2, #0
 80091dc:	d1f9      	bne.n	80091d2 <strcat+0x10>
 80091de:	bd10      	pop	{r4, pc}

080091e0 <_localeconv_r>:
 80091e0:	4800      	ldr	r0, [pc, #0]	; (80091e4 <_localeconv_r+0x4>)
 80091e2:	4770      	bx	lr
 80091e4:	2000015c 	.word	0x2000015c

080091e8 <_close_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4d06      	ldr	r5, [pc, #24]	; (8009204 <_close_r+0x1c>)
 80091ec:	2300      	movs	r3, #0
 80091ee:	4604      	mov	r4, r0
 80091f0:	4608      	mov	r0, r1
 80091f2:	602b      	str	r3, [r5, #0]
 80091f4:	f7fa f98d 	bl	8003512 <_close>
 80091f8:	1c43      	adds	r3, r0, #1
 80091fa:	d102      	bne.n	8009202 <_close_r+0x1a>
 80091fc:	682b      	ldr	r3, [r5, #0]
 80091fe:	b103      	cbz	r3, 8009202 <_close_r+0x1a>
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	bd38      	pop	{r3, r4, r5, pc}
 8009204:	200004f4 	.word	0x200004f4

08009208 <_lseek_r>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	4d07      	ldr	r5, [pc, #28]	; (8009228 <_lseek_r+0x20>)
 800920c:	4604      	mov	r4, r0
 800920e:	4608      	mov	r0, r1
 8009210:	4611      	mov	r1, r2
 8009212:	2200      	movs	r2, #0
 8009214:	602a      	str	r2, [r5, #0]
 8009216:	461a      	mov	r2, r3
 8009218:	f7fa f9a2 	bl	8003560 <_lseek>
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	d102      	bne.n	8009226 <_lseek_r+0x1e>
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	b103      	cbz	r3, 8009226 <_lseek_r+0x1e>
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	200004f4 	.word	0x200004f4

0800922c <_read_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	4d07      	ldr	r5, [pc, #28]	; (800924c <_read_r+0x20>)
 8009230:	4604      	mov	r4, r0
 8009232:	4608      	mov	r0, r1
 8009234:	4611      	mov	r1, r2
 8009236:	2200      	movs	r2, #0
 8009238:	602a      	str	r2, [r5, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	f7fa f930 	bl	80034a0 <_read>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d102      	bne.n	800924a <_read_r+0x1e>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	b103      	cbz	r3, 800924a <_read_r+0x1e>
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	200004f4 	.word	0x200004f4

08009250 <_sbrk_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4d06      	ldr	r5, [pc, #24]	; (800926c <_sbrk_r+0x1c>)
 8009254:	2300      	movs	r3, #0
 8009256:	4604      	mov	r4, r0
 8009258:	4608      	mov	r0, r1
 800925a:	602b      	str	r3, [r5, #0]
 800925c:	f7fa f98e 	bl	800357c <_sbrk>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	d102      	bne.n	800926a <_sbrk_r+0x1a>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	b103      	cbz	r3, 800926a <_sbrk_r+0x1a>
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	200004f4 	.word	0x200004f4

08009270 <_write_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4d07      	ldr	r5, [pc, #28]	; (8009290 <_write_r+0x20>)
 8009274:	4604      	mov	r4, r0
 8009276:	4608      	mov	r0, r1
 8009278:	4611      	mov	r1, r2
 800927a:	2200      	movs	r2, #0
 800927c:	602a      	str	r2, [r5, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	f7fa f92b 	bl	80034da <_write>
 8009284:	1c43      	adds	r3, r0, #1
 8009286:	d102      	bne.n	800928e <_write_r+0x1e>
 8009288:	682b      	ldr	r3, [r5, #0]
 800928a:	b103      	cbz	r3, 800928e <_write_r+0x1e>
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	200004f4 	.word	0x200004f4

08009294 <__errno>:
 8009294:	4b01      	ldr	r3, [pc, #4]	; (800929c <__errno+0x8>)
 8009296:	6818      	ldr	r0, [r3, #0]
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	20000068 	.word	0x20000068

080092a0 <__libc_init_array>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	4d0d      	ldr	r5, [pc, #52]	; (80092d8 <__libc_init_array+0x38>)
 80092a4:	4c0d      	ldr	r4, [pc, #52]	; (80092dc <__libc_init_array+0x3c>)
 80092a6:	1b64      	subs	r4, r4, r5
 80092a8:	10a4      	asrs	r4, r4, #2
 80092aa:	2600      	movs	r6, #0
 80092ac:	42a6      	cmp	r6, r4
 80092ae:	d109      	bne.n	80092c4 <__libc_init_array+0x24>
 80092b0:	4d0b      	ldr	r5, [pc, #44]	; (80092e0 <__libc_init_array+0x40>)
 80092b2:	4c0c      	ldr	r4, [pc, #48]	; (80092e4 <__libc_init_array+0x44>)
 80092b4:	f001 ffd2 	bl	800b25c <_init>
 80092b8:	1b64      	subs	r4, r4, r5
 80092ba:	10a4      	asrs	r4, r4, #2
 80092bc:	2600      	movs	r6, #0
 80092be:	42a6      	cmp	r6, r4
 80092c0:	d105      	bne.n	80092ce <__libc_init_array+0x2e>
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
 80092c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c8:	4798      	blx	r3
 80092ca:	3601      	adds	r6, #1
 80092cc:	e7ee      	b.n	80092ac <__libc_init_array+0xc>
 80092ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d2:	4798      	blx	r3
 80092d4:	3601      	adds	r6, #1
 80092d6:	e7f2      	b.n	80092be <__libc_init_array+0x1e>
 80092d8:	0800b70c 	.word	0x0800b70c
 80092dc:	0800b70c 	.word	0x0800b70c
 80092e0:	0800b70c 	.word	0x0800b70c
 80092e4:	0800b710 	.word	0x0800b710

080092e8 <__retarget_lock_init_recursive>:
 80092e8:	4770      	bx	lr

080092ea <__retarget_lock_acquire_recursive>:
 80092ea:	4770      	bx	lr

080092ec <__retarget_lock_release_recursive>:
 80092ec:	4770      	bx	lr

080092ee <memcpy>:
 80092ee:	440a      	add	r2, r1
 80092f0:	4291      	cmp	r1, r2
 80092f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80092f6:	d100      	bne.n	80092fa <memcpy+0xc>
 80092f8:	4770      	bx	lr
 80092fa:	b510      	push	{r4, lr}
 80092fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009300:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009304:	4291      	cmp	r1, r2
 8009306:	d1f9      	bne.n	80092fc <memcpy+0xe>
 8009308:	bd10      	pop	{r4, pc}

0800930a <quorem>:
 800930a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800930e:	6903      	ldr	r3, [r0, #16]
 8009310:	690c      	ldr	r4, [r1, #16]
 8009312:	42a3      	cmp	r3, r4
 8009314:	4607      	mov	r7, r0
 8009316:	db7e      	blt.n	8009416 <quorem+0x10c>
 8009318:	3c01      	subs	r4, #1
 800931a:	f101 0814 	add.w	r8, r1, #20
 800931e:	f100 0514 	add.w	r5, r0, #20
 8009322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009326:	9301      	str	r3, [sp, #4]
 8009328:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800932c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009330:	3301      	adds	r3, #1
 8009332:	429a      	cmp	r2, r3
 8009334:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009338:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800933c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009340:	d331      	bcc.n	80093a6 <quorem+0x9c>
 8009342:	f04f 0e00 	mov.w	lr, #0
 8009346:	4640      	mov	r0, r8
 8009348:	46ac      	mov	ip, r5
 800934a:	46f2      	mov	sl, lr
 800934c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009350:	b293      	uxth	r3, r2
 8009352:	fb06 e303 	mla	r3, r6, r3, lr
 8009356:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800935a:	0c1a      	lsrs	r2, r3, #16
 800935c:	b29b      	uxth	r3, r3
 800935e:	ebaa 0303 	sub.w	r3, sl, r3
 8009362:	f8dc a000 	ldr.w	sl, [ip]
 8009366:	fa13 f38a 	uxtah	r3, r3, sl
 800936a:	fb06 220e 	mla	r2, r6, lr, r2
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	9b00      	ldr	r3, [sp, #0]
 8009372:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009376:	b292      	uxth	r2, r2
 8009378:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800937c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009380:	f8bd 3000 	ldrh.w	r3, [sp]
 8009384:	4581      	cmp	r9, r0
 8009386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800938a:	f84c 3b04 	str.w	r3, [ip], #4
 800938e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009392:	d2db      	bcs.n	800934c <quorem+0x42>
 8009394:	f855 300b 	ldr.w	r3, [r5, fp]
 8009398:	b92b      	cbnz	r3, 80093a6 <quorem+0x9c>
 800939a:	9b01      	ldr	r3, [sp, #4]
 800939c:	3b04      	subs	r3, #4
 800939e:	429d      	cmp	r5, r3
 80093a0:	461a      	mov	r2, r3
 80093a2:	d32c      	bcc.n	80093fe <quorem+0xf4>
 80093a4:	613c      	str	r4, [r7, #16]
 80093a6:	4638      	mov	r0, r7
 80093a8:	f001 f8f4 	bl	800a594 <__mcmp>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	db22      	blt.n	80093f6 <quorem+0xec>
 80093b0:	3601      	adds	r6, #1
 80093b2:	4629      	mov	r1, r5
 80093b4:	2000      	movs	r0, #0
 80093b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80093ba:	f8d1 c000 	ldr.w	ip, [r1]
 80093be:	b293      	uxth	r3, r2
 80093c0:	1ac3      	subs	r3, r0, r3
 80093c2:	0c12      	lsrs	r2, r2, #16
 80093c4:	fa13 f38c 	uxtah	r3, r3, ip
 80093c8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80093cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093d6:	45c1      	cmp	r9, r8
 80093d8:	f841 3b04 	str.w	r3, [r1], #4
 80093dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093e0:	d2e9      	bcs.n	80093b6 <quorem+0xac>
 80093e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ea:	b922      	cbnz	r2, 80093f6 <quorem+0xec>
 80093ec:	3b04      	subs	r3, #4
 80093ee:	429d      	cmp	r5, r3
 80093f0:	461a      	mov	r2, r3
 80093f2:	d30a      	bcc.n	800940a <quorem+0x100>
 80093f4:	613c      	str	r4, [r7, #16]
 80093f6:	4630      	mov	r0, r6
 80093f8:	b003      	add	sp, #12
 80093fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fe:	6812      	ldr	r2, [r2, #0]
 8009400:	3b04      	subs	r3, #4
 8009402:	2a00      	cmp	r2, #0
 8009404:	d1ce      	bne.n	80093a4 <quorem+0x9a>
 8009406:	3c01      	subs	r4, #1
 8009408:	e7c9      	b.n	800939e <quorem+0x94>
 800940a:	6812      	ldr	r2, [r2, #0]
 800940c:	3b04      	subs	r3, #4
 800940e:	2a00      	cmp	r2, #0
 8009410:	d1f0      	bne.n	80093f4 <quorem+0xea>
 8009412:	3c01      	subs	r4, #1
 8009414:	e7eb      	b.n	80093ee <quorem+0xe4>
 8009416:	2000      	movs	r0, #0
 8009418:	e7ee      	b.n	80093f8 <quorem+0xee>
 800941a:	0000      	movs	r0, r0
 800941c:	0000      	movs	r0, r0
	...

08009420 <_dtoa_r>:
 8009420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	ed2d 8b04 	vpush	{d8-d9}
 8009428:	69c5      	ldr	r5, [r0, #28]
 800942a:	b093      	sub	sp, #76	; 0x4c
 800942c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009430:	ec57 6b10 	vmov	r6, r7, d0
 8009434:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009438:	9107      	str	r1, [sp, #28]
 800943a:	4604      	mov	r4, r0
 800943c:	920a      	str	r2, [sp, #40]	; 0x28
 800943e:	930d      	str	r3, [sp, #52]	; 0x34
 8009440:	b975      	cbnz	r5, 8009460 <_dtoa_r+0x40>
 8009442:	2010      	movs	r0, #16
 8009444:	f7ff f86e 	bl	8008524 <malloc>
 8009448:	4602      	mov	r2, r0
 800944a:	61e0      	str	r0, [r4, #28]
 800944c:	b920      	cbnz	r0, 8009458 <_dtoa_r+0x38>
 800944e:	4bae      	ldr	r3, [pc, #696]	; (8009708 <_dtoa_r+0x2e8>)
 8009450:	21ef      	movs	r1, #239	; 0xef
 8009452:	48ae      	ldr	r0, [pc, #696]	; (800970c <_dtoa_r+0x2ec>)
 8009454:	f001 fbbe 	bl	800abd4 <__assert_func>
 8009458:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800945c:	6005      	str	r5, [r0, #0]
 800945e:	60c5      	str	r5, [r0, #12]
 8009460:	69e3      	ldr	r3, [r4, #28]
 8009462:	6819      	ldr	r1, [r3, #0]
 8009464:	b151      	cbz	r1, 800947c <_dtoa_r+0x5c>
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	604a      	str	r2, [r1, #4]
 800946a:	2301      	movs	r3, #1
 800946c:	4093      	lsls	r3, r2
 800946e:	608b      	str	r3, [r1, #8]
 8009470:	4620      	mov	r0, r4
 8009472:	f000 fe53 	bl	800a11c <_Bfree>
 8009476:	69e3      	ldr	r3, [r4, #28]
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	1e3b      	subs	r3, r7, #0
 800947e:	bfbb      	ittet	lt
 8009480:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009484:	9303      	strlt	r3, [sp, #12]
 8009486:	2300      	movge	r3, #0
 8009488:	2201      	movlt	r2, #1
 800948a:	bfac      	ite	ge
 800948c:	f8c8 3000 	strge.w	r3, [r8]
 8009490:	f8c8 2000 	strlt.w	r2, [r8]
 8009494:	4b9e      	ldr	r3, [pc, #632]	; (8009710 <_dtoa_r+0x2f0>)
 8009496:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800949a:	ea33 0308 	bics.w	r3, r3, r8
 800949e:	d11b      	bne.n	80094d8 <_dtoa_r+0xb8>
 80094a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80094a6:	6013      	str	r3, [r2, #0]
 80094a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80094ac:	4333      	orrs	r3, r6
 80094ae:	f000 8593 	beq.w	8009fd8 <_dtoa_r+0xbb8>
 80094b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094b4:	b963      	cbnz	r3, 80094d0 <_dtoa_r+0xb0>
 80094b6:	4b97      	ldr	r3, [pc, #604]	; (8009714 <_dtoa_r+0x2f4>)
 80094b8:	e027      	b.n	800950a <_dtoa_r+0xea>
 80094ba:	4b97      	ldr	r3, [pc, #604]	; (8009718 <_dtoa_r+0x2f8>)
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	3308      	adds	r3, #8
 80094c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80094c2:	6013      	str	r3, [r2, #0]
 80094c4:	9800      	ldr	r0, [sp, #0]
 80094c6:	b013      	add	sp, #76	; 0x4c
 80094c8:	ecbd 8b04 	vpop	{d8-d9}
 80094cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d0:	4b90      	ldr	r3, [pc, #576]	; (8009714 <_dtoa_r+0x2f4>)
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	3303      	adds	r3, #3
 80094d6:	e7f3      	b.n	80094c0 <_dtoa_r+0xa0>
 80094d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094dc:	2200      	movs	r2, #0
 80094de:	ec51 0b17 	vmov	r0, r1, d7
 80094e2:	eeb0 8a47 	vmov.f32	s16, s14
 80094e6:	eef0 8a67 	vmov.f32	s17, s15
 80094ea:	2300      	movs	r3, #0
 80094ec:	f7f7 faf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80094f0:	4681      	mov	r9, r0
 80094f2:	b160      	cbz	r0, 800950e <_dtoa_r+0xee>
 80094f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094f6:	2301      	movs	r3, #1
 80094f8:	6013      	str	r3, [r2, #0]
 80094fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 8568 	beq.w	8009fd2 <_dtoa_r+0xbb2>
 8009502:	4b86      	ldr	r3, [pc, #536]	; (800971c <_dtoa_r+0x2fc>)
 8009504:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009506:	6013      	str	r3, [r2, #0]
 8009508:	3b01      	subs	r3, #1
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	e7da      	b.n	80094c4 <_dtoa_r+0xa4>
 800950e:	aa10      	add	r2, sp, #64	; 0x40
 8009510:	a911      	add	r1, sp, #68	; 0x44
 8009512:	4620      	mov	r0, r4
 8009514:	eeb0 0a48 	vmov.f32	s0, s16
 8009518:	eef0 0a68 	vmov.f32	s1, s17
 800951c:	f001 f8e0 	bl	800a6e0 <__d2b>
 8009520:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009524:	4682      	mov	sl, r0
 8009526:	2d00      	cmp	r5, #0
 8009528:	d07f      	beq.n	800962a <_dtoa_r+0x20a>
 800952a:	ee18 3a90 	vmov	r3, s17
 800952e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009532:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009536:	ec51 0b18 	vmov	r0, r1, d8
 800953a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800953e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009542:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009546:	4619      	mov	r1, r3
 8009548:	2200      	movs	r2, #0
 800954a:	4b75      	ldr	r3, [pc, #468]	; (8009720 <_dtoa_r+0x300>)
 800954c:	f7f6 fea4 	bl	8000298 <__aeabi_dsub>
 8009550:	a367      	add	r3, pc, #412	; (adr r3, 80096f0 <_dtoa_r+0x2d0>)
 8009552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009556:	f7f7 f857 	bl	8000608 <__aeabi_dmul>
 800955a:	a367      	add	r3, pc, #412	; (adr r3, 80096f8 <_dtoa_r+0x2d8>)
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f7f6 fe9c 	bl	800029c <__adddf3>
 8009564:	4606      	mov	r6, r0
 8009566:	4628      	mov	r0, r5
 8009568:	460f      	mov	r7, r1
 800956a:	f7f6 ffe3 	bl	8000534 <__aeabi_i2d>
 800956e:	a364      	add	r3, pc, #400	; (adr r3, 8009700 <_dtoa_r+0x2e0>)
 8009570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009574:	f7f7 f848 	bl	8000608 <__aeabi_dmul>
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	4630      	mov	r0, r6
 800957e:	4639      	mov	r1, r7
 8009580:	f7f6 fe8c 	bl	800029c <__adddf3>
 8009584:	4606      	mov	r6, r0
 8009586:	460f      	mov	r7, r1
 8009588:	f7f7 faee 	bl	8000b68 <__aeabi_d2iz>
 800958c:	2200      	movs	r2, #0
 800958e:	4683      	mov	fp, r0
 8009590:	2300      	movs	r3, #0
 8009592:	4630      	mov	r0, r6
 8009594:	4639      	mov	r1, r7
 8009596:	f7f7 faa9 	bl	8000aec <__aeabi_dcmplt>
 800959a:	b148      	cbz	r0, 80095b0 <_dtoa_r+0x190>
 800959c:	4658      	mov	r0, fp
 800959e:	f7f6 ffc9 	bl	8000534 <__aeabi_i2d>
 80095a2:	4632      	mov	r2, r6
 80095a4:	463b      	mov	r3, r7
 80095a6:	f7f7 fa97 	bl	8000ad8 <__aeabi_dcmpeq>
 80095aa:	b908      	cbnz	r0, 80095b0 <_dtoa_r+0x190>
 80095ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095b0:	f1bb 0f16 	cmp.w	fp, #22
 80095b4:	d857      	bhi.n	8009666 <_dtoa_r+0x246>
 80095b6:	4b5b      	ldr	r3, [pc, #364]	; (8009724 <_dtoa_r+0x304>)
 80095b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80095bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c0:	ec51 0b18 	vmov	r0, r1, d8
 80095c4:	f7f7 fa92 	bl	8000aec <__aeabi_dcmplt>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d04e      	beq.n	800966a <_dtoa_r+0x24a>
 80095cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095d0:	2300      	movs	r3, #0
 80095d2:	930c      	str	r3, [sp, #48]	; 0x30
 80095d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095d6:	1b5b      	subs	r3, r3, r5
 80095d8:	1e5a      	subs	r2, r3, #1
 80095da:	bf45      	ittet	mi
 80095dc:	f1c3 0301 	rsbmi	r3, r3, #1
 80095e0:	9305      	strmi	r3, [sp, #20]
 80095e2:	2300      	movpl	r3, #0
 80095e4:	2300      	movmi	r3, #0
 80095e6:	9206      	str	r2, [sp, #24]
 80095e8:	bf54      	ite	pl
 80095ea:	9305      	strpl	r3, [sp, #20]
 80095ec:	9306      	strmi	r3, [sp, #24]
 80095ee:	f1bb 0f00 	cmp.w	fp, #0
 80095f2:	db3c      	blt.n	800966e <_dtoa_r+0x24e>
 80095f4:	9b06      	ldr	r3, [sp, #24]
 80095f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80095fa:	445b      	add	r3, fp
 80095fc:	9306      	str	r3, [sp, #24]
 80095fe:	2300      	movs	r3, #0
 8009600:	9308      	str	r3, [sp, #32]
 8009602:	9b07      	ldr	r3, [sp, #28]
 8009604:	2b09      	cmp	r3, #9
 8009606:	d868      	bhi.n	80096da <_dtoa_r+0x2ba>
 8009608:	2b05      	cmp	r3, #5
 800960a:	bfc4      	itt	gt
 800960c:	3b04      	subgt	r3, #4
 800960e:	9307      	strgt	r3, [sp, #28]
 8009610:	9b07      	ldr	r3, [sp, #28]
 8009612:	f1a3 0302 	sub.w	r3, r3, #2
 8009616:	bfcc      	ite	gt
 8009618:	2500      	movgt	r5, #0
 800961a:	2501      	movle	r5, #1
 800961c:	2b03      	cmp	r3, #3
 800961e:	f200 8085 	bhi.w	800972c <_dtoa_r+0x30c>
 8009622:	e8df f003 	tbb	[pc, r3]
 8009626:	3b2e      	.short	0x3b2e
 8009628:	5839      	.short	0x5839
 800962a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800962e:	441d      	add	r5, r3
 8009630:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009634:	2b20      	cmp	r3, #32
 8009636:	bfc1      	itttt	gt
 8009638:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800963c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009640:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009644:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009648:	bfd6      	itet	le
 800964a:	f1c3 0320 	rsble	r3, r3, #32
 800964e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009652:	fa06 f003 	lslle.w	r0, r6, r3
 8009656:	f7f6 ff5d 	bl	8000514 <__aeabi_ui2d>
 800965a:	2201      	movs	r2, #1
 800965c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009660:	3d01      	subs	r5, #1
 8009662:	920e      	str	r2, [sp, #56]	; 0x38
 8009664:	e76f      	b.n	8009546 <_dtoa_r+0x126>
 8009666:	2301      	movs	r3, #1
 8009668:	e7b3      	b.n	80095d2 <_dtoa_r+0x1b2>
 800966a:	900c      	str	r0, [sp, #48]	; 0x30
 800966c:	e7b2      	b.n	80095d4 <_dtoa_r+0x1b4>
 800966e:	9b05      	ldr	r3, [sp, #20]
 8009670:	eba3 030b 	sub.w	r3, r3, fp
 8009674:	9305      	str	r3, [sp, #20]
 8009676:	f1cb 0300 	rsb	r3, fp, #0
 800967a:	9308      	str	r3, [sp, #32]
 800967c:	2300      	movs	r3, #0
 800967e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009680:	e7bf      	b.n	8009602 <_dtoa_r+0x1e2>
 8009682:	2300      	movs	r3, #0
 8009684:	9309      	str	r3, [sp, #36]	; 0x24
 8009686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009688:	2b00      	cmp	r3, #0
 800968a:	dc52      	bgt.n	8009732 <_dtoa_r+0x312>
 800968c:	2301      	movs	r3, #1
 800968e:	9301      	str	r3, [sp, #4]
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	461a      	mov	r2, r3
 8009694:	920a      	str	r2, [sp, #40]	; 0x28
 8009696:	e00b      	b.n	80096b0 <_dtoa_r+0x290>
 8009698:	2301      	movs	r3, #1
 800969a:	e7f3      	b.n	8009684 <_dtoa_r+0x264>
 800969c:	2300      	movs	r3, #0
 800969e:	9309      	str	r3, [sp, #36]	; 0x24
 80096a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a2:	445b      	add	r3, fp
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	3301      	adds	r3, #1
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	9304      	str	r3, [sp, #16]
 80096ac:	bfb8      	it	lt
 80096ae:	2301      	movlt	r3, #1
 80096b0:	69e0      	ldr	r0, [r4, #28]
 80096b2:	2100      	movs	r1, #0
 80096b4:	2204      	movs	r2, #4
 80096b6:	f102 0614 	add.w	r6, r2, #20
 80096ba:	429e      	cmp	r6, r3
 80096bc:	d93d      	bls.n	800973a <_dtoa_r+0x31a>
 80096be:	6041      	str	r1, [r0, #4]
 80096c0:	4620      	mov	r0, r4
 80096c2:	f000 fceb 	bl	800a09c <_Balloc>
 80096c6:	9000      	str	r0, [sp, #0]
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d139      	bne.n	8009740 <_dtoa_r+0x320>
 80096cc:	4b16      	ldr	r3, [pc, #88]	; (8009728 <_dtoa_r+0x308>)
 80096ce:	4602      	mov	r2, r0
 80096d0:	f240 11af 	movw	r1, #431	; 0x1af
 80096d4:	e6bd      	b.n	8009452 <_dtoa_r+0x32>
 80096d6:	2301      	movs	r3, #1
 80096d8:	e7e1      	b.n	800969e <_dtoa_r+0x27e>
 80096da:	2501      	movs	r5, #1
 80096dc:	2300      	movs	r3, #0
 80096de:	9307      	str	r3, [sp, #28]
 80096e0:	9509      	str	r5, [sp, #36]	; 0x24
 80096e2:	f04f 33ff 	mov.w	r3, #4294967295
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	9304      	str	r3, [sp, #16]
 80096ea:	2200      	movs	r2, #0
 80096ec:	2312      	movs	r3, #18
 80096ee:	e7d1      	b.n	8009694 <_dtoa_r+0x274>
 80096f0:	636f4361 	.word	0x636f4361
 80096f4:	3fd287a7 	.word	0x3fd287a7
 80096f8:	8b60c8b3 	.word	0x8b60c8b3
 80096fc:	3fc68a28 	.word	0x3fc68a28
 8009700:	509f79fb 	.word	0x509f79fb
 8009704:	3fd34413 	.word	0x3fd34413
 8009708:	0800b3d5 	.word	0x0800b3d5
 800970c:	0800b3ec 	.word	0x0800b3ec
 8009710:	7ff00000 	.word	0x7ff00000
 8009714:	0800b3d1 	.word	0x0800b3d1
 8009718:	0800b3c8 	.word	0x0800b3c8
 800971c:	0800b3a5 	.word	0x0800b3a5
 8009720:	3ff80000 	.word	0x3ff80000
 8009724:	0800b4d8 	.word	0x0800b4d8
 8009728:	0800b444 	.word	0x0800b444
 800972c:	2301      	movs	r3, #1
 800972e:	9309      	str	r3, [sp, #36]	; 0x24
 8009730:	e7d7      	b.n	80096e2 <_dtoa_r+0x2c2>
 8009732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009734:	9301      	str	r3, [sp, #4]
 8009736:	9304      	str	r3, [sp, #16]
 8009738:	e7ba      	b.n	80096b0 <_dtoa_r+0x290>
 800973a:	3101      	adds	r1, #1
 800973c:	0052      	lsls	r2, r2, #1
 800973e:	e7ba      	b.n	80096b6 <_dtoa_r+0x296>
 8009740:	69e3      	ldr	r3, [r4, #28]
 8009742:	9a00      	ldr	r2, [sp, #0]
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	9b04      	ldr	r3, [sp, #16]
 8009748:	2b0e      	cmp	r3, #14
 800974a:	f200 80a8 	bhi.w	800989e <_dtoa_r+0x47e>
 800974e:	2d00      	cmp	r5, #0
 8009750:	f000 80a5 	beq.w	800989e <_dtoa_r+0x47e>
 8009754:	f1bb 0f00 	cmp.w	fp, #0
 8009758:	dd38      	ble.n	80097cc <_dtoa_r+0x3ac>
 800975a:	4bc0      	ldr	r3, [pc, #768]	; (8009a5c <_dtoa_r+0x63c>)
 800975c:	f00b 020f 	and.w	r2, fp, #15
 8009760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009764:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009768:	e9d3 6700 	ldrd	r6, r7, [r3]
 800976c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009770:	d019      	beq.n	80097a6 <_dtoa_r+0x386>
 8009772:	4bbb      	ldr	r3, [pc, #748]	; (8009a60 <_dtoa_r+0x640>)
 8009774:	ec51 0b18 	vmov	r0, r1, d8
 8009778:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800977c:	f7f7 f86e 	bl	800085c <__aeabi_ddiv>
 8009780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009784:	f008 080f 	and.w	r8, r8, #15
 8009788:	2503      	movs	r5, #3
 800978a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009a60 <_dtoa_r+0x640>
 800978e:	f1b8 0f00 	cmp.w	r8, #0
 8009792:	d10a      	bne.n	80097aa <_dtoa_r+0x38a>
 8009794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009798:	4632      	mov	r2, r6
 800979a:	463b      	mov	r3, r7
 800979c:	f7f7 f85e 	bl	800085c <__aeabi_ddiv>
 80097a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097a4:	e02b      	b.n	80097fe <_dtoa_r+0x3de>
 80097a6:	2502      	movs	r5, #2
 80097a8:	e7ef      	b.n	800978a <_dtoa_r+0x36a>
 80097aa:	f018 0f01 	tst.w	r8, #1
 80097ae:	d008      	beq.n	80097c2 <_dtoa_r+0x3a2>
 80097b0:	4630      	mov	r0, r6
 80097b2:	4639      	mov	r1, r7
 80097b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80097b8:	f7f6 ff26 	bl	8000608 <__aeabi_dmul>
 80097bc:	3501      	adds	r5, #1
 80097be:	4606      	mov	r6, r0
 80097c0:	460f      	mov	r7, r1
 80097c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80097c6:	f109 0908 	add.w	r9, r9, #8
 80097ca:	e7e0      	b.n	800978e <_dtoa_r+0x36e>
 80097cc:	f000 809f 	beq.w	800990e <_dtoa_r+0x4ee>
 80097d0:	f1cb 0600 	rsb	r6, fp, #0
 80097d4:	4ba1      	ldr	r3, [pc, #644]	; (8009a5c <_dtoa_r+0x63c>)
 80097d6:	4fa2      	ldr	r7, [pc, #648]	; (8009a60 <_dtoa_r+0x640>)
 80097d8:	f006 020f 	and.w	r2, r6, #15
 80097dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	ec51 0b18 	vmov	r0, r1, d8
 80097e8:	f7f6 ff0e 	bl	8000608 <__aeabi_dmul>
 80097ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097f0:	1136      	asrs	r6, r6, #4
 80097f2:	2300      	movs	r3, #0
 80097f4:	2502      	movs	r5, #2
 80097f6:	2e00      	cmp	r6, #0
 80097f8:	d17e      	bne.n	80098f8 <_dtoa_r+0x4d8>
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1d0      	bne.n	80097a0 <_dtoa_r+0x380>
 80097fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009800:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 8084 	beq.w	8009912 <_dtoa_r+0x4f2>
 800980a:	4b96      	ldr	r3, [pc, #600]	; (8009a64 <_dtoa_r+0x644>)
 800980c:	2200      	movs	r2, #0
 800980e:	4640      	mov	r0, r8
 8009810:	4649      	mov	r1, r9
 8009812:	f7f7 f96b 	bl	8000aec <__aeabi_dcmplt>
 8009816:	2800      	cmp	r0, #0
 8009818:	d07b      	beq.n	8009912 <_dtoa_r+0x4f2>
 800981a:	9b04      	ldr	r3, [sp, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d078      	beq.n	8009912 <_dtoa_r+0x4f2>
 8009820:	9b01      	ldr	r3, [sp, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	dd39      	ble.n	800989a <_dtoa_r+0x47a>
 8009826:	4b90      	ldr	r3, [pc, #576]	; (8009a68 <_dtoa_r+0x648>)
 8009828:	2200      	movs	r2, #0
 800982a:	4640      	mov	r0, r8
 800982c:	4649      	mov	r1, r9
 800982e:	f7f6 feeb 	bl	8000608 <__aeabi_dmul>
 8009832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009836:	9e01      	ldr	r6, [sp, #4]
 8009838:	f10b 37ff 	add.w	r7, fp, #4294967295
 800983c:	3501      	adds	r5, #1
 800983e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009842:	4628      	mov	r0, r5
 8009844:	f7f6 fe76 	bl	8000534 <__aeabi_i2d>
 8009848:	4642      	mov	r2, r8
 800984a:	464b      	mov	r3, r9
 800984c:	f7f6 fedc 	bl	8000608 <__aeabi_dmul>
 8009850:	4b86      	ldr	r3, [pc, #536]	; (8009a6c <_dtoa_r+0x64c>)
 8009852:	2200      	movs	r2, #0
 8009854:	f7f6 fd22 	bl	800029c <__adddf3>
 8009858:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800985c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009860:	9303      	str	r3, [sp, #12]
 8009862:	2e00      	cmp	r6, #0
 8009864:	d158      	bne.n	8009918 <_dtoa_r+0x4f8>
 8009866:	4b82      	ldr	r3, [pc, #520]	; (8009a70 <_dtoa_r+0x650>)
 8009868:	2200      	movs	r2, #0
 800986a:	4640      	mov	r0, r8
 800986c:	4649      	mov	r1, r9
 800986e:	f7f6 fd13 	bl	8000298 <__aeabi_dsub>
 8009872:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009876:	4680      	mov	r8, r0
 8009878:	4689      	mov	r9, r1
 800987a:	f7f7 f955 	bl	8000b28 <__aeabi_dcmpgt>
 800987e:	2800      	cmp	r0, #0
 8009880:	f040 8296 	bne.w	8009db0 <_dtoa_r+0x990>
 8009884:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009888:	4640      	mov	r0, r8
 800988a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800988e:	4649      	mov	r1, r9
 8009890:	f7f7 f92c 	bl	8000aec <__aeabi_dcmplt>
 8009894:	2800      	cmp	r0, #0
 8009896:	f040 8289 	bne.w	8009dac <_dtoa_r+0x98c>
 800989a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800989e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f2c0 814e 	blt.w	8009b42 <_dtoa_r+0x722>
 80098a6:	f1bb 0f0e 	cmp.w	fp, #14
 80098aa:	f300 814a 	bgt.w	8009b42 <_dtoa_r+0x722>
 80098ae:	4b6b      	ldr	r3, [pc, #428]	; (8009a5c <_dtoa_r+0x63c>)
 80098b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80098b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f280 80dc 	bge.w	8009a78 <_dtoa_r+0x658>
 80098c0:	9b04      	ldr	r3, [sp, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f300 80d8 	bgt.w	8009a78 <_dtoa_r+0x658>
 80098c8:	f040 826f 	bne.w	8009daa <_dtoa_r+0x98a>
 80098cc:	4b68      	ldr	r3, [pc, #416]	; (8009a70 <_dtoa_r+0x650>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	4640      	mov	r0, r8
 80098d2:	4649      	mov	r1, r9
 80098d4:	f7f6 fe98 	bl	8000608 <__aeabi_dmul>
 80098d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098dc:	f7f7 f91a 	bl	8000b14 <__aeabi_dcmpge>
 80098e0:	9e04      	ldr	r6, [sp, #16]
 80098e2:	4637      	mov	r7, r6
 80098e4:	2800      	cmp	r0, #0
 80098e6:	f040 8245 	bne.w	8009d74 <_dtoa_r+0x954>
 80098ea:	9d00      	ldr	r5, [sp, #0]
 80098ec:	2331      	movs	r3, #49	; 0x31
 80098ee:	f805 3b01 	strb.w	r3, [r5], #1
 80098f2:	f10b 0b01 	add.w	fp, fp, #1
 80098f6:	e241      	b.n	8009d7c <_dtoa_r+0x95c>
 80098f8:	07f2      	lsls	r2, r6, #31
 80098fa:	d505      	bpl.n	8009908 <_dtoa_r+0x4e8>
 80098fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009900:	f7f6 fe82 	bl	8000608 <__aeabi_dmul>
 8009904:	3501      	adds	r5, #1
 8009906:	2301      	movs	r3, #1
 8009908:	1076      	asrs	r6, r6, #1
 800990a:	3708      	adds	r7, #8
 800990c:	e773      	b.n	80097f6 <_dtoa_r+0x3d6>
 800990e:	2502      	movs	r5, #2
 8009910:	e775      	b.n	80097fe <_dtoa_r+0x3de>
 8009912:	9e04      	ldr	r6, [sp, #16]
 8009914:	465f      	mov	r7, fp
 8009916:	e792      	b.n	800983e <_dtoa_r+0x41e>
 8009918:	9900      	ldr	r1, [sp, #0]
 800991a:	4b50      	ldr	r3, [pc, #320]	; (8009a5c <_dtoa_r+0x63c>)
 800991c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009920:	4431      	add	r1, r6
 8009922:	9102      	str	r1, [sp, #8]
 8009924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009926:	eeb0 9a47 	vmov.f32	s18, s14
 800992a:	eef0 9a67 	vmov.f32	s19, s15
 800992e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009932:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009936:	2900      	cmp	r1, #0
 8009938:	d044      	beq.n	80099c4 <_dtoa_r+0x5a4>
 800993a:	494e      	ldr	r1, [pc, #312]	; (8009a74 <_dtoa_r+0x654>)
 800993c:	2000      	movs	r0, #0
 800993e:	f7f6 ff8d 	bl	800085c <__aeabi_ddiv>
 8009942:	ec53 2b19 	vmov	r2, r3, d9
 8009946:	f7f6 fca7 	bl	8000298 <__aeabi_dsub>
 800994a:	9d00      	ldr	r5, [sp, #0]
 800994c:	ec41 0b19 	vmov	d9, r0, r1
 8009950:	4649      	mov	r1, r9
 8009952:	4640      	mov	r0, r8
 8009954:	f7f7 f908 	bl	8000b68 <__aeabi_d2iz>
 8009958:	4606      	mov	r6, r0
 800995a:	f7f6 fdeb 	bl	8000534 <__aeabi_i2d>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4640      	mov	r0, r8
 8009964:	4649      	mov	r1, r9
 8009966:	f7f6 fc97 	bl	8000298 <__aeabi_dsub>
 800996a:	3630      	adds	r6, #48	; 0x30
 800996c:	f805 6b01 	strb.w	r6, [r5], #1
 8009970:	ec53 2b19 	vmov	r2, r3, d9
 8009974:	4680      	mov	r8, r0
 8009976:	4689      	mov	r9, r1
 8009978:	f7f7 f8b8 	bl	8000aec <__aeabi_dcmplt>
 800997c:	2800      	cmp	r0, #0
 800997e:	d164      	bne.n	8009a4a <_dtoa_r+0x62a>
 8009980:	4642      	mov	r2, r8
 8009982:	464b      	mov	r3, r9
 8009984:	4937      	ldr	r1, [pc, #220]	; (8009a64 <_dtoa_r+0x644>)
 8009986:	2000      	movs	r0, #0
 8009988:	f7f6 fc86 	bl	8000298 <__aeabi_dsub>
 800998c:	ec53 2b19 	vmov	r2, r3, d9
 8009990:	f7f7 f8ac 	bl	8000aec <__aeabi_dcmplt>
 8009994:	2800      	cmp	r0, #0
 8009996:	f040 80b6 	bne.w	8009b06 <_dtoa_r+0x6e6>
 800999a:	9b02      	ldr	r3, [sp, #8]
 800999c:	429d      	cmp	r5, r3
 800999e:	f43f af7c 	beq.w	800989a <_dtoa_r+0x47a>
 80099a2:	4b31      	ldr	r3, [pc, #196]	; (8009a68 <_dtoa_r+0x648>)
 80099a4:	ec51 0b19 	vmov	r0, r1, d9
 80099a8:	2200      	movs	r2, #0
 80099aa:	f7f6 fe2d 	bl	8000608 <__aeabi_dmul>
 80099ae:	4b2e      	ldr	r3, [pc, #184]	; (8009a68 <_dtoa_r+0x648>)
 80099b0:	ec41 0b19 	vmov	d9, r0, r1
 80099b4:	2200      	movs	r2, #0
 80099b6:	4640      	mov	r0, r8
 80099b8:	4649      	mov	r1, r9
 80099ba:	f7f6 fe25 	bl	8000608 <__aeabi_dmul>
 80099be:	4680      	mov	r8, r0
 80099c0:	4689      	mov	r9, r1
 80099c2:	e7c5      	b.n	8009950 <_dtoa_r+0x530>
 80099c4:	ec51 0b17 	vmov	r0, r1, d7
 80099c8:	f7f6 fe1e 	bl	8000608 <__aeabi_dmul>
 80099cc:	9b02      	ldr	r3, [sp, #8]
 80099ce:	9d00      	ldr	r5, [sp, #0]
 80099d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80099d2:	ec41 0b19 	vmov	d9, r0, r1
 80099d6:	4649      	mov	r1, r9
 80099d8:	4640      	mov	r0, r8
 80099da:	f7f7 f8c5 	bl	8000b68 <__aeabi_d2iz>
 80099de:	4606      	mov	r6, r0
 80099e0:	f7f6 fda8 	bl	8000534 <__aeabi_i2d>
 80099e4:	3630      	adds	r6, #48	; 0x30
 80099e6:	4602      	mov	r2, r0
 80099e8:	460b      	mov	r3, r1
 80099ea:	4640      	mov	r0, r8
 80099ec:	4649      	mov	r1, r9
 80099ee:	f7f6 fc53 	bl	8000298 <__aeabi_dsub>
 80099f2:	f805 6b01 	strb.w	r6, [r5], #1
 80099f6:	9b02      	ldr	r3, [sp, #8]
 80099f8:	429d      	cmp	r5, r3
 80099fa:	4680      	mov	r8, r0
 80099fc:	4689      	mov	r9, r1
 80099fe:	f04f 0200 	mov.w	r2, #0
 8009a02:	d124      	bne.n	8009a4e <_dtoa_r+0x62e>
 8009a04:	4b1b      	ldr	r3, [pc, #108]	; (8009a74 <_dtoa_r+0x654>)
 8009a06:	ec51 0b19 	vmov	r0, r1, d9
 8009a0a:	f7f6 fc47 	bl	800029c <__adddf3>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	4640      	mov	r0, r8
 8009a14:	4649      	mov	r1, r9
 8009a16:	f7f7 f887 	bl	8000b28 <__aeabi_dcmpgt>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d173      	bne.n	8009b06 <_dtoa_r+0x6e6>
 8009a1e:	ec53 2b19 	vmov	r2, r3, d9
 8009a22:	4914      	ldr	r1, [pc, #80]	; (8009a74 <_dtoa_r+0x654>)
 8009a24:	2000      	movs	r0, #0
 8009a26:	f7f6 fc37 	bl	8000298 <__aeabi_dsub>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	4640      	mov	r0, r8
 8009a30:	4649      	mov	r1, r9
 8009a32:	f7f7 f85b 	bl	8000aec <__aeabi_dcmplt>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f43f af2f 	beq.w	800989a <_dtoa_r+0x47a>
 8009a3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a3e:	1e6b      	subs	r3, r5, #1
 8009a40:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a46:	2b30      	cmp	r3, #48	; 0x30
 8009a48:	d0f8      	beq.n	8009a3c <_dtoa_r+0x61c>
 8009a4a:	46bb      	mov	fp, r7
 8009a4c:	e04a      	b.n	8009ae4 <_dtoa_r+0x6c4>
 8009a4e:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <_dtoa_r+0x648>)
 8009a50:	f7f6 fdda 	bl	8000608 <__aeabi_dmul>
 8009a54:	4680      	mov	r8, r0
 8009a56:	4689      	mov	r9, r1
 8009a58:	e7bd      	b.n	80099d6 <_dtoa_r+0x5b6>
 8009a5a:	bf00      	nop
 8009a5c:	0800b4d8 	.word	0x0800b4d8
 8009a60:	0800b4b0 	.word	0x0800b4b0
 8009a64:	3ff00000 	.word	0x3ff00000
 8009a68:	40240000 	.word	0x40240000
 8009a6c:	401c0000 	.word	0x401c0000
 8009a70:	40140000 	.word	0x40140000
 8009a74:	3fe00000 	.word	0x3fe00000
 8009a78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a7c:	9d00      	ldr	r5, [sp, #0]
 8009a7e:	4642      	mov	r2, r8
 8009a80:	464b      	mov	r3, r9
 8009a82:	4630      	mov	r0, r6
 8009a84:	4639      	mov	r1, r7
 8009a86:	f7f6 fee9 	bl	800085c <__aeabi_ddiv>
 8009a8a:	f7f7 f86d 	bl	8000b68 <__aeabi_d2iz>
 8009a8e:	9001      	str	r0, [sp, #4]
 8009a90:	f7f6 fd50 	bl	8000534 <__aeabi_i2d>
 8009a94:	4642      	mov	r2, r8
 8009a96:	464b      	mov	r3, r9
 8009a98:	f7f6 fdb6 	bl	8000608 <__aeabi_dmul>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	f7f6 fbf8 	bl	8000298 <__aeabi_dsub>
 8009aa8:	9e01      	ldr	r6, [sp, #4]
 8009aaa:	9f04      	ldr	r7, [sp, #16]
 8009aac:	3630      	adds	r6, #48	; 0x30
 8009aae:	f805 6b01 	strb.w	r6, [r5], #1
 8009ab2:	9e00      	ldr	r6, [sp, #0]
 8009ab4:	1bae      	subs	r6, r5, r6
 8009ab6:	42b7      	cmp	r7, r6
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	d134      	bne.n	8009b28 <_dtoa_r+0x708>
 8009abe:	f7f6 fbed 	bl	800029c <__adddf3>
 8009ac2:	4642      	mov	r2, r8
 8009ac4:	464b      	mov	r3, r9
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	460f      	mov	r7, r1
 8009aca:	f7f7 f82d 	bl	8000b28 <__aeabi_dcmpgt>
 8009ace:	b9c8      	cbnz	r0, 8009b04 <_dtoa_r+0x6e4>
 8009ad0:	4642      	mov	r2, r8
 8009ad2:	464b      	mov	r3, r9
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	f7f6 fffe 	bl	8000ad8 <__aeabi_dcmpeq>
 8009adc:	b110      	cbz	r0, 8009ae4 <_dtoa_r+0x6c4>
 8009ade:	9b01      	ldr	r3, [sp, #4]
 8009ae0:	07db      	lsls	r3, r3, #31
 8009ae2:	d40f      	bmi.n	8009b04 <_dtoa_r+0x6e4>
 8009ae4:	4651      	mov	r1, sl
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f000 fb18 	bl	800a11c <_Bfree>
 8009aec:	2300      	movs	r3, #0
 8009aee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009af0:	702b      	strb	r3, [r5, #0]
 8009af2:	f10b 0301 	add.w	r3, fp, #1
 8009af6:	6013      	str	r3, [r2, #0]
 8009af8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f43f ace2 	beq.w	80094c4 <_dtoa_r+0xa4>
 8009b00:	601d      	str	r5, [r3, #0]
 8009b02:	e4df      	b.n	80094c4 <_dtoa_r+0xa4>
 8009b04:	465f      	mov	r7, fp
 8009b06:	462b      	mov	r3, r5
 8009b08:	461d      	mov	r5, r3
 8009b0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b0e:	2a39      	cmp	r2, #57	; 0x39
 8009b10:	d106      	bne.n	8009b20 <_dtoa_r+0x700>
 8009b12:	9a00      	ldr	r2, [sp, #0]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d1f7      	bne.n	8009b08 <_dtoa_r+0x6e8>
 8009b18:	9900      	ldr	r1, [sp, #0]
 8009b1a:	2230      	movs	r2, #48	; 0x30
 8009b1c:	3701      	adds	r7, #1
 8009b1e:	700a      	strb	r2, [r1, #0]
 8009b20:	781a      	ldrb	r2, [r3, #0]
 8009b22:	3201      	adds	r2, #1
 8009b24:	701a      	strb	r2, [r3, #0]
 8009b26:	e790      	b.n	8009a4a <_dtoa_r+0x62a>
 8009b28:	4ba3      	ldr	r3, [pc, #652]	; (8009db8 <_dtoa_r+0x998>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f7f6 fd6c 	bl	8000608 <__aeabi_dmul>
 8009b30:	2200      	movs	r2, #0
 8009b32:	2300      	movs	r3, #0
 8009b34:	4606      	mov	r6, r0
 8009b36:	460f      	mov	r7, r1
 8009b38:	f7f6 ffce 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d09e      	beq.n	8009a7e <_dtoa_r+0x65e>
 8009b40:	e7d0      	b.n	8009ae4 <_dtoa_r+0x6c4>
 8009b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b44:	2a00      	cmp	r2, #0
 8009b46:	f000 80ca 	beq.w	8009cde <_dtoa_r+0x8be>
 8009b4a:	9a07      	ldr	r2, [sp, #28]
 8009b4c:	2a01      	cmp	r2, #1
 8009b4e:	f300 80ad 	bgt.w	8009cac <_dtoa_r+0x88c>
 8009b52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b54:	2a00      	cmp	r2, #0
 8009b56:	f000 80a5 	beq.w	8009ca4 <_dtoa_r+0x884>
 8009b5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b5e:	9e08      	ldr	r6, [sp, #32]
 8009b60:	9d05      	ldr	r5, [sp, #20]
 8009b62:	9a05      	ldr	r2, [sp, #20]
 8009b64:	441a      	add	r2, r3
 8009b66:	9205      	str	r2, [sp, #20]
 8009b68:	9a06      	ldr	r2, [sp, #24]
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	441a      	add	r2, r3
 8009b6e:	4620      	mov	r0, r4
 8009b70:	9206      	str	r2, [sp, #24]
 8009b72:	f000 fb89 	bl	800a288 <__i2b>
 8009b76:	4607      	mov	r7, r0
 8009b78:	b165      	cbz	r5, 8009b94 <_dtoa_r+0x774>
 8009b7a:	9b06      	ldr	r3, [sp, #24]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	dd09      	ble.n	8009b94 <_dtoa_r+0x774>
 8009b80:	42ab      	cmp	r3, r5
 8009b82:	9a05      	ldr	r2, [sp, #20]
 8009b84:	bfa8      	it	ge
 8009b86:	462b      	movge	r3, r5
 8009b88:	1ad2      	subs	r2, r2, r3
 8009b8a:	9205      	str	r2, [sp, #20]
 8009b8c:	9a06      	ldr	r2, [sp, #24]
 8009b8e:	1aed      	subs	r5, r5, r3
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	9306      	str	r3, [sp, #24]
 8009b94:	9b08      	ldr	r3, [sp, #32]
 8009b96:	b1f3      	cbz	r3, 8009bd6 <_dtoa_r+0x7b6>
 8009b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 80a3 	beq.w	8009ce6 <_dtoa_r+0x8c6>
 8009ba0:	2e00      	cmp	r6, #0
 8009ba2:	dd10      	ble.n	8009bc6 <_dtoa_r+0x7a6>
 8009ba4:	4639      	mov	r1, r7
 8009ba6:	4632      	mov	r2, r6
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f000 fc2d 	bl	800a408 <__pow5mult>
 8009bae:	4652      	mov	r2, sl
 8009bb0:	4601      	mov	r1, r0
 8009bb2:	4607      	mov	r7, r0
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f000 fb7d 	bl	800a2b4 <__multiply>
 8009bba:	4651      	mov	r1, sl
 8009bbc:	4680      	mov	r8, r0
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f000 faac 	bl	800a11c <_Bfree>
 8009bc4:	46c2      	mov	sl, r8
 8009bc6:	9b08      	ldr	r3, [sp, #32]
 8009bc8:	1b9a      	subs	r2, r3, r6
 8009bca:	d004      	beq.n	8009bd6 <_dtoa_r+0x7b6>
 8009bcc:	4651      	mov	r1, sl
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f000 fc1a 	bl	800a408 <__pow5mult>
 8009bd4:	4682      	mov	sl, r0
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f000 fb55 	bl	800a288 <__i2b>
 8009bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	4606      	mov	r6, r0
 8009be4:	f340 8081 	ble.w	8009cea <_dtoa_r+0x8ca>
 8009be8:	461a      	mov	r2, r3
 8009bea:	4601      	mov	r1, r0
 8009bec:	4620      	mov	r0, r4
 8009bee:	f000 fc0b 	bl	800a408 <__pow5mult>
 8009bf2:	9b07      	ldr	r3, [sp, #28]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	dd7a      	ble.n	8009cf0 <_dtoa_r+0x8d0>
 8009bfa:	f04f 0800 	mov.w	r8, #0
 8009bfe:	6933      	ldr	r3, [r6, #16]
 8009c00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c04:	6918      	ldr	r0, [r3, #16]
 8009c06:	f000 faf1 	bl	800a1ec <__hi0bits>
 8009c0a:	f1c0 0020 	rsb	r0, r0, #32
 8009c0e:	9b06      	ldr	r3, [sp, #24]
 8009c10:	4418      	add	r0, r3
 8009c12:	f010 001f 	ands.w	r0, r0, #31
 8009c16:	f000 8094 	beq.w	8009d42 <_dtoa_r+0x922>
 8009c1a:	f1c0 0320 	rsb	r3, r0, #32
 8009c1e:	2b04      	cmp	r3, #4
 8009c20:	f340 8085 	ble.w	8009d2e <_dtoa_r+0x90e>
 8009c24:	9b05      	ldr	r3, [sp, #20]
 8009c26:	f1c0 001c 	rsb	r0, r0, #28
 8009c2a:	4403      	add	r3, r0
 8009c2c:	9305      	str	r3, [sp, #20]
 8009c2e:	9b06      	ldr	r3, [sp, #24]
 8009c30:	4403      	add	r3, r0
 8009c32:	4405      	add	r5, r0
 8009c34:	9306      	str	r3, [sp, #24]
 8009c36:	9b05      	ldr	r3, [sp, #20]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	dd05      	ble.n	8009c48 <_dtoa_r+0x828>
 8009c3c:	4651      	mov	r1, sl
 8009c3e:	461a      	mov	r2, r3
 8009c40:	4620      	mov	r0, r4
 8009c42:	f000 fc3b 	bl	800a4bc <__lshift>
 8009c46:	4682      	mov	sl, r0
 8009c48:	9b06      	ldr	r3, [sp, #24]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	dd05      	ble.n	8009c5a <_dtoa_r+0x83a>
 8009c4e:	4631      	mov	r1, r6
 8009c50:	461a      	mov	r2, r3
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 fc32 	bl	800a4bc <__lshift>
 8009c58:	4606      	mov	r6, r0
 8009c5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d072      	beq.n	8009d46 <_dtoa_r+0x926>
 8009c60:	4631      	mov	r1, r6
 8009c62:	4650      	mov	r0, sl
 8009c64:	f000 fc96 	bl	800a594 <__mcmp>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	da6c      	bge.n	8009d46 <_dtoa_r+0x926>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	4651      	mov	r1, sl
 8009c70:	220a      	movs	r2, #10
 8009c72:	4620      	mov	r0, r4
 8009c74:	f000 fa74 	bl	800a160 <__multadd>
 8009c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c7e:	4682      	mov	sl, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 81b0 	beq.w	8009fe6 <_dtoa_r+0xbc6>
 8009c86:	2300      	movs	r3, #0
 8009c88:	4639      	mov	r1, r7
 8009c8a:	220a      	movs	r2, #10
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	f000 fa67 	bl	800a160 <__multadd>
 8009c92:	9b01      	ldr	r3, [sp, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	4607      	mov	r7, r0
 8009c98:	f300 8096 	bgt.w	8009dc8 <_dtoa_r+0x9a8>
 8009c9c:	9b07      	ldr	r3, [sp, #28]
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	dc59      	bgt.n	8009d56 <_dtoa_r+0x936>
 8009ca2:	e091      	b.n	8009dc8 <_dtoa_r+0x9a8>
 8009ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ca6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009caa:	e758      	b.n	8009b5e <_dtoa_r+0x73e>
 8009cac:	9b04      	ldr	r3, [sp, #16]
 8009cae:	1e5e      	subs	r6, r3, #1
 8009cb0:	9b08      	ldr	r3, [sp, #32]
 8009cb2:	42b3      	cmp	r3, r6
 8009cb4:	bfbf      	itttt	lt
 8009cb6:	9b08      	ldrlt	r3, [sp, #32]
 8009cb8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009cba:	9608      	strlt	r6, [sp, #32]
 8009cbc:	1af3      	sublt	r3, r6, r3
 8009cbe:	bfb4      	ite	lt
 8009cc0:	18d2      	addlt	r2, r2, r3
 8009cc2:	1b9e      	subge	r6, r3, r6
 8009cc4:	9b04      	ldr	r3, [sp, #16]
 8009cc6:	bfbc      	itt	lt
 8009cc8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009cca:	2600      	movlt	r6, #0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	bfb7      	itett	lt
 8009cd0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009cd4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009cd8:	1a9d      	sublt	r5, r3, r2
 8009cda:	2300      	movlt	r3, #0
 8009cdc:	e741      	b.n	8009b62 <_dtoa_r+0x742>
 8009cde:	9e08      	ldr	r6, [sp, #32]
 8009ce0:	9d05      	ldr	r5, [sp, #20]
 8009ce2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009ce4:	e748      	b.n	8009b78 <_dtoa_r+0x758>
 8009ce6:	9a08      	ldr	r2, [sp, #32]
 8009ce8:	e770      	b.n	8009bcc <_dtoa_r+0x7ac>
 8009cea:	9b07      	ldr	r3, [sp, #28]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	dc19      	bgt.n	8009d24 <_dtoa_r+0x904>
 8009cf0:	9b02      	ldr	r3, [sp, #8]
 8009cf2:	b9bb      	cbnz	r3, 8009d24 <_dtoa_r+0x904>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cfa:	b99b      	cbnz	r3, 8009d24 <_dtoa_r+0x904>
 8009cfc:	9b03      	ldr	r3, [sp, #12]
 8009cfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d02:	0d1b      	lsrs	r3, r3, #20
 8009d04:	051b      	lsls	r3, r3, #20
 8009d06:	b183      	cbz	r3, 8009d2a <_dtoa_r+0x90a>
 8009d08:	9b05      	ldr	r3, [sp, #20]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	9305      	str	r3, [sp, #20]
 8009d0e:	9b06      	ldr	r3, [sp, #24]
 8009d10:	3301      	adds	r3, #1
 8009d12:	9306      	str	r3, [sp, #24]
 8009d14:	f04f 0801 	mov.w	r8, #1
 8009d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f47f af6f 	bne.w	8009bfe <_dtoa_r+0x7de>
 8009d20:	2001      	movs	r0, #1
 8009d22:	e774      	b.n	8009c0e <_dtoa_r+0x7ee>
 8009d24:	f04f 0800 	mov.w	r8, #0
 8009d28:	e7f6      	b.n	8009d18 <_dtoa_r+0x8f8>
 8009d2a:	4698      	mov	r8, r3
 8009d2c:	e7f4      	b.n	8009d18 <_dtoa_r+0x8f8>
 8009d2e:	d082      	beq.n	8009c36 <_dtoa_r+0x816>
 8009d30:	9a05      	ldr	r2, [sp, #20]
 8009d32:	331c      	adds	r3, #28
 8009d34:	441a      	add	r2, r3
 8009d36:	9205      	str	r2, [sp, #20]
 8009d38:	9a06      	ldr	r2, [sp, #24]
 8009d3a:	441a      	add	r2, r3
 8009d3c:	441d      	add	r5, r3
 8009d3e:	9206      	str	r2, [sp, #24]
 8009d40:	e779      	b.n	8009c36 <_dtoa_r+0x816>
 8009d42:	4603      	mov	r3, r0
 8009d44:	e7f4      	b.n	8009d30 <_dtoa_r+0x910>
 8009d46:	9b04      	ldr	r3, [sp, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	dc37      	bgt.n	8009dbc <_dtoa_r+0x99c>
 8009d4c:	9b07      	ldr	r3, [sp, #28]
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	dd34      	ble.n	8009dbc <_dtoa_r+0x99c>
 8009d52:	9b04      	ldr	r3, [sp, #16]
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	9b01      	ldr	r3, [sp, #4]
 8009d58:	b963      	cbnz	r3, 8009d74 <_dtoa_r+0x954>
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	2205      	movs	r2, #5
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f000 f9fe 	bl	800a160 <__multadd>
 8009d64:	4601      	mov	r1, r0
 8009d66:	4606      	mov	r6, r0
 8009d68:	4650      	mov	r0, sl
 8009d6a:	f000 fc13 	bl	800a594 <__mcmp>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	f73f adbb 	bgt.w	80098ea <_dtoa_r+0x4ca>
 8009d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d76:	9d00      	ldr	r5, [sp, #0]
 8009d78:	ea6f 0b03 	mvn.w	fp, r3
 8009d7c:	f04f 0800 	mov.w	r8, #0
 8009d80:	4631      	mov	r1, r6
 8009d82:	4620      	mov	r0, r4
 8009d84:	f000 f9ca 	bl	800a11c <_Bfree>
 8009d88:	2f00      	cmp	r7, #0
 8009d8a:	f43f aeab 	beq.w	8009ae4 <_dtoa_r+0x6c4>
 8009d8e:	f1b8 0f00 	cmp.w	r8, #0
 8009d92:	d005      	beq.n	8009da0 <_dtoa_r+0x980>
 8009d94:	45b8      	cmp	r8, r7
 8009d96:	d003      	beq.n	8009da0 <_dtoa_r+0x980>
 8009d98:	4641      	mov	r1, r8
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	f000 f9be 	bl	800a11c <_Bfree>
 8009da0:	4639      	mov	r1, r7
 8009da2:	4620      	mov	r0, r4
 8009da4:	f000 f9ba 	bl	800a11c <_Bfree>
 8009da8:	e69c      	b.n	8009ae4 <_dtoa_r+0x6c4>
 8009daa:	2600      	movs	r6, #0
 8009dac:	4637      	mov	r7, r6
 8009dae:	e7e1      	b.n	8009d74 <_dtoa_r+0x954>
 8009db0:	46bb      	mov	fp, r7
 8009db2:	4637      	mov	r7, r6
 8009db4:	e599      	b.n	80098ea <_dtoa_r+0x4ca>
 8009db6:	bf00      	nop
 8009db8:	40240000 	.word	0x40240000
 8009dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f000 80c8 	beq.w	8009f54 <_dtoa_r+0xb34>
 8009dc4:	9b04      	ldr	r3, [sp, #16]
 8009dc6:	9301      	str	r3, [sp, #4]
 8009dc8:	2d00      	cmp	r5, #0
 8009dca:	dd05      	ble.n	8009dd8 <_dtoa_r+0x9b8>
 8009dcc:	4639      	mov	r1, r7
 8009dce:	462a      	mov	r2, r5
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f000 fb73 	bl	800a4bc <__lshift>
 8009dd6:	4607      	mov	r7, r0
 8009dd8:	f1b8 0f00 	cmp.w	r8, #0
 8009ddc:	d05b      	beq.n	8009e96 <_dtoa_r+0xa76>
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	4620      	mov	r0, r4
 8009de2:	f000 f95b 	bl	800a09c <_Balloc>
 8009de6:	4605      	mov	r5, r0
 8009de8:	b928      	cbnz	r0, 8009df6 <_dtoa_r+0x9d6>
 8009dea:	4b83      	ldr	r3, [pc, #524]	; (8009ff8 <_dtoa_r+0xbd8>)
 8009dec:	4602      	mov	r2, r0
 8009dee:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009df2:	f7ff bb2e 	b.w	8009452 <_dtoa_r+0x32>
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	3202      	adds	r2, #2
 8009dfa:	0092      	lsls	r2, r2, #2
 8009dfc:	f107 010c 	add.w	r1, r7, #12
 8009e00:	300c      	adds	r0, #12
 8009e02:	f7ff fa74 	bl	80092ee <memcpy>
 8009e06:	2201      	movs	r2, #1
 8009e08:	4629      	mov	r1, r5
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 fb56 	bl	800a4bc <__lshift>
 8009e10:	9b00      	ldr	r3, [sp, #0]
 8009e12:	3301      	adds	r3, #1
 8009e14:	9304      	str	r3, [sp, #16]
 8009e16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	9308      	str	r3, [sp, #32]
 8009e1e:	9b02      	ldr	r3, [sp, #8]
 8009e20:	f003 0301 	and.w	r3, r3, #1
 8009e24:	46b8      	mov	r8, r7
 8009e26:	9306      	str	r3, [sp, #24]
 8009e28:	4607      	mov	r7, r0
 8009e2a:	9b04      	ldr	r3, [sp, #16]
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	4650      	mov	r0, sl
 8009e32:	9301      	str	r3, [sp, #4]
 8009e34:	f7ff fa69 	bl	800930a <quorem>
 8009e38:	4641      	mov	r1, r8
 8009e3a:	9002      	str	r0, [sp, #8]
 8009e3c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009e40:	4650      	mov	r0, sl
 8009e42:	f000 fba7 	bl	800a594 <__mcmp>
 8009e46:	463a      	mov	r2, r7
 8009e48:	9005      	str	r0, [sp, #20]
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	f000 fbbd 	bl	800a5cc <__mdiff>
 8009e52:	68c2      	ldr	r2, [r0, #12]
 8009e54:	4605      	mov	r5, r0
 8009e56:	bb02      	cbnz	r2, 8009e9a <_dtoa_r+0xa7a>
 8009e58:	4601      	mov	r1, r0
 8009e5a:	4650      	mov	r0, sl
 8009e5c:	f000 fb9a 	bl	800a594 <__mcmp>
 8009e60:	4602      	mov	r2, r0
 8009e62:	4629      	mov	r1, r5
 8009e64:	4620      	mov	r0, r4
 8009e66:	9209      	str	r2, [sp, #36]	; 0x24
 8009e68:	f000 f958 	bl	800a11c <_Bfree>
 8009e6c:	9b07      	ldr	r3, [sp, #28]
 8009e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e70:	9d04      	ldr	r5, [sp, #16]
 8009e72:	ea43 0102 	orr.w	r1, r3, r2
 8009e76:	9b06      	ldr	r3, [sp, #24]
 8009e78:	4319      	orrs	r1, r3
 8009e7a:	d110      	bne.n	8009e9e <_dtoa_r+0xa7e>
 8009e7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009e80:	d029      	beq.n	8009ed6 <_dtoa_r+0xab6>
 8009e82:	9b05      	ldr	r3, [sp, #20]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	dd02      	ble.n	8009e8e <_dtoa_r+0xa6e>
 8009e88:	9b02      	ldr	r3, [sp, #8]
 8009e8a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009e8e:	9b01      	ldr	r3, [sp, #4]
 8009e90:	f883 9000 	strb.w	r9, [r3]
 8009e94:	e774      	b.n	8009d80 <_dtoa_r+0x960>
 8009e96:	4638      	mov	r0, r7
 8009e98:	e7ba      	b.n	8009e10 <_dtoa_r+0x9f0>
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	e7e1      	b.n	8009e62 <_dtoa_r+0xa42>
 8009e9e:	9b05      	ldr	r3, [sp, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	db04      	blt.n	8009eae <_dtoa_r+0xa8e>
 8009ea4:	9907      	ldr	r1, [sp, #28]
 8009ea6:	430b      	orrs	r3, r1
 8009ea8:	9906      	ldr	r1, [sp, #24]
 8009eaa:	430b      	orrs	r3, r1
 8009eac:	d120      	bne.n	8009ef0 <_dtoa_r+0xad0>
 8009eae:	2a00      	cmp	r2, #0
 8009eb0:	dded      	ble.n	8009e8e <_dtoa_r+0xa6e>
 8009eb2:	4651      	mov	r1, sl
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f000 fb00 	bl	800a4bc <__lshift>
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	4682      	mov	sl, r0
 8009ec0:	f000 fb68 	bl	800a594 <__mcmp>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	dc03      	bgt.n	8009ed0 <_dtoa_r+0xab0>
 8009ec8:	d1e1      	bne.n	8009e8e <_dtoa_r+0xa6e>
 8009eca:	f019 0f01 	tst.w	r9, #1
 8009ece:	d0de      	beq.n	8009e8e <_dtoa_r+0xa6e>
 8009ed0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ed4:	d1d8      	bne.n	8009e88 <_dtoa_r+0xa68>
 8009ed6:	9a01      	ldr	r2, [sp, #4]
 8009ed8:	2339      	movs	r3, #57	; 0x39
 8009eda:	7013      	strb	r3, [r2, #0]
 8009edc:	462b      	mov	r3, r5
 8009ede:	461d      	mov	r5, r3
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ee6:	2a39      	cmp	r2, #57	; 0x39
 8009ee8:	d06c      	beq.n	8009fc4 <_dtoa_r+0xba4>
 8009eea:	3201      	adds	r2, #1
 8009eec:	701a      	strb	r2, [r3, #0]
 8009eee:	e747      	b.n	8009d80 <_dtoa_r+0x960>
 8009ef0:	2a00      	cmp	r2, #0
 8009ef2:	dd07      	ble.n	8009f04 <_dtoa_r+0xae4>
 8009ef4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ef8:	d0ed      	beq.n	8009ed6 <_dtoa_r+0xab6>
 8009efa:	9a01      	ldr	r2, [sp, #4]
 8009efc:	f109 0301 	add.w	r3, r9, #1
 8009f00:	7013      	strb	r3, [r2, #0]
 8009f02:	e73d      	b.n	8009d80 <_dtoa_r+0x960>
 8009f04:	9b04      	ldr	r3, [sp, #16]
 8009f06:	9a08      	ldr	r2, [sp, #32]
 8009f08:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d043      	beq.n	8009f98 <_dtoa_r+0xb78>
 8009f10:	4651      	mov	r1, sl
 8009f12:	2300      	movs	r3, #0
 8009f14:	220a      	movs	r2, #10
 8009f16:	4620      	mov	r0, r4
 8009f18:	f000 f922 	bl	800a160 <__multadd>
 8009f1c:	45b8      	cmp	r8, r7
 8009f1e:	4682      	mov	sl, r0
 8009f20:	f04f 0300 	mov.w	r3, #0
 8009f24:	f04f 020a 	mov.w	r2, #10
 8009f28:	4641      	mov	r1, r8
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	d107      	bne.n	8009f3e <_dtoa_r+0xb1e>
 8009f2e:	f000 f917 	bl	800a160 <__multadd>
 8009f32:	4680      	mov	r8, r0
 8009f34:	4607      	mov	r7, r0
 8009f36:	9b04      	ldr	r3, [sp, #16]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	9304      	str	r3, [sp, #16]
 8009f3c:	e775      	b.n	8009e2a <_dtoa_r+0xa0a>
 8009f3e:	f000 f90f 	bl	800a160 <__multadd>
 8009f42:	4639      	mov	r1, r7
 8009f44:	4680      	mov	r8, r0
 8009f46:	2300      	movs	r3, #0
 8009f48:	220a      	movs	r2, #10
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f000 f908 	bl	800a160 <__multadd>
 8009f50:	4607      	mov	r7, r0
 8009f52:	e7f0      	b.n	8009f36 <_dtoa_r+0xb16>
 8009f54:	9b04      	ldr	r3, [sp, #16]
 8009f56:	9301      	str	r3, [sp, #4]
 8009f58:	9d00      	ldr	r5, [sp, #0]
 8009f5a:	4631      	mov	r1, r6
 8009f5c:	4650      	mov	r0, sl
 8009f5e:	f7ff f9d4 	bl	800930a <quorem>
 8009f62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f66:	9b00      	ldr	r3, [sp, #0]
 8009f68:	f805 9b01 	strb.w	r9, [r5], #1
 8009f6c:	1aea      	subs	r2, r5, r3
 8009f6e:	9b01      	ldr	r3, [sp, #4]
 8009f70:	4293      	cmp	r3, r2
 8009f72:	dd07      	ble.n	8009f84 <_dtoa_r+0xb64>
 8009f74:	4651      	mov	r1, sl
 8009f76:	2300      	movs	r3, #0
 8009f78:	220a      	movs	r2, #10
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f000 f8f0 	bl	800a160 <__multadd>
 8009f80:	4682      	mov	sl, r0
 8009f82:	e7ea      	b.n	8009f5a <_dtoa_r+0xb3a>
 8009f84:	9b01      	ldr	r3, [sp, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bfc8      	it	gt
 8009f8a:	461d      	movgt	r5, r3
 8009f8c:	9b00      	ldr	r3, [sp, #0]
 8009f8e:	bfd8      	it	le
 8009f90:	2501      	movle	r5, #1
 8009f92:	441d      	add	r5, r3
 8009f94:	f04f 0800 	mov.w	r8, #0
 8009f98:	4651      	mov	r1, sl
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f000 fa8d 	bl	800a4bc <__lshift>
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4682      	mov	sl, r0
 8009fa6:	f000 faf5 	bl	800a594 <__mcmp>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	dc96      	bgt.n	8009edc <_dtoa_r+0xabc>
 8009fae:	d102      	bne.n	8009fb6 <_dtoa_r+0xb96>
 8009fb0:	f019 0f01 	tst.w	r9, #1
 8009fb4:	d192      	bne.n	8009edc <_dtoa_r+0xabc>
 8009fb6:	462b      	mov	r3, r5
 8009fb8:	461d      	mov	r5, r3
 8009fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fbe:	2a30      	cmp	r2, #48	; 0x30
 8009fc0:	d0fa      	beq.n	8009fb8 <_dtoa_r+0xb98>
 8009fc2:	e6dd      	b.n	8009d80 <_dtoa_r+0x960>
 8009fc4:	9a00      	ldr	r2, [sp, #0]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d189      	bne.n	8009ede <_dtoa_r+0xabe>
 8009fca:	f10b 0b01 	add.w	fp, fp, #1
 8009fce:	2331      	movs	r3, #49	; 0x31
 8009fd0:	e796      	b.n	8009f00 <_dtoa_r+0xae0>
 8009fd2:	4b0a      	ldr	r3, [pc, #40]	; (8009ffc <_dtoa_r+0xbdc>)
 8009fd4:	f7ff ba99 	b.w	800950a <_dtoa_r+0xea>
 8009fd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f47f aa6d 	bne.w	80094ba <_dtoa_r+0x9a>
 8009fe0:	4b07      	ldr	r3, [pc, #28]	; (800a000 <_dtoa_r+0xbe0>)
 8009fe2:	f7ff ba92 	b.w	800950a <_dtoa_r+0xea>
 8009fe6:	9b01      	ldr	r3, [sp, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	dcb5      	bgt.n	8009f58 <_dtoa_r+0xb38>
 8009fec:	9b07      	ldr	r3, [sp, #28]
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	f73f aeb1 	bgt.w	8009d56 <_dtoa_r+0x936>
 8009ff4:	e7b0      	b.n	8009f58 <_dtoa_r+0xb38>
 8009ff6:	bf00      	nop
 8009ff8:	0800b444 	.word	0x0800b444
 8009ffc:	0800b3a4 	.word	0x0800b3a4
 800a000:	0800b3c8 	.word	0x0800b3c8

0800a004 <_free_r>:
 800a004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a006:	2900      	cmp	r1, #0
 800a008:	d044      	beq.n	800a094 <_free_r+0x90>
 800a00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a00e:	9001      	str	r0, [sp, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	f1a1 0404 	sub.w	r4, r1, #4
 800a016:	bfb8      	it	lt
 800a018:	18e4      	addlt	r4, r4, r3
 800a01a:	f7fe fb33 	bl	8008684 <__malloc_lock>
 800a01e:	4a1e      	ldr	r2, [pc, #120]	; (800a098 <_free_r+0x94>)
 800a020:	9801      	ldr	r0, [sp, #4]
 800a022:	6813      	ldr	r3, [r2, #0]
 800a024:	b933      	cbnz	r3, 800a034 <_free_r+0x30>
 800a026:	6063      	str	r3, [r4, #4]
 800a028:	6014      	str	r4, [r2, #0]
 800a02a:	b003      	add	sp, #12
 800a02c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a030:	f7fe bb2e 	b.w	8008690 <__malloc_unlock>
 800a034:	42a3      	cmp	r3, r4
 800a036:	d908      	bls.n	800a04a <_free_r+0x46>
 800a038:	6825      	ldr	r5, [r4, #0]
 800a03a:	1961      	adds	r1, r4, r5
 800a03c:	428b      	cmp	r3, r1
 800a03e:	bf01      	itttt	eq
 800a040:	6819      	ldreq	r1, [r3, #0]
 800a042:	685b      	ldreq	r3, [r3, #4]
 800a044:	1949      	addeq	r1, r1, r5
 800a046:	6021      	streq	r1, [r4, #0]
 800a048:	e7ed      	b.n	800a026 <_free_r+0x22>
 800a04a:	461a      	mov	r2, r3
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	b10b      	cbz	r3, 800a054 <_free_r+0x50>
 800a050:	42a3      	cmp	r3, r4
 800a052:	d9fa      	bls.n	800a04a <_free_r+0x46>
 800a054:	6811      	ldr	r1, [r2, #0]
 800a056:	1855      	adds	r5, r2, r1
 800a058:	42a5      	cmp	r5, r4
 800a05a:	d10b      	bne.n	800a074 <_free_r+0x70>
 800a05c:	6824      	ldr	r4, [r4, #0]
 800a05e:	4421      	add	r1, r4
 800a060:	1854      	adds	r4, r2, r1
 800a062:	42a3      	cmp	r3, r4
 800a064:	6011      	str	r1, [r2, #0]
 800a066:	d1e0      	bne.n	800a02a <_free_r+0x26>
 800a068:	681c      	ldr	r4, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	6053      	str	r3, [r2, #4]
 800a06e:	440c      	add	r4, r1
 800a070:	6014      	str	r4, [r2, #0]
 800a072:	e7da      	b.n	800a02a <_free_r+0x26>
 800a074:	d902      	bls.n	800a07c <_free_r+0x78>
 800a076:	230c      	movs	r3, #12
 800a078:	6003      	str	r3, [r0, #0]
 800a07a:	e7d6      	b.n	800a02a <_free_r+0x26>
 800a07c:	6825      	ldr	r5, [r4, #0]
 800a07e:	1961      	adds	r1, r4, r5
 800a080:	428b      	cmp	r3, r1
 800a082:	bf04      	itt	eq
 800a084:	6819      	ldreq	r1, [r3, #0]
 800a086:	685b      	ldreq	r3, [r3, #4]
 800a088:	6063      	str	r3, [r4, #4]
 800a08a:	bf04      	itt	eq
 800a08c:	1949      	addeq	r1, r1, r5
 800a08e:	6021      	streq	r1, [r4, #0]
 800a090:	6054      	str	r4, [r2, #4]
 800a092:	e7ca      	b.n	800a02a <_free_r+0x26>
 800a094:	b003      	add	sp, #12
 800a096:	bd30      	pop	{r4, r5, pc}
 800a098:	200003b0 	.word	0x200003b0

0800a09c <_Balloc>:
 800a09c:	b570      	push	{r4, r5, r6, lr}
 800a09e:	69c6      	ldr	r6, [r0, #28]
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	460d      	mov	r5, r1
 800a0a4:	b976      	cbnz	r6, 800a0c4 <_Balloc+0x28>
 800a0a6:	2010      	movs	r0, #16
 800a0a8:	f7fe fa3c 	bl	8008524 <malloc>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	61e0      	str	r0, [r4, #28]
 800a0b0:	b920      	cbnz	r0, 800a0bc <_Balloc+0x20>
 800a0b2:	4b18      	ldr	r3, [pc, #96]	; (800a114 <_Balloc+0x78>)
 800a0b4:	4818      	ldr	r0, [pc, #96]	; (800a118 <_Balloc+0x7c>)
 800a0b6:	216b      	movs	r1, #107	; 0x6b
 800a0b8:	f000 fd8c 	bl	800abd4 <__assert_func>
 800a0bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0c0:	6006      	str	r6, [r0, #0]
 800a0c2:	60c6      	str	r6, [r0, #12]
 800a0c4:	69e6      	ldr	r6, [r4, #28]
 800a0c6:	68f3      	ldr	r3, [r6, #12]
 800a0c8:	b183      	cbz	r3, 800a0ec <_Balloc+0x50>
 800a0ca:	69e3      	ldr	r3, [r4, #28]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0d2:	b9b8      	cbnz	r0, 800a104 <_Balloc+0x68>
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	fa01 f605 	lsl.w	r6, r1, r5
 800a0da:	1d72      	adds	r2, r6, #5
 800a0dc:	0092      	lsls	r2, r2, #2
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f000 fd96 	bl	800ac10 <_calloc_r>
 800a0e4:	b160      	cbz	r0, 800a100 <_Balloc+0x64>
 800a0e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0ea:	e00e      	b.n	800a10a <_Balloc+0x6e>
 800a0ec:	2221      	movs	r2, #33	; 0x21
 800a0ee:	2104      	movs	r1, #4
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f000 fd8d 	bl	800ac10 <_calloc_r>
 800a0f6:	69e3      	ldr	r3, [r4, #28]
 800a0f8:	60f0      	str	r0, [r6, #12]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1e4      	bne.n	800a0ca <_Balloc+0x2e>
 800a100:	2000      	movs	r0, #0
 800a102:	bd70      	pop	{r4, r5, r6, pc}
 800a104:	6802      	ldr	r2, [r0, #0]
 800a106:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a10a:	2300      	movs	r3, #0
 800a10c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a110:	e7f7      	b.n	800a102 <_Balloc+0x66>
 800a112:	bf00      	nop
 800a114:	0800b3d5 	.word	0x0800b3d5
 800a118:	0800b455 	.word	0x0800b455

0800a11c <_Bfree>:
 800a11c:	b570      	push	{r4, r5, r6, lr}
 800a11e:	69c6      	ldr	r6, [r0, #28]
 800a120:	4605      	mov	r5, r0
 800a122:	460c      	mov	r4, r1
 800a124:	b976      	cbnz	r6, 800a144 <_Bfree+0x28>
 800a126:	2010      	movs	r0, #16
 800a128:	f7fe f9fc 	bl	8008524 <malloc>
 800a12c:	4602      	mov	r2, r0
 800a12e:	61e8      	str	r0, [r5, #28]
 800a130:	b920      	cbnz	r0, 800a13c <_Bfree+0x20>
 800a132:	4b09      	ldr	r3, [pc, #36]	; (800a158 <_Bfree+0x3c>)
 800a134:	4809      	ldr	r0, [pc, #36]	; (800a15c <_Bfree+0x40>)
 800a136:	218f      	movs	r1, #143	; 0x8f
 800a138:	f000 fd4c 	bl	800abd4 <__assert_func>
 800a13c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a140:	6006      	str	r6, [r0, #0]
 800a142:	60c6      	str	r6, [r0, #12]
 800a144:	b13c      	cbz	r4, 800a156 <_Bfree+0x3a>
 800a146:	69eb      	ldr	r3, [r5, #28]
 800a148:	6862      	ldr	r2, [r4, #4]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a150:	6021      	str	r1, [r4, #0]
 800a152:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a156:	bd70      	pop	{r4, r5, r6, pc}
 800a158:	0800b3d5 	.word	0x0800b3d5
 800a15c:	0800b455 	.word	0x0800b455

0800a160 <__multadd>:
 800a160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a164:	690d      	ldr	r5, [r1, #16]
 800a166:	4607      	mov	r7, r0
 800a168:	460c      	mov	r4, r1
 800a16a:	461e      	mov	r6, r3
 800a16c:	f101 0c14 	add.w	ip, r1, #20
 800a170:	2000      	movs	r0, #0
 800a172:	f8dc 3000 	ldr.w	r3, [ip]
 800a176:	b299      	uxth	r1, r3
 800a178:	fb02 6101 	mla	r1, r2, r1, r6
 800a17c:	0c1e      	lsrs	r6, r3, #16
 800a17e:	0c0b      	lsrs	r3, r1, #16
 800a180:	fb02 3306 	mla	r3, r2, r6, r3
 800a184:	b289      	uxth	r1, r1
 800a186:	3001      	adds	r0, #1
 800a188:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a18c:	4285      	cmp	r5, r0
 800a18e:	f84c 1b04 	str.w	r1, [ip], #4
 800a192:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a196:	dcec      	bgt.n	800a172 <__multadd+0x12>
 800a198:	b30e      	cbz	r6, 800a1de <__multadd+0x7e>
 800a19a:	68a3      	ldr	r3, [r4, #8]
 800a19c:	42ab      	cmp	r3, r5
 800a19e:	dc19      	bgt.n	800a1d4 <__multadd+0x74>
 800a1a0:	6861      	ldr	r1, [r4, #4]
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	3101      	adds	r1, #1
 800a1a6:	f7ff ff79 	bl	800a09c <_Balloc>
 800a1aa:	4680      	mov	r8, r0
 800a1ac:	b928      	cbnz	r0, 800a1ba <__multadd+0x5a>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	4b0c      	ldr	r3, [pc, #48]	; (800a1e4 <__multadd+0x84>)
 800a1b2:	480d      	ldr	r0, [pc, #52]	; (800a1e8 <__multadd+0x88>)
 800a1b4:	21ba      	movs	r1, #186	; 0xba
 800a1b6:	f000 fd0d 	bl	800abd4 <__assert_func>
 800a1ba:	6922      	ldr	r2, [r4, #16]
 800a1bc:	3202      	adds	r2, #2
 800a1be:	f104 010c 	add.w	r1, r4, #12
 800a1c2:	0092      	lsls	r2, r2, #2
 800a1c4:	300c      	adds	r0, #12
 800a1c6:	f7ff f892 	bl	80092ee <memcpy>
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	f7ff ffa5 	bl	800a11c <_Bfree>
 800a1d2:	4644      	mov	r4, r8
 800a1d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1d8:	3501      	adds	r5, #1
 800a1da:	615e      	str	r6, [r3, #20]
 800a1dc:	6125      	str	r5, [r4, #16]
 800a1de:	4620      	mov	r0, r4
 800a1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e4:	0800b444 	.word	0x0800b444
 800a1e8:	0800b455 	.word	0x0800b455

0800a1ec <__hi0bits>:
 800a1ec:	0c03      	lsrs	r3, r0, #16
 800a1ee:	041b      	lsls	r3, r3, #16
 800a1f0:	b9d3      	cbnz	r3, 800a228 <__hi0bits+0x3c>
 800a1f2:	0400      	lsls	r0, r0, #16
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a1fa:	bf04      	itt	eq
 800a1fc:	0200      	lsleq	r0, r0, #8
 800a1fe:	3308      	addeq	r3, #8
 800a200:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a204:	bf04      	itt	eq
 800a206:	0100      	lsleq	r0, r0, #4
 800a208:	3304      	addeq	r3, #4
 800a20a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a20e:	bf04      	itt	eq
 800a210:	0080      	lsleq	r0, r0, #2
 800a212:	3302      	addeq	r3, #2
 800a214:	2800      	cmp	r0, #0
 800a216:	db05      	blt.n	800a224 <__hi0bits+0x38>
 800a218:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a21c:	f103 0301 	add.w	r3, r3, #1
 800a220:	bf08      	it	eq
 800a222:	2320      	moveq	r3, #32
 800a224:	4618      	mov	r0, r3
 800a226:	4770      	bx	lr
 800a228:	2300      	movs	r3, #0
 800a22a:	e7e4      	b.n	800a1f6 <__hi0bits+0xa>

0800a22c <__lo0bits>:
 800a22c:	6803      	ldr	r3, [r0, #0]
 800a22e:	f013 0207 	ands.w	r2, r3, #7
 800a232:	d00c      	beq.n	800a24e <__lo0bits+0x22>
 800a234:	07d9      	lsls	r1, r3, #31
 800a236:	d422      	bmi.n	800a27e <__lo0bits+0x52>
 800a238:	079a      	lsls	r2, r3, #30
 800a23a:	bf49      	itett	mi
 800a23c:	085b      	lsrmi	r3, r3, #1
 800a23e:	089b      	lsrpl	r3, r3, #2
 800a240:	6003      	strmi	r3, [r0, #0]
 800a242:	2201      	movmi	r2, #1
 800a244:	bf5c      	itt	pl
 800a246:	6003      	strpl	r3, [r0, #0]
 800a248:	2202      	movpl	r2, #2
 800a24a:	4610      	mov	r0, r2
 800a24c:	4770      	bx	lr
 800a24e:	b299      	uxth	r1, r3
 800a250:	b909      	cbnz	r1, 800a256 <__lo0bits+0x2a>
 800a252:	0c1b      	lsrs	r3, r3, #16
 800a254:	2210      	movs	r2, #16
 800a256:	b2d9      	uxtb	r1, r3
 800a258:	b909      	cbnz	r1, 800a25e <__lo0bits+0x32>
 800a25a:	3208      	adds	r2, #8
 800a25c:	0a1b      	lsrs	r3, r3, #8
 800a25e:	0719      	lsls	r1, r3, #28
 800a260:	bf04      	itt	eq
 800a262:	091b      	lsreq	r3, r3, #4
 800a264:	3204      	addeq	r2, #4
 800a266:	0799      	lsls	r1, r3, #30
 800a268:	bf04      	itt	eq
 800a26a:	089b      	lsreq	r3, r3, #2
 800a26c:	3202      	addeq	r2, #2
 800a26e:	07d9      	lsls	r1, r3, #31
 800a270:	d403      	bmi.n	800a27a <__lo0bits+0x4e>
 800a272:	085b      	lsrs	r3, r3, #1
 800a274:	f102 0201 	add.w	r2, r2, #1
 800a278:	d003      	beq.n	800a282 <__lo0bits+0x56>
 800a27a:	6003      	str	r3, [r0, #0]
 800a27c:	e7e5      	b.n	800a24a <__lo0bits+0x1e>
 800a27e:	2200      	movs	r2, #0
 800a280:	e7e3      	b.n	800a24a <__lo0bits+0x1e>
 800a282:	2220      	movs	r2, #32
 800a284:	e7e1      	b.n	800a24a <__lo0bits+0x1e>
	...

0800a288 <__i2b>:
 800a288:	b510      	push	{r4, lr}
 800a28a:	460c      	mov	r4, r1
 800a28c:	2101      	movs	r1, #1
 800a28e:	f7ff ff05 	bl	800a09c <_Balloc>
 800a292:	4602      	mov	r2, r0
 800a294:	b928      	cbnz	r0, 800a2a2 <__i2b+0x1a>
 800a296:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <__i2b+0x24>)
 800a298:	4805      	ldr	r0, [pc, #20]	; (800a2b0 <__i2b+0x28>)
 800a29a:	f240 1145 	movw	r1, #325	; 0x145
 800a29e:	f000 fc99 	bl	800abd4 <__assert_func>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	6144      	str	r4, [r0, #20]
 800a2a6:	6103      	str	r3, [r0, #16]
 800a2a8:	bd10      	pop	{r4, pc}
 800a2aa:	bf00      	nop
 800a2ac:	0800b444 	.word	0x0800b444
 800a2b0:	0800b455 	.word	0x0800b455

0800a2b4 <__multiply>:
 800a2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	4691      	mov	r9, r2
 800a2ba:	690a      	ldr	r2, [r1, #16]
 800a2bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	bfb8      	it	lt
 800a2c4:	460b      	movlt	r3, r1
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	bfbc      	itt	lt
 800a2ca:	464c      	movlt	r4, r9
 800a2cc:	4699      	movlt	r9, r3
 800a2ce:	6927      	ldr	r7, [r4, #16]
 800a2d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2d4:	68a3      	ldr	r3, [r4, #8]
 800a2d6:	6861      	ldr	r1, [r4, #4]
 800a2d8:	eb07 060a 	add.w	r6, r7, sl
 800a2dc:	42b3      	cmp	r3, r6
 800a2de:	b085      	sub	sp, #20
 800a2e0:	bfb8      	it	lt
 800a2e2:	3101      	addlt	r1, #1
 800a2e4:	f7ff feda 	bl	800a09c <_Balloc>
 800a2e8:	b930      	cbnz	r0, 800a2f8 <__multiply+0x44>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	4b44      	ldr	r3, [pc, #272]	; (800a400 <__multiply+0x14c>)
 800a2ee:	4845      	ldr	r0, [pc, #276]	; (800a404 <__multiply+0x150>)
 800a2f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a2f4:	f000 fc6e 	bl	800abd4 <__assert_func>
 800a2f8:	f100 0514 	add.w	r5, r0, #20
 800a2fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a300:	462b      	mov	r3, r5
 800a302:	2200      	movs	r2, #0
 800a304:	4543      	cmp	r3, r8
 800a306:	d321      	bcc.n	800a34c <__multiply+0x98>
 800a308:	f104 0314 	add.w	r3, r4, #20
 800a30c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a310:	f109 0314 	add.w	r3, r9, #20
 800a314:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a318:	9202      	str	r2, [sp, #8]
 800a31a:	1b3a      	subs	r2, r7, r4
 800a31c:	3a15      	subs	r2, #21
 800a31e:	f022 0203 	bic.w	r2, r2, #3
 800a322:	3204      	adds	r2, #4
 800a324:	f104 0115 	add.w	r1, r4, #21
 800a328:	428f      	cmp	r7, r1
 800a32a:	bf38      	it	cc
 800a32c:	2204      	movcc	r2, #4
 800a32e:	9201      	str	r2, [sp, #4]
 800a330:	9a02      	ldr	r2, [sp, #8]
 800a332:	9303      	str	r3, [sp, #12]
 800a334:	429a      	cmp	r2, r3
 800a336:	d80c      	bhi.n	800a352 <__multiply+0x9e>
 800a338:	2e00      	cmp	r6, #0
 800a33a:	dd03      	ble.n	800a344 <__multiply+0x90>
 800a33c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a340:	2b00      	cmp	r3, #0
 800a342:	d05b      	beq.n	800a3fc <__multiply+0x148>
 800a344:	6106      	str	r6, [r0, #16]
 800a346:	b005      	add	sp, #20
 800a348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a34c:	f843 2b04 	str.w	r2, [r3], #4
 800a350:	e7d8      	b.n	800a304 <__multiply+0x50>
 800a352:	f8b3 a000 	ldrh.w	sl, [r3]
 800a356:	f1ba 0f00 	cmp.w	sl, #0
 800a35a:	d024      	beq.n	800a3a6 <__multiply+0xf2>
 800a35c:	f104 0e14 	add.w	lr, r4, #20
 800a360:	46a9      	mov	r9, r5
 800a362:	f04f 0c00 	mov.w	ip, #0
 800a366:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a36a:	f8d9 1000 	ldr.w	r1, [r9]
 800a36e:	fa1f fb82 	uxth.w	fp, r2
 800a372:	b289      	uxth	r1, r1
 800a374:	fb0a 110b 	mla	r1, sl, fp, r1
 800a378:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a37c:	f8d9 2000 	ldr.w	r2, [r9]
 800a380:	4461      	add	r1, ip
 800a382:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a386:	fb0a c20b 	mla	r2, sl, fp, ip
 800a38a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a38e:	b289      	uxth	r1, r1
 800a390:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a394:	4577      	cmp	r7, lr
 800a396:	f849 1b04 	str.w	r1, [r9], #4
 800a39a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a39e:	d8e2      	bhi.n	800a366 <__multiply+0xb2>
 800a3a0:	9a01      	ldr	r2, [sp, #4]
 800a3a2:	f845 c002 	str.w	ip, [r5, r2]
 800a3a6:	9a03      	ldr	r2, [sp, #12]
 800a3a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3ac:	3304      	adds	r3, #4
 800a3ae:	f1b9 0f00 	cmp.w	r9, #0
 800a3b2:	d021      	beq.n	800a3f8 <__multiply+0x144>
 800a3b4:	6829      	ldr	r1, [r5, #0]
 800a3b6:	f104 0c14 	add.w	ip, r4, #20
 800a3ba:	46ae      	mov	lr, r5
 800a3bc:	f04f 0a00 	mov.w	sl, #0
 800a3c0:	f8bc b000 	ldrh.w	fp, [ip]
 800a3c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a3c8:	fb09 220b 	mla	r2, r9, fp, r2
 800a3cc:	4452      	add	r2, sl
 800a3ce:	b289      	uxth	r1, r1
 800a3d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3d4:	f84e 1b04 	str.w	r1, [lr], #4
 800a3d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a3dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a3e0:	f8be 1000 	ldrh.w	r1, [lr]
 800a3e4:	fb09 110a 	mla	r1, r9, sl, r1
 800a3e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a3ec:	4567      	cmp	r7, ip
 800a3ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a3f2:	d8e5      	bhi.n	800a3c0 <__multiply+0x10c>
 800a3f4:	9a01      	ldr	r2, [sp, #4]
 800a3f6:	50a9      	str	r1, [r5, r2]
 800a3f8:	3504      	adds	r5, #4
 800a3fa:	e799      	b.n	800a330 <__multiply+0x7c>
 800a3fc:	3e01      	subs	r6, #1
 800a3fe:	e79b      	b.n	800a338 <__multiply+0x84>
 800a400:	0800b444 	.word	0x0800b444
 800a404:	0800b455 	.word	0x0800b455

0800a408 <__pow5mult>:
 800a408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a40c:	4615      	mov	r5, r2
 800a40e:	f012 0203 	ands.w	r2, r2, #3
 800a412:	4606      	mov	r6, r0
 800a414:	460f      	mov	r7, r1
 800a416:	d007      	beq.n	800a428 <__pow5mult+0x20>
 800a418:	4c25      	ldr	r4, [pc, #148]	; (800a4b0 <__pow5mult+0xa8>)
 800a41a:	3a01      	subs	r2, #1
 800a41c:	2300      	movs	r3, #0
 800a41e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a422:	f7ff fe9d 	bl	800a160 <__multadd>
 800a426:	4607      	mov	r7, r0
 800a428:	10ad      	asrs	r5, r5, #2
 800a42a:	d03d      	beq.n	800a4a8 <__pow5mult+0xa0>
 800a42c:	69f4      	ldr	r4, [r6, #28]
 800a42e:	b97c      	cbnz	r4, 800a450 <__pow5mult+0x48>
 800a430:	2010      	movs	r0, #16
 800a432:	f7fe f877 	bl	8008524 <malloc>
 800a436:	4602      	mov	r2, r0
 800a438:	61f0      	str	r0, [r6, #28]
 800a43a:	b928      	cbnz	r0, 800a448 <__pow5mult+0x40>
 800a43c:	4b1d      	ldr	r3, [pc, #116]	; (800a4b4 <__pow5mult+0xac>)
 800a43e:	481e      	ldr	r0, [pc, #120]	; (800a4b8 <__pow5mult+0xb0>)
 800a440:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a444:	f000 fbc6 	bl	800abd4 <__assert_func>
 800a448:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a44c:	6004      	str	r4, [r0, #0]
 800a44e:	60c4      	str	r4, [r0, #12]
 800a450:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a454:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a458:	b94c      	cbnz	r4, 800a46e <__pow5mult+0x66>
 800a45a:	f240 2171 	movw	r1, #625	; 0x271
 800a45e:	4630      	mov	r0, r6
 800a460:	f7ff ff12 	bl	800a288 <__i2b>
 800a464:	2300      	movs	r3, #0
 800a466:	f8c8 0008 	str.w	r0, [r8, #8]
 800a46a:	4604      	mov	r4, r0
 800a46c:	6003      	str	r3, [r0, #0]
 800a46e:	f04f 0900 	mov.w	r9, #0
 800a472:	07eb      	lsls	r3, r5, #31
 800a474:	d50a      	bpl.n	800a48c <__pow5mult+0x84>
 800a476:	4639      	mov	r1, r7
 800a478:	4622      	mov	r2, r4
 800a47a:	4630      	mov	r0, r6
 800a47c:	f7ff ff1a 	bl	800a2b4 <__multiply>
 800a480:	4639      	mov	r1, r7
 800a482:	4680      	mov	r8, r0
 800a484:	4630      	mov	r0, r6
 800a486:	f7ff fe49 	bl	800a11c <_Bfree>
 800a48a:	4647      	mov	r7, r8
 800a48c:	106d      	asrs	r5, r5, #1
 800a48e:	d00b      	beq.n	800a4a8 <__pow5mult+0xa0>
 800a490:	6820      	ldr	r0, [r4, #0]
 800a492:	b938      	cbnz	r0, 800a4a4 <__pow5mult+0x9c>
 800a494:	4622      	mov	r2, r4
 800a496:	4621      	mov	r1, r4
 800a498:	4630      	mov	r0, r6
 800a49a:	f7ff ff0b 	bl	800a2b4 <__multiply>
 800a49e:	6020      	str	r0, [r4, #0]
 800a4a0:	f8c0 9000 	str.w	r9, [r0]
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	e7e4      	b.n	800a472 <__pow5mult+0x6a>
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ae:	bf00      	nop
 800a4b0:	0800b5a0 	.word	0x0800b5a0
 800a4b4:	0800b3d5 	.word	0x0800b3d5
 800a4b8:	0800b455 	.word	0x0800b455

0800a4bc <__lshift>:
 800a4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c0:	460c      	mov	r4, r1
 800a4c2:	6849      	ldr	r1, [r1, #4]
 800a4c4:	6923      	ldr	r3, [r4, #16]
 800a4c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4ca:	68a3      	ldr	r3, [r4, #8]
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	4691      	mov	r9, r2
 800a4d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4d4:	f108 0601 	add.w	r6, r8, #1
 800a4d8:	42b3      	cmp	r3, r6
 800a4da:	db0b      	blt.n	800a4f4 <__lshift+0x38>
 800a4dc:	4638      	mov	r0, r7
 800a4de:	f7ff fddd 	bl	800a09c <_Balloc>
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	b948      	cbnz	r0, 800a4fa <__lshift+0x3e>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	4b28      	ldr	r3, [pc, #160]	; (800a58c <__lshift+0xd0>)
 800a4ea:	4829      	ldr	r0, [pc, #164]	; (800a590 <__lshift+0xd4>)
 800a4ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a4f0:	f000 fb70 	bl	800abd4 <__assert_func>
 800a4f4:	3101      	adds	r1, #1
 800a4f6:	005b      	lsls	r3, r3, #1
 800a4f8:	e7ee      	b.n	800a4d8 <__lshift+0x1c>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	f100 0114 	add.w	r1, r0, #20
 800a500:	f100 0210 	add.w	r2, r0, #16
 800a504:	4618      	mov	r0, r3
 800a506:	4553      	cmp	r3, sl
 800a508:	db33      	blt.n	800a572 <__lshift+0xb6>
 800a50a:	6920      	ldr	r0, [r4, #16]
 800a50c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a510:	f104 0314 	add.w	r3, r4, #20
 800a514:	f019 091f 	ands.w	r9, r9, #31
 800a518:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a51c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a520:	d02b      	beq.n	800a57a <__lshift+0xbe>
 800a522:	f1c9 0e20 	rsb	lr, r9, #32
 800a526:	468a      	mov	sl, r1
 800a528:	2200      	movs	r2, #0
 800a52a:	6818      	ldr	r0, [r3, #0]
 800a52c:	fa00 f009 	lsl.w	r0, r0, r9
 800a530:	4310      	orrs	r0, r2
 800a532:	f84a 0b04 	str.w	r0, [sl], #4
 800a536:	f853 2b04 	ldr.w	r2, [r3], #4
 800a53a:	459c      	cmp	ip, r3
 800a53c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a540:	d8f3      	bhi.n	800a52a <__lshift+0x6e>
 800a542:	ebac 0304 	sub.w	r3, ip, r4
 800a546:	3b15      	subs	r3, #21
 800a548:	f023 0303 	bic.w	r3, r3, #3
 800a54c:	3304      	adds	r3, #4
 800a54e:	f104 0015 	add.w	r0, r4, #21
 800a552:	4584      	cmp	ip, r0
 800a554:	bf38      	it	cc
 800a556:	2304      	movcc	r3, #4
 800a558:	50ca      	str	r2, [r1, r3]
 800a55a:	b10a      	cbz	r2, 800a560 <__lshift+0xa4>
 800a55c:	f108 0602 	add.w	r6, r8, #2
 800a560:	3e01      	subs	r6, #1
 800a562:	4638      	mov	r0, r7
 800a564:	612e      	str	r6, [r5, #16]
 800a566:	4621      	mov	r1, r4
 800a568:	f7ff fdd8 	bl	800a11c <_Bfree>
 800a56c:	4628      	mov	r0, r5
 800a56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a572:	f842 0f04 	str.w	r0, [r2, #4]!
 800a576:	3301      	adds	r3, #1
 800a578:	e7c5      	b.n	800a506 <__lshift+0x4a>
 800a57a:	3904      	subs	r1, #4
 800a57c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a580:	f841 2f04 	str.w	r2, [r1, #4]!
 800a584:	459c      	cmp	ip, r3
 800a586:	d8f9      	bhi.n	800a57c <__lshift+0xc0>
 800a588:	e7ea      	b.n	800a560 <__lshift+0xa4>
 800a58a:	bf00      	nop
 800a58c:	0800b444 	.word	0x0800b444
 800a590:	0800b455 	.word	0x0800b455

0800a594 <__mcmp>:
 800a594:	b530      	push	{r4, r5, lr}
 800a596:	6902      	ldr	r2, [r0, #16]
 800a598:	690c      	ldr	r4, [r1, #16]
 800a59a:	1b12      	subs	r2, r2, r4
 800a59c:	d10e      	bne.n	800a5bc <__mcmp+0x28>
 800a59e:	f100 0314 	add.w	r3, r0, #20
 800a5a2:	3114      	adds	r1, #20
 800a5a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5b4:	42a5      	cmp	r5, r4
 800a5b6:	d003      	beq.n	800a5c0 <__mcmp+0x2c>
 800a5b8:	d305      	bcc.n	800a5c6 <__mcmp+0x32>
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	4610      	mov	r0, r2
 800a5be:	bd30      	pop	{r4, r5, pc}
 800a5c0:	4283      	cmp	r3, r0
 800a5c2:	d3f3      	bcc.n	800a5ac <__mcmp+0x18>
 800a5c4:	e7fa      	b.n	800a5bc <__mcmp+0x28>
 800a5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ca:	e7f7      	b.n	800a5bc <__mcmp+0x28>

0800a5cc <__mdiff>:
 800a5cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	4690      	mov	r8, r2
 800a5da:	f7ff ffdb 	bl	800a594 <__mcmp>
 800a5de:	1e05      	subs	r5, r0, #0
 800a5e0:	d110      	bne.n	800a604 <__mdiff+0x38>
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	f7ff fd59 	bl	800a09c <_Balloc>
 800a5ea:	b930      	cbnz	r0, 800a5fa <__mdiff+0x2e>
 800a5ec:	4b3a      	ldr	r3, [pc, #232]	; (800a6d8 <__mdiff+0x10c>)
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	f240 2137 	movw	r1, #567	; 0x237
 800a5f4:	4839      	ldr	r0, [pc, #228]	; (800a6dc <__mdiff+0x110>)
 800a5f6:	f000 faed 	bl	800abd4 <__assert_func>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a600:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a604:	bfa4      	itt	ge
 800a606:	4643      	movge	r3, r8
 800a608:	46a0      	movge	r8, r4
 800a60a:	4630      	mov	r0, r6
 800a60c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a610:	bfa6      	itte	ge
 800a612:	461c      	movge	r4, r3
 800a614:	2500      	movge	r5, #0
 800a616:	2501      	movlt	r5, #1
 800a618:	f7ff fd40 	bl	800a09c <_Balloc>
 800a61c:	b920      	cbnz	r0, 800a628 <__mdiff+0x5c>
 800a61e:	4b2e      	ldr	r3, [pc, #184]	; (800a6d8 <__mdiff+0x10c>)
 800a620:	4602      	mov	r2, r0
 800a622:	f240 2145 	movw	r1, #581	; 0x245
 800a626:	e7e5      	b.n	800a5f4 <__mdiff+0x28>
 800a628:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a62c:	6926      	ldr	r6, [r4, #16]
 800a62e:	60c5      	str	r5, [r0, #12]
 800a630:	f104 0914 	add.w	r9, r4, #20
 800a634:	f108 0514 	add.w	r5, r8, #20
 800a638:	f100 0e14 	add.w	lr, r0, #20
 800a63c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a640:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a644:	f108 0210 	add.w	r2, r8, #16
 800a648:	46f2      	mov	sl, lr
 800a64a:	2100      	movs	r1, #0
 800a64c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a650:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a654:	fa11 f88b 	uxtah	r8, r1, fp
 800a658:	b299      	uxth	r1, r3
 800a65a:	0c1b      	lsrs	r3, r3, #16
 800a65c:	eba8 0801 	sub.w	r8, r8, r1
 800a660:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a664:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a668:	fa1f f888 	uxth.w	r8, r8
 800a66c:	1419      	asrs	r1, r3, #16
 800a66e:	454e      	cmp	r6, r9
 800a670:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a674:	f84a 3b04 	str.w	r3, [sl], #4
 800a678:	d8e8      	bhi.n	800a64c <__mdiff+0x80>
 800a67a:	1b33      	subs	r3, r6, r4
 800a67c:	3b15      	subs	r3, #21
 800a67e:	f023 0303 	bic.w	r3, r3, #3
 800a682:	3304      	adds	r3, #4
 800a684:	3415      	adds	r4, #21
 800a686:	42a6      	cmp	r6, r4
 800a688:	bf38      	it	cc
 800a68a:	2304      	movcc	r3, #4
 800a68c:	441d      	add	r5, r3
 800a68e:	4473      	add	r3, lr
 800a690:	469e      	mov	lr, r3
 800a692:	462e      	mov	r6, r5
 800a694:	4566      	cmp	r6, ip
 800a696:	d30e      	bcc.n	800a6b6 <__mdiff+0xea>
 800a698:	f10c 0203 	add.w	r2, ip, #3
 800a69c:	1b52      	subs	r2, r2, r5
 800a69e:	f022 0203 	bic.w	r2, r2, #3
 800a6a2:	3d03      	subs	r5, #3
 800a6a4:	45ac      	cmp	ip, r5
 800a6a6:	bf38      	it	cc
 800a6a8:	2200      	movcc	r2, #0
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a6b0:	b17a      	cbz	r2, 800a6d2 <__mdiff+0x106>
 800a6b2:	6107      	str	r7, [r0, #16]
 800a6b4:	e7a4      	b.n	800a600 <__mdiff+0x34>
 800a6b6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a6ba:	fa11 f288 	uxtah	r2, r1, r8
 800a6be:	1414      	asrs	r4, r2, #16
 800a6c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a6c4:	b292      	uxth	r2, r2
 800a6c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a6ca:	f84e 2b04 	str.w	r2, [lr], #4
 800a6ce:	1421      	asrs	r1, r4, #16
 800a6d0:	e7e0      	b.n	800a694 <__mdiff+0xc8>
 800a6d2:	3f01      	subs	r7, #1
 800a6d4:	e7ea      	b.n	800a6ac <__mdiff+0xe0>
 800a6d6:	bf00      	nop
 800a6d8:	0800b444 	.word	0x0800b444
 800a6dc:	0800b455 	.word	0x0800b455

0800a6e0 <__d2b>:
 800a6e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6e4:	460f      	mov	r7, r1
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	ec59 8b10 	vmov	r8, r9, d0
 800a6ec:	4616      	mov	r6, r2
 800a6ee:	f7ff fcd5 	bl	800a09c <_Balloc>
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	b930      	cbnz	r0, 800a704 <__d2b+0x24>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	4b24      	ldr	r3, [pc, #144]	; (800a78c <__d2b+0xac>)
 800a6fa:	4825      	ldr	r0, [pc, #148]	; (800a790 <__d2b+0xb0>)
 800a6fc:	f240 310f 	movw	r1, #783	; 0x30f
 800a700:	f000 fa68 	bl	800abd4 <__assert_func>
 800a704:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a70c:	bb2d      	cbnz	r5, 800a75a <__d2b+0x7a>
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	f1b8 0300 	subs.w	r3, r8, #0
 800a714:	d026      	beq.n	800a764 <__d2b+0x84>
 800a716:	4668      	mov	r0, sp
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	f7ff fd87 	bl	800a22c <__lo0bits>
 800a71e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a722:	b1e8      	cbz	r0, 800a760 <__d2b+0x80>
 800a724:	f1c0 0320 	rsb	r3, r0, #32
 800a728:	fa02 f303 	lsl.w	r3, r2, r3
 800a72c:	430b      	orrs	r3, r1
 800a72e:	40c2      	lsrs	r2, r0
 800a730:	6163      	str	r3, [r4, #20]
 800a732:	9201      	str	r2, [sp, #4]
 800a734:	9b01      	ldr	r3, [sp, #4]
 800a736:	61a3      	str	r3, [r4, #24]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	bf14      	ite	ne
 800a73c:	2202      	movne	r2, #2
 800a73e:	2201      	moveq	r2, #1
 800a740:	6122      	str	r2, [r4, #16]
 800a742:	b1bd      	cbz	r5, 800a774 <__d2b+0x94>
 800a744:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a748:	4405      	add	r5, r0
 800a74a:	603d      	str	r5, [r7, #0]
 800a74c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a750:	6030      	str	r0, [r6, #0]
 800a752:	4620      	mov	r0, r4
 800a754:	b003      	add	sp, #12
 800a756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a75a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a75e:	e7d6      	b.n	800a70e <__d2b+0x2e>
 800a760:	6161      	str	r1, [r4, #20]
 800a762:	e7e7      	b.n	800a734 <__d2b+0x54>
 800a764:	a801      	add	r0, sp, #4
 800a766:	f7ff fd61 	bl	800a22c <__lo0bits>
 800a76a:	9b01      	ldr	r3, [sp, #4]
 800a76c:	6163      	str	r3, [r4, #20]
 800a76e:	3020      	adds	r0, #32
 800a770:	2201      	movs	r2, #1
 800a772:	e7e5      	b.n	800a740 <__d2b+0x60>
 800a774:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a778:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a77c:	6038      	str	r0, [r7, #0]
 800a77e:	6918      	ldr	r0, [r3, #16]
 800a780:	f7ff fd34 	bl	800a1ec <__hi0bits>
 800a784:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a788:	e7e2      	b.n	800a750 <__d2b+0x70>
 800a78a:	bf00      	nop
 800a78c:	0800b444 	.word	0x0800b444
 800a790:	0800b455 	.word	0x0800b455

0800a794 <__ssputs_r>:
 800a794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a798:	688e      	ldr	r6, [r1, #8]
 800a79a:	461f      	mov	r7, r3
 800a79c:	42be      	cmp	r6, r7
 800a79e:	680b      	ldr	r3, [r1, #0]
 800a7a0:	4682      	mov	sl, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	4690      	mov	r8, r2
 800a7a6:	d82c      	bhi.n	800a802 <__ssputs_r+0x6e>
 800a7a8:	898a      	ldrh	r2, [r1, #12]
 800a7aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7ae:	d026      	beq.n	800a7fe <__ssputs_r+0x6a>
 800a7b0:	6965      	ldr	r5, [r4, #20]
 800a7b2:	6909      	ldr	r1, [r1, #16]
 800a7b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7b8:	eba3 0901 	sub.w	r9, r3, r1
 800a7bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7c0:	1c7b      	adds	r3, r7, #1
 800a7c2:	444b      	add	r3, r9
 800a7c4:	106d      	asrs	r5, r5, #1
 800a7c6:	429d      	cmp	r5, r3
 800a7c8:	bf38      	it	cc
 800a7ca:	461d      	movcc	r5, r3
 800a7cc:	0553      	lsls	r3, r2, #21
 800a7ce:	d527      	bpl.n	800a820 <__ssputs_r+0x8c>
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	f7fd fed7 	bl	8008584 <_malloc_r>
 800a7d6:	4606      	mov	r6, r0
 800a7d8:	b360      	cbz	r0, 800a834 <__ssputs_r+0xa0>
 800a7da:	6921      	ldr	r1, [r4, #16]
 800a7dc:	464a      	mov	r2, r9
 800a7de:	f7fe fd86 	bl	80092ee <memcpy>
 800a7e2:	89a3      	ldrh	r3, [r4, #12]
 800a7e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ec:	81a3      	strh	r3, [r4, #12]
 800a7ee:	6126      	str	r6, [r4, #16]
 800a7f0:	6165      	str	r5, [r4, #20]
 800a7f2:	444e      	add	r6, r9
 800a7f4:	eba5 0509 	sub.w	r5, r5, r9
 800a7f8:	6026      	str	r6, [r4, #0]
 800a7fa:	60a5      	str	r5, [r4, #8]
 800a7fc:	463e      	mov	r6, r7
 800a7fe:	42be      	cmp	r6, r7
 800a800:	d900      	bls.n	800a804 <__ssputs_r+0x70>
 800a802:	463e      	mov	r6, r7
 800a804:	6820      	ldr	r0, [r4, #0]
 800a806:	4632      	mov	r2, r6
 800a808:	4641      	mov	r1, r8
 800a80a:	f000 f9c9 	bl	800aba0 <memmove>
 800a80e:	68a3      	ldr	r3, [r4, #8]
 800a810:	1b9b      	subs	r3, r3, r6
 800a812:	60a3      	str	r3, [r4, #8]
 800a814:	6823      	ldr	r3, [r4, #0]
 800a816:	4433      	add	r3, r6
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	2000      	movs	r0, #0
 800a81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a820:	462a      	mov	r2, r5
 800a822:	f000 fa1d 	bl	800ac60 <_realloc_r>
 800a826:	4606      	mov	r6, r0
 800a828:	2800      	cmp	r0, #0
 800a82a:	d1e0      	bne.n	800a7ee <__ssputs_r+0x5a>
 800a82c:	6921      	ldr	r1, [r4, #16]
 800a82e:	4650      	mov	r0, sl
 800a830:	f7ff fbe8 	bl	800a004 <_free_r>
 800a834:	230c      	movs	r3, #12
 800a836:	f8ca 3000 	str.w	r3, [sl]
 800a83a:	89a3      	ldrh	r3, [r4, #12]
 800a83c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a840:	81a3      	strh	r3, [r4, #12]
 800a842:	f04f 30ff 	mov.w	r0, #4294967295
 800a846:	e7e9      	b.n	800a81c <__ssputs_r+0x88>

0800a848 <_svfiprintf_r>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	4698      	mov	r8, r3
 800a84e:	898b      	ldrh	r3, [r1, #12]
 800a850:	061b      	lsls	r3, r3, #24
 800a852:	b09d      	sub	sp, #116	; 0x74
 800a854:	4607      	mov	r7, r0
 800a856:	460d      	mov	r5, r1
 800a858:	4614      	mov	r4, r2
 800a85a:	d50e      	bpl.n	800a87a <_svfiprintf_r+0x32>
 800a85c:	690b      	ldr	r3, [r1, #16]
 800a85e:	b963      	cbnz	r3, 800a87a <_svfiprintf_r+0x32>
 800a860:	2140      	movs	r1, #64	; 0x40
 800a862:	f7fd fe8f 	bl	8008584 <_malloc_r>
 800a866:	6028      	str	r0, [r5, #0]
 800a868:	6128      	str	r0, [r5, #16]
 800a86a:	b920      	cbnz	r0, 800a876 <_svfiprintf_r+0x2e>
 800a86c:	230c      	movs	r3, #12
 800a86e:	603b      	str	r3, [r7, #0]
 800a870:	f04f 30ff 	mov.w	r0, #4294967295
 800a874:	e0d0      	b.n	800aa18 <_svfiprintf_r+0x1d0>
 800a876:	2340      	movs	r3, #64	; 0x40
 800a878:	616b      	str	r3, [r5, #20]
 800a87a:	2300      	movs	r3, #0
 800a87c:	9309      	str	r3, [sp, #36]	; 0x24
 800a87e:	2320      	movs	r3, #32
 800a880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a884:	f8cd 800c 	str.w	r8, [sp, #12]
 800a888:	2330      	movs	r3, #48	; 0x30
 800a88a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aa30 <_svfiprintf_r+0x1e8>
 800a88e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a892:	f04f 0901 	mov.w	r9, #1
 800a896:	4623      	mov	r3, r4
 800a898:	469a      	mov	sl, r3
 800a89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a89e:	b10a      	cbz	r2, 800a8a4 <_svfiprintf_r+0x5c>
 800a8a0:	2a25      	cmp	r2, #37	; 0x25
 800a8a2:	d1f9      	bne.n	800a898 <_svfiprintf_r+0x50>
 800a8a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a8a8:	d00b      	beq.n	800a8c2 <_svfiprintf_r+0x7a>
 800a8aa:	465b      	mov	r3, fp
 800a8ac:	4622      	mov	r2, r4
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	f7ff ff6f 	bl	800a794 <__ssputs_r>
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	f000 80a9 	beq.w	800aa0e <_svfiprintf_r+0x1c6>
 800a8bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8be:	445a      	add	r2, fp
 800a8c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 80a1 	beq.w	800aa0e <_svfiprintf_r+0x1c6>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8d6:	f10a 0a01 	add.w	sl, sl, #1
 800a8da:	9304      	str	r3, [sp, #16]
 800a8dc:	9307      	str	r3, [sp, #28]
 800a8de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a8e4:	4654      	mov	r4, sl
 800a8e6:	2205      	movs	r2, #5
 800a8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ec:	4850      	ldr	r0, [pc, #320]	; (800aa30 <_svfiprintf_r+0x1e8>)
 800a8ee:	f7f5 fc77 	bl	80001e0 <memchr>
 800a8f2:	9a04      	ldr	r2, [sp, #16]
 800a8f4:	b9d8      	cbnz	r0, 800a92e <_svfiprintf_r+0xe6>
 800a8f6:	06d0      	lsls	r0, r2, #27
 800a8f8:	bf44      	itt	mi
 800a8fa:	2320      	movmi	r3, #32
 800a8fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a900:	0711      	lsls	r1, r2, #28
 800a902:	bf44      	itt	mi
 800a904:	232b      	movmi	r3, #43	; 0x2b
 800a906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a90a:	f89a 3000 	ldrb.w	r3, [sl]
 800a90e:	2b2a      	cmp	r3, #42	; 0x2a
 800a910:	d015      	beq.n	800a93e <_svfiprintf_r+0xf6>
 800a912:	9a07      	ldr	r2, [sp, #28]
 800a914:	4654      	mov	r4, sl
 800a916:	2000      	movs	r0, #0
 800a918:	f04f 0c0a 	mov.w	ip, #10
 800a91c:	4621      	mov	r1, r4
 800a91e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a922:	3b30      	subs	r3, #48	; 0x30
 800a924:	2b09      	cmp	r3, #9
 800a926:	d94d      	bls.n	800a9c4 <_svfiprintf_r+0x17c>
 800a928:	b1b0      	cbz	r0, 800a958 <_svfiprintf_r+0x110>
 800a92a:	9207      	str	r2, [sp, #28]
 800a92c:	e014      	b.n	800a958 <_svfiprintf_r+0x110>
 800a92e:	eba0 0308 	sub.w	r3, r0, r8
 800a932:	fa09 f303 	lsl.w	r3, r9, r3
 800a936:	4313      	orrs	r3, r2
 800a938:	9304      	str	r3, [sp, #16]
 800a93a:	46a2      	mov	sl, r4
 800a93c:	e7d2      	b.n	800a8e4 <_svfiprintf_r+0x9c>
 800a93e:	9b03      	ldr	r3, [sp, #12]
 800a940:	1d19      	adds	r1, r3, #4
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	9103      	str	r1, [sp, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	bfbb      	ittet	lt
 800a94a:	425b      	neglt	r3, r3
 800a94c:	f042 0202 	orrlt.w	r2, r2, #2
 800a950:	9307      	strge	r3, [sp, #28]
 800a952:	9307      	strlt	r3, [sp, #28]
 800a954:	bfb8      	it	lt
 800a956:	9204      	strlt	r2, [sp, #16]
 800a958:	7823      	ldrb	r3, [r4, #0]
 800a95a:	2b2e      	cmp	r3, #46	; 0x2e
 800a95c:	d10c      	bne.n	800a978 <_svfiprintf_r+0x130>
 800a95e:	7863      	ldrb	r3, [r4, #1]
 800a960:	2b2a      	cmp	r3, #42	; 0x2a
 800a962:	d134      	bne.n	800a9ce <_svfiprintf_r+0x186>
 800a964:	9b03      	ldr	r3, [sp, #12]
 800a966:	1d1a      	adds	r2, r3, #4
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	9203      	str	r2, [sp, #12]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	bfb8      	it	lt
 800a970:	f04f 33ff 	movlt.w	r3, #4294967295
 800a974:	3402      	adds	r4, #2
 800a976:	9305      	str	r3, [sp, #20]
 800a978:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aa40 <_svfiprintf_r+0x1f8>
 800a97c:	7821      	ldrb	r1, [r4, #0]
 800a97e:	2203      	movs	r2, #3
 800a980:	4650      	mov	r0, sl
 800a982:	f7f5 fc2d 	bl	80001e0 <memchr>
 800a986:	b138      	cbz	r0, 800a998 <_svfiprintf_r+0x150>
 800a988:	9b04      	ldr	r3, [sp, #16]
 800a98a:	eba0 000a 	sub.w	r0, r0, sl
 800a98e:	2240      	movs	r2, #64	; 0x40
 800a990:	4082      	lsls	r2, r0
 800a992:	4313      	orrs	r3, r2
 800a994:	3401      	adds	r4, #1
 800a996:	9304      	str	r3, [sp, #16]
 800a998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99c:	4825      	ldr	r0, [pc, #148]	; (800aa34 <_svfiprintf_r+0x1ec>)
 800a99e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9a2:	2206      	movs	r2, #6
 800a9a4:	f7f5 fc1c 	bl	80001e0 <memchr>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	d038      	beq.n	800aa1e <_svfiprintf_r+0x1d6>
 800a9ac:	4b22      	ldr	r3, [pc, #136]	; (800aa38 <_svfiprintf_r+0x1f0>)
 800a9ae:	bb1b      	cbnz	r3, 800a9f8 <_svfiprintf_r+0x1b0>
 800a9b0:	9b03      	ldr	r3, [sp, #12]
 800a9b2:	3307      	adds	r3, #7
 800a9b4:	f023 0307 	bic.w	r3, r3, #7
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	9303      	str	r3, [sp, #12]
 800a9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9be:	4433      	add	r3, r6
 800a9c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c2:	e768      	b.n	800a896 <_svfiprintf_r+0x4e>
 800a9c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	2001      	movs	r0, #1
 800a9cc:	e7a6      	b.n	800a91c <_svfiprintf_r+0xd4>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	3401      	adds	r4, #1
 800a9d2:	9305      	str	r3, [sp, #20]
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	f04f 0c0a 	mov.w	ip, #10
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9e0:	3a30      	subs	r2, #48	; 0x30
 800a9e2:	2a09      	cmp	r2, #9
 800a9e4:	d903      	bls.n	800a9ee <_svfiprintf_r+0x1a6>
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d0c6      	beq.n	800a978 <_svfiprintf_r+0x130>
 800a9ea:	9105      	str	r1, [sp, #20]
 800a9ec:	e7c4      	b.n	800a978 <_svfiprintf_r+0x130>
 800a9ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e7f0      	b.n	800a9da <_svfiprintf_r+0x192>
 800a9f8:	ab03      	add	r3, sp, #12
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	462a      	mov	r2, r5
 800a9fe:	4b0f      	ldr	r3, [pc, #60]	; (800aa3c <_svfiprintf_r+0x1f4>)
 800aa00:	a904      	add	r1, sp, #16
 800aa02:	4638      	mov	r0, r7
 800aa04:	f7fd feea 	bl	80087dc <_printf_float>
 800aa08:	1c42      	adds	r2, r0, #1
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	d1d6      	bne.n	800a9bc <_svfiprintf_r+0x174>
 800aa0e:	89ab      	ldrh	r3, [r5, #12]
 800aa10:	065b      	lsls	r3, r3, #25
 800aa12:	f53f af2d 	bmi.w	800a870 <_svfiprintf_r+0x28>
 800aa16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa18:	b01d      	add	sp, #116	; 0x74
 800aa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1e:	ab03      	add	r3, sp, #12
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	462a      	mov	r2, r5
 800aa24:	4b05      	ldr	r3, [pc, #20]	; (800aa3c <_svfiprintf_r+0x1f4>)
 800aa26:	a904      	add	r1, sp, #16
 800aa28:	4638      	mov	r0, r7
 800aa2a:	f7fe f97b 	bl	8008d24 <_printf_i>
 800aa2e:	e7eb      	b.n	800aa08 <_svfiprintf_r+0x1c0>
 800aa30:	0800b5ac 	.word	0x0800b5ac
 800aa34:	0800b5b6 	.word	0x0800b5b6
 800aa38:	080087dd 	.word	0x080087dd
 800aa3c:	0800a795 	.word	0x0800a795
 800aa40:	0800b5b2 	.word	0x0800b5b2

0800aa44 <__sflush_r>:
 800aa44:	898a      	ldrh	r2, [r1, #12]
 800aa46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4a:	4605      	mov	r5, r0
 800aa4c:	0710      	lsls	r0, r2, #28
 800aa4e:	460c      	mov	r4, r1
 800aa50:	d458      	bmi.n	800ab04 <__sflush_r+0xc0>
 800aa52:	684b      	ldr	r3, [r1, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	dc05      	bgt.n	800aa64 <__sflush_r+0x20>
 800aa58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	dc02      	bgt.n	800aa64 <__sflush_r+0x20>
 800aa5e:	2000      	movs	r0, #0
 800aa60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa66:	2e00      	cmp	r6, #0
 800aa68:	d0f9      	beq.n	800aa5e <__sflush_r+0x1a>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa70:	682f      	ldr	r7, [r5, #0]
 800aa72:	6a21      	ldr	r1, [r4, #32]
 800aa74:	602b      	str	r3, [r5, #0]
 800aa76:	d032      	beq.n	800aade <__sflush_r+0x9a>
 800aa78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	075a      	lsls	r2, r3, #29
 800aa7e:	d505      	bpl.n	800aa8c <__sflush_r+0x48>
 800aa80:	6863      	ldr	r3, [r4, #4]
 800aa82:	1ac0      	subs	r0, r0, r3
 800aa84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa86:	b10b      	cbz	r3, 800aa8c <__sflush_r+0x48>
 800aa88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa8a:	1ac0      	subs	r0, r0, r3
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4602      	mov	r2, r0
 800aa90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa92:	6a21      	ldr	r1, [r4, #32]
 800aa94:	4628      	mov	r0, r5
 800aa96:	47b0      	blx	r6
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	89a3      	ldrh	r3, [r4, #12]
 800aa9c:	d106      	bne.n	800aaac <__sflush_r+0x68>
 800aa9e:	6829      	ldr	r1, [r5, #0]
 800aaa0:	291d      	cmp	r1, #29
 800aaa2:	d82b      	bhi.n	800aafc <__sflush_r+0xb8>
 800aaa4:	4a29      	ldr	r2, [pc, #164]	; (800ab4c <__sflush_r+0x108>)
 800aaa6:	410a      	asrs	r2, r1
 800aaa8:	07d6      	lsls	r6, r2, #31
 800aaaa:	d427      	bmi.n	800aafc <__sflush_r+0xb8>
 800aaac:	2200      	movs	r2, #0
 800aaae:	6062      	str	r2, [r4, #4]
 800aab0:	04d9      	lsls	r1, r3, #19
 800aab2:	6922      	ldr	r2, [r4, #16]
 800aab4:	6022      	str	r2, [r4, #0]
 800aab6:	d504      	bpl.n	800aac2 <__sflush_r+0x7e>
 800aab8:	1c42      	adds	r2, r0, #1
 800aaba:	d101      	bne.n	800aac0 <__sflush_r+0x7c>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	b903      	cbnz	r3, 800aac2 <__sflush_r+0x7e>
 800aac0:	6560      	str	r0, [r4, #84]	; 0x54
 800aac2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aac4:	602f      	str	r7, [r5, #0]
 800aac6:	2900      	cmp	r1, #0
 800aac8:	d0c9      	beq.n	800aa5e <__sflush_r+0x1a>
 800aaca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aace:	4299      	cmp	r1, r3
 800aad0:	d002      	beq.n	800aad8 <__sflush_r+0x94>
 800aad2:	4628      	mov	r0, r5
 800aad4:	f7ff fa96 	bl	800a004 <_free_r>
 800aad8:	2000      	movs	r0, #0
 800aada:	6360      	str	r0, [r4, #52]	; 0x34
 800aadc:	e7c0      	b.n	800aa60 <__sflush_r+0x1c>
 800aade:	2301      	movs	r3, #1
 800aae0:	4628      	mov	r0, r5
 800aae2:	47b0      	blx	r6
 800aae4:	1c41      	adds	r1, r0, #1
 800aae6:	d1c8      	bne.n	800aa7a <__sflush_r+0x36>
 800aae8:	682b      	ldr	r3, [r5, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d0c5      	beq.n	800aa7a <__sflush_r+0x36>
 800aaee:	2b1d      	cmp	r3, #29
 800aaf0:	d001      	beq.n	800aaf6 <__sflush_r+0xb2>
 800aaf2:	2b16      	cmp	r3, #22
 800aaf4:	d101      	bne.n	800aafa <__sflush_r+0xb6>
 800aaf6:	602f      	str	r7, [r5, #0]
 800aaf8:	e7b1      	b.n	800aa5e <__sflush_r+0x1a>
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab00:	81a3      	strh	r3, [r4, #12]
 800ab02:	e7ad      	b.n	800aa60 <__sflush_r+0x1c>
 800ab04:	690f      	ldr	r7, [r1, #16]
 800ab06:	2f00      	cmp	r7, #0
 800ab08:	d0a9      	beq.n	800aa5e <__sflush_r+0x1a>
 800ab0a:	0793      	lsls	r3, r2, #30
 800ab0c:	680e      	ldr	r6, [r1, #0]
 800ab0e:	bf08      	it	eq
 800ab10:	694b      	ldreq	r3, [r1, #20]
 800ab12:	600f      	str	r7, [r1, #0]
 800ab14:	bf18      	it	ne
 800ab16:	2300      	movne	r3, #0
 800ab18:	eba6 0807 	sub.w	r8, r6, r7
 800ab1c:	608b      	str	r3, [r1, #8]
 800ab1e:	f1b8 0f00 	cmp.w	r8, #0
 800ab22:	dd9c      	ble.n	800aa5e <__sflush_r+0x1a>
 800ab24:	6a21      	ldr	r1, [r4, #32]
 800ab26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab28:	4643      	mov	r3, r8
 800ab2a:	463a      	mov	r2, r7
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	47b0      	blx	r6
 800ab30:	2800      	cmp	r0, #0
 800ab32:	dc06      	bgt.n	800ab42 <__sflush_r+0xfe>
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab3a:	81a3      	strh	r3, [r4, #12]
 800ab3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab40:	e78e      	b.n	800aa60 <__sflush_r+0x1c>
 800ab42:	4407      	add	r7, r0
 800ab44:	eba8 0800 	sub.w	r8, r8, r0
 800ab48:	e7e9      	b.n	800ab1e <__sflush_r+0xda>
 800ab4a:	bf00      	nop
 800ab4c:	dfbffffe 	.word	0xdfbffffe

0800ab50 <_fflush_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	690b      	ldr	r3, [r1, #16]
 800ab54:	4605      	mov	r5, r0
 800ab56:	460c      	mov	r4, r1
 800ab58:	b913      	cbnz	r3, 800ab60 <_fflush_r+0x10>
 800ab5a:	2500      	movs	r5, #0
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}
 800ab60:	b118      	cbz	r0, 800ab6a <_fflush_r+0x1a>
 800ab62:	6a03      	ldr	r3, [r0, #32]
 800ab64:	b90b      	cbnz	r3, 800ab6a <_fflush_r+0x1a>
 800ab66:	f7fe fa8b 	bl	8009080 <__sinit>
 800ab6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0f3      	beq.n	800ab5a <_fflush_r+0xa>
 800ab72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab74:	07d0      	lsls	r0, r2, #31
 800ab76:	d404      	bmi.n	800ab82 <_fflush_r+0x32>
 800ab78:	0599      	lsls	r1, r3, #22
 800ab7a:	d402      	bmi.n	800ab82 <_fflush_r+0x32>
 800ab7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab7e:	f7fe fbb4 	bl	80092ea <__retarget_lock_acquire_recursive>
 800ab82:	4628      	mov	r0, r5
 800ab84:	4621      	mov	r1, r4
 800ab86:	f7ff ff5d 	bl	800aa44 <__sflush_r>
 800ab8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab8c:	07da      	lsls	r2, r3, #31
 800ab8e:	4605      	mov	r5, r0
 800ab90:	d4e4      	bmi.n	800ab5c <_fflush_r+0xc>
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	059b      	lsls	r3, r3, #22
 800ab96:	d4e1      	bmi.n	800ab5c <_fflush_r+0xc>
 800ab98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab9a:	f7fe fba7 	bl	80092ec <__retarget_lock_release_recursive>
 800ab9e:	e7dd      	b.n	800ab5c <_fflush_r+0xc>

0800aba0 <memmove>:
 800aba0:	4288      	cmp	r0, r1
 800aba2:	b510      	push	{r4, lr}
 800aba4:	eb01 0402 	add.w	r4, r1, r2
 800aba8:	d902      	bls.n	800abb0 <memmove+0x10>
 800abaa:	4284      	cmp	r4, r0
 800abac:	4623      	mov	r3, r4
 800abae:	d807      	bhi.n	800abc0 <memmove+0x20>
 800abb0:	1e43      	subs	r3, r0, #1
 800abb2:	42a1      	cmp	r1, r4
 800abb4:	d008      	beq.n	800abc8 <memmove+0x28>
 800abb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abbe:	e7f8      	b.n	800abb2 <memmove+0x12>
 800abc0:	4402      	add	r2, r0
 800abc2:	4601      	mov	r1, r0
 800abc4:	428a      	cmp	r2, r1
 800abc6:	d100      	bne.n	800abca <memmove+0x2a>
 800abc8:	bd10      	pop	{r4, pc}
 800abca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abd2:	e7f7      	b.n	800abc4 <memmove+0x24>

0800abd4 <__assert_func>:
 800abd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abd6:	4614      	mov	r4, r2
 800abd8:	461a      	mov	r2, r3
 800abda:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <__assert_func+0x2c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4605      	mov	r5, r0
 800abe0:	68d8      	ldr	r0, [r3, #12]
 800abe2:	b14c      	cbz	r4, 800abf8 <__assert_func+0x24>
 800abe4:	4b07      	ldr	r3, [pc, #28]	; (800ac04 <__assert_func+0x30>)
 800abe6:	9100      	str	r1, [sp, #0]
 800abe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abec:	4906      	ldr	r1, [pc, #24]	; (800ac08 <__assert_func+0x34>)
 800abee:	462b      	mov	r3, r5
 800abf0:	f000 f872 	bl	800acd8 <fiprintf>
 800abf4:	f000 f882 	bl	800acfc <abort>
 800abf8:	4b04      	ldr	r3, [pc, #16]	; (800ac0c <__assert_func+0x38>)
 800abfa:	461c      	mov	r4, r3
 800abfc:	e7f3      	b.n	800abe6 <__assert_func+0x12>
 800abfe:	bf00      	nop
 800ac00:	20000068 	.word	0x20000068
 800ac04:	0800b5c7 	.word	0x0800b5c7
 800ac08:	0800b5d4 	.word	0x0800b5d4
 800ac0c:	0800b602 	.word	0x0800b602

0800ac10 <_calloc_r>:
 800ac10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac12:	fba1 2402 	umull	r2, r4, r1, r2
 800ac16:	b94c      	cbnz	r4, 800ac2c <_calloc_r+0x1c>
 800ac18:	4611      	mov	r1, r2
 800ac1a:	9201      	str	r2, [sp, #4]
 800ac1c:	f7fd fcb2 	bl	8008584 <_malloc_r>
 800ac20:	9a01      	ldr	r2, [sp, #4]
 800ac22:	4605      	mov	r5, r0
 800ac24:	b930      	cbnz	r0, 800ac34 <_calloc_r+0x24>
 800ac26:	4628      	mov	r0, r5
 800ac28:	b003      	add	sp, #12
 800ac2a:	bd30      	pop	{r4, r5, pc}
 800ac2c:	220c      	movs	r2, #12
 800ac2e:	6002      	str	r2, [r0, #0]
 800ac30:	2500      	movs	r5, #0
 800ac32:	e7f8      	b.n	800ac26 <_calloc_r+0x16>
 800ac34:	4621      	mov	r1, r4
 800ac36:	f7fe fabc 	bl	80091b2 <memset>
 800ac3a:	e7f4      	b.n	800ac26 <_calloc_r+0x16>

0800ac3c <__ascii_mbtowc>:
 800ac3c:	b082      	sub	sp, #8
 800ac3e:	b901      	cbnz	r1, 800ac42 <__ascii_mbtowc+0x6>
 800ac40:	a901      	add	r1, sp, #4
 800ac42:	b142      	cbz	r2, 800ac56 <__ascii_mbtowc+0x1a>
 800ac44:	b14b      	cbz	r3, 800ac5a <__ascii_mbtowc+0x1e>
 800ac46:	7813      	ldrb	r3, [r2, #0]
 800ac48:	600b      	str	r3, [r1, #0]
 800ac4a:	7812      	ldrb	r2, [r2, #0]
 800ac4c:	1e10      	subs	r0, r2, #0
 800ac4e:	bf18      	it	ne
 800ac50:	2001      	movne	r0, #1
 800ac52:	b002      	add	sp, #8
 800ac54:	4770      	bx	lr
 800ac56:	4610      	mov	r0, r2
 800ac58:	e7fb      	b.n	800ac52 <__ascii_mbtowc+0x16>
 800ac5a:	f06f 0001 	mvn.w	r0, #1
 800ac5e:	e7f8      	b.n	800ac52 <__ascii_mbtowc+0x16>

0800ac60 <_realloc_r>:
 800ac60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac64:	4680      	mov	r8, r0
 800ac66:	4614      	mov	r4, r2
 800ac68:	460e      	mov	r6, r1
 800ac6a:	b921      	cbnz	r1, 800ac76 <_realloc_r+0x16>
 800ac6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac70:	4611      	mov	r1, r2
 800ac72:	f7fd bc87 	b.w	8008584 <_malloc_r>
 800ac76:	b92a      	cbnz	r2, 800ac84 <_realloc_r+0x24>
 800ac78:	f7ff f9c4 	bl	800a004 <_free_r>
 800ac7c:	4625      	mov	r5, r4
 800ac7e:	4628      	mov	r0, r5
 800ac80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac84:	f000 f841 	bl	800ad0a <_malloc_usable_size_r>
 800ac88:	4284      	cmp	r4, r0
 800ac8a:	4607      	mov	r7, r0
 800ac8c:	d802      	bhi.n	800ac94 <_realloc_r+0x34>
 800ac8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac92:	d812      	bhi.n	800acba <_realloc_r+0x5a>
 800ac94:	4621      	mov	r1, r4
 800ac96:	4640      	mov	r0, r8
 800ac98:	f7fd fc74 	bl	8008584 <_malloc_r>
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d0ed      	beq.n	800ac7e <_realloc_r+0x1e>
 800aca2:	42bc      	cmp	r4, r7
 800aca4:	4622      	mov	r2, r4
 800aca6:	4631      	mov	r1, r6
 800aca8:	bf28      	it	cs
 800acaa:	463a      	movcs	r2, r7
 800acac:	f7fe fb1f 	bl	80092ee <memcpy>
 800acb0:	4631      	mov	r1, r6
 800acb2:	4640      	mov	r0, r8
 800acb4:	f7ff f9a6 	bl	800a004 <_free_r>
 800acb8:	e7e1      	b.n	800ac7e <_realloc_r+0x1e>
 800acba:	4635      	mov	r5, r6
 800acbc:	e7df      	b.n	800ac7e <_realloc_r+0x1e>

0800acbe <__ascii_wctomb>:
 800acbe:	b149      	cbz	r1, 800acd4 <__ascii_wctomb+0x16>
 800acc0:	2aff      	cmp	r2, #255	; 0xff
 800acc2:	bf85      	ittet	hi
 800acc4:	238a      	movhi	r3, #138	; 0x8a
 800acc6:	6003      	strhi	r3, [r0, #0]
 800acc8:	700a      	strbls	r2, [r1, #0]
 800acca:	f04f 30ff 	movhi.w	r0, #4294967295
 800acce:	bf98      	it	ls
 800acd0:	2001      	movls	r0, #1
 800acd2:	4770      	bx	lr
 800acd4:	4608      	mov	r0, r1
 800acd6:	4770      	bx	lr

0800acd8 <fiprintf>:
 800acd8:	b40e      	push	{r1, r2, r3}
 800acda:	b503      	push	{r0, r1, lr}
 800acdc:	4601      	mov	r1, r0
 800acde:	ab03      	add	r3, sp, #12
 800ace0:	4805      	ldr	r0, [pc, #20]	; (800acf8 <fiprintf+0x20>)
 800ace2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ace6:	6800      	ldr	r0, [r0, #0]
 800ace8:	9301      	str	r3, [sp, #4]
 800acea:	f000 f83f 	bl	800ad6c <_vfiprintf_r>
 800acee:	b002      	add	sp, #8
 800acf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800acf4:	b003      	add	sp, #12
 800acf6:	4770      	bx	lr
 800acf8:	20000068 	.word	0x20000068

0800acfc <abort>:
 800acfc:	b508      	push	{r3, lr}
 800acfe:	2006      	movs	r0, #6
 800ad00:	f000 fa0c 	bl	800b11c <raise>
 800ad04:	2001      	movs	r0, #1
 800ad06:	f7f8 fbc1 	bl	800348c <_exit>

0800ad0a <_malloc_usable_size_r>:
 800ad0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad0e:	1f18      	subs	r0, r3, #4
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	bfbc      	itt	lt
 800ad14:	580b      	ldrlt	r3, [r1, r0]
 800ad16:	18c0      	addlt	r0, r0, r3
 800ad18:	4770      	bx	lr

0800ad1a <__sfputc_r>:
 800ad1a:	6893      	ldr	r3, [r2, #8]
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	b410      	push	{r4}
 800ad22:	6093      	str	r3, [r2, #8]
 800ad24:	da08      	bge.n	800ad38 <__sfputc_r+0x1e>
 800ad26:	6994      	ldr	r4, [r2, #24]
 800ad28:	42a3      	cmp	r3, r4
 800ad2a:	db01      	blt.n	800ad30 <__sfputc_r+0x16>
 800ad2c:	290a      	cmp	r1, #10
 800ad2e:	d103      	bne.n	800ad38 <__sfputc_r+0x1e>
 800ad30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad34:	f000 b934 	b.w	800afa0 <__swbuf_r>
 800ad38:	6813      	ldr	r3, [r2, #0]
 800ad3a:	1c58      	adds	r0, r3, #1
 800ad3c:	6010      	str	r0, [r2, #0]
 800ad3e:	7019      	strb	r1, [r3, #0]
 800ad40:	4608      	mov	r0, r1
 800ad42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <__sfputs_r>:
 800ad48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	460f      	mov	r7, r1
 800ad4e:	4614      	mov	r4, r2
 800ad50:	18d5      	adds	r5, r2, r3
 800ad52:	42ac      	cmp	r4, r5
 800ad54:	d101      	bne.n	800ad5a <__sfputs_r+0x12>
 800ad56:	2000      	movs	r0, #0
 800ad58:	e007      	b.n	800ad6a <__sfputs_r+0x22>
 800ad5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5e:	463a      	mov	r2, r7
 800ad60:	4630      	mov	r0, r6
 800ad62:	f7ff ffda 	bl	800ad1a <__sfputc_r>
 800ad66:	1c43      	adds	r3, r0, #1
 800ad68:	d1f3      	bne.n	800ad52 <__sfputs_r+0xa>
 800ad6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad6c <_vfiprintf_r>:
 800ad6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad70:	460d      	mov	r5, r1
 800ad72:	b09d      	sub	sp, #116	; 0x74
 800ad74:	4614      	mov	r4, r2
 800ad76:	4698      	mov	r8, r3
 800ad78:	4606      	mov	r6, r0
 800ad7a:	b118      	cbz	r0, 800ad84 <_vfiprintf_r+0x18>
 800ad7c:	6a03      	ldr	r3, [r0, #32]
 800ad7e:	b90b      	cbnz	r3, 800ad84 <_vfiprintf_r+0x18>
 800ad80:	f7fe f97e 	bl	8009080 <__sinit>
 800ad84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad86:	07d9      	lsls	r1, r3, #31
 800ad88:	d405      	bmi.n	800ad96 <_vfiprintf_r+0x2a>
 800ad8a:	89ab      	ldrh	r3, [r5, #12]
 800ad8c:	059a      	lsls	r2, r3, #22
 800ad8e:	d402      	bmi.n	800ad96 <_vfiprintf_r+0x2a>
 800ad90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad92:	f7fe faaa 	bl	80092ea <__retarget_lock_acquire_recursive>
 800ad96:	89ab      	ldrh	r3, [r5, #12]
 800ad98:	071b      	lsls	r3, r3, #28
 800ad9a:	d501      	bpl.n	800ada0 <_vfiprintf_r+0x34>
 800ad9c:	692b      	ldr	r3, [r5, #16]
 800ad9e:	b99b      	cbnz	r3, 800adc8 <_vfiprintf_r+0x5c>
 800ada0:	4629      	mov	r1, r5
 800ada2:	4630      	mov	r0, r6
 800ada4:	f000 f93a 	bl	800b01c <__swsetup_r>
 800ada8:	b170      	cbz	r0, 800adc8 <_vfiprintf_r+0x5c>
 800adaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adac:	07dc      	lsls	r4, r3, #31
 800adae:	d504      	bpl.n	800adba <_vfiprintf_r+0x4e>
 800adb0:	f04f 30ff 	mov.w	r0, #4294967295
 800adb4:	b01d      	add	sp, #116	; 0x74
 800adb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adba:	89ab      	ldrh	r3, [r5, #12]
 800adbc:	0598      	lsls	r0, r3, #22
 800adbe:	d4f7      	bmi.n	800adb0 <_vfiprintf_r+0x44>
 800adc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adc2:	f7fe fa93 	bl	80092ec <__retarget_lock_release_recursive>
 800adc6:	e7f3      	b.n	800adb0 <_vfiprintf_r+0x44>
 800adc8:	2300      	movs	r3, #0
 800adca:	9309      	str	r3, [sp, #36]	; 0x24
 800adcc:	2320      	movs	r3, #32
 800adce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800add2:	f8cd 800c 	str.w	r8, [sp, #12]
 800add6:	2330      	movs	r3, #48	; 0x30
 800add8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800af8c <_vfiprintf_r+0x220>
 800addc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ade0:	f04f 0901 	mov.w	r9, #1
 800ade4:	4623      	mov	r3, r4
 800ade6:	469a      	mov	sl, r3
 800ade8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adec:	b10a      	cbz	r2, 800adf2 <_vfiprintf_r+0x86>
 800adee:	2a25      	cmp	r2, #37	; 0x25
 800adf0:	d1f9      	bne.n	800ade6 <_vfiprintf_r+0x7a>
 800adf2:	ebba 0b04 	subs.w	fp, sl, r4
 800adf6:	d00b      	beq.n	800ae10 <_vfiprintf_r+0xa4>
 800adf8:	465b      	mov	r3, fp
 800adfa:	4622      	mov	r2, r4
 800adfc:	4629      	mov	r1, r5
 800adfe:	4630      	mov	r0, r6
 800ae00:	f7ff ffa2 	bl	800ad48 <__sfputs_r>
 800ae04:	3001      	adds	r0, #1
 800ae06:	f000 80a9 	beq.w	800af5c <_vfiprintf_r+0x1f0>
 800ae0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae0c:	445a      	add	r2, fp
 800ae0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ae10:	f89a 3000 	ldrb.w	r3, [sl]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 80a1 	beq.w	800af5c <_vfiprintf_r+0x1f0>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae24:	f10a 0a01 	add.w	sl, sl, #1
 800ae28:	9304      	str	r3, [sp, #16]
 800ae2a:	9307      	str	r3, [sp, #28]
 800ae2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae30:	931a      	str	r3, [sp, #104]	; 0x68
 800ae32:	4654      	mov	r4, sl
 800ae34:	2205      	movs	r2, #5
 800ae36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae3a:	4854      	ldr	r0, [pc, #336]	; (800af8c <_vfiprintf_r+0x220>)
 800ae3c:	f7f5 f9d0 	bl	80001e0 <memchr>
 800ae40:	9a04      	ldr	r2, [sp, #16]
 800ae42:	b9d8      	cbnz	r0, 800ae7c <_vfiprintf_r+0x110>
 800ae44:	06d1      	lsls	r1, r2, #27
 800ae46:	bf44      	itt	mi
 800ae48:	2320      	movmi	r3, #32
 800ae4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae4e:	0713      	lsls	r3, r2, #28
 800ae50:	bf44      	itt	mi
 800ae52:	232b      	movmi	r3, #43	; 0x2b
 800ae54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae58:	f89a 3000 	ldrb.w	r3, [sl]
 800ae5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae5e:	d015      	beq.n	800ae8c <_vfiprintf_r+0x120>
 800ae60:	9a07      	ldr	r2, [sp, #28]
 800ae62:	4654      	mov	r4, sl
 800ae64:	2000      	movs	r0, #0
 800ae66:	f04f 0c0a 	mov.w	ip, #10
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae70:	3b30      	subs	r3, #48	; 0x30
 800ae72:	2b09      	cmp	r3, #9
 800ae74:	d94d      	bls.n	800af12 <_vfiprintf_r+0x1a6>
 800ae76:	b1b0      	cbz	r0, 800aea6 <_vfiprintf_r+0x13a>
 800ae78:	9207      	str	r2, [sp, #28]
 800ae7a:	e014      	b.n	800aea6 <_vfiprintf_r+0x13a>
 800ae7c:	eba0 0308 	sub.w	r3, r0, r8
 800ae80:	fa09 f303 	lsl.w	r3, r9, r3
 800ae84:	4313      	orrs	r3, r2
 800ae86:	9304      	str	r3, [sp, #16]
 800ae88:	46a2      	mov	sl, r4
 800ae8a:	e7d2      	b.n	800ae32 <_vfiprintf_r+0xc6>
 800ae8c:	9b03      	ldr	r3, [sp, #12]
 800ae8e:	1d19      	adds	r1, r3, #4
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	9103      	str	r1, [sp, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	bfbb      	ittet	lt
 800ae98:	425b      	neglt	r3, r3
 800ae9a:	f042 0202 	orrlt.w	r2, r2, #2
 800ae9e:	9307      	strge	r3, [sp, #28]
 800aea0:	9307      	strlt	r3, [sp, #28]
 800aea2:	bfb8      	it	lt
 800aea4:	9204      	strlt	r2, [sp, #16]
 800aea6:	7823      	ldrb	r3, [r4, #0]
 800aea8:	2b2e      	cmp	r3, #46	; 0x2e
 800aeaa:	d10c      	bne.n	800aec6 <_vfiprintf_r+0x15a>
 800aeac:	7863      	ldrb	r3, [r4, #1]
 800aeae:	2b2a      	cmp	r3, #42	; 0x2a
 800aeb0:	d134      	bne.n	800af1c <_vfiprintf_r+0x1b0>
 800aeb2:	9b03      	ldr	r3, [sp, #12]
 800aeb4:	1d1a      	adds	r2, r3, #4
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	9203      	str	r2, [sp, #12]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	bfb8      	it	lt
 800aebe:	f04f 33ff 	movlt.w	r3, #4294967295
 800aec2:	3402      	adds	r4, #2
 800aec4:	9305      	str	r3, [sp, #20]
 800aec6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800af9c <_vfiprintf_r+0x230>
 800aeca:	7821      	ldrb	r1, [r4, #0]
 800aecc:	2203      	movs	r2, #3
 800aece:	4650      	mov	r0, sl
 800aed0:	f7f5 f986 	bl	80001e0 <memchr>
 800aed4:	b138      	cbz	r0, 800aee6 <_vfiprintf_r+0x17a>
 800aed6:	9b04      	ldr	r3, [sp, #16]
 800aed8:	eba0 000a 	sub.w	r0, r0, sl
 800aedc:	2240      	movs	r2, #64	; 0x40
 800aede:	4082      	lsls	r2, r0
 800aee0:	4313      	orrs	r3, r2
 800aee2:	3401      	adds	r4, #1
 800aee4:	9304      	str	r3, [sp, #16]
 800aee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeea:	4829      	ldr	r0, [pc, #164]	; (800af90 <_vfiprintf_r+0x224>)
 800aeec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aef0:	2206      	movs	r2, #6
 800aef2:	f7f5 f975 	bl	80001e0 <memchr>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d03f      	beq.n	800af7a <_vfiprintf_r+0x20e>
 800aefa:	4b26      	ldr	r3, [pc, #152]	; (800af94 <_vfiprintf_r+0x228>)
 800aefc:	bb1b      	cbnz	r3, 800af46 <_vfiprintf_r+0x1da>
 800aefe:	9b03      	ldr	r3, [sp, #12]
 800af00:	3307      	adds	r3, #7
 800af02:	f023 0307 	bic.w	r3, r3, #7
 800af06:	3308      	adds	r3, #8
 800af08:	9303      	str	r3, [sp, #12]
 800af0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af0c:	443b      	add	r3, r7
 800af0e:	9309      	str	r3, [sp, #36]	; 0x24
 800af10:	e768      	b.n	800ade4 <_vfiprintf_r+0x78>
 800af12:	fb0c 3202 	mla	r2, ip, r2, r3
 800af16:	460c      	mov	r4, r1
 800af18:	2001      	movs	r0, #1
 800af1a:	e7a6      	b.n	800ae6a <_vfiprintf_r+0xfe>
 800af1c:	2300      	movs	r3, #0
 800af1e:	3401      	adds	r4, #1
 800af20:	9305      	str	r3, [sp, #20]
 800af22:	4619      	mov	r1, r3
 800af24:	f04f 0c0a 	mov.w	ip, #10
 800af28:	4620      	mov	r0, r4
 800af2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af2e:	3a30      	subs	r2, #48	; 0x30
 800af30:	2a09      	cmp	r2, #9
 800af32:	d903      	bls.n	800af3c <_vfiprintf_r+0x1d0>
 800af34:	2b00      	cmp	r3, #0
 800af36:	d0c6      	beq.n	800aec6 <_vfiprintf_r+0x15a>
 800af38:	9105      	str	r1, [sp, #20]
 800af3a:	e7c4      	b.n	800aec6 <_vfiprintf_r+0x15a>
 800af3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800af40:	4604      	mov	r4, r0
 800af42:	2301      	movs	r3, #1
 800af44:	e7f0      	b.n	800af28 <_vfiprintf_r+0x1bc>
 800af46:	ab03      	add	r3, sp, #12
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	462a      	mov	r2, r5
 800af4c:	4b12      	ldr	r3, [pc, #72]	; (800af98 <_vfiprintf_r+0x22c>)
 800af4e:	a904      	add	r1, sp, #16
 800af50:	4630      	mov	r0, r6
 800af52:	f7fd fc43 	bl	80087dc <_printf_float>
 800af56:	4607      	mov	r7, r0
 800af58:	1c78      	adds	r0, r7, #1
 800af5a:	d1d6      	bne.n	800af0a <_vfiprintf_r+0x19e>
 800af5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af5e:	07d9      	lsls	r1, r3, #31
 800af60:	d405      	bmi.n	800af6e <_vfiprintf_r+0x202>
 800af62:	89ab      	ldrh	r3, [r5, #12]
 800af64:	059a      	lsls	r2, r3, #22
 800af66:	d402      	bmi.n	800af6e <_vfiprintf_r+0x202>
 800af68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af6a:	f7fe f9bf 	bl	80092ec <__retarget_lock_release_recursive>
 800af6e:	89ab      	ldrh	r3, [r5, #12]
 800af70:	065b      	lsls	r3, r3, #25
 800af72:	f53f af1d 	bmi.w	800adb0 <_vfiprintf_r+0x44>
 800af76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af78:	e71c      	b.n	800adb4 <_vfiprintf_r+0x48>
 800af7a:	ab03      	add	r3, sp, #12
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	462a      	mov	r2, r5
 800af80:	4b05      	ldr	r3, [pc, #20]	; (800af98 <_vfiprintf_r+0x22c>)
 800af82:	a904      	add	r1, sp, #16
 800af84:	4630      	mov	r0, r6
 800af86:	f7fd fecd 	bl	8008d24 <_printf_i>
 800af8a:	e7e4      	b.n	800af56 <_vfiprintf_r+0x1ea>
 800af8c:	0800b5ac 	.word	0x0800b5ac
 800af90:	0800b5b6 	.word	0x0800b5b6
 800af94:	080087dd 	.word	0x080087dd
 800af98:	0800ad49 	.word	0x0800ad49
 800af9c:	0800b5b2 	.word	0x0800b5b2

0800afa0 <__swbuf_r>:
 800afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa2:	460e      	mov	r6, r1
 800afa4:	4614      	mov	r4, r2
 800afa6:	4605      	mov	r5, r0
 800afa8:	b118      	cbz	r0, 800afb2 <__swbuf_r+0x12>
 800afaa:	6a03      	ldr	r3, [r0, #32]
 800afac:	b90b      	cbnz	r3, 800afb2 <__swbuf_r+0x12>
 800afae:	f7fe f867 	bl	8009080 <__sinit>
 800afb2:	69a3      	ldr	r3, [r4, #24]
 800afb4:	60a3      	str	r3, [r4, #8]
 800afb6:	89a3      	ldrh	r3, [r4, #12]
 800afb8:	071a      	lsls	r2, r3, #28
 800afba:	d525      	bpl.n	800b008 <__swbuf_r+0x68>
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	b31b      	cbz	r3, 800b008 <__swbuf_r+0x68>
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	6922      	ldr	r2, [r4, #16]
 800afc4:	1a98      	subs	r0, r3, r2
 800afc6:	6963      	ldr	r3, [r4, #20]
 800afc8:	b2f6      	uxtb	r6, r6
 800afca:	4283      	cmp	r3, r0
 800afcc:	4637      	mov	r7, r6
 800afce:	dc04      	bgt.n	800afda <__swbuf_r+0x3a>
 800afd0:	4621      	mov	r1, r4
 800afd2:	4628      	mov	r0, r5
 800afd4:	f7ff fdbc 	bl	800ab50 <_fflush_r>
 800afd8:	b9e0      	cbnz	r0, 800b014 <__swbuf_r+0x74>
 800afda:	68a3      	ldr	r3, [r4, #8]
 800afdc:	3b01      	subs	r3, #1
 800afde:	60a3      	str	r3, [r4, #8]
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	1c5a      	adds	r2, r3, #1
 800afe4:	6022      	str	r2, [r4, #0]
 800afe6:	701e      	strb	r6, [r3, #0]
 800afe8:	6962      	ldr	r2, [r4, #20]
 800afea:	1c43      	adds	r3, r0, #1
 800afec:	429a      	cmp	r2, r3
 800afee:	d004      	beq.n	800affa <__swbuf_r+0x5a>
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	07db      	lsls	r3, r3, #31
 800aff4:	d506      	bpl.n	800b004 <__swbuf_r+0x64>
 800aff6:	2e0a      	cmp	r6, #10
 800aff8:	d104      	bne.n	800b004 <__swbuf_r+0x64>
 800affa:	4621      	mov	r1, r4
 800affc:	4628      	mov	r0, r5
 800affe:	f7ff fda7 	bl	800ab50 <_fflush_r>
 800b002:	b938      	cbnz	r0, 800b014 <__swbuf_r+0x74>
 800b004:	4638      	mov	r0, r7
 800b006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b008:	4621      	mov	r1, r4
 800b00a:	4628      	mov	r0, r5
 800b00c:	f000 f806 	bl	800b01c <__swsetup_r>
 800b010:	2800      	cmp	r0, #0
 800b012:	d0d5      	beq.n	800afc0 <__swbuf_r+0x20>
 800b014:	f04f 37ff 	mov.w	r7, #4294967295
 800b018:	e7f4      	b.n	800b004 <__swbuf_r+0x64>
	...

0800b01c <__swsetup_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4b2a      	ldr	r3, [pc, #168]	; (800b0c8 <__swsetup_r+0xac>)
 800b020:	4605      	mov	r5, r0
 800b022:	6818      	ldr	r0, [r3, #0]
 800b024:	460c      	mov	r4, r1
 800b026:	b118      	cbz	r0, 800b030 <__swsetup_r+0x14>
 800b028:	6a03      	ldr	r3, [r0, #32]
 800b02a:	b90b      	cbnz	r3, 800b030 <__swsetup_r+0x14>
 800b02c:	f7fe f828 	bl	8009080 <__sinit>
 800b030:	89a3      	ldrh	r3, [r4, #12]
 800b032:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b036:	0718      	lsls	r0, r3, #28
 800b038:	d422      	bmi.n	800b080 <__swsetup_r+0x64>
 800b03a:	06d9      	lsls	r1, r3, #27
 800b03c:	d407      	bmi.n	800b04e <__swsetup_r+0x32>
 800b03e:	2309      	movs	r3, #9
 800b040:	602b      	str	r3, [r5, #0]
 800b042:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b046:	81a3      	strh	r3, [r4, #12]
 800b048:	f04f 30ff 	mov.w	r0, #4294967295
 800b04c:	e034      	b.n	800b0b8 <__swsetup_r+0x9c>
 800b04e:	0758      	lsls	r0, r3, #29
 800b050:	d512      	bpl.n	800b078 <__swsetup_r+0x5c>
 800b052:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b054:	b141      	cbz	r1, 800b068 <__swsetup_r+0x4c>
 800b056:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b05a:	4299      	cmp	r1, r3
 800b05c:	d002      	beq.n	800b064 <__swsetup_r+0x48>
 800b05e:	4628      	mov	r0, r5
 800b060:	f7fe ffd0 	bl	800a004 <_free_r>
 800b064:	2300      	movs	r3, #0
 800b066:	6363      	str	r3, [r4, #52]	; 0x34
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b06e:	81a3      	strh	r3, [r4, #12]
 800b070:	2300      	movs	r3, #0
 800b072:	6063      	str	r3, [r4, #4]
 800b074:	6923      	ldr	r3, [r4, #16]
 800b076:	6023      	str	r3, [r4, #0]
 800b078:	89a3      	ldrh	r3, [r4, #12]
 800b07a:	f043 0308 	orr.w	r3, r3, #8
 800b07e:	81a3      	strh	r3, [r4, #12]
 800b080:	6923      	ldr	r3, [r4, #16]
 800b082:	b94b      	cbnz	r3, 800b098 <__swsetup_r+0x7c>
 800b084:	89a3      	ldrh	r3, [r4, #12]
 800b086:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b08a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b08e:	d003      	beq.n	800b098 <__swsetup_r+0x7c>
 800b090:	4621      	mov	r1, r4
 800b092:	4628      	mov	r0, r5
 800b094:	f000 f884 	bl	800b1a0 <__smakebuf_r>
 800b098:	89a0      	ldrh	r0, [r4, #12]
 800b09a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b09e:	f010 0301 	ands.w	r3, r0, #1
 800b0a2:	d00a      	beq.n	800b0ba <__swsetup_r+0x9e>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	60a3      	str	r3, [r4, #8]
 800b0a8:	6963      	ldr	r3, [r4, #20]
 800b0aa:	425b      	negs	r3, r3
 800b0ac:	61a3      	str	r3, [r4, #24]
 800b0ae:	6923      	ldr	r3, [r4, #16]
 800b0b0:	b943      	cbnz	r3, 800b0c4 <__swsetup_r+0xa8>
 800b0b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0b6:	d1c4      	bne.n	800b042 <__swsetup_r+0x26>
 800b0b8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ba:	0781      	lsls	r1, r0, #30
 800b0bc:	bf58      	it	pl
 800b0be:	6963      	ldrpl	r3, [r4, #20]
 800b0c0:	60a3      	str	r3, [r4, #8]
 800b0c2:	e7f4      	b.n	800b0ae <__swsetup_r+0x92>
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	e7f7      	b.n	800b0b8 <__swsetup_r+0x9c>
 800b0c8:	20000068 	.word	0x20000068

0800b0cc <_raise_r>:
 800b0cc:	291f      	cmp	r1, #31
 800b0ce:	b538      	push	{r3, r4, r5, lr}
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	460d      	mov	r5, r1
 800b0d4:	d904      	bls.n	800b0e0 <_raise_r+0x14>
 800b0d6:	2316      	movs	r3, #22
 800b0d8:	6003      	str	r3, [r0, #0]
 800b0da:	f04f 30ff 	mov.w	r0, #4294967295
 800b0de:	bd38      	pop	{r3, r4, r5, pc}
 800b0e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b0e2:	b112      	cbz	r2, 800b0ea <_raise_r+0x1e>
 800b0e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0e8:	b94b      	cbnz	r3, 800b0fe <_raise_r+0x32>
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 f830 	bl	800b150 <_getpid_r>
 800b0f0:	462a      	mov	r2, r5
 800b0f2:	4601      	mov	r1, r0
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0fa:	f000 b817 	b.w	800b12c <_kill_r>
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d00a      	beq.n	800b118 <_raise_r+0x4c>
 800b102:	1c59      	adds	r1, r3, #1
 800b104:	d103      	bne.n	800b10e <_raise_r+0x42>
 800b106:	2316      	movs	r3, #22
 800b108:	6003      	str	r3, [r0, #0]
 800b10a:	2001      	movs	r0, #1
 800b10c:	e7e7      	b.n	800b0de <_raise_r+0x12>
 800b10e:	2400      	movs	r4, #0
 800b110:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b114:	4628      	mov	r0, r5
 800b116:	4798      	blx	r3
 800b118:	2000      	movs	r0, #0
 800b11a:	e7e0      	b.n	800b0de <_raise_r+0x12>

0800b11c <raise>:
 800b11c:	4b02      	ldr	r3, [pc, #8]	; (800b128 <raise+0xc>)
 800b11e:	4601      	mov	r1, r0
 800b120:	6818      	ldr	r0, [r3, #0]
 800b122:	f7ff bfd3 	b.w	800b0cc <_raise_r>
 800b126:	bf00      	nop
 800b128:	20000068 	.word	0x20000068

0800b12c <_kill_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4d07      	ldr	r5, [pc, #28]	; (800b14c <_kill_r+0x20>)
 800b130:	2300      	movs	r3, #0
 800b132:	4604      	mov	r4, r0
 800b134:	4608      	mov	r0, r1
 800b136:	4611      	mov	r1, r2
 800b138:	602b      	str	r3, [r5, #0]
 800b13a:	f7f8 f997 	bl	800346c <_kill>
 800b13e:	1c43      	adds	r3, r0, #1
 800b140:	d102      	bne.n	800b148 <_kill_r+0x1c>
 800b142:	682b      	ldr	r3, [r5, #0]
 800b144:	b103      	cbz	r3, 800b148 <_kill_r+0x1c>
 800b146:	6023      	str	r3, [r4, #0]
 800b148:	bd38      	pop	{r3, r4, r5, pc}
 800b14a:	bf00      	nop
 800b14c:	200004f4 	.word	0x200004f4

0800b150 <_getpid_r>:
 800b150:	f7f8 b984 	b.w	800345c <_getpid>

0800b154 <__swhatbuf_r>:
 800b154:	b570      	push	{r4, r5, r6, lr}
 800b156:	460c      	mov	r4, r1
 800b158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b15c:	2900      	cmp	r1, #0
 800b15e:	b096      	sub	sp, #88	; 0x58
 800b160:	4615      	mov	r5, r2
 800b162:	461e      	mov	r6, r3
 800b164:	da0d      	bge.n	800b182 <__swhatbuf_r+0x2e>
 800b166:	89a3      	ldrh	r3, [r4, #12]
 800b168:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b16c:	f04f 0100 	mov.w	r1, #0
 800b170:	bf0c      	ite	eq
 800b172:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b176:	2340      	movne	r3, #64	; 0x40
 800b178:	2000      	movs	r0, #0
 800b17a:	6031      	str	r1, [r6, #0]
 800b17c:	602b      	str	r3, [r5, #0]
 800b17e:	b016      	add	sp, #88	; 0x58
 800b180:	bd70      	pop	{r4, r5, r6, pc}
 800b182:	466a      	mov	r2, sp
 800b184:	f000 f848 	bl	800b218 <_fstat_r>
 800b188:	2800      	cmp	r0, #0
 800b18a:	dbec      	blt.n	800b166 <__swhatbuf_r+0x12>
 800b18c:	9901      	ldr	r1, [sp, #4]
 800b18e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b192:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b196:	4259      	negs	r1, r3
 800b198:	4159      	adcs	r1, r3
 800b19a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b19e:	e7eb      	b.n	800b178 <__swhatbuf_r+0x24>

0800b1a0 <__smakebuf_r>:
 800b1a0:	898b      	ldrh	r3, [r1, #12]
 800b1a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1a4:	079d      	lsls	r5, r3, #30
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	460c      	mov	r4, r1
 800b1aa:	d507      	bpl.n	800b1bc <__smakebuf_r+0x1c>
 800b1ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	6123      	str	r3, [r4, #16]
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	6163      	str	r3, [r4, #20]
 800b1b8:	b002      	add	sp, #8
 800b1ba:	bd70      	pop	{r4, r5, r6, pc}
 800b1bc:	ab01      	add	r3, sp, #4
 800b1be:	466a      	mov	r2, sp
 800b1c0:	f7ff ffc8 	bl	800b154 <__swhatbuf_r>
 800b1c4:	9900      	ldr	r1, [sp, #0]
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	f7fd f9db 	bl	8008584 <_malloc_r>
 800b1ce:	b948      	cbnz	r0, 800b1e4 <__smakebuf_r+0x44>
 800b1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1d4:	059a      	lsls	r2, r3, #22
 800b1d6:	d4ef      	bmi.n	800b1b8 <__smakebuf_r+0x18>
 800b1d8:	f023 0303 	bic.w	r3, r3, #3
 800b1dc:	f043 0302 	orr.w	r3, r3, #2
 800b1e0:	81a3      	strh	r3, [r4, #12]
 800b1e2:	e7e3      	b.n	800b1ac <__smakebuf_r+0xc>
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	6020      	str	r0, [r4, #0]
 800b1e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1ec:	81a3      	strh	r3, [r4, #12]
 800b1ee:	9b00      	ldr	r3, [sp, #0]
 800b1f0:	6163      	str	r3, [r4, #20]
 800b1f2:	9b01      	ldr	r3, [sp, #4]
 800b1f4:	6120      	str	r0, [r4, #16]
 800b1f6:	b15b      	cbz	r3, 800b210 <__smakebuf_r+0x70>
 800b1f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	f000 f81d 	bl	800b23c <_isatty_r>
 800b202:	b128      	cbz	r0, 800b210 <__smakebuf_r+0x70>
 800b204:	89a3      	ldrh	r3, [r4, #12]
 800b206:	f023 0303 	bic.w	r3, r3, #3
 800b20a:	f043 0301 	orr.w	r3, r3, #1
 800b20e:	81a3      	strh	r3, [r4, #12]
 800b210:	89a3      	ldrh	r3, [r4, #12]
 800b212:	431d      	orrs	r5, r3
 800b214:	81a5      	strh	r5, [r4, #12]
 800b216:	e7cf      	b.n	800b1b8 <__smakebuf_r+0x18>

0800b218 <_fstat_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4d07      	ldr	r5, [pc, #28]	; (800b238 <_fstat_r+0x20>)
 800b21c:	2300      	movs	r3, #0
 800b21e:	4604      	mov	r4, r0
 800b220:	4608      	mov	r0, r1
 800b222:	4611      	mov	r1, r2
 800b224:	602b      	str	r3, [r5, #0]
 800b226:	f7f8 f980 	bl	800352a <_fstat>
 800b22a:	1c43      	adds	r3, r0, #1
 800b22c:	d102      	bne.n	800b234 <_fstat_r+0x1c>
 800b22e:	682b      	ldr	r3, [r5, #0]
 800b230:	b103      	cbz	r3, 800b234 <_fstat_r+0x1c>
 800b232:	6023      	str	r3, [r4, #0]
 800b234:	bd38      	pop	{r3, r4, r5, pc}
 800b236:	bf00      	nop
 800b238:	200004f4 	.word	0x200004f4

0800b23c <_isatty_r>:
 800b23c:	b538      	push	{r3, r4, r5, lr}
 800b23e:	4d06      	ldr	r5, [pc, #24]	; (800b258 <_isatty_r+0x1c>)
 800b240:	2300      	movs	r3, #0
 800b242:	4604      	mov	r4, r0
 800b244:	4608      	mov	r0, r1
 800b246:	602b      	str	r3, [r5, #0]
 800b248:	f7f8 f97f 	bl	800354a <_isatty>
 800b24c:	1c43      	adds	r3, r0, #1
 800b24e:	d102      	bne.n	800b256 <_isatty_r+0x1a>
 800b250:	682b      	ldr	r3, [r5, #0]
 800b252:	b103      	cbz	r3, 800b256 <_isatty_r+0x1a>
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	bd38      	pop	{r3, r4, r5, pc}
 800b258:	200004f4 	.word	0x200004f4

0800b25c <_init>:
 800b25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25e:	bf00      	nop
 800b260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b262:	bc08      	pop	{r3}
 800b264:	469e      	mov	lr, r3
 800b266:	4770      	bx	lr

0800b268 <_fini>:
 800b268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26a:	bf00      	nop
 800b26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b26e:	bc08      	pop	{r3}
 800b270:	469e      	mov	lr, r3
 800b272:	4770      	bx	lr
